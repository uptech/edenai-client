const AudioSpeechToTextAsyncCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: [
          'assembly,deepgram,google,openai,speechmatics,microsoft,voci,symbl,revai,gladia,ibm,neuralspace,oneai,amazon',
        ],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      webhook_receiver: {
        type: 'string',
        format: 'uri',
        minLength: 1,
        description:
          'Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.',
      },
      users_webhook_parameters: {
        type: 'object',
        additionalProperties: true,
        description:
          "Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.",
      },
      settings: {
        type: ['object', 'null'],
        additionalProperties: {
          type: 'string',
          minLength: 1,
          description: 'The model id/name specified for the provider',
          maxLength: 50,
        },
        description:
          "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {'google' : 'google_model', ibm': 'ibm_model'...}.\n                     **Caution**: setting models can be done only with `Content-Type` : `application/json`.\n                     ",
      },
      file: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
      },
      file_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.mp3'],
      },
      language: {
        type: ['string', 'null'],
        description: 'Language code expected (ex: en, fr)',
        examples: ['en'],
      },
      speakers: {
        type: ['integer', 'null'],
        default: 2,
        description: 'Number of speakers in the file audio',
        examples: [2],
      },
      profanity_filter: {
        type: ['boolean', 'null'],
        default: false,
        description:
          'Boolean value to specify weather or not the service will filter profanity and replace inappropriate words with a series of asterisks',
      },
      custom_vocabulary: {
        type: 'string',
        minLength: 1,
        description:
          'List of words or composed words to be detected by the speech to text engine. (Ex: Word, Mike, Draw, Los Angeles,...)',
      },
      convert_to_wav: {
        type: ['boolean', 'null'],
        default: false,
        description:
          'Boolean value to specify weather to convert the audio/video file to wav format to be accepted by a majority of the providers',
      },
    },
    required: ['providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      type: 'object',
      properties: { public_id: { type: 'string', format: 'uuid' } },
      required: ['public_id'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const AudioSpeechToTextAsyncRetrieve = {
  response: {
    '200': {
      type: 'object',
      properties: {
        jobs: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              providers: { type: 'string' },
              nb: { type: 'integer' },
              nb_ok: { type: 'integer' },
              public_id: { type: 'string', format: 'uuid' },
              state: {
                enum: ['finished', 'failed', 'Timeout error', 'processing'],
                type: 'string',
                description:
                  '* `finished` - finished\n* `failed` - failed\n* `Timeout error` - Timeout error\n* `processing` - processing\n\n`finished` `failed` `Timeout error` `processing`',
              },
              created_at: { type: 'string', format: 'date-time' },
            },
            required: [
              'created_at',
              'nb',
              'nb_ok',
              'providers',
              'public_id',
              'state',
            ],
          },
        },
      },
      required: ['jobs'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const AudioSpeechToTextAsyncRetrieve2 = {
  metadata: {
    allOf: [
      {
        type: 'object',
        properties: {
          public_id: {
            type: 'string',
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
        },
        required: ['public_id'],
      },
      {
        type: 'object',
        properties: {
          response_as_dict: {
            type: 'boolean',
            default: true,
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
          show_original_response: {
            type: 'boolean',
            default: false,
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
        },
        required: [],
      },
    ],
  },
  response: {
    '200': {
      properties: {
        results: {
          properties: {
            gladia: {
              required: ['text', 'diarization', 'id', 'final_status'],
              title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass',
              type: 'object',
              properties: {
                text: { title: 'Text', type: 'string' },
                diarization: {
                  required: ['total_speakers'],
                  title: 'SpeechDiarization',
                  type: 'object',
                  properties: {
                    total_speakers: {
                      title: 'Total Speakers',
                      type: 'integer',
                    },
                    entries: {
                      title: 'Entries',
                      type: 'array',
                      items: {
                        required: [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence',
                        ],
                        title: 'SpeechDiarizationEntry',
                        type: 'object',
                        properties: {
                          segment: { title: 'Segment', type: 'string' },
                          start_time: { title: 'Start Time', type: 'string' },
                          end_time: { title: 'End Time', type: 'string' },
                          speaker: { title: 'Speaker', type: 'integer' },
                          confidence: { title: 'Confidence', type: 'integer' },
                        },
                      },
                    },
                    error_message: {
                      default: null,
                      title: 'Error Message',
                      type: 'string',
                    },
                  },
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
            revai: {
              required: ['text', 'diarization', 'id', 'final_status'],
              title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass',
              type: 'object',
              properties: {
                text: { title: 'Text', type: 'string' },
                diarization: {
                  required: ['total_speakers'],
                  title: 'SpeechDiarization',
                  type: 'object',
                  properties: {
                    total_speakers: {
                      title: 'Total Speakers',
                      type: 'integer',
                    },
                    entries: {
                      title: 'Entries',
                      type: 'array',
                      items: {
                        required: [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence',
                        ],
                        title: 'SpeechDiarizationEntry',
                        type: 'object',
                        properties: {
                          segment: { title: 'Segment', type: 'string' },
                          start_time: { title: 'Start Time', type: 'string' },
                          end_time: { title: 'End Time', type: 'string' },
                          speaker: { title: 'Speaker', type: 'integer' },
                          confidence: { title: 'Confidence', type: 'integer' },
                        },
                      },
                    },
                    error_message: {
                      default: null,
                      title: 'Error Message',
                      type: 'string',
                    },
                  },
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
            voxist: {
              required: ['text', 'diarization', 'id', 'final_status'],
              title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass',
              type: 'object',
              properties: {
                text: { title: 'Text', type: 'string' },
                diarization: {
                  required: ['total_speakers'],
                  title: 'SpeechDiarization',
                  type: 'object',
                  properties: {
                    total_speakers: {
                      title: 'Total Speakers',
                      type: 'integer',
                    },
                    entries: {
                      title: 'Entries',
                      type: 'array',
                      items: {
                        required: [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence',
                        ],
                        title: 'SpeechDiarizationEntry',
                        type: 'object',
                        properties: {
                          segment: { title: 'Segment', type: 'string' },
                          start_time: { title: 'Start Time', type: 'string' },
                          end_time: { title: 'End Time', type: 'string' },
                          speaker: { title: 'Speaker', type: 'integer' },
                          confidence: { title: 'Confidence', type: 'integer' },
                        },
                      },
                    },
                    error_message: {
                      default: null,
                      title: 'Error Message',
                      type: 'string',
                    },
                  },
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
            symbl: {
              required: ['text', 'diarization', 'id', 'final_status'],
              title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass',
              type: 'object',
              properties: {
                text: { title: 'Text', type: 'string' },
                diarization: {
                  required: ['total_speakers'],
                  title: 'SpeechDiarization',
                  type: 'object',
                  properties: {
                    total_speakers: {
                      title: 'Total Speakers',
                      type: 'integer',
                    },
                    entries: {
                      title: 'Entries',
                      type: 'array',
                      items: {
                        required: [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence',
                        ],
                        title: 'SpeechDiarizationEntry',
                        type: 'object',
                        properties: {
                          segment: { title: 'Segment', type: 'string' },
                          start_time: { title: 'Start Time', type: 'string' },
                          end_time: { title: 'End Time', type: 'string' },
                          speaker: { title: 'Speaker', type: 'integer' },
                          confidence: { title: 'Confidence', type: 'integer' },
                        },
                      },
                    },
                    error_message: {
                      default: null,
                      title: 'Error Message',
                      type: 'string',
                    },
                  },
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
            assembly: {
              required: ['text', 'diarization', 'id', 'final_status'],
              title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass',
              type: 'object',
              properties: {
                text: { title: 'Text', type: 'string' },
                diarization: {
                  required: ['total_speakers'],
                  title: 'SpeechDiarization',
                  type: 'object',
                  properties: {
                    total_speakers: {
                      title: 'Total Speakers',
                      type: 'integer',
                    },
                    entries: {
                      title: 'Entries',
                      type: 'array',
                      items: {
                        required: [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence',
                        ],
                        title: 'SpeechDiarizationEntry',
                        type: 'object',
                        properties: {
                          segment: { title: 'Segment', type: 'string' },
                          start_time: { title: 'Start Time', type: 'string' },
                          end_time: { title: 'End Time', type: 'string' },
                          speaker: { title: 'Speaker', type: 'integer' },
                          confidence: { title: 'Confidence', type: 'integer' },
                        },
                      },
                    },
                    error_message: {
                      default: null,
                      title: 'Error Message',
                      type: 'string',
                    },
                  },
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
            speechmatics: {
              required: ['text', 'diarization', 'id', 'final_status'],
              title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass',
              type: 'object',
              properties: {
                text: { title: 'Text', type: 'string' },
                diarization: {
                  required: ['total_speakers'],
                  title: 'SpeechDiarization',
                  type: 'object',
                  properties: {
                    total_speakers: {
                      title: 'Total Speakers',
                      type: 'integer',
                    },
                    entries: {
                      title: 'Entries',
                      type: 'array',
                      items: {
                        required: [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence',
                        ],
                        title: 'SpeechDiarizationEntry',
                        type: 'object',
                        properties: {
                          segment: { title: 'Segment', type: 'string' },
                          start_time: { title: 'Start Time', type: 'string' },
                          end_time: { title: 'End Time', type: 'string' },
                          speaker: { title: 'Speaker', type: 'integer' },
                          confidence: { title: 'Confidence', type: 'integer' },
                        },
                      },
                    },
                    error_message: {
                      default: null,
                      title: 'Error Message',
                      type: 'string',
                    },
                  },
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
            voci: {
              required: ['text', 'diarization', 'id', 'final_status'],
              title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass',
              type: 'object',
              properties: {
                text: { title: 'Text', type: 'string' },
                diarization: {
                  required: ['total_speakers'],
                  title: 'SpeechDiarization',
                  type: 'object',
                  properties: {
                    total_speakers: {
                      title: 'Total Speakers',
                      type: 'integer',
                    },
                    entries: {
                      title: 'Entries',
                      type: 'array',
                      items: {
                        required: [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence',
                        ],
                        title: 'SpeechDiarizationEntry',
                        type: 'object',
                        properties: {
                          segment: { title: 'Segment', type: 'string' },
                          start_time: { title: 'Start Time', type: 'string' },
                          end_time: { title: 'End Time', type: 'string' },
                          speaker: { title: 'Speaker', type: 'integer' },
                          confidence: { title: 'Confidence', type: 'integer' },
                        },
                      },
                    },
                    error_message: {
                      default: null,
                      title: 'Error Message',
                      type: 'string',
                    },
                  },
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
            deepgram: {
              required: ['text', 'diarization', 'id', 'final_status'],
              title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass',
              type: 'object',
              properties: {
                text: { title: 'Text', type: 'string' },
                diarization: {
                  required: ['total_speakers'],
                  title: 'SpeechDiarization',
                  type: 'object',
                  properties: {
                    total_speakers: {
                      title: 'Total Speakers',
                      type: 'integer',
                    },
                    entries: {
                      title: 'Entries',
                      type: 'array',
                      items: {
                        required: [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence',
                        ],
                        title: 'SpeechDiarizationEntry',
                        type: 'object',
                        properties: {
                          segment: { title: 'Segment', type: 'string' },
                          start_time: { title: 'Start Time', type: 'string' },
                          end_time: { title: 'End Time', type: 'string' },
                          speaker: { title: 'Speaker', type: 'integer' },
                          confidence: { title: 'Confidence', type: 'integer' },
                        },
                      },
                    },
                    error_message: {
                      default: null,
                      title: 'Error Message',
                      type: 'string',
                    },
                  },
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
            microsoft: {
              required: ['text', 'diarization', 'id', 'final_status'],
              title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass',
              type: 'object',
              properties: {
                text: { title: 'Text', type: 'string' },
                diarization: {
                  required: ['total_speakers'],
                  title: 'SpeechDiarization',
                  type: 'object',
                  properties: {
                    total_speakers: {
                      title: 'Total Speakers',
                      type: 'integer',
                    },
                    entries: {
                      title: 'Entries',
                      type: 'array',
                      items: {
                        required: [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence',
                        ],
                        title: 'SpeechDiarizationEntry',
                        type: 'object',
                        properties: {
                          segment: { title: 'Segment', type: 'string' },
                          start_time: { title: 'Start Time', type: 'string' },
                          end_time: { title: 'End Time', type: 'string' },
                          speaker: { title: 'Speaker', type: 'integer' },
                          confidence: { title: 'Confidence', type: 'integer' },
                        },
                      },
                    },
                    error_message: {
                      default: null,
                      title: 'Error Message',
                      type: 'string',
                    },
                  },
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
            openai: {
              required: ['text', 'diarization', 'id', 'final_status'],
              title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass',
              type: 'object',
              properties: {
                text: { title: 'Text', type: 'string' },
                diarization: {
                  required: ['total_speakers'],
                  title: 'SpeechDiarization',
                  type: 'object',
                  properties: {
                    total_speakers: {
                      title: 'Total Speakers',
                      type: 'integer',
                    },
                    entries: {
                      title: 'Entries',
                      type: 'array',
                      items: {
                        required: [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence',
                        ],
                        title: 'SpeechDiarizationEntry',
                        type: 'object',
                        properties: {
                          segment: { title: 'Segment', type: 'string' },
                          start_time: { title: 'Start Time', type: 'string' },
                          end_time: { title: 'End Time', type: 'string' },
                          speaker: { title: 'Speaker', type: 'integer' },
                          confidence: { title: 'Confidence', type: 'integer' },
                        },
                      },
                    },
                    error_message: {
                      default: null,
                      title: 'Error Message',
                      type: 'string',
                    },
                  },
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
            faker: {
              required: ['text', 'diarization', 'id', 'final_status'],
              title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass',
              type: 'object',
              properties: {
                text: { title: 'Text', type: 'string' },
                diarization: {
                  required: ['total_speakers'],
                  title: 'SpeechDiarization',
                  type: 'object',
                  properties: {
                    total_speakers: {
                      title: 'Total Speakers',
                      type: 'integer',
                    },
                    entries: {
                      title: 'Entries',
                      type: 'array',
                      items: {
                        required: [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence',
                        ],
                        title: 'SpeechDiarizationEntry',
                        type: 'object',
                        properties: {
                          segment: { title: 'Segment', type: 'string' },
                          start_time: { title: 'Start Time', type: 'string' },
                          end_time: { title: 'End Time', type: 'string' },
                          speaker: { title: 'Speaker', type: 'integer' },
                          confidence: { title: 'Confidence', type: 'integer' },
                        },
                      },
                    },
                    error_message: {
                      default: null,
                      title: 'Error Message',
                      type: 'string',
                    },
                  },
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
            ibm: {
              required: ['text', 'diarization', 'id', 'final_status'],
              title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass',
              type: 'object',
              properties: {
                text: { title: 'Text', type: 'string' },
                diarization: {
                  required: ['total_speakers'],
                  title: 'SpeechDiarization',
                  type: 'object',
                  properties: {
                    total_speakers: {
                      title: 'Total Speakers',
                      type: 'integer',
                    },
                    entries: {
                      title: 'Entries',
                      type: 'array',
                      items: {
                        required: [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence',
                        ],
                        title: 'SpeechDiarizationEntry',
                        type: 'object',
                        properties: {
                          segment: { title: 'Segment', type: 'string' },
                          start_time: { title: 'Start Time', type: 'string' },
                          end_time: { title: 'End Time', type: 'string' },
                          speaker: { title: 'Speaker', type: 'integer' },
                          confidence: { title: 'Confidence', type: 'integer' },
                        },
                      },
                    },
                    error_message: {
                      default: null,
                      title: 'Error Message',
                      type: 'string',
                    },
                  },
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
            oneai: {
              required: ['text', 'diarization', 'id', 'final_status'],
              title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass',
              type: 'object',
              properties: {
                text: { title: 'Text', type: 'string' },
                diarization: {
                  required: ['total_speakers'],
                  title: 'SpeechDiarization',
                  type: 'object',
                  properties: {
                    total_speakers: {
                      title: 'Total Speakers',
                      type: 'integer',
                    },
                    entries: {
                      title: 'Entries',
                      type: 'array',
                      items: {
                        required: [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence',
                        ],
                        title: 'SpeechDiarizationEntry',
                        type: 'object',
                        properties: {
                          segment: { title: 'Segment', type: 'string' },
                          start_time: { title: 'Start Time', type: 'string' },
                          end_time: { title: 'End Time', type: 'string' },
                          speaker: { title: 'Speaker', type: 'integer' },
                          confidence: { title: 'Confidence', type: 'integer' },
                        },
                      },
                    },
                    error_message: {
                      default: null,
                      title: 'Error Message',
                      type: 'string',
                    },
                  },
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
            google: {
              required: ['text', 'diarization', 'id', 'final_status'],
              title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass',
              type: 'object',
              properties: {
                text: { title: 'Text', type: 'string' },
                diarization: {
                  required: ['total_speakers'],
                  title: 'SpeechDiarization',
                  type: 'object',
                  properties: {
                    total_speakers: {
                      title: 'Total Speakers',
                      type: 'integer',
                    },
                    entries: {
                      title: 'Entries',
                      type: 'array',
                      items: {
                        required: [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence',
                        ],
                        title: 'SpeechDiarizationEntry',
                        type: 'object',
                        properties: {
                          segment: { title: 'Segment', type: 'string' },
                          start_time: { title: 'Start Time', type: 'string' },
                          end_time: { title: 'End Time', type: 'string' },
                          speaker: { title: 'Speaker', type: 'integer' },
                          confidence: { title: 'Confidence', type: 'integer' },
                        },
                      },
                    },
                    error_message: {
                      default: null,
                      title: 'Error Message',
                      type: 'string',
                    },
                  },
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
            neuralspace: {
              required: ['text', 'diarization', 'id', 'final_status'],
              title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass',
              type: 'object',
              properties: {
                text: { title: 'Text', type: 'string' },
                diarization: {
                  required: ['total_speakers'],
                  title: 'SpeechDiarization',
                  type: 'object',
                  properties: {
                    total_speakers: {
                      title: 'Total Speakers',
                      type: 'integer',
                    },
                    entries: {
                      title: 'Entries',
                      type: 'array',
                      items: {
                        required: [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence',
                        ],
                        title: 'SpeechDiarizationEntry',
                        type: 'object',
                        properties: {
                          segment: { title: 'Segment', type: 'string' },
                          start_time: { title: 'Start Time', type: 'string' },
                          end_time: { title: 'End Time', type: 'string' },
                          speaker: { title: 'Speaker', type: 'integer' },
                          confidence: { title: 'Confidence', type: 'integer' },
                        },
                      },
                    },
                    error_message: {
                      default: null,
                      title: 'Error Message',
                      type: 'string',
                    },
                  },
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
            amazon: {
              required: ['text', 'diarization', 'id', 'final_status'],
              title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass',
              type: 'object',
              properties: {
                text: { title: 'Text', type: 'string' },
                diarization: {
                  required: ['total_speakers'],
                  title: 'SpeechDiarization',
                  type: 'object',
                  properties: {
                    total_speakers: {
                      title: 'Total Speakers',
                      type: 'integer',
                    },
                    entries: {
                      title: 'Entries',
                      type: 'array',
                      items: {
                        required: [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence',
                        ],
                        title: 'SpeechDiarizationEntry',
                        type: 'object',
                        properties: {
                          segment: { title: 'Segment', type: 'string' },
                          start_time: { title: 'Start Time', type: 'string' },
                          end_time: { title: 'End Time', type: 'string' },
                          speaker: { title: 'Speaker', type: 'integer' },
                          confidence: { title: 'Confidence', type: 'integer' },
                        },
                      },
                    },
                    error_message: {
                      default: null,
                      title: 'Error Message',
                      type: 'string',
                    },
                  },
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
          },
          title: 'audiospeech_to_text_asyncModel',
          type: 'object',
        },
        error: { title: 'Error', type: 'string' },
        public_id: { format: 'uuid', title: 'Public Id', type: 'string' },
        status: { title: 'Status', type: 'string' },
      },
      required: ['results', 'error', 'public_id', 'status'],
      title: 'asyncaudiospeech_to_text_asyncResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const AudioTextToSpeechAsyncCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      webhook_receiver: {
        type: 'string',
        format: 'uri',
        minLength: 1,
        description:
          'Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.',
      },
      users_webhook_parameters: {
        type: 'object',
        additionalProperties: true,
        description:
          "Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.",
      },
      settings: {
        type: ['object', 'null'],
        additionalProperties: {
          type: 'string',
          minLength: 1,
          description: 'The model id/name specified for the provider',
          maxLength: 50,
        },
        description:
          "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {'google' : 'google_model', ibm': 'ibm_model'...}.\n                     **Caution**: setting models can be done only with `Content-Type` : `application/json`.\n                     ",
      },
      text: {
        type: 'string',
        minLength: 1,
        description: 'Text to analyze',
        examples: ["Bonjour Je m'appelle Jane"],
      },
      language: {
        type: ['string', 'null'],
        description: 'Language code expected (ex: en, fr)',
        examples: ['fr'],
      },
      option: {
        oneOf: [
          {
            enum: ['FEMALE', 'MALE'],
            type: 'string',
            description: '* `FEMALE` - Female\n* `MALE` - Male',
          },
          { enum: [''] },
        ],
        examples: ['FEMALE'],
      },
      rate: {
        type: ['integer', 'null'],
        maximum: 100,
        minimum: -100,
        default: 0,
        description:
          'Increase or decrease the speaking rate by expressing a positif or negatif number ranging between             100 and -100 (a relative value as percentage varying from -100% to 100%)',
      },
      pitch: {
        type: ['integer', 'null'],
        maximum: 100,
        minimum: -100,
        default: 0,
        description:
          'Increase or decrease the speaking pitch by expressing a positif or negatif number ranging between             100 and -100 (a relative value as percentage varying from -100% to 100%)',
      },
      volume: {
        type: ['integer', 'null'],
        maximum: 100,
        minimum: -100,
        default: 0,
        description:
          'Increase or decrease the audio volume by expressing a positif or negatif number ranging between             100 and -100 (a relative value as percentage varying from -100% to 100%)',
      },
      audio_format: {
        type: ['string', 'null'],
        description:
          'Optional parameter to specify the audio format in which the audio will be generated. By default,             audios are encoded in MP3, except for lovoai which use the wav container.',
      },
      sampling_rate: {
        type: ['integer', 'null'],
        maximum: 200000,
        minimum: 0,
        default: 0,
        description:
          'Optional. The synthesis sample rate (in hertz) for this audio. When this is specified, the audio will be converted             either to the right passed value, or to a the nearest value acceptable by the provider',
      },
    },
    required: ['providers', 'text'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      type: 'object',
      properties: { public_id: { type: 'string', format: 'uuid' } },
      required: ['public_id'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const AudioTextToSpeechAsyncRetrieve = {
  response: {
    '200': {
      type: 'object',
      properties: {
        jobs: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              providers: { type: 'string' },
              nb: { type: 'integer' },
              nb_ok: { type: 'integer' },
              public_id: { type: 'string', format: 'uuid' },
              state: {
                enum: ['finished', 'failed', 'Timeout error', 'processing'],
                type: 'string',
                description:
                  '* `finished` - finished\n* `failed` - failed\n* `Timeout error` - Timeout error\n* `processing` - processing\n\n`finished` `failed` `Timeout error` `processing`',
              },
              created_at: { type: 'string', format: 'date-time' },
            },
            required: [
              'created_at',
              'nb',
              'nb_ok',
              'providers',
              'public_id',
              'state',
            ],
          },
        },
      },
      required: ['jobs'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const AudioTextToSpeechAsyncRetrieve2 = {
  metadata: {
    allOf: [
      {
        type: 'object',
        properties: {
          public_id: {
            type: 'string',
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
        },
        required: ['public_id'],
      },
      {
        type: 'object',
        properties: {
          response_as_dict: {
            type: 'boolean',
            default: true,
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
          show_original_response: {
            type: 'boolean',
            default: false,
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
        },
        required: [],
      },
    ],
  },
  response: {
    '200': {
      properties: {
        results: {
          properties: {
            lovoai: {
              required: [
                'audio',
                'voice_type',
                'audio_resource_url',
                'id',
                'final_status',
              ],
              title: 'audiotext_to_speech_asyncTextToSpeechAsyncDataClass',
              type: 'object',
              properties: {
                audio: { title: 'Audio', type: 'string' },
                voice_type: { title: 'Voice Type', type: 'integer' },
                audio_resource_url: {
                  title: 'Audio Resource Url',
                  type: 'string',
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
          },
          title: 'audiotext_to_speech_asyncModel',
          type: 'object',
        },
        error: { title: 'Error', type: 'string' },
        public_id: { format: 'uuid', title: 'Public Id', type: 'string' },
        status: { title: 'Status', type: 'string' },
      },
      required: ['results', 'error', 'public_id', 'status'],
      title: 'asyncaudiotext_to_speech_asyncResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const AudioTextToSpeechCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['microsoft,lovoai,google,ibm,amazon'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      settings: {
        type: ['object', 'null'],
        additionalProperties: {
          type: 'string',
          minLength: 1,
          description: 'The model id/name specified for the provider',
          maxLength: 50,
        },
        description:
          "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {'google' : 'google_model', ibm': 'ibm_model'...}.\n                     **Caution**: setting models can be done only with `Content-Type` : `application/json`.\n                     ",
      },
      text: {
        type: 'string',
        minLength: 1,
        description: 'Text to analyze',
        examples: ["Bonjour Je m'appelle Jane"],
      },
      language: {
        type: ['string', 'null'],
        description: 'Language code expected (ex: en, fr)',
        examples: ['fr'],
      },
      option: {
        oneOf: [
          {
            enum: ['FEMALE', 'MALE'],
            type: 'string',
            description: '* `FEMALE` - Female\n* `MALE` - Male',
          },
          { enum: [''] },
        ],
        examples: ['FEMALE'],
      },
      rate: {
        type: ['integer', 'null'],
        maximum: 100,
        minimum: -100,
        default: 0,
        description:
          'Increase or decrease the speaking rate by expressing a positif or negatif number ranging between             100 and -100 (a relative value as percentage varying from -100% to 100%)',
      },
      pitch: {
        type: ['integer', 'null'],
        maximum: 100,
        minimum: -100,
        default: 0,
        description:
          'Increase or decrease the speaking pitch by expressing a positif or negatif number ranging between             100 and -100 (a relative value as percentage varying from -100% to 100%)',
      },
      volume: {
        type: ['integer', 'null'],
        maximum: 100,
        minimum: -100,
        default: 0,
        description:
          'Increase or decrease the audio volume by expressing a positif or negatif number ranging between             100 and -100 (a relative value as percentage varying from -100% to 100%)',
      },
      audio_format: {
        type: ['string', 'null'],
        description:
          'Optional parameter to specify the audio format in which the audio will be generated. By default,             audios are encoded in MP3, except for lovoai which use the wav container.',
      },
      sampling_rate: {
        type: ['integer', 'null'],
        maximum: 200000,
        minimum: 0,
        default: 0,
        description:
          'Optional. The synthesis sample rate (in hertz) for this audio. When this is specified, the audio will be converted             either to the right passed value, or to a the nearest value acceptable by the provider',
      },
    },
    required: ['providers', 'text'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        lovoai: {
          required: ['audio', 'voice_type', 'audio_resource_url', 'status'],
          title: 'audiotext_to_speechTextToSpeechDataClass',
          type: 'object',
          properties: {
            audio: { title: 'Audio', type: 'string' },
            voice_type: { title: 'Voice Type', type: 'integer' },
            audio_resource_url: { title: 'Audio Resource Url', type: 'string' },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        microsoft: {
          required: ['audio', 'voice_type', 'audio_resource_url', 'status'],
          title: 'audiotext_to_speechTextToSpeechDataClass',
          type: 'object',
          properties: {
            audio: { title: 'Audio', type: 'string' },
            voice_type: { title: 'Voice Type', type: 'integer' },
            audio_resource_url: { title: 'Audio Resource Url', type: 'string' },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        ibm: {
          required: ['audio', 'voice_type', 'audio_resource_url', 'status'],
          title: 'audiotext_to_speechTextToSpeechDataClass',
          type: 'object',
          properties: {
            audio: { title: 'Audio', type: 'string' },
            voice_type: { title: 'Voice Type', type: 'integer' },
            audio_resource_url: { title: 'Audio Resource Url', type: 'string' },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        google: {
          required: ['audio', 'voice_type', 'audio_resource_url', 'status'],
          title: 'audiotext_to_speechTextToSpeechDataClass',
          type: 'object',
          properties: {
            audio: { title: 'Audio', type: 'string' },
            voice_type: { title: 'Voice Type', type: 'integer' },
            audio_resource_url: { title: 'Audio Resource Url', type: 'string' },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        amazon: {
          required: ['audio', 'voice_type', 'audio_resource_url', 'status'],
          title: 'audiotext_to_speechTextToSpeechDataClass',
          type: 'object',
          properties: {
            audio: { title: 'Audio', type: 'string' },
            voice_type: { title: 'Voice Type', type: 'integer' },
            audio_resource_url: { title: 'Audio Resource Url', type: 'string' },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'audiotext_to_speechResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const BatchCreate = {
  metadata: {
    allOf: [
      {
        type: 'object',
        properties: {
          feature: {
            type: 'string',
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
          name: {
            type: 'string',
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
          subfeature: {
            type: 'string',
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
        },
        required: ['feature', 'name', 'subfeature'],
      },
    ],
  },
  response: {
    '200': {
      properties: {
        job_id: { description: 'Job ID/name', title: 'Job Id', type: 'string' },
        nb_launched: {
          description: 'Number of successfully launched requests',
          title: 'Nb Launched',
          type: 'integer',
        },
        nb_failed: {
          description: 'Number of failed_requests',
          title: 'Nb Failed',
          type: 'integer',
        },
        total: {
          description: 'Total number of requests sent',
          title: 'Total',
          type: 'integer',
        },
        failed_requests: {
          description:
            'if any requests failed, they will be shown in this list',
          items: {
            properties: {
              name: {
                description: 'Request name, if any were given',
                title: 'Name',
                type: 'string',
              },
              public_id: {
                description: 'Request ID',
                title: 'Public Id',
                type: 'integer',
              },
              body: {
                description: 'Parameters passed to the request',
                title: 'Body',
                type: 'object',
                additionalProperties: true,
              },
              errors: {
                description: 'Error received from the request validator',
                title: 'Errors',
                type: 'object',
                additionalProperties: true,
              },
            },
            required: ['name', 'public_id', 'body', 'errors'],
            title: 'BatchLaunchFailedRequest',
            type: 'object',
          },
          title: 'Failed Requests',
          type: 'array',
        },
      },
      required: [
        'job_id',
        'nb_launched',
        'nb_failed',
        'total',
        'failed_requests',
      ],
      title: 'BatchLaunchResponse',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const BatchRetrieve = {
  metadata: {
    allOf: [
      {
        type: 'object',
        properties: {
          feature: {
            type: 'string',
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
          name: {
            type: 'string',
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
          subfeature: {
            type: 'string',
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
        },
        required: ['feature', 'name', 'subfeature'],
      },
      {
        type: 'object',
        properties: {
          name: {
            type: 'string',
            minLength: 1,
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
          page: {
            type: 'integer',
            minimum: 0,
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
          public_id: {
            type: 'integer',
            minimum: 0,
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
          status: {
            enum: ['succeeded', 'failed', 'finished', 'processing'],
            type: 'string',
            minLength: 1,
            $schema: 'http://json-schema.org/draft-04/schema#',
            description:
              '* `succeeded` - Status Succeeded\n* `failed` - Status Failed\n* `finished` - Status Finished\n* `processing` - Status Processing',
          },
        },
        required: [],
      },
    ],
  },
  response: {
    '200': {
      type: 'object',
      properties: {
        total: { type: 'integer', description: 'Total requests made' },
        current_page: { type: 'integer', description: 'Current page number' },
        last_page: { type: 'integer' },
        per_page: {
          type: 'integer',
          description: 'Number of requests per page',
        },
        From: { type: 'integer' },
        to: { type: 'integer' },
        prev_page_url: { type: 'string', format: 'uri' },
        next_page_url: { type: 'string', format: 'uri' },
        requests: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              public_id: { type: 'integer', readOnly: true },
              status: {
                enum: ['succeeded', 'failed', 'finished', 'processing'],
                type: 'string',
                description:
                  '* `succeeded` - Status Succeeded\n* `failed` - Status Failed\n* `finished` - Status Finished\n* `processing` - Status Processing\n\n`succeeded` `failed` `finished` `processing`',
              },
              name: { type: ['string', 'null'], maxLength: 1023 },
              errors: { type: ['object', 'null'], additionalProperties: true },
              response: {
                type: ['object', 'null'],
                additionalProperties: true,
              },
            },
            required: ['public_id'],
          },
        },
        status: {
          enum: ['succeeded', 'failed', 'finished', 'processing'],
          type: 'string',
          description:
            '* `succeeded` - Status Succeeded\n* `failed` - Status Failed\n* `finished` - Status Finished\n* `processing` - Status Processing\n\n`succeeded` `failed` `finished` `processing`',
        },
        created: { type: 'string', format: 'date-time', readOnly: true },
        updated: { type: 'string', format: 'date-time', readOnly: true },
      },
      required: [
        'From',
        'created',
        'current_page',
        'last_page',
        'per_page',
        'requests',
        'to',
        'total',
        'updated',
      ],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const ImageAnonymizationCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['api4ai'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      file: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
        pattern: '(?:jpg|jpeg|png|tiff)$',
      },
      file_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.jpg'],
      },
    },
    required: ['providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        api4ai: {
          required: ['image', 'image_resource_url', 'status'],
          title: 'imageanonymizationAnonymizationDataClass',
          type: 'object',
          properties: {
            image: { title: 'Image', type: 'string' },
            image_resource_url: { title: 'Image Resource Url', type: 'string' },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['kind', 'confidence', 'bounding_boxes'],
                title: 'AnonymizationItem',
                type: 'object',
                properties: {
                  kind: { title: 'Kind', type: 'string' },
                  confidence: { title: 'Confidence', type: 'integer' },
                  bounding_boxes: {
                    required: ['x_min', 'x_max', 'y_min', 'y_max'],
                    title: 'AnonymizationBoundingBox',
                    type: 'object',
                    properties: {
                      x_min: { title: 'X Min', type: 'integer' },
                      x_max: { title: 'X Max', type: 'integer' },
                      y_min: { title: 'Y Min', type: 'integer' },
                      y_max: { title: 'Y Max', type: 'integer' },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'imageanonymizationResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const ImageExplicitContentCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: [
          'amazon,google,microsoft,sentisight,picpurify,api4ai,clarifai',
        ],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      file: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
        pattern: '(?:jpg|jpeg|png|tiff)$',
      },
      file_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.jpg'],
      },
    },
    required: ['providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        clarifai: {
          required: ['nsfw_likelihood', 'status'],
          title: 'imageexplicit_contentExplicitContentDataClass',
          type: 'object',
          properties: {
            nsfw_likelihood: { title: 'Nsfw Likelihood', type: 'integer' },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['label', 'likelihood'],
                title: 'ExplicitItem',
                type: 'object',
                properties: {
                  label: { title: 'Label', type: 'string' },
                  likelihood: { title: 'Likelihood', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        picpurify: {
          required: ['nsfw_likelihood', 'status'],
          title: 'imageexplicit_contentExplicitContentDataClass',
          type: 'object',
          properties: {
            nsfw_likelihood: { title: 'Nsfw Likelihood', type: 'integer' },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['label', 'likelihood'],
                title: 'ExplicitItem',
                type: 'object',
                properties: {
                  label: { title: 'Label', type: 'string' },
                  likelihood: { title: 'Likelihood', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        microsoft: {
          required: ['nsfw_likelihood', 'status'],
          title: 'imageexplicit_contentExplicitContentDataClass',
          type: 'object',
          properties: {
            nsfw_likelihood: { title: 'Nsfw Likelihood', type: 'integer' },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['label', 'likelihood'],
                title: 'ExplicitItem',
                type: 'object',
                properties: {
                  label: { title: 'Label', type: 'string' },
                  likelihood: { title: 'Likelihood', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        api4ai: {
          required: ['nsfw_likelihood', 'status'],
          title: 'imageexplicit_contentExplicitContentDataClass',
          type: 'object',
          properties: {
            nsfw_likelihood: { title: 'Nsfw Likelihood', type: 'integer' },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['label', 'likelihood'],
                title: 'ExplicitItem',
                type: 'object',
                properties: {
                  label: { title: 'Label', type: 'string' },
                  likelihood: { title: 'Likelihood', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        google: {
          required: ['nsfw_likelihood', 'status'],
          title: 'imageexplicit_contentExplicitContentDataClass',
          type: 'object',
          properties: {
            nsfw_likelihood: { title: 'Nsfw Likelihood', type: 'integer' },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['label', 'likelihood'],
                title: 'ExplicitItem',
                type: 'object',
                properties: {
                  label: { title: 'Label', type: 'string' },
                  likelihood: { title: 'Likelihood', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        sentisight: {
          required: ['nsfw_likelihood', 'status'],
          title: 'imageexplicit_contentExplicitContentDataClass',
          type: 'object',
          properties: {
            nsfw_likelihood: { title: 'Nsfw Likelihood', type: 'integer' },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['label', 'likelihood'],
                title: 'ExplicitItem',
                type: 'object',
                properties: {
                  label: { title: 'Label', type: 'string' },
                  likelihood: { title: 'Likelihood', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        amazon: {
          required: ['nsfw_likelihood', 'status'],
          title: 'imageexplicit_contentExplicitContentDataClass',
          type: 'object',
          properties: {
            nsfw_likelihood: { title: 'Nsfw Likelihood', type: 'integer' },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['label', 'likelihood'],
                title: 'ExplicitItem',
                type: 'object',
                properties: {
                  label: { title: 'Label', type: 'string' },
                  likelihood: { title: 'Likelihood', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        'eden-ai': {
          required: ['nsfw_likelihood', 'status'],
          title: 'imageexplicit_contentExplicitContentDataClass',
          type: 'object',
          properties: {
            nsfw_likelihood: { title: 'Nsfw Likelihood', type: 'integer' },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['label', 'likelihood'],
                title: 'ExplicitItem',
                type: 'object',
                properties: {
                  label: { title: 'Label', type: 'string' },
                  likelihood: { title: 'Likelihood', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'imageexplicit_contentResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const ImageFaceCompareCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['facepp,base64,amazon'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      file1: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
        pattern: '(?:jpg|jpeg|png|tiff)$',
      },
      file1_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.jpg'],
      },
      file2: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
        pattern: '(?:jpg|jpeg|png|tiff)$',
      },
      file2_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.jpg'],
      },
    },
    required: ['providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        facepp: {
          required: ['status'],
          title: 'imageface_compareFaceCompareDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['confidence', 'bounding_box'],
                title: 'FaceMatch',
                type: 'object',
                properties: {
                  confidence: { title: 'Confidence', type: 'integer' },
                  bounding_box: {
                    required: ['top', 'left', 'height', 'width'],
                    title: 'FaceCompareBoundingBox',
                    type: 'object',
                    properties: {
                      top: { title: 'Top', type: 'integer' },
                      left: { title: 'Left', type: 'integer' },
                      height: { title: 'Height', type: 'integer' },
                      width: { title: 'Width', type: 'integer' },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        base64: {
          required: ['status'],
          title: 'imageface_compareFaceCompareDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['confidence', 'bounding_box'],
                title: 'FaceMatch',
                type: 'object',
                properties: {
                  confidence: { title: 'Confidence', type: 'integer' },
                  bounding_box: {
                    required: ['top', 'left', 'height', 'width'],
                    title: 'FaceCompareBoundingBox',
                    type: 'object',
                    properties: {
                      top: { title: 'Top', type: 'integer' },
                      left: { title: 'Left', type: 'integer' },
                      height: { title: 'Height', type: 'integer' },
                      width: { title: 'Width', type: 'integer' },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        amazon: {
          required: ['status'],
          title: 'imageface_compareFaceCompareDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['confidence', 'bounding_box'],
                title: 'FaceMatch',
                type: 'object',
                properties: {
                  confidence: { title: 'Confidence', type: 'integer' },
                  bounding_box: {
                    required: ['top', 'left', 'height', 'width'],
                    title: 'FaceCompareBoundingBox',
                    type: 'object',
                    properties: {
                      top: { title: 'Top', type: 'integer' },
                      left: { title: 'Left', type: 'integer' },
                      height: { title: 'Height', type: 'integer' },
                      width: { title: 'Width', type: 'integer' },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'imageface_compareResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const ImageFaceDetectionCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: [
          'clarifai,amazon,skybiometry,google,api4ai,microsoft,picpurify',
        ],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      file: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
        pattern: '(?:jpg|jpeg|png|tiff)$',
      },
      file_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.jpg'],
      },
    },
    required: ['providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        clarifai: {
          required: ['status'],
          title: 'imageface_detectionFaceDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: [
                  'confidence',
                  'landmarks',
                  'emotions',
                  'poses',
                  'age',
                  'gender',
                  'bounding_box',
                  'hair',
                  'facial_hair',
                  'quality',
                  'makeup',
                  'accessories',
                  'occlusions',
                  'features',
                ],
                title: 'FaceItem',
                type: 'object',
                properties: {
                  confidence: { title: 'Confidence', type: 'integer' },
                  landmarks: {
                    title: 'FaceLandmarks',
                    type: 'object',
                    properties: {
                      left_eye: {
                        title: 'Left Eye',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_top: {
                        title: 'Left Eye Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_right: {
                        title: 'Left Eye Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_bottom: {
                        title: 'Left Eye Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_left: {
                        title: 'Left Eye Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye: {
                        title: 'Right Eye',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_top: {
                        title: 'Right Eye Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_right: {
                        title: 'Right Eye Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_bottom: {
                        title: 'Right Eye Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_left: {
                        title: 'Right Eye Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eyebrow_left: {
                        title: 'Left Eyebrow Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eyebrow_right: {
                        title: 'Left Eyebrow Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eyebrow_top: {
                        title: 'Left Eyebrow Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eyebrow_left: {
                        title: 'Right Eyebrow Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eyebrow_right: {
                        title: 'Right Eyebrow Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_pupil: {
                        title: 'Left Pupil',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_pupil: {
                        title: 'Right Pupil',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_tip: {
                        title: 'Nose Tip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_bottom_right: {
                        title: 'Nose Bottom Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_bottom_left: {
                        title: 'Nose Bottom Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_left: {
                        title: 'Mouth Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_right: {
                        title: 'Mouth Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eyebrow_top: {
                        title: 'Right Eyebrow Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      midpoint_between_eyes: {
                        title: 'Midpoint Between Eyes',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_bottom_center: {
                        title: 'Nose Bottom Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_left_alar_out_tip: {
                        title: 'Nose Left Alar Out Tip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_left_alar_top: {
                        title: 'Nose Left Alar Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_right_alar_out_tip: {
                        title: 'Nose Right Alar Out Tip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_right_alar_top: {
                        title: 'Nose Right Alar Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_root_left: {
                        title: 'Nose Root Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_root_right: {
                        title: 'Nose Root Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_lip: {
                        title: 'Upper Lip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      under_lip: {
                        title: 'Under Lip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      under_lip_bottom: {
                        title: 'Under Lip Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      under_lip_top: {
                        title: 'Under Lip Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_lip_bottom: {
                        title: 'Upper Lip Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_lip_top: {
                        title: 'Upper Lip Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_center: {
                        title: 'Mouth Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_top: {
                        title: 'Mouth Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_bottom: {
                        title: 'Mouth Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_ear_tragion: {
                        title: 'Left Ear Tragion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_ear_tragion: {
                        title: 'Right Ear Tragion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      forehead_glabella: {
                        title: 'Forehead Glabella',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      chin_gnathion: {
                        title: 'Chin Gnathion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      chin_left_gonion: {
                        title: 'Chin Left Gonion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      chin_right_gonion: {
                        title: 'Chin Right Gonion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_jawline_left: {
                        title: 'Upper Jawline Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mid_jawline_left: {
                        title: 'Mid Jawline Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mid_jawline_right: {
                        title: 'Mid Jawline Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_jawline_right: {
                        title: 'Upper Jawline Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_cheek_center: {
                        title: 'Left Cheek Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_cheek_center: {
                        title: 'Right Cheek Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                    },
                  },
                  emotions: {
                    required: [
                      'joy',
                      'sorrow',
                      'anger',
                      'surprise',
                      'disgust',
                      'fear',
                      'confusion',
                      'calm',
                      'unknown',
                      'neutral',
                      'contempt',
                    ],
                    title: 'FaceEmotions',
                    type: 'object',
                    properties: {
                      joy: { title: 'Joy', type: 'integer' },
                      sorrow: { title: 'Sorrow', type: 'integer' },
                      anger: { title: 'Anger', type: 'integer' },
                      surprise: { title: 'Surprise', type: 'integer' },
                      disgust: { title: 'Disgust', type: 'integer' },
                      fear: { title: 'Fear', type: 'integer' },
                      confusion: { title: 'Confusion', type: 'integer' },
                      calm: { title: 'Calm', type: 'integer' },
                      unknown: { title: 'Unknown', type: 'integer' },
                      neutral: { title: 'Neutral', type: 'integer' },
                      contempt: { title: 'Contempt', type: 'integer' },
                    },
                  },
                  poses: {
                    required: ['pitch', 'roll', 'yaw'],
                    title: 'FacePoses',
                    type: 'object',
                    properties: {
                      pitch: { title: 'Pitch', type: 'integer' },
                      roll: { title: 'Roll', type: 'integer' },
                      yaw: { title: 'Yaw', type: 'integer' },
                    },
                  },
                  age: { title: 'Age', type: 'integer' },
                  gender: { title: 'Gender', type: 'string' },
                  bounding_box: {
                    required: ['x_min', 'x_max', 'y_min', 'y_max'],
                    title: 'FaceBoundingBox',
                    type: 'object',
                    properties: {
                      x_min: { title: 'X Min', type: 'integer' },
                      x_max: { title: 'X Max', type: 'integer' },
                      y_min: { title: 'Y Min', type: 'integer' },
                      y_max: { title: 'Y Max', type: 'integer' },
                    },
                  },
                  hair: {
                    required: ['bald', 'invisible'],
                    title: 'FaceHair',
                    type: 'object',
                    properties: {
                      hair_color: {
                        title: 'Hair Color',
                        type: 'array',
                        items: {
                          required: ['color', 'confidence'],
                          title: 'FaceHairColor',
                          type: 'object',
                          properties: {
                            color: { title: 'Color', type: 'string' },
                            confidence: {
                              title: 'Confidence',
                              type: 'integer',
                            },
                          },
                        },
                      },
                      bald: { title: 'Bald', type: 'integer' },
                      invisible: { title: 'Invisible', type: 'boolean' },
                    },
                  },
                  facial_hair: {
                    required: ['moustache', 'beard', 'sideburns'],
                    title: 'FaceFacialHair',
                    type: 'object',
                    properties: {
                      moustache: { title: 'Moustache', type: 'integer' },
                      beard: { title: 'Beard', type: 'integer' },
                      sideburns: { title: 'Sideburns', type: 'integer' },
                    },
                  },
                  quality: {
                    required: [
                      'noise',
                      'exposure',
                      'blur',
                      'brightness',
                      'sharpness',
                    ],
                    title: 'FaceQuality',
                    type: 'object',
                    properties: {
                      noise: { title: 'Noise', type: 'integer' },
                      exposure: { title: 'Exposure', type: 'integer' },
                      blur: { title: 'Blur', type: 'integer' },
                      brightness: { title: 'Brightness', type: 'integer' },
                      sharpness: { title: 'Sharpness', type: 'integer' },
                    },
                  },
                  makeup: {
                    required: ['eye_make', 'lip_make'],
                    title: 'FaceMakeup',
                    type: 'object',
                    properties: {
                      eye_make: { title: 'Eye Make', type: 'boolean' },
                      lip_make: { title: 'Lip Make', type: 'boolean' },
                    },
                  },
                  accessories: {
                    required: [
                      'sunglasses',
                      'reading_glasses',
                      'swimming_goggles',
                      'face_mask',
                      'eyeglasses',
                      'headwear',
                    ],
                    title: 'FaceAccessories',
                    type: 'object',
                    properties: {
                      sunglasses: { title: 'Sunglasses', type: 'integer' },
                      reading_glasses: {
                        title: 'Reading Glasses',
                        type: 'integer',
                      },
                      swimming_goggles: {
                        title: 'Swimming Goggles',
                        type: 'integer',
                      },
                      face_mask: { title: 'Face Mask', type: 'integer' },
                      eyeglasses: { title: 'Eyeglasses', type: 'integer' },
                      headwear: { title: 'Headwear', type: 'integer' },
                    },
                  },
                  occlusions: {
                    required: [
                      'eye_occluded',
                      'forehead_occluded',
                      'mouth_occluded',
                    ],
                    title: 'FaceOcclusions',
                    type: 'object',
                    properties: {
                      eye_occluded: { title: 'Eye Occluded', type: 'boolean' },
                      forehead_occluded: {
                        title: 'Forehead Occluded',
                        type: 'boolean',
                      },
                      mouth_occluded: {
                        title: 'Mouth Occluded',
                        type: 'boolean',
                      },
                    },
                  },
                  features: {
                    required: ['eyes_open', 'smile', 'mouth_open'],
                    title: 'FaceFeatures',
                    type: 'object',
                    properties: {
                      eyes_open: { title: 'Eyes Open', type: 'integer' },
                      smile: { title: 'Smile', type: 'integer' },
                      mouth_open: { title: 'Mouth Open', type: 'integer' },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        picpurify: {
          required: ['status'],
          title: 'imageface_detectionFaceDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: [
                  'confidence',
                  'landmarks',
                  'emotions',
                  'poses',
                  'age',
                  'gender',
                  'bounding_box',
                  'hair',
                  'facial_hair',
                  'quality',
                  'makeup',
                  'accessories',
                  'occlusions',
                  'features',
                ],
                title: 'FaceItem',
                type: 'object',
                properties: {
                  confidence: { title: 'Confidence', type: 'integer' },
                  landmarks: {
                    title: 'FaceLandmarks',
                    type: 'object',
                    properties: {
                      left_eye: {
                        title: 'Left Eye',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_top: {
                        title: 'Left Eye Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_right: {
                        title: 'Left Eye Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_bottom: {
                        title: 'Left Eye Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_left: {
                        title: 'Left Eye Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye: {
                        title: 'Right Eye',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_top: {
                        title: 'Right Eye Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_right: {
                        title: 'Right Eye Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_bottom: {
                        title: 'Right Eye Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_left: {
                        title: 'Right Eye Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eyebrow_left: {
                        title: 'Left Eyebrow Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eyebrow_right: {
                        title: 'Left Eyebrow Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eyebrow_top: {
                        title: 'Left Eyebrow Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eyebrow_left: {
                        title: 'Right Eyebrow Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eyebrow_right: {
                        title: 'Right Eyebrow Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_pupil: {
                        title: 'Left Pupil',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_pupil: {
                        title: 'Right Pupil',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_tip: {
                        title: 'Nose Tip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_bottom_right: {
                        title: 'Nose Bottom Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_bottom_left: {
                        title: 'Nose Bottom Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_left: {
                        title: 'Mouth Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_right: {
                        title: 'Mouth Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eyebrow_top: {
                        title: 'Right Eyebrow Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      midpoint_between_eyes: {
                        title: 'Midpoint Between Eyes',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_bottom_center: {
                        title: 'Nose Bottom Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_left_alar_out_tip: {
                        title: 'Nose Left Alar Out Tip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_left_alar_top: {
                        title: 'Nose Left Alar Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_right_alar_out_tip: {
                        title: 'Nose Right Alar Out Tip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_right_alar_top: {
                        title: 'Nose Right Alar Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_root_left: {
                        title: 'Nose Root Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_root_right: {
                        title: 'Nose Root Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_lip: {
                        title: 'Upper Lip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      under_lip: {
                        title: 'Under Lip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      under_lip_bottom: {
                        title: 'Under Lip Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      under_lip_top: {
                        title: 'Under Lip Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_lip_bottom: {
                        title: 'Upper Lip Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_lip_top: {
                        title: 'Upper Lip Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_center: {
                        title: 'Mouth Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_top: {
                        title: 'Mouth Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_bottom: {
                        title: 'Mouth Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_ear_tragion: {
                        title: 'Left Ear Tragion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_ear_tragion: {
                        title: 'Right Ear Tragion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      forehead_glabella: {
                        title: 'Forehead Glabella',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      chin_gnathion: {
                        title: 'Chin Gnathion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      chin_left_gonion: {
                        title: 'Chin Left Gonion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      chin_right_gonion: {
                        title: 'Chin Right Gonion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_jawline_left: {
                        title: 'Upper Jawline Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mid_jawline_left: {
                        title: 'Mid Jawline Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mid_jawline_right: {
                        title: 'Mid Jawline Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_jawline_right: {
                        title: 'Upper Jawline Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_cheek_center: {
                        title: 'Left Cheek Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_cheek_center: {
                        title: 'Right Cheek Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                    },
                  },
                  emotions: {
                    required: [
                      'joy',
                      'sorrow',
                      'anger',
                      'surprise',
                      'disgust',
                      'fear',
                      'confusion',
                      'calm',
                      'unknown',
                      'neutral',
                      'contempt',
                    ],
                    title: 'FaceEmotions',
                    type: 'object',
                    properties: {
                      joy: { title: 'Joy', type: 'integer' },
                      sorrow: { title: 'Sorrow', type: 'integer' },
                      anger: { title: 'Anger', type: 'integer' },
                      surprise: { title: 'Surprise', type: 'integer' },
                      disgust: { title: 'Disgust', type: 'integer' },
                      fear: { title: 'Fear', type: 'integer' },
                      confusion: { title: 'Confusion', type: 'integer' },
                      calm: { title: 'Calm', type: 'integer' },
                      unknown: { title: 'Unknown', type: 'integer' },
                      neutral: { title: 'Neutral', type: 'integer' },
                      contempt: { title: 'Contempt', type: 'integer' },
                    },
                  },
                  poses: {
                    required: ['pitch', 'roll', 'yaw'],
                    title: 'FacePoses',
                    type: 'object',
                    properties: {
                      pitch: { title: 'Pitch', type: 'integer' },
                      roll: { title: 'Roll', type: 'integer' },
                      yaw: { title: 'Yaw', type: 'integer' },
                    },
                  },
                  age: { title: 'Age', type: 'integer' },
                  gender: { title: 'Gender', type: 'string' },
                  bounding_box: {
                    required: ['x_min', 'x_max', 'y_min', 'y_max'],
                    title: 'FaceBoundingBox',
                    type: 'object',
                    properties: {
                      x_min: { title: 'X Min', type: 'integer' },
                      x_max: { title: 'X Max', type: 'integer' },
                      y_min: { title: 'Y Min', type: 'integer' },
                      y_max: { title: 'Y Max', type: 'integer' },
                    },
                  },
                  hair: {
                    required: ['bald', 'invisible'],
                    title: 'FaceHair',
                    type: 'object',
                    properties: {
                      hair_color: {
                        title: 'Hair Color',
                        type: 'array',
                        items: {
                          required: ['color', 'confidence'],
                          title: 'FaceHairColor',
                          type: 'object',
                          properties: {
                            color: { title: 'Color', type: 'string' },
                            confidence: {
                              title: 'Confidence',
                              type: 'integer',
                            },
                          },
                        },
                      },
                      bald: { title: 'Bald', type: 'integer' },
                      invisible: { title: 'Invisible', type: 'boolean' },
                    },
                  },
                  facial_hair: {
                    required: ['moustache', 'beard', 'sideburns'],
                    title: 'FaceFacialHair',
                    type: 'object',
                    properties: {
                      moustache: { title: 'Moustache', type: 'integer' },
                      beard: { title: 'Beard', type: 'integer' },
                      sideburns: { title: 'Sideburns', type: 'integer' },
                    },
                  },
                  quality: {
                    required: [
                      'noise',
                      'exposure',
                      'blur',
                      'brightness',
                      'sharpness',
                    ],
                    title: 'FaceQuality',
                    type: 'object',
                    properties: {
                      noise: { title: 'Noise', type: 'integer' },
                      exposure: { title: 'Exposure', type: 'integer' },
                      blur: { title: 'Blur', type: 'integer' },
                      brightness: { title: 'Brightness', type: 'integer' },
                      sharpness: { title: 'Sharpness', type: 'integer' },
                    },
                  },
                  makeup: {
                    required: ['eye_make', 'lip_make'],
                    title: 'FaceMakeup',
                    type: 'object',
                    properties: {
                      eye_make: { title: 'Eye Make', type: 'boolean' },
                      lip_make: { title: 'Lip Make', type: 'boolean' },
                    },
                  },
                  accessories: {
                    required: [
                      'sunglasses',
                      'reading_glasses',
                      'swimming_goggles',
                      'face_mask',
                      'eyeglasses',
                      'headwear',
                    ],
                    title: 'FaceAccessories',
                    type: 'object',
                    properties: {
                      sunglasses: { title: 'Sunglasses', type: 'integer' },
                      reading_glasses: {
                        title: 'Reading Glasses',
                        type: 'integer',
                      },
                      swimming_goggles: {
                        title: 'Swimming Goggles',
                        type: 'integer',
                      },
                      face_mask: { title: 'Face Mask', type: 'integer' },
                      eyeglasses: { title: 'Eyeglasses', type: 'integer' },
                      headwear: { title: 'Headwear', type: 'integer' },
                    },
                  },
                  occlusions: {
                    required: [
                      'eye_occluded',
                      'forehead_occluded',
                      'mouth_occluded',
                    ],
                    title: 'FaceOcclusions',
                    type: 'object',
                    properties: {
                      eye_occluded: { title: 'Eye Occluded', type: 'boolean' },
                      forehead_occluded: {
                        title: 'Forehead Occluded',
                        type: 'boolean',
                      },
                      mouth_occluded: {
                        title: 'Mouth Occluded',
                        type: 'boolean',
                      },
                    },
                  },
                  features: {
                    required: ['eyes_open', 'smile', 'mouth_open'],
                    title: 'FaceFeatures',
                    type: 'object',
                    properties: {
                      eyes_open: { title: 'Eyes Open', type: 'integer' },
                      smile: { title: 'Smile', type: 'integer' },
                      mouth_open: { title: 'Mouth Open', type: 'integer' },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        microsoft: {
          required: ['status'],
          title: 'imageface_detectionFaceDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: [
                  'confidence',
                  'landmarks',
                  'emotions',
                  'poses',
                  'age',
                  'gender',
                  'bounding_box',
                  'hair',
                  'facial_hair',
                  'quality',
                  'makeup',
                  'accessories',
                  'occlusions',
                  'features',
                ],
                title: 'FaceItem',
                type: 'object',
                properties: {
                  confidence: { title: 'Confidence', type: 'integer' },
                  landmarks: {
                    title: 'FaceLandmarks',
                    type: 'object',
                    properties: {
                      left_eye: {
                        title: 'Left Eye',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_top: {
                        title: 'Left Eye Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_right: {
                        title: 'Left Eye Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_bottom: {
                        title: 'Left Eye Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_left: {
                        title: 'Left Eye Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye: {
                        title: 'Right Eye',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_top: {
                        title: 'Right Eye Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_right: {
                        title: 'Right Eye Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_bottom: {
                        title: 'Right Eye Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_left: {
                        title: 'Right Eye Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eyebrow_left: {
                        title: 'Left Eyebrow Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eyebrow_right: {
                        title: 'Left Eyebrow Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eyebrow_top: {
                        title: 'Left Eyebrow Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eyebrow_left: {
                        title: 'Right Eyebrow Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eyebrow_right: {
                        title: 'Right Eyebrow Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_pupil: {
                        title: 'Left Pupil',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_pupil: {
                        title: 'Right Pupil',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_tip: {
                        title: 'Nose Tip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_bottom_right: {
                        title: 'Nose Bottom Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_bottom_left: {
                        title: 'Nose Bottom Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_left: {
                        title: 'Mouth Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_right: {
                        title: 'Mouth Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eyebrow_top: {
                        title: 'Right Eyebrow Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      midpoint_between_eyes: {
                        title: 'Midpoint Between Eyes',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_bottom_center: {
                        title: 'Nose Bottom Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_left_alar_out_tip: {
                        title: 'Nose Left Alar Out Tip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_left_alar_top: {
                        title: 'Nose Left Alar Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_right_alar_out_tip: {
                        title: 'Nose Right Alar Out Tip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_right_alar_top: {
                        title: 'Nose Right Alar Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_root_left: {
                        title: 'Nose Root Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_root_right: {
                        title: 'Nose Root Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_lip: {
                        title: 'Upper Lip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      under_lip: {
                        title: 'Under Lip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      under_lip_bottom: {
                        title: 'Under Lip Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      under_lip_top: {
                        title: 'Under Lip Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_lip_bottom: {
                        title: 'Upper Lip Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_lip_top: {
                        title: 'Upper Lip Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_center: {
                        title: 'Mouth Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_top: {
                        title: 'Mouth Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_bottom: {
                        title: 'Mouth Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_ear_tragion: {
                        title: 'Left Ear Tragion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_ear_tragion: {
                        title: 'Right Ear Tragion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      forehead_glabella: {
                        title: 'Forehead Glabella',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      chin_gnathion: {
                        title: 'Chin Gnathion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      chin_left_gonion: {
                        title: 'Chin Left Gonion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      chin_right_gonion: {
                        title: 'Chin Right Gonion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_jawline_left: {
                        title: 'Upper Jawline Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mid_jawline_left: {
                        title: 'Mid Jawline Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mid_jawline_right: {
                        title: 'Mid Jawline Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_jawline_right: {
                        title: 'Upper Jawline Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_cheek_center: {
                        title: 'Left Cheek Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_cheek_center: {
                        title: 'Right Cheek Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                    },
                  },
                  emotions: {
                    required: [
                      'joy',
                      'sorrow',
                      'anger',
                      'surprise',
                      'disgust',
                      'fear',
                      'confusion',
                      'calm',
                      'unknown',
                      'neutral',
                      'contempt',
                    ],
                    title: 'FaceEmotions',
                    type: 'object',
                    properties: {
                      joy: { title: 'Joy', type: 'integer' },
                      sorrow: { title: 'Sorrow', type: 'integer' },
                      anger: { title: 'Anger', type: 'integer' },
                      surprise: { title: 'Surprise', type: 'integer' },
                      disgust: { title: 'Disgust', type: 'integer' },
                      fear: { title: 'Fear', type: 'integer' },
                      confusion: { title: 'Confusion', type: 'integer' },
                      calm: { title: 'Calm', type: 'integer' },
                      unknown: { title: 'Unknown', type: 'integer' },
                      neutral: { title: 'Neutral', type: 'integer' },
                      contempt: { title: 'Contempt', type: 'integer' },
                    },
                  },
                  poses: {
                    required: ['pitch', 'roll', 'yaw'],
                    title: 'FacePoses',
                    type: 'object',
                    properties: {
                      pitch: { title: 'Pitch', type: 'integer' },
                      roll: { title: 'Roll', type: 'integer' },
                      yaw: { title: 'Yaw', type: 'integer' },
                    },
                  },
                  age: { title: 'Age', type: 'integer' },
                  gender: { title: 'Gender', type: 'string' },
                  bounding_box: {
                    required: ['x_min', 'x_max', 'y_min', 'y_max'],
                    title: 'FaceBoundingBox',
                    type: 'object',
                    properties: {
                      x_min: { title: 'X Min', type: 'integer' },
                      x_max: { title: 'X Max', type: 'integer' },
                      y_min: { title: 'Y Min', type: 'integer' },
                      y_max: { title: 'Y Max', type: 'integer' },
                    },
                  },
                  hair: {
                    required: ['bald', 'invisible'],
                    title: 'FaceHair',
                    type: 'object',
                    properties: {
                      hair_color: {
                        title: 'Hair Color',
                        type: 'array',
                        items: {
                          required: ['color', 'confidence'],
                          title: 'FaceHairColor',
                          type: 'object',
                          properties: {
                            color: { title: 'Color', type: 'string' },
                            confidence: {
                              title: 'Confidence',
                              type: 'integer',
                            },
                          },
                        },
                      },
                      bald: { title: 'Bald', type: 'integer' },
                      invisible: { title: 'Invisible', type: 'boolean' },
                    },
                  },
                  facial_hair: {
                    required: ['moustache', 'beard', 'sideburns'],
                    title: 'FaceFacialHair',
                    type: 'object',
                    properties: {
                      moustache: { title: 'Moustache', type: 'integer' },
                      beard: { title: 'Beard', type: 'integer' },
                      sideburns: { title: 'Sideburns', type: 'integer' },
                    },
                  },
                  quality: {
                    required: [
                      'noise',
                      'exposure',
                      'blur',
                      'brightness',
                      'sharpness',
                    ],
                    title: 'FaceQuality',
                    type: 'object',
                    properties: {
                      noise: { title: 'Noise', type: 'integer' },
                      exposure: { title: 'Exposure', type: 'integer' },
                      blur: { title: 'Blur', type: 'integer' },
                      brightness: { title: 'Brightness', type: 'integer' },
                      sharpness: { title: 'Sharpness', type: 'integer' },
                    },
                  },
                  makeup: {
                    required: ['eye_make', 'lip_make'],
                    title: 'FaceMakeup',
                    type: 'object',
                    properties: {
                      eye_make: { title: 'Eye Make', type: 'boolean' },
                      lip_make: { title: 'Lip Make', type: 'boolean' },
                    },
                  },
                  accessories: {
                    required: [
                      'sunglasses',
                      'reading_glasses',
                      'swimming_goggles',
                      'face_mask',
                      'eyeglasses',
                      'headwear',
                    ],
                    title: 'FaceAccessories',
                    type: 'object',
                    properties: {
                      sunglasses: { title: 'Sunglasses', type: 'integer' },
                      reading_glasses: {
                        title: 'Reading Glasses',
                        type: 'integer',
                      },
                      swimming_goggles: {
                        title: 'Swimming Goggles',
                        type: 'integer',
                      },
                      face_mask: { title: 'Face Mask', type: 'integer' },
                      eyeglasses: { title: 'Eyeglasses', type: 'integer' },
                      headwear: { title: 'Headwear', type: 'integer' },
                    },
                  },
                  occlusions: {
                    required: [
                      'eye_occluded',
                      'forehead_occluded',
                      'mouth_occluded',
                    ],
                    title: 'FaceOcclusions',
                    type: 'object',
                    properties: {
                      eye_occluded: { title: 'Eye Occluded', type: 'boolean' },
                      forehead_occluded: {
                        title: 'Forehead Occluded',
                        type: 'boolean',
                      },
                      mouth_occluded: {
                        title: 'Mouth Occluded',
                        type: 'boolean',
                      },
                    },
                  },
                  features: {
                    required: ['eyes_open', 'smile', 'mouth_open'],
                    title: 'FaceFeatures',
                    type: 'object',
                    properties: {
                      eyes_open: { title: 'Eyes Open', type: 'integer' },
                      smile: { title: 'Smile', type: 'integer' },
                      mouth_open: { title: 'Mouth Open', type: 'integer' },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        api4ai: {
          required: ['status'],
          title: 'imageface_detectionFaceDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: [
                  'confidence',
                  'landmarks',
                  'emotions',
                  'poses',
                  'age',
                  'gender',
                  'bounding_box',
                  'hair',
                  'facial_hair',
                  'quality',
                  'makeup',
                  'accessories',
                  'occlusions',
                  'features',
                ],
                title: 'FaceItem',
                type: 'object',
                properties: {
                  confidence: { title: 'Confidence', type: 'integer' },
                  landmarks: {
                    title: 'FaceLandmarks',
                    type: 'object',
                    properties: {
                      left_eye: {
                        title: 'Left Eye',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_top: {
                        title: 'Left Eye Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_right: {
                        title: 'Left Eye Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_bottom: {
                        title: 'Left Eye Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_left: {
                        title: 'Left Eye Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye: {
                        title: 'Right Eye',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_top: {
                        title: 'Right Eye Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_right: {
                        title: 'Right Eye Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_bottom: {
                        title: 'Right Eye Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_left: {
                        title: 'Right Eye Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eyebrow_left: {
                        title: 'Left Eyebrow Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eyebrow_right: {
                        title: 'Left Eyebrow Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eyebrow_top: {
                        title: 'Left Eyebrow Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eyebrow_left: {
                        title: 'Right Eyebrow Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eyebrow_right: {
                        title: 'Right Eyebrow Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_pupil: {
                        title: 'Left Pupil',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_pupil: {
                        title: 'Right Pupil',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_tip: {
                        title: 'Nose Tip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_bottom_right: {
                        title: 'Nose Bottom Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_bottom_left: {
                        title: 'Nose Bottom Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_left: {
                        title: 'Mouth Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_right: {
                        title: 'Mouth Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eyebrow_top: {
                        title: 'Right Eyebrow Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      midpoint_between_eyes: {
                        title: 'Midpoint Between Eyes',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_bottom_center: {
                        title: 'Nose Bottom Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_left_alar_out_tip: {
                        title: 'Nose Left Alar Out Tip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_left_alar_top: {
                        title: 'Nose Left Alar Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_right_alar_out_tip: {
                        title: 'Nose Right Alar Out Tip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_right_alar_top: {
                        title: 'Nose Right Alar Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_root_left: {
                        title: 'Nose Root Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_root_right: {
                        title: 'Nose Root Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_lip: {
                        title: 'Upper Lip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      under_lip: {
                        title: 'Under Lip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      under_lip_bottom: {
                        title: 'Under Lip Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      under_lip_top: {
                        title: 'Under Lip Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_lip_bottom: {
                        title: 'Upper Lip Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_lip_top: {
                        title: 'Upper Lip Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_center: {
                        title: 'Mouth Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_top: {
                        title: 'Mouth Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_bottom: {
                        title: 'Mouth Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_ear_tragion: {
                        title: 'Left Ear Tragion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_ear_tragion: {
                        title: 'Right Ear Tragion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      forehead_glabella: {
                        title: 'Forehead Glabella',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      chin_gnathion: {
                        title: 'Chin Gnathion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      chin_left_gonion: {
                        title: 'Chin Left Gonion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      chin_right_gonion: {
                        title: 'Chin Right Gonion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_jawline_left: {
                        title: 'Upper Jawline Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mid_jawline_left: {
                        title: 'Mid Jawline Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mid_jawline_right: {
                        title: 'Mid Jawline Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_jawline_right: {
                        title: 'Upper Jawline Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_cheek_center: {
                        title: 'Left Cheek Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_cheek_center: {
                        title: 'Right Cheek Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                    },
                  },
                  emotions: {
                    required: [
                      'joy',
                      'sorrow',
                      'anger',
                      'surprise',
                      'disgust',
                      'fear',
                      'confusion',
                      'calm',
                      'unknown',
                      'neutral',
                      'contempt',
                    ],
                    title: 'FaceEmotions',
                    type: 'object',
                    properties: {
                      joy: { title: 'Joy', type: 'integer' },
                      sorrow: { title: 'Sorrow', type: 'integer' },
                      anger: { title: 'Anger', type: 'integer' },
                      surprise: { title: 'Surprise', type: 'integer' },
                      disgust: { title: 'Disgust', type: 'integer' },
                      fear: { title: 'Fear', type: 'integer' },
                      confusion: { title: 'Confusion', type: 'integer' },
                      calm: { title: 'Calm', type: 'integer' },
                      unknown: { title: 'Unknown', type: 'integer' },
                      neutral: { title: 'Neutral', type: 'integer' },
                      contempt: { title: 'Contempt', type: 'integer' },
                    },
                  },
                  poses: {
                    required: ['pitch', 'roll', 'yaw'],
                    title: 'FacePoses',
                    type: 'object',
                    properties: {
                      pitch: { title: 'Pitch', type: 'integer' },
                      roll: { title: 'Roll', type: 'integer' },
                      yaw: { title: 'Yaw', type: 'integer' },
                    },
                  },
                  age: { title: 'Age', type: 'integer' },
                  gender: { title: 'Gender', type: 'string' },
                  bounding_box: {
                    required: ['x_min', 'x_max', 'y_min', 'y_max'],
                    title: 'FaceBoundingBox',
                    type: 'object',
                    properties: {
                      x_min: { title: 'X Min', type: 'integer' },
                      x_max: { title: 'X Max', type: 'integer' },
                      y_min: { title: 'Y Min', type: 'integer' },
                      y_max: { title: 'Y Max', type: 'integer' },
                    },
                  },
                  hair: {
                    required: ['bald', 'invisible'],
                    title: 'FaceHair',
                    type: 'object',
                    properties: {
                      hair_color: {
                        title: 'Hair Color',
                        type: 'array',
                        items: {
                          required: ['color', 'confidence'],
                          title: 'FaceHairColor',
                          type: 'object',
                          properties: {
                            color: { title: 'Color', type: 'string' },
                            confidence: {
                              title: 'Confidence',
                              type: 'integer',
                            },
                          },
                        },
                      },
                      bald: { title: 'Bald', type: 'integer' },
                      invisible: { title: 'Invisible', type: 'boolean' },
                    },
                  },
                  facial_hair: {
                    required: ['moustache', 'beard', 'sideburns'],
                    title: 'FaceFacialHair',
                    type: 'object',
                    properties: {
                      moustache: { title: 'Moustache', type: 'integer' },
                      beard: { title: 'Beard', type: 'integer' },
                      sideburns: { title: 'Sideburns', type: 'integer' },
                    },
                  },
                  quality: {
                    required: [
                      'noise',
                      'exposure',
                      'blur',
                      'brightness',
                      'sharpness',
                    ],
                    title: 'FaceQuality',
                    type: 'object',
                    properties: {
                      noise: { title: 'Noise', type: 'integer' },
                      exposure: { title: 'Exposure', type: 'integer' },
                      blur: { title: 'Blur', type: 'integer' },
                      brightness: { title: 'Brightness', type: 'integer' },
                      sharpness: { title: 'Sharpness', type: 'integer' },
                    },
                  },
                  makeup: {
                    required: ['eye_make', 'lip_make'],
                    title: 'FaceMakeup',
                    type: 'object',
                    properties: {
                      eye_make: { title: 'Eye Make', type: 'boolean' },
                      lip_make: { title: 'Lip Make', type: 'boolean' },
                    },
                  },
                  accessories: {
                    required: [
                      'sunglasses',
                      'reading_glasses',
                      'swimming_goggles',
                      'face_mask',
                      'eyeglasses',
                      'headwear',
                    ],
                    title: 'FaceAccessories',
                    type: 'object',
                    properties: {
                      sunglasses: { title: 'Sunglasses', type: 'integer' },
                      reading_glasses: {
                        title: 'Reading Glasses',
                        type: 'integer',
                      },
                      swimming_goggles: {
                        title: 'Swimming Goggles',
                        type: 'integer',
                      },
                      face_mask: { title: 'Face Mask', type: 'integer' },
                      eyeglasses: { title: 'Eyeglasses', type: 'integer' },
                      headwear: { title: 'Headwear', type: 'integer' },
                    },
                  },
                  occlusions: {
                    required: [
                      'eye_occluded',
                      'forehead_occluded',
                      'mouth_occluded',
                    ],
                    title: 'FaceOcclusions',
                    type: 'object',
                    properties: {
                      eye_occluded: { title: 'Eye Occluded', type: 'boolean' },
                      forehead_occluded: {
                        title: 'Forehead Occluded',
                        type: 'boolean',
                      },
                      mouth_occluded: {
                        title: 'Mouth Occluded',
                        type: 'boolean',
                      },
                    },
                  },
                  features: {
                    required: ['eyes_open', 'smile', 'mouth_open'],
                    title: 'FaceFeatures',
                    type: 'object',
                    properties: {
                      eyes_open: { title: 'Eyes Open', type: 'integer' },
                      smile: { title: 'Smile', type: 'integer' },
                      mouth_open: { title: 'Mouth Open', type: 'integer' },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        google: {
          required: ['status'],
          title: 'imageface_detectionFaceDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: [
                  'confidence',
                  'landmarks',
                  'emotions',
                  'poses',
                  'age',
                  'gender',
                  'bounding_box',
                  'hair',
                  'facial_hair',
                  'quality',
                  'makeup',
                  'accessories',
                  'occlusions',
                  'features',
                ],
                title: 'FaceItem',
                type: 'object',
                properties: {
                  confidence: { title: 'Confidence', type: 'integer' },
                  landmarks: {
                    title: 'FaceLandmarks',
                    type: 'object',
                    properties: {
                      left_eye: {
                        title: 'Left Eye',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_top: {
                        title: 'Left Eye Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_right: {
                        title: 'Left Eye Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_bottom: {
                        title: 'Left Eye Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_left: {
                        title: 'Left Eye Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye: {
                        title: 'Right Eye',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_top: {
                        title: 'Right Eye Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_right: {
                        title: 'Right Eye Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_bottom: {
                        title: 'Right Eye Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_left: {
                        title: 'Right Eye Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eyebrow_left: {
                        title: 'Left Eyebrow Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eyebrow_right: {
                        title: 'Left Eyebrow Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eyebrow_top: {
                        title: 'Left Eyebrow Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eyebrow_left: {
                        title: 'Right Eyebrow Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eyebrow_right: {
                        title: 'Right Eyebrow Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_pupil: {
                        title: 'Left Pupil',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_pupil: {
                        title: 'Right Pupil',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_tip: {
                        title: 'Nose Tip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_bottom_right: {
                        title: 'Nose Bottom Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_bottom_left: {
                        title: 'Nose Bottom Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_left: {
                        title: 'Mouth Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_right: {
                        title: 'Mouth Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eyebrow_top: {
                        title: 'Right Eyebrow Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      midpoint_between_eyes: {
                        title: 'Midpoint Between Eyes',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_bottom_center: {
                        title: 'Nose Bottom Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_left_alar_out_tip: {
                        title: 'Nose Left Alar Out Tip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_left_alar_top: {
                        title: 'Nose Left Alar Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_right_alar_out_tip: {
                        title: 'Nose Right Alar Out Tip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_right_alar_top: {
                        title: 'Nose Right Alar Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_root_left: {
                        title: 'Nose Root Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_root_right: {
                        title: 'Nose Root Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_lip: {
                        title: 'Upper Lip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      under_lip: {
                        title: 'Under Lip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      under_lip_bottom: {
                        title: 'Under Lip Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      under_lip_top: {
                        title: 'Under Lip Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_lip_bottom: {
                        title: 'Upper Lip Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_lip_top: {
                        title: 'Upper Lip Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_center: {
                        title: 'Mouth Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_top: {
                        title: 'Mouth Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_bottom: {
                        title: 'Mouth Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_ear_tragion: {
                        title: 'Left Ear Tragion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_ear_tragion: {
                        title: 'Right Ear Tragion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      forehead_glabella: {
                        title: 'Forehead Glabella',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      chin_gnathion: {
                        title: 'Chin Gnathion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      chin_left_gonion: {
                        title: 'Chin Left Gonion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      chin_right_gonion: {
                        title: 'Chin Right Gonion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_jawline_left: {
                        title: 'Upper Jawline Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mid_jawline_left: {
                        title: 'Mid Jawline Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mid_jawline_right: {
                        title: 'Mid Jawline Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_jawline_right: {
                        title: 'Upper Jawline Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_cheek_center: {
                        title: 'Left Cheek Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_cheek_center: {
                        title: 'Right Cheek Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                    },
                  },
                  emotions: {
                    required: [
                      'joy',
                      'sorrow',
                      'anger',
                      'surprise',
                      'disgust',
                      'fear',
                      'confusion',
                      'calm',
                      'unknown',
                      'neutral',
                      'contempt',
                    ],
                    title: 'FaceEmotions',
                    type: 'object',
                    properties: {
                      joy: { title: 'Joy', type: 'integer' },
                      sorrow: { title: 'Sorrow', type: 'integer' },
                      anger: { title: 'Anger', type: 'integer' },
                      surprise: { title: 'Surprise', type: 'integer' },
                      disgust: { title: 'Disgust', type: 'integer' },
                      fear: { title: 'Fear', type: 'integer' },
                      confusion: { title: 'Confusion', type: 'integer' },
                      calm: { title: 'Calm', type: 'integer' },
                      unknown: { title: 'Unknown', type: 'integer' },
                      neutral: { title: 'Neutral', type: 'integer' },
                      contempt: { title: 'Contempt', type: 'integer' },
                    },
                  },
                  poses: {
                    required: ['pitch', 'roll', 'yaw'],
                    title: 'FacePoses',
                    type: 'object',
                    properties: {
                      pitch: { title: 'Pitch', type: 'integer' },
                      roll: { title: 'Roll', type: 'integer' },
                      yaw: { title: 'Yaw', type: 'integer' },
                    },
                  },
                  age: { title: 'Age', type: 'integer' },
                  gender: { title: 'Gender', type: 'string' },
                  bounding_box: {
                    required: ['x_min', 'x_max', 'y_min', 'y_max'],
                    title: 'FaceBoundingBox',
                    type: 'object',
                    properties: {
                      x_min: { title: 'X Min', type: 'integer' },
                      x_max: { title: 'X Max', type: 'integer' },
                      y_min: { title: 'Y Min', type: 'integer' },
                      y_max: { title: 'Y Max', type: 'integer' },
                    },
                  },
                  hair: {
                    required: ['bald', 'invisible'],
                    title: 'FaceHair',
                    type: 'object',
                    properties: {
                      hair_color: {
                        title: 'Hair Color',
                        type: 'array',
                        items: {
                          required: ['color', 'confidence'],
                          title: 'FaceHairColor',
                          type: 'object',
                          properties: {
                            color: { title: 'Color', type: 'string' },
                            confidence: {
                              title: 'Confidence',
                              type: 'integer',
                            },
                          },
                        },
                      },
                      bald: { title: 'Bald', type: 'integer' },
                      invisible: { title: 'Invisible', type: 'boolean' },
                    },
                  },
                  facial_hair: {
                    required: ['moustache', 'beard', 'sideburns'],
                    title: 'FaceFacialHair',
                    type: 'object',
                    properties: {
                      moustache: { title: 'Moustache', type: 'integer' },
                      beard: { title: 'Beard', type: 'integer' },
                      sideburns: { title: 'Sideburns', type: 'integer' },
                    },
                  },
                  quality: {
                    required: [
                      'noise',
                      'exposure',
                      'blur',
                      'brightness',
                      'sharpness',
                    ],
                    title: 'FaceQuality',
                    type: 'object',
                    properties: {
                      noise: { title: 'Noise', type: 'integer' },
                      exposure: { title: 'Exposure', type: 'integer' },
                      blur: { title: 'Blur', type: 'integer' },
                      brightness: { title: 'Brightness', type: 'integer' },
                      sharpness: { title: 'Sharpness', type: 'integer' },
                    },
                  },
                  makeup: {
                    required: ['eye_make', 'lip_make'],
                    title: 'FaceMakeup',
                    type: 'object',
                    properties: {
                      eye_make: { title: 'Eye Make', type: 'boolean' },
                      lip_make: { title: 'Lip Make', type: 'boolean' },
                    },
                  },
                  accessories: {
                    required: [
                      'sunglasses',
                      'reading_glasses',
                      'swimming_goggles',
                      'face_mask',
                      'eyeglasses',
                      'headwear',
                    ],
                    title: 'FaceAccessories',
                    type: 'object',
                    properties: {
                      sunglasses: { title: 'Sunglasses', type: 'integer' },
                      reading_glasses: {
                        title: 'Reading Glasses',
                        type: 'integer',
                      },
                      swimming_goggles: {
                        title: 'Swimming Goggles',
                        type: 'integer',
                      },
                      face_mask: { title: 'Face Mask', type: 'integer' },
                      eyeglasses: { title: 'Eyeglasses', type: 'integer' },
                      headwear: { title: 'Headwear', type: 'integer' },
                    },
                  },
                  occlusions: {
                    required: [
                      'eye_occluded',
                      'forehead_occluded',
                      'mouth_occluded',
                    ],
                    title: 'FaceOcclusions',
                    type: 'object',
                    properties: {
                      eye_occluded: { title: 'Eye Occluded', type: 'boolean' },
                      forehead_occluded: {
                        title: 'Forehead Occluded',
                        type: 'boolean',
                      },
                      mouth_occluded: {
                        title: 'Mouth Occluded',
                        type: 'boolean',
                      },
                    },
                  },
                  features: {
                    required: ['eyes_open', 'smile', 'mouth_open'],
                    title: 'FaceFeatures',
                    type: 'object',
                    properties: {
                      eyes_open: { title: 'Eyes Open', type: 'integer' },
                      smile: { title: 'Smile', type: 'integer' },
                      mouth_open: { title: 'Mouth Open', type: 'integer' },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        skybiometry: {
          required: ['status'],
          title: 'imageface_detectionFaceDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: [
                  'confidence',
                  'landmarks',
                  'emotions',
                  'poses',
                  'age',
                  'gender',
                  'bounding_box',
                  'hair',
                  'facial_hair',
                  'quality',
                  'makeup',
                  'accessories',
                  'occlusions',
                  'features',
                ],
                title: 'FaceItem',
                type: 'object',
                properties: {
                  confidence: { title: 'Confidence', type: 'integer' },
                  landmarks: {
                    title: 'FaceLandmarks',
                    type: 'object',
                    properties: {
                      left_eye: {
                        title: 'Left Eye',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_top: {
                        title: 'Left Eye Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_right: {
                        title: 'Left Eye Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_bottom: {
                        title: 'Left Eye Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_left: {
                        title: 'Left Eye Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye: {
                        title: 'Right Eye',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_top: {
                        title: 'Right Eye Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_right: {
                        title: 'Right Eye Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_bottom: {
                        title: 'Right Eye Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_left: {
                        title: 'Right Eye Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eyebrow_left: {
                        title: 'Left Eyebrow Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eyebrow_right: {
                        title: 'Left Eyebrow Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eyebrow_top: {
                        title: 'Left Eyebrow Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eyebrow_left: {
                        title: 'Right Eyebrow Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eyebrow_right: {
                        title: 'Right Eyebrow Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_pupil: {
                        title: 'Left Pupil',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_pupil: {
                        title: 'Right Pupil',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_tip: {
                        title: 'Nose Tip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_bottom_right: {
                        title: 'Nose Bottom Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_bottom_left: {
                        title: 'Nose Bottom Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_left: {
                        title: 'Mouth Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_right: {
                        title: 'Mouth Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eyebrow_top: {
                        title: 'Right Eyebrow Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      midpoint_between_eyes: {
                        title: 'Midpoint Between Eyes',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_bottom_center: {
                        title: 'Nose Bottom Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_left_alar_out_tip: {
                        title: 'Nose Left Alar Out Tip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_left_alar_top: {
                        title: 'Nose Left Alar Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_right_alar_out_tip: {
                        title: 'Nose Right Alar Out Tip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_right_alar_top: {
                        title: 'Nose Right Alar Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_root_left: {
                        title: 'Nose Root Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_root_right: {
                        title: 'Nose Root Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_lip: {
                        title: 'Upper Lip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      under_lip: {
                        title: 'Under Lip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      under_lip_bottom: {
                        title: 'Under Lip Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      under_lip_top: {
                        title: 'Under Lip Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_lip_bottom: {
                        title: 'Upper Lip Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_lip_top: {
                        title: 'Upper Lip Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_center: {
                        title: 'Mouth Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_top: {
                        title: 'Mouth Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_bottom: {
                        title: 'Mouth Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_ear_tragion: {
                        title: 'Left Ear Tragion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_ear_tragion: {
                        title: 'Right Ear Tragion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      forehead_glabella: {
                        title: 'Forehead Glabella',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      chin_gnathion: {
                        title: 'Chin Gnathion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      chin_left_gonion: {
                        title: 'Chin Left Gonion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      chin_right_gonion: {
                        title: 'Chin Right Gonion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_jawline_left: {
                        title: 'Upper Jawline Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mid_jawline_left: {
                        title: 'Mid Jawline Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mid_jawline_right: {
                        title: 'Mid Jawline Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_jawline_right: {
                        title: 'Upper Jawline Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_cheek_center: {
                        title: 'Left Cheek Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_cheek_center: {
                        title: 'Right Cheek Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                    },
                  },
                  emotions: {
                    required: [
                      'joy',
                      'sorrow',
                      'anger',
                      'surprise',
                      'disgust',
                      'fear',
                      'confusion',
                      'calm',
                      'unknown',
                      'neutral',
                      'contempt',
                    ],
                    title: 'FaceEmotions',
                    type: 'object',
                    properties: {
                      joy: { title: 'Joy', type: 'integer' },
                      sorrow: { title: 'Sorrow', type: 'integer' },
                      anger: { title: 'Anger', type: 'integer' },
                      surprise: { title: 'Surprise', type: 'integer' },
                      disgust: { title: 'Disgust', type: 'integer' },
                      fear: { title: 'Fear', type: 'integer' },
                      confusion: { title: 'Confusion', type: 'integer' },
                      calm: { title: 'Calm', type: 'integer' },
                      unknown: { title: 'Unknown', type: 'integer' },
                      neutral: { title: 'Neutral', type: 'integer' },
                      contempt: { title: 'Contempt', type: 'integer' },
                    },
                  },
                  poses: {
                    required: ['pitch', 'roll', 'yaw'],
                    title: 'FacePoses',
                    type: 'object',
                    properties: {
                      pitch: { title: 'Pitch', type: 'integer' },
                      roll: { title: 'Roll', type: 'integer' },
                      yaw: { title: 'Yaw', type: 'integer' },
                    },
                  },
                  age: { title: 'Age', type: 'integer' },
                  gender: { title: 'Gender', type: 'string' },
                  bounding_box: {
                    required: ['x_min', 'x_max', 'y_min', 'y_max'],
                    title: 'FaceBoundingBox',
                    type: 'object',
                    properties: {
                      x_min: { title: 'X Min', type: 'integer' },
                      x_max: { title: 'X Max', type: 'integer' },
                      y_min: { title: 'Y Min', type: 'integer' },
                      y_max: { title: 'Y Max', type: 'integer' },
                    },
                  },
                  hair: {
                    required: ['bald', 'invisible'],
                    title: 'FaceHair',
                    type: 'object',
                    properties: {
                      hair_color: {
                        title: 'Hair Color',
                        type: 'array',
                        items: {
                          required: ['color', 'confidence'],
                          title: 'FaceHairColor',
                          type: 'object',
                          properties: {
                            color: { title: 'Color', type: 'string' },
                            confidence: {
                              title: 'Confidence',
                              type: 'integer',
                            },
                          },
                        },
                      },
                      bald: { title: 'Bald', type: 'integer' },
                      invisible: { title: 'Invisible', type: 'boolean' },
                    },
                  },
                  facial_hair: {
                    required: ['moustache', 'beard', 'sideburns'],
                    title: 'FaceFacialHair',
                    type: 'object',
                    properties: {
                      moustache: { title: 'Moustache', type: 'integer' },
                      beard: { title: 'Beard', type: 'integer' },
                      sideburns: { title: 'Sideburns', type: 'integer' },
                    },
                  },
                  quality: {
                    required: [
                      'noise',
                      'exposure',
                      'blur',
                      'brightness',
                      'sharpness',
                    ],
                    title: 'FaceQuality',
                    type: 'object',
                    properties: {
                      noise: { title: 'Noise', type: 'integer' },
                      exposure: { title: 'Exposure', type: 'integer' },
                      blur: { title: 'Blur', type: 'integer' },
                      brightness: { title: 'Brightness', type: 'integer' },
                      sharpness: { title: 'Sharpness', type: 'integer' },
                    },
                  },
                  makeup: {
                    required: ['eye_make', 'lip_make'],
                    title: 'FaceMakeup',
                    type: 'object',
                    properties: {
                      eye_make: { title: 'Eye Make', type: 'boolean' },
                      lip_make: { title: 'Lip Make', type: 'boolean' },
                    },
                  },
                  accessories: {
                    required: [
                      'sunglasses',
                      'reading_glasses',
                      'swimming_goggles',
                      'face_mask',
                      'eyeglasses',
                      'headwear',
                    ],
                    title: 'FaceAccessories',
                    type: 'object',
                    properties: {
                      sunglasses: { title: 'Sunglasses', type: 'integer' },
                      reading_glasses: {
                        title: 'Reading Glasses',
                        type: 'integer',
                      },
                      swimming_goggles: {
                        title: 'Swimming Goggles',
                        type: 'integer',
                      },
                      face_mask: { title: 'Face Mask', type: 'integer' },
                      eyeglasses: { title: 'Eyeglasses', type: 'integer' },
                      headwear: { title: 'Headwear', type: 'integer' },
                    },
                  },
                  occlusions: {
                    required: [
                      'eye_occluded',
                      'forehead_occluded',
                      'mouth_occluded',
                    ],
                    title: 'FaceOcclusions',
                    type: 'object',
                    properties: {
                      eye_occluded: { title: 'Eye Occluded', type: 'boolean' },
                      forehead_occluded: {
                        title: 'Forehead Occluded',
                        type: 'boolean',
                      },
                      mouth_occluded: {
                        title: 'Mouth Occluded',
                        type: 'boolean',
                      },
                    },
                  },
                  features: {
                    required: ['eyes_open', 'smile', 'mouth_open'],
                    title: 'FaceFeatures',
                    type: 'object',
                    properties: {
                      eyes_open: { title: 'Eyes Open', type: 'integer' },
                      smile: { title: 'Smile', type: 'integer' },
                      mouth_open: { title: 'Mouth Open', type: 'integer' },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        amazon: {
          required: ['status'],
          title: 'imageface_detectionFaceDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: [
                  'confidence',
                  'landmarks',
                  'emotions',
                  'poses',
                  'age',
                  'gender',
                  'bounding_box',
                  'hair',
                  'facial_hair',
                  'quality',
                  'makeup',
                  'accessories',
                  'occlusions',
                  'features',
                ],
                title: 'FaceItem',
                type: 'object',
                properties: {
                  confidence: { title: 'Confidence', type: 'integer' },
                  landmarks: {
                    title: 'FaceLandmarks',
                    type: 'object',
                    properties: {
                      left_eye: {
                        title: 'Left Eye',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_top: {
                        title: 'Left Eye Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_right: {
                        title: 'Left Eye Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_bottom: {
                        title: 'Left Eye Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_left: {
                        title: 'Left Eye Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye: {
                        title: 'Right Eye',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_top: {
                        title: 'Right Eye Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_right: {
                        title: 'Right Eye Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_bottom: {
                        title: 'Right Eye Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_left: {
                        title: 'Right Eye Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eyebrow_left: {
                        title: 'Left Eyebrow Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eyebrow_right: {
                        title: 'Left Eyebrow Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eyebrow_top: {
                        title: 'Left Eyebrow Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eyebrow_left: {
                        title: 'Right Eyebrow Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eyebrow_right: {
                        title: 'Right Eyebrow Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_pupil: {
                        title: 'Left Pupil',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_pupil: {
                        title: 'Right Pupil',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_tip: {
                        title: 'Nose Tip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_bottom_right: {
                        title: 'Nose Bottom Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_bottom_left: {
                        title: 'Nose Bottom Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_left: {
                        title: 'Mouth Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_right: {
                        title: 'Mouth Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eyebrow_top: {
                        title: 'Right Eyebrow Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      midpoint_between_eyes: {
                        title: 'Midpoint Between Eyes',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_bottom_center: {
                        title: 'Nose Bottom Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_left_alar_out_tip: {
                        title: 'Nose Left Alar Out Tip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_left_alar_top: {
                        title: 'Nose Left Alar Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_right_alar_out_tip: {
                        title: 'Nose Right Alar Out Tip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_right_alar_top: {
                        title: 'Nose Right Alar Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_root_left: {
                        title: 'Nose Root Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_root_right: {
                        title: 'Nose Root Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_lip: {
                        title: 'Upper Lip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      under_lip: {
                        title: 'Under Lip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      under_lip_bottom: {
                        title: 'Under Lip Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      under_lip_top: {
                        title: 'Under Lip Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_lip_bottom: {
                        title: 'Upper Lip Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_lip_top: {
                        title: 'Upper Lip Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_center: {
                        title: 'Mouth Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_top: {
                        title: 'Mouth Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_bottom: {
                        title: 'Mouth Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_ear_tragion: {
                        title: 'Left Ear Tragion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_ear_tragion: {
                        title: 'Right Ear Tragion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      forehead_glabella: {
                        title: 'Forehead Glabella',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      chin_gnathion: {
                        title: 'Chin Gnathion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      chin_left_gonion: {
                        title: 'Chin Left Gonion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      chin_right_gonion: {
                        title: 'Chin Right Gonion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_jawline_left: {
                        title: 'Upper Jawline Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mid_jawline_left: {
                        title: 'Mid Jawline Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mid_jawline_right: {
                        title: 'Mid Jawline Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_jawline_right: {
                        title: 'Upper Jawline Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_cheek_center: {
                        title: 'Left Cheek Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_cheek_center: {
                        title: 'Right Cheek Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                    },
                  },
                  emotions: {
                    required: [
                      'joy',
                      'sorrow',
                      'anger',
                      'surprise',
                      'disgust',
                      'fear',
                      'confusion',
                      'calm',
                      'unknown',
                      'neutral',
                      'contempt',
                    ],
                    title: 'FaceEmotions',
                    type: 'object',
                    properties: {
                      joy: { title: 'Joy', type: 'integer' },
                      sorrow: { title: 'Sorrow', type: 'integer' },
                      anger: { title: 'Anger', type: 'integer' },
                      surprise: { title: 'Surprise', type: 'integer' },
                      disgust: { title: 'Disgust', type: 'integer' },
                      fear: { title: 'Fear', type: 'integer' },
                      confusion: { title: 'Confusion', type: 'integer' },
                      calm: { title: 'Calm', type: 'integer' },
                      unknown: { title: 'Unknown', type: 'integer' },
                      neutral: { title: 'Neutral', type: 'integer' },
                      contempt: { title: 'Contempt', type: 'integer' },
                    },
                  },
                  poses: {
                    required: ['pitch', 'roll', 'yaw'],
                    title: 'FacePoses',
                    type: 'object',
                    properties: {
                      pitch: { title: 'Pitch', type: 'integer' },
                      roll: { title: 'Roll', type: 'integer' },
                      yaw: { title: 'Yaw', type: 'integer' },
                    },
                  },
                  age: { title: 'Age', type: 'integer' },
                  gender: { title: 'Gender', type: 'string' },
                  bounding_box: {
                    required: ['x_min', 'x_max', 'y_min', 'y_max'],
                    title: 'FaceBoundingBox',
                    type: 'object',
                    properties: {
                      x_min: { title: 'X Min', type: 'integer' },
                      x_max: { title: 'X Max', type: 'integer' },
                      y_min: { title: 'Y Min', type: 'integer' },
                      y_max: { title: 'Y Max', type: 'integer' },
                    },
                  },
                  hair: {
                    required: ['bald', 'invisible'],
                    title: 'FaceHair',
                    type: 'object',
                    properties: {
                      hair_color: {
                        title: 'Hair Color',
                        type: 'array',
                        items: {
                          required: ['color', 'confidence'],
                          title: 'FaceHairColor',
                          type: 'object',
                          properties: {
                            color: { title: 'Color', type: 'string' },
                            confidence: {
                              title: 'Confidence',
                              type: 'integer',
                            },
                          },
                        },
                      },
                      bald: { title: 'Bald', type: 'integer' },
                      invisible: { title: 'Invisible', type: 'boolean' },
                    },
                  },
                  facial_hair: {
                    required: ['moustache', 'beard', 'sideburns'],
                    title: 'FaceFacialHair',
                    type: 'object',
                    properties: {
                      moustache: { title: 'Moustache', type: 'integer' },
                      beard: { title: 'Beard', type: 'integer' },
                      sideburns: { title: 'Sideburns', type: 'integer' },
                    },
                  },
                  quality: {
                    required: [
                      'noise',
                      'exposure',
                      'blur',
                      'brightness',
                      'sharpness',
                    ],
                    title: 'FaceQuality',
                    type: 'object',
                    properties: {
                      noise: { title: 'Noise', type: 'integer' },
                      exposure: { title: 'Exposure', type: 'integer' },
                      blur: { title: 'Blur', type: 'integer' },
                      brightness: { title: 'Brightness', type: 'integer' },
                      sharpness: { title: 'Sharpness', type: 'integer' },
                    },
                  },
                  makeup: {
                    required: ['eye_make', 'lip_make'],
                    title: 'FaceMakeup',
                    type: 'object',
                    properties: {
                      eye_make: { title: 'Eye Make', type: 'boolean' },
                      lip_make: { title: 'Lip Make', type: 'boolean' },
                    },
                  },
                  accessories: {
                    required: [
                      'sunglasses',
                      'reading_glasses',
                      'swimming_goggles',
                      'face_mask',
                      'eyeglasses',
                      'headwear',
                    ],
                    title: 'FaceAccessories',
                    type: 'object',
                    properties: {
                      sunglasses: { title: 'Sunglasses', type: 'integer' },
                      reading_glasses: {
                        title: 'Reading Glasses',
                        type: 'integer',
                      },
                      swimming_goggles: {
                        title: 'Swimming Goggles',
                        type: 'integer',
                      },
                      face_mask: { title: 'Face Mask', type: 'integer' },
                      eyeglasses: { title: 'Eyeglasses', type: 'integer' },
                      headwear: { title: 'Headwear', type: 'integer' },
                    },
                  },
                  occlusions: {
                    required: [
                      'eye_occluded',
                      'forehead_occluded',
                      'mouth_occluded',
                    ],
                    title: 'FaceOcclusions',
                    type: 'object',
                    properties: {
                      eye_occluded: { title: 'Eye Occluded', type: 'boolean' },
                      forehead_occluded: {
                        title: 'Forehead Occluded',
                        type: 'boolean',
                      },
                      mouth_occluded: {
                        title: 'Mouth Occluded',
                        type: 'boolean',
                      },
                    },
                  },
                  features: {
                    required: ['eyes_open', 'smile', 'mouth_open'],
                    title: 'FaceFeatures',
                    type: 'object',
                    properties: {
                      eyes_open: { title: 'Eyes Open', type: 'integer' },
                      smile: { title: 'Smile', type: 'integer' },
                      mouth_open: { title: 'Mouth Open', type: 'integer' },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        'eden-ai': {
          required: ['status'],
          title: 'imageface_detectionFaceDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: [
                  'confidence',
                  'landmarks',
                  'emotions',
                  'poses',
                  'age',
                  'gender',
                  'bounding_box',
                  'hair',
                  'facial_hair',
                  'quality',
                  'makeup',
                  'accessories',
                  'occlusions',
                  'features',
                ],
                title: 'FaceItem',
                type: 'object',
                properties: {
                  confidence: { title: 'Confidence', type: 'integer' },
                  landmarks: {
                    title: 'FaceLandmarks',
                    type: 'object',
                    properties: {
                      left_eye: {
                        title: 'Left Eye',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_top: {
                        title: 'Left Eye Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_right: {
                        title: 'Left Eye Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_bottom: {
                        title: 'Left Eye Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eye_left: {
                        title: 'Left Eye Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye: {
                        title: 'Right Eye',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_top: {
                        title: 'Right Eye Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_right: {
                        title: 'Right Eye Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_bottom: {
                        title: 'Right Eye Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eye_left: {
                        title: 'Right Eye Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eyebrow_left: {
                        title: 'Left Eyebrow Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eyebrow_right: {
                        title: 'Left Eyebrow Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_eyebrow_top: {
                        title: 'Left Eyebrow Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eyebrow_left: {
                        title: 'Right Eyebrow Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eyebrow_right: {
                        title: 'Right Eyebrow Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_pupil: {
                        title: 'Left Pupil',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_pupil: {
                        title: 'Right Pupil',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_tip: {
                        title: 'Nose Tip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_bottom_right: {
                        title: 'Nose Bottom Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_bottom_left: {
                        title: 'Nose Bottom Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_left: {
                        title: 'Mouth Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_right: {
                        title: 'Mouth Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_eyebrow_top: {
                        title: 'Right Eyebrow Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      midpoint_between_eyes: {
                        title: 'Midpoint Between Eyes',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_bottom_center: {
                        title: 'Nose Bottom Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_left_alar_out_tip: {
                        title: 'Nose Left Alar Out Tip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_left_alar_top: {
                        title: 'Nose Left Alar Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_right_alar_out_tip: {
                        title: 'Nose Right Alar Out Tip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_right_alar_top: {
                        title: 'Nose Right Alar Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_root_left: {
                        title: 'Nose Root Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      nose_root_right: {
                        title: 'Nose Root Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_lip: {
                        title: 'Upper Lip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      under_lip: {
                        title: 'Under Lip',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      under_lip_bottom: {
                        title: 'Under Lip Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      under_lip_top: {
                        title: 'Under Lip Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_lip_bottom: {
                        title: 'Upper Lip Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_lip_top: {
                        title: 'Upper Lip Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_center: {
                        title: 'Mouth Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_top: {
                        title: 'Mouth Top',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mouth_bottom: {
                        title: 'Mouth Bottom',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_ear_tragion: {
                        title: 'Left Ear Tragion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_ear_tragion: {
                        title: 'Right Ear Tragion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      forehead_glabella: {
                        title: 'Forehead Glabella',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      chin_gnathion: {
                        title: 'Chin Gnathion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      chin_left_gonion: {
                        title: 'Chin Left Gonion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      chin_right_gonion: {
                        title: 'Chin Right Gonion',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_jawline_left: {
                        title: 'Upper Jawline Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mid_jawline_left: {
                        title: 'Mid Jawline Left',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      mid_jawline_right: {
                        title: 'Mid Jawline Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      upper_jawline_right: {
                        title: 'Upper Jawline Right',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      left_cheek_center: {
                        title: 'Left Cheek Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                      right_cheek_center: {
                        title: 'Right Cheek Center',
                        type: 'array',
                        items: { type: 'integer' },
                      },
                    },
                  },
                  emotions: {
                    required: [
                      'joy',
                      'sorrow',
                      'anger',
                      'surprise',
                      'disgust',
                      'fear',
                      'confusion',
                      'calm',
                      'unknown',
                      'neutral',
                      'contempt',
                    ],
                    title: 'FaceEmotions',
                    type: 'object',
                    properties: {
                      joy: { title: 'Joy', type: 'integer' },
                      sorrow: { title: 'Sorrow', type: 'integer' },
                      anger: { title: 'Anger', type: 'integer' },
                      surprise: { title: 'Surprise', type: 'integer' },
                      disgust: { title: 'Disgust', type: 'integer' },
                      fear: { title: 'Fear', type: 'integer' },
                      confusion: { title: 'Confusion', type: 'integer' },
                      calm: { title: 'Calm', type: 'integer' },
                      unknown: { title: 'Unknown', type: 'integer' },
                      neutral: { title: 'Neutral', type: 'integer' },
                      contempt: { title: 'Contempt', type: 'integer' },
                    },
                  },
                  poses: {
                    required: ['pitch', 'roll', 'yaw'],
                    title: 'FacePoses',
                    type: 'object',
                    properties: {
                      pitch: { title: 'Pitch', type: 'integer' },
                      roll: { title: 'Roll', type: 'integer' },
                      yaw: { title: 'Yaw', type: 'integer' },
                    },
                  },
                  age: { title: 'Age', type: 'integer' },
                  gender: { title: 'Gender', type: 'string' },
                  bounding_box: {
                    required: ['x_min', 'x_max', 'y_min', 'y_max'],
                    title: 'FaceBoundingBox',
                    type: 'object',
                    properties: {
                      x_min: { title: 'X Min', type: 'integer' },
                      x_max: { title: 'X Max', type: 'integer' },
                      y_min: { title: 'Y Min', type: 'integer' },
                      y_max: { title: 'Y Max', type: 'integer' },
                    },
                  },
                  hair: {
                    required: ['bald', 'invisible'],
                    title: 'FaceHair',
                    type: 'object',
                    properties: {
                      hair_color: {
                        title: 'Hair Color',
                        type: 'array',
                        items: {
                          required: ['color', 'confidence'],
                          title: 'FaceHairColor',
                          type: 'object',
                          properties: {
                            color: { title: 'Color', type: 'string' },
                            confidence: {
                              title: 'Confidence',
                              type: 'integer',
                            },
                          },
                        },
                      },
                      bald: { title: 'Bald', type: 'integer' },
                      invisible: { title: 'Invisible', type: 'boolean' },
                    },
                  },
                  facial_hair: {
                    required: ['moustache', 'beard', 'sideburns'],
                    title: 'FaceFacialHair',
                    type: 'object',
                    properties: {
                      moustache: { title: 'Moustache', type: 'integer' },
                      beard: { title: 'Beard', type: 'integer' },
                      sideburns: { title: 'Sideburns', type: 'integer' },
                    },
                  },
                  quality: {
                    required: [
                      'noise',
                      'exposure',
                      'blur',
                      'brightness',
                      'sharpness',
                    ],
                    title: 'FaceQuality',
                    type: 'object',
                    properties: {
                      noise: { title: 'Noise', type: 'integer' },
                      exposure: { title: 'Exposure', type: 'integer' },
                      blur: { title: 'Blur', type: 'integer' },
                      brightness: { title: 'Brightness', type: 'integer' },
                      sharpness: { title: 'Sharpness', type: 'integer' },
                    },
                  },
                  makeup: {
                    required: ['eye_make', 'lip_make'],
                    title: 'FaceMakeup',
                    type: 'object',
                    properties: {
                      eye_make: { title: 'Eye Make', type: 'boolean' },
                      lip_make: { title: 'Lip Make', type: 'boolean' },
                    },
                  },
                  accessories: {
                    required: [
                      'sunglasses',
                      'reading_glasses',
                      'swimming_goggles',
                      'face_mask',
                      'eyeglasses',
                      'headwear',
                    ],
                    title: 'FaceAccessories',
                    type: 'object',
                    properties: {
                      sunglasses: { title: 'Sunglasses', type: 'integer' },
                      reading_glasses: {
                        title: 'Reading Glasses',
                        type: 'integer',
                      },
                      swimming_goggles: {
                        title: 'Swimming Goggles',
                        type: 'integer',
                      },
                      face_mask: { title: 'Face Mask', type: 'integer' },
                      eyeglasses: { title: 'Eyeglasses', type: 'integer' },
                      headwear: { title: 'Headwear', type: 'integer' },
                    },
                  },
                  occlusions: {
                    required: [
                      'eye_occluded',
                      'forehead_occluded',
                      'mouth_occluded',
                    ],
                    title: 'FaceOcclusions',
                    type: 'object',
                    properties: {
                      eye_occluded: { title: 'Eye Occluded', type: 'boolean' },
                      forehead_occluded: {
                        title: 'Forehead Occluded',
                        type: 'boolean',
                      },
                      mouth_occluded: {
                        title: 'Mouth Occluded',
                        type: 'boolean',
                      },
                    },
                  },
                  features: {
                    required: ['eyes_open', 'smile', 'mouth_open'],
                    title: 'FaceFeatures',
                    type: 'object',
                    properties: {
                      eyes_open: { title: 'Eyes Open', type: 'integer' },
                      smile: { title: 'Smile', type: 'integer' },
                      mouth_open: { title: 'Mouth Open', type: 'integer' },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'imageface_detectionResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const ImageFaceRecognitionAddFaceCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['amazon,amazon,amazon,amazon,facepp,facepp,facepp,facepp'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      file: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
        pattern: '(?:jpg|jpeg|png|bmp)$',
      },
      file_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.jpg'],
      },
    },
    required: ['providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        facepp: {
          required: ['face_ids', 'status'],
          title: 'imageface_recognitionFaceRecognitionAddFaceDataClass',
          type: 'object',
          properties: {
            face_ids: {
              title: 'Face Ids',
              type: 'array',
              items: { type: 'string' },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        microsoft: {
          required: ['face_ids', 'status'],
          title: 'imageface_recognitionFaceRecognitionAddFaceDataClass',
          type: 'object',
          properties: {
            face_ids: {
              title: 'Face Ids',
              type: 'array',
              items: { type: 'string' },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        amazon: {
          required: ['face_ids', 'status'],
          title: 'imageface_recognitionFaceRecognitionAddFaceDataClass',
          type: 'object',
          properties: {
            face_ids: {
              title: 'Face Ids',
              type: 'array',
              items: { type: 'string' },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'imageface_recognitionResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const ImageFaceRecognitionDeleteFaceCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['amazon,amazon,amazon,amazon,facepp,facepp,facepp,facepp'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      face_id: {
        type: 'string',
        minLength: 1,
        description: 'ID of face to delete',
        examples: ['4f86986c-72ef-4737-963e-b3df9c32e909'],
      },
    },
    required: ['face_id', 'providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        facepp: {
          required: ['face_ids', 'status'],
          title: 'imageface_recognitionFaceRecognitionAddFaceDataClass',
          type: 'object',
          properties: {
            face_ids: {
              title: 'Face Ids',
              type: 'array',
              items: { type: 'string' },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        microsoft: {
          required: ['face_ids', 'status'],
          title: 'imageface_recognitionFaceRecognitionAddFaceDataClass',
          type: 'object',
          properties: {
            face_ids: {
              title: 'Face Ids',
              type: 'array',
              items: { type: 'string' },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        amazon: {
          required: ['face_ids', 'status'],
          title: 'imageface_recognitionFaceRecognitionAddFaceDataClass',
          type: 'object',
          properties: {
            face_ids: {
              title: 'Face Ids',
              type: 'array',
              items: { type: 'string' },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'imageface_recognitionResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const ImageFaceRecognitionListFacesRetrieve = {
  metadata: {
    allOf: [
      {
        type: 'object',
        properties: {
          attributes_as_list: {
            type: 'boolean',
            default: false,
            $schema: 'http://json-schema.org/draft-04/schema#',
            description:
              "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
          },
          fallback_providers: {
            type: 'string',
            minLength: 1,
            $schema: 'http://json-schema.org/draft-04/schema#',
            description:
              "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
          },
          providers: {
            type: 'string',
            minLength: 1,
            $schema: 'http://json-schema.org/draft-04/schema#',
            description:
              "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
          },
          response_as_dict: {
            type: 'boolean',
            default: true,
            $schema: 'http://json-schema.org/draft-04/schema#',
            description:
              "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
          },
          show_original_response: {
            type: 'boolean',
            default: false,
            $schema: 'http://json-schema.org/draft-04/schema#',
            description:
              'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
          },
        },
        required: ['providers'],
      },
    ],
  },
  response: {
    '200': {
      properties: {
        facepp: {
          required: ['face_ids', 'status'],
          title: 'imageface_recognitionFaceRecognitionAddFaceDataClass',
          type: 'object',
          properties: {
            face_ids: {
              title: 'Face Ids',
              type: 'array',
              items: { type: 'string' },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        microsoft: {
          required: ['face_ids', 'status'],
          title: 'imageface_recognitionFaceRecognitionAddFaceDataClass',
          type: 'object',
          properties: {
            face_ids: {
              title: 'Face Ids',
              type: 'array',
              items: { type: 'string' },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        amazon: {
          required: ['face_ids', 'status'],
          title: 'imageface_recognitionFaceRecognitionAddFaceDataClass',
          type: 'object',
          properties: {
            face_ids: {
              title: 'Face Ids',
              type: 'array',
              items: { type: 'string' },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'imageface_recognitionResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const ImageFaceRecognitionRecognizeCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['amazon,amazon,amazon,amazon,facepp,facepp,facepp,facepp'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      file: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
        pattern: '(?:jpg|jpeg|png|bmp)$',
      },
      file_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.jpg'],
      },
    },
    required: ['providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        facepp: {
          required: ['face_ids', 'status'],
          title: 'imageface_recognitionFaceRecognitionAddFaceDataClass',
          type: 'object',
          properties: {
            face_ids: {
              title: 'Face Ids',
              type: 'array',
              items: { type: 'string' },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        microsoft: {
          required: ['face_ids', 'status'],
          title: 'imageface_recognitionFaceRecognitionAddFaceDataClass',
          type: 'object',
          properties: {
            face_ids: {
              title: 'Face Ids',
              type: 'array',
              items: { type: 'string' },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        amazon: {
          required: ['face_ids', 'status'],
          title: 'imageface_recognitionFaceRecognitionAddFaceDataClass',
          type: 'object',
          properties: {
            face_ids: {
              title: 'Face Ids',
              type: 'array',
              items: { type: 'string' },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'imageface_recognitionResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const ImageGenerationCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['openai,deepai,stabilityai'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      text: {
        type: 'string',
        minLength: 1,
        description:
          'Description of the desired image(s). The maximum length is 1000 characters',
        maxLength: 1000,
        examples: ['A huge red ballon flying outside the city.'],
      },
      resolution: {
        enum: ['256x256', '512x512', '1024x1024'],
        type: 'string',
        description:
          '* `256x256` - 256x256\n* `512x512` - 512x512\n* `1024x1024` - 1024x1024',
        examples: ['512x512'],
      },
      num_images: {
        type: 'integer',
        maximum: 10,
        minimum: 1,
        default: 1,
        description:
          'The number of images to generate. Must be between 1 and 10.',
        examples: [2],
      },
    },
    required: ['providers', 'resolution', 'text'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        stabilityai: {
          required: ['status'],
          title: 'imagegenerationGenerationDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['image', 'image_resource_url'],
                title: 'GeneratedImageDataClass',
                type: 'object',
                properties: {
                  image: { title: 'Image', type: 'string' },
                  image_resource_url: {
                    title: 'Image Resource Url',
                    type: 'string',
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        deepai: {
          required: ['status'],
          title: 'imagegenerationGenerationDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['image', 'image_resource_url'],
                title: 'GeneratedImageDataClass',
                type: 'object',
                properties: {
                  image: { title: 'Image', type: 'string' },
                  image_resource_url: {
                    title: 'Image Resource Url',
                    type: 'string',
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        openai: {
          required: ['status'],
          title: 'imagegenerationGenerationDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['image', 'image_resource_url'],
                title: 'GeneratedImageDataClass',
                type: 'object',
                properties: {
                  image: { title: 'Image', type: 'string' },
                  image_resource_url: {
                    title: 'Image Resource Url',
                    type: 'string',
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'imagegenerationResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const ImageLandmarkDetectionCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['google,microsoft'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      file: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
        pattern: '(?:jpg|jpeg|png|tiff)$',
      },
      file_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.jpg'],
      },
    },
    required: ['providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        google: {
          required: ['status'],
          title: 'imagelandmark_detectionLandmarkDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['description', 'confidence'],
                title: 'LandmarkItem',
                type: 'object',
                properties: {
                  description: { title: 'Description', type: 'string' },
                  confidence: { title: 'Confidence', type: 'integer' },
                  bounding_box: {
                    title: 'Bounding Box',
                    type: 'array',
                    items: {
                      required: ['x', 'y'],
                      title: 'LandmarkVertice',
                      type: 'object',
                      properties: {
                        x: { title: 'X', type: 'integer' },
                        y: { title: 'Y', type: 'integer' },
                      },
                    },
                  },
                  locations: {
                    title: 'Locations',
                    type: 'array',
                    items: {
                      required: ['lat_lng'],
                      title: 'LandmarkLocation',
                      type: 'object',
                      properties: {
                        lat_lng: {
                          required: ['latitude', 'longitude'],
                          title: 'LandmarkLatLng',
                          type: 'object',
                          properties: {
                            latitude: { title: 'Latitude', type: 'integer' },
                            longitude: { title: 'Longitude', type: 'integer' },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        microsoft: {
          required: ['status'],
          title: 'imagelandmark_detectionLandmarkDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['description', 'confidence'],
                title: 'LandmarkItem',
                type: 'object',
                properties: {
                  description: { title: 'Description', type: 'string' },
                  confidence: { title: 'Confidence', type: 'integer' },
                  bounding_box: {
                    title: 'Bounding Box',
                    type: 'array',
                    items: {
                      required: ['x', 'y'],
                      title: 'LandmarkVertice',
                      type: 'object',
                      properties: {
                        x: { title: 'X', type: 'integer' },
                        y: { title: 'Y', type: 'integer' },
                      },
                    },
                  },
                  locations: {
                    title: 'Locations',
                    type: 'array',
                    items: {
                      required: ['lat_lng'],
                      title: 'LandmarkLocation',
                      type: 'object',
                      properties: {
                        lat_lng: {
                          required: ['latitude', 'longitude'],
                          title: 'LandmarkLatLng',
                          type: 'object',
                          properties: {
                            latitude: { title: 'Latitude', type: 'integer' },
                            longitude: { title: 'Longitude', type: 'integer' },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'imagelandmark_detectionResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const ImageLogoDetectionCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['google,microsoft,clarifai,smartclick,api4ai'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      file: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
        pattern: '(?:jpg|jpeg|png|tiff)$',
      },
      file_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.jpg'],
      },
    },
    required: ['providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        clarifai: {
          required: ['status'],
          title: 'imagelogo_detectionLogoDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['bounding_poly', 'description', 'score'],
                title: 'LogoItem',
                type: 'object',
                properties: {
                  bounding_poly: {
                    required: ['vertices'],
                    title: 'LogoBoundingPoly',
                    type: 'object',
                    properties: {
                      vertices: {
                        title: 'Vertices',
                        type: 'array',
                        items: {
                          required: ['x', 'y'],
                          title: 'LogoVertice',
                          type: 'object',
                          properties: {
                            x: { title: 'X', type: 'integer' },
                            y: { title: 'Y', type: 'integer' },
                          },
                        },
                      },
                    },
                  },
                  description: { title: 'Description', type: 'string' },
                  score: { title: 'Score', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        smartclick: {
          required: ['status'],
          title: 'imagelogo_detectionLogoDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['bounding_poly', 'description', 'score'],
                title: 'LogoItem',
                type: 'object',
                properties: {
                  bounding_poly: {
                    required: ['vertices'],
                    title: 'LogoBoundingPoly',
                    type: 'object',
                    properties: {
                      vertices: {
                        title: 'Vertices',
                        type: 'array',
                        items: {
                          required: ['x', 'y'],
                          title: 'LogoVertice',
                          type: 'object',
                          properties: {
                            x: { title: 'X', type: 'integer' },
                            y: { title: 'Y', type: 'integer' },
                          },
                        },
                      },
                    },
                  },
                  description: { title: 'Description', type: 'string' },
                  score: { title: 'Score', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        microsoft: {
          required: ['status'],
          title: 'imagelogo_detectionLogoDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['bounding_poly', 'description', 'score'],
                title: 'LogoItem',
                type: 'object',
                properties: {
                  bounding_poly: {
                    required: ['vertices'],
                    title: 'LogoBoundingPoly',
                    type: 'object',
                    properties: {
                      vertices: {
                        title: 'Vertices',
                        type: 'array',
                        items: {
                          required: ['x', 'y'],
                          title: 'LogoVertice',
                          type: 'object',
                          properties: {
                            x: { title: 'X', type: 'integer' },
                            y: { title: 'Y', type: 'integer' },
                          },
                        },
                      },
                    },
                  },
                  description: { title: 'Description', type: 'string' },
                  score: { title: 'Score', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        api4ai: {
          required: ['status'],
          title: 'imagelogo_detectionLogoDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['bounding_poly', 'description', 'score'],
                title: 'LogoItem',
                type: 'object',
                properties: {
                  bounding_poly: {
                    required: ['vertices'],
                    title: 'LogoBoundingPoly',
                    type: 'object',
                    properties: {
                      vertices: {
                        title: 'Vertices',
                        type: 'array',
                        items: {
                          required: ['x', 'y'],
                          title: 'LogoVertice',
                          type: 'object',
                          properties: {
                            x: { title: 'X', type: 'integer' },
                            y: { title: 'Y', type: 'integer' },
                          },
                        },
                      },
                    },
                  },
                  description: { title: 'Description', type: 'string' },
                  score: { title: 'Score', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        google: {
          required: ['status'],
          title: 'imagelogo_detectionLogoDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['bounding_poly', 'description', 'score'],
                title: 'LogoItem',
                type: 'object',
                properties: {
                  bounding_poly: {
                    required: ['vertices'],
                    title: 'LogoBoundingPoly',
                    type: 'object',
                    properties: {
                      vertices: {
                        title: 'Vertices',
                        type: 'array',
                        items: {
                          required: ['x', 'y'],
                          title: 'LogoVertice',
                          type: 'object',
                          properties: {
                            x: { title: 'X', type: 'integer' },
                            y: { title: 'Y', type: 'integer' },
                          },
                        },
                      },
                    },
                  },
                  description: { title: 'Description', type: 'string' },
                  score: { title: 'Score', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'imagelogo_detectionResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const ImageObjectDetectionCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['api4ai,clarifai,amazon,google,microsoft,sentisight'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      settings: {
        type: ['object', 'null'],
        additionalProperties: {
          type: 'string',
          minLength: 1,
          description: 'The model id/name specified for the provider',
          maxLength: 50,
        },
        description:
          "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {'google' : 'google_model', ibm': 'ibm_model'...}.\n                     **Caution**: setting models can be done only with `Content-Type` : `application/json`.\n                     ",
      },
      file: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
        pattern: '(?:jpg|jpeg|png|tiff)$',
      },
      file_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.png'],
      },
    },
    required: ['providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        clarifai: {
          required: ['status'],
          title: 'imageobject_detectionObjectDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: [
                  'label',
                  'confidence',
                  'x_min',
                  'x_max',
                  'y_min',
                  'y_max',
                ],
                title: 'ObjectItem',
                type: 'object',
                properties: {
                  label: { title: 'Label', type: 'string' },
                  confidence: { title: 'Confidence', type: 'integer' },
                  x_min: { title: 'X Min', type: 'integer' },
                  x_max: { title: 'X Max', type: 'integer' },
                  y_min: { title: 'Y Min', type: 'integer' },
                  y_max: { title: 'Y Max', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        microsoft: {
          required: ['status'],
          title: 'imageobject_detectionObjectDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: [
                  'label',
                  'confidence',
                  'x_min',
                  'x_max',
                  'y_min',
                  'y_max',
                ],
                title: 'ObjectItem',
                type: 'object',
                properties: {
                  label: { title: 'Label', type: 'string' },
                  confidence: { title: 'Confidence', type: 'integer' },
                  x_min: { title: 'X Min', type: 'integer' },
                  x_max: { title: 'X Max', type: 'integer' },
                  y_min: { title: 'Y Min', type: 'integer' },
                  y_max: { title: 'Y Max', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        api4ai: {
          required: ['status'],
          title: 'imageobject_detectionObjectDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: [
                  'label',
                  'confidence',
                  'x_min',
                  'x_max',
                  'y_min',
                  'y_max',
                ],
                title: 'ObjectItem',
                type: 'object',
                properties: {
                  label: { title: 'Label', type: 'string' },
                  confidence: { title: 'Confidence', type: 'integer' },
                  x_min: { title: 'X Min', type: 'integer' },
                  x_max: { title: 'X Max', type: 'integer' },
                  y_min: { title: 'Y Min', type: 'integer' },
                  y_max: { title: 'Y Max', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        google: {
          required: ['status'],
          title: 'imageobject_detectionObjectDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: [
                  'label',
                  'confidence',
                  'x_min',
                  'x_max',
                  'y_min',
                  'y_max',
                ],
                title: 'ObjectItem',
                type: 'object',
                properties: {
                  label: { title: 'Label', type: 'string' },
                  confidence: { title: 'Confidence', type: 'integer' },
                  x_min: { title: 'X Min', type: 'integer' },
                  x_max: { title: 'X Max', type: 'integer' },
                  y_min: { title: 'Y Min', type: 'integer' },
                  y_max: { title: 'Y Max', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        sentisight: {
          required: ['status'],
          title: 'imageobject_detectionObjectDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: [
                  'label',
                  'confidence',
                  'x_min',
                  'x_max',
                  'y_min',
                  'y_max',
                ],
                title: 'ObjectItem',
                type: 'object',
                properties: {
                  label: { title: 'Label', type: 'string' },
                  confidence: { title: 'Confidence', type: 'integer' },
                  x_min: { title: 'X Min', type: 'integer' },
                  x_max: { title: 'X Max', type: 'integer' },
                  y_min: { title: 'Y Min', type: 'integer' },
                  y_max: { title: 'Y Max', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        amazon: {
          required: ['status'],
          title: 'imageobject_detectionObjectDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: [
                  'label',
                  'confidence',
                  'x_min',
                  'x_max',
                  'y_min',
                  'y_max',
                ],
                title: 'ObjectItem',
                type: 'object',
                properties: {
                  label: { title: 'Label', type: 'string' },
                  confidence: { title: 'Confidence', type: 'integer' },
                  x_min: { title: 'X Min', type: 'integer' },
                  x_max: { title: 'X Max', type: 'integer' },
                  y_min: { title: 'Y Min', type: 'integer' },
                  y_max: { title: 'Y Max', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        'eden-ai': {
          required: ['status'],
          title: 'imageobject_detectionObjectDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: [
                  'label',
                  'confidence',
                  'x_min',
                  'x_max',
                  'y_min',
                  'y_max',
                ],
                title: 'ObjectItem',
                type: 'object',
                properties: {
                  label: { title: 'Label', type: 'string' },
                  confidence: { title: 'Confidence', type: 'integer' },
                  x_min: { title: 'X Min', type: 'integer' },
                  x_max: { title: 'X Max', type: 'integer' },
                  y_min: { title: 'Y Min', type: 'integer' },
                  y_max: { title: 'Y Max', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'imageobject_detectionResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const ImageSearchDeleteImageCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['sentisight,sentisight,sentisight,sentisight,sentisight'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      image_name: { type: 'string', minLength: 1, examples: ['test.jpg'] },
    },
    required: ['image_name', 'providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        sentisight: {
          required: ['status'],
          title: 'imagesearchSearchDeleteImageDataClass',
          type: 'object',
          properties: {
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
          },
        },
      },
      title: 'imagesearchResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const ImageSearchGetImageRetrieve = {
  metadata: {
    allOf: [
      {
        type: 'object',
        properties: {
          attributes_as_list: {
            type: 'boolean',
            default: false,
            $schema: 'http://json-schema.org/draft-04/schema#',
            description:
              "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
          },
          fallback_providers: {
            type: 'string',
            minLength: 1,
            $schema: 'http://json-schema.org/draft-04/schema#',
            description:
              "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
          },
          image_name: {
            type: 'string',
            minLength: 1,
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
          providers: {
            type: 'string',
            minLength: 1,
            $schema: 'http://json-schema.org/draft-04/schema#',
            description:
              "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
          },
          response_as_dict: {
            type: 'boolean',
            default: true,
            $schema: 'http://json-schema.org/draft-04/schema#',
            description:
              "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
          },
          show_original_response: {
            type: 'boolean',
            default: false,
            $schema: 'http://json-schema.org/draft-04/schema#',
            description:
              'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
          },
        },
        required: ['image_name', 'providers'],
      },
    ],
  },
  response: {
    '200': {
      properties: {
        sentisight: {
          required: ['status'],
          title: 'imagesearchSearchDeleteImageDataClass',
          type: 'object',
          properties: {
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
          },
        },
      },
      title: 'imagesearchResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const ImageSearchGetImagesRetrieve = {
  metadata: {
    allOf: [
      {
        type: 'object',
        properties: {
          attributes_as_list: {
            type: 'boolean',
            default: false,
            $schema: 'http://json-schema.org/draft-04/schema#',
            description:
              "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
          },
          fallback_providers: {
            type: 'string',
            minLength: 1,
            $schema: 'http://json-schema.org/draft-04/schema#',
            description:
              "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
          },
          providers: {
            type: 'string',
            minLength: 1,
            $schema: 'http://json-schema.org/draft-04/schema#',
            description:
              "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
          },
          response_as_dict: {
            type: 'boolean',
            default: true,
            $schema: 'http://json-schema.org/draft-04/schema#',
            description:
              "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
          },
          show_original_response: {
            type: 'boolean',
            default: false,
            $schema: 'http://json-schema.org/draft-04/schema#',
            description:
              'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
          },
        },
        required: ['providers'],
      },
    ],
  },
  response: {
    '200': {
      properties: {
        sentisight: {
          required: ['status'],
          title: 'imagesearchSearchDeleteImageDataClass',
          type: 'object',
          properties: {
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
          },
        },
      },
      title: 'imagesearchResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const ImageSearchLaunchSimilarityCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['sentisight,sentisight,sentisight,sentisight,sentisight'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      file: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
        pattern: '(?:jpg|jpeg|png|tiff)$',
      },
      file_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.jpg'],
      },
    },
    required: ['providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        sentisight: {
          required: ['status'],
          title: 'imagesearchSearchDeleteImageDataClass',
          type: 'object',
          properties: {
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
          },
        },
      },
      title: 'imagesearchResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const ImageSearchUploadImageCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['sentisight,sentisight,sentisight,sentisight,sentisight'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      file: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
        pattern: '(?:jpg|jpeg|png|tiff)$',
      },
      file_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.jpg'],
      },
      image_name: { type: 'string', minLength: 1, examples: ['test.jpg'] },
    },
    required: ['image_name', 'providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        sentisight: {
          required: ['status'],
          title: 'imagesearchSearchDeleteImageDataClass',
          type: 'object',
          properties: {
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
          },
        },
      },
      title: 'imagesearchResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const InfoProviderSubfeaturesList = {
  metadata: {
    allOf: [
      {
        type: 'object',
        properties: {
          feature__name: {
            type: 'string',
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
          gender: {
            type: 'string',
            $schema: 'http://json-schema.org/draft-04/schema#',
            description:
              "Accepts two values: either 'male' or 'female'. Used to                              filter models voices for the text_to_speech subfeature",
          },
          is_working: {
            type: 'boolean',
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
          language: {
            type: 'string',
            $schema: 'http://json-schema.org/draft-04/schema#',
            description: 'languages [icontains]',
          },
          phase__name: {
            type: 'string',
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
          provider__name: {
            type: 'string',
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
          subfeature__name: {
            type: 'string',
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
        },
        required: [],
      },
    ],
  },
  response: {
    '200': {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          name: { type: 'string', readOnly: true },
          version: { type: 'string', readOnly: true },
          pricings: {
            type: 'array',
            items: {
              type: 'object',
              properties: {
                model_name: {
                  type: 'string',
                  description:
                    "Model name, default to 'default' if no models to chose from",
                  maxLength: 255,
                },
                price: {
                  type: 'string',
                  format: 'decimal',
                  pattern: '^-?\\d{0,6}(?:\\.\\d{0,9})?$',
                },
                price_unit_quantity: {
                  type: 'integer',
                  maximum: 2147483647,
                  minimum: 0,
                },
                min_price_quantity: {
                  type: ['integer', 'null'],
                  maximum: 2147483647,
                  minimum: 0,
                },
                price_unit_type: {
                  enum: [
                    'file',
                    'image',
                    'page',
                    'size',
                    'request',
                    'seconde',
                    'minute',
                    'free',
                    'hour',
                    'char',
                    'token',
                    'exec_time',
                    'unknown',
                  ],
                  type: 'string',
                  description:
                    '* `file` - File\n* `image` - Image\n* `page` - Page\n* `size` - Size\n* `request` - Request\n* `seconde` - Second\n* `minute` - Minute\n* `free` - Free\n* `hour` - Hour\n* `char` - Characters\n* `token` - Token\n* `exec_time` - Execution Time\n* `unknown` - Unknown\n\n`file` `image` `page` `size` `request` `seconde` `minute` `free` `hour` `char` `token` `exec_time` `unknown`',
                },
                detail_type: {
                  nullable: true,
                  description:
                    '(Optional) type of extra value, MUST be the same name as the feature parameter name. eg: resolution\n\n* `resolution` - Resolution',
                  oneOf: [
                    {
                      enum: ['resolution'],
                      type: 'string',
                      description:
                        '* `resolution` - Resolution\n\n`resolution`',
                    },
                    { enum: [''] },
                    { enum: [null] },
                  ],
                },
                detail_value: {
                  type: ['string', 'null'],
                  description:
                    '(Optional) extra value for detailed pricing, eg: 250x250 for resolution',
                  maxLength: 255,
                },
                get_detail_type_display: { type: 'string', readOnly: true },
                is_post_call: { type: 'boolean' },
              },
              required: ['get_detail_type_display'],
            },
          },
          is_working: { type: 'boolean' },
          description_title: { type: ['string', 'null'], maxLength: 100 },
          description_content: { type: ['string', 'null'], maxLength: 1000 },
          provider: {
            type: 'object',
            properties: {
              name: { type: 'string', maxLength: 255 },
              fullname: { type: ['string', 'null'], maxLength: 255 },
              description: { type: ['string', 'null'], maxLength: 1000 },
            },
            required: ['name'],
          },
          feature: {
            type: 'object',
            properties: {
              name: { type: 'string', maxLength: 255 },
              fullname: { type: ['string', 'null'], maxLength: 255 },
              description: { type: ['string', 'null'], maxLength: 1000 },
            },
            required: ['name'],
          },
          subfeature: {
            type: 'object',
            properties: {
              name: { type: 'string', maxLength: 255 },
              fullname: { type: ['string', 'null'], maxLength: 255 },
              description: { type: ['string', 'null'], maxLength: 1000 },
            },
            required: ['name'],
          },
          constraints: {
            type: 'object',
            additionalProperties: true,
            readOnly: true,
          },
          models: {
            type: 'object',
            additionalProperties: true,
            readOnly: true,
          },
          languages: {
            type: 'array',
            items: {
              type: 'object',
              properties: {
                language_name: { type: 'string' },
                language_code: { type: 'string' },
              },
            },
            readOnly: true,
          },
          phase: { type: 'string', readOnly: true },
        },
        required: [
          'constraints',
          'feature',
          'languages',
          'models',
          'name',
          'phase',
          'pricings',
          'provider',
          'subfeature',
          'version',
        ],
      },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const OcrBankCheckParsingCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['veryfi,base64'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      file: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
      },
      file_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.jpg'],
      },
    },
    required: ['providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        veryfi: {
          required: ['status'],
          title: 'ocrbank_check_parsingBankCheckParsingDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              title: 'Extracted Data',
              type: 'array',
              items: {
                required: [
                  'amount',
                  'amount_text',
                  'bank_address',
                  'bank_name',
                  'date',
                  'memo',
                  'payer_address',
                  'payer_name',
                  'receiver_address',
                  'receiver_name',
                  'currency',
                  'micr',
                ],
                title: 'ItemBankCheckParsingDataClass',
                type: 'object',
                properties: {
                  amount: { title: 'Amount', type: 'integer' },
                  amount_text: { title: 'Amount Text', type: 'string' },
                  bank_address: { title: 'Bank Address', type: 'string' },
                  bank_name: { title: 'Bank Name', type: 'string' },
                  date: { title: 'Date', type: 'string' },
                  memo: { title: 'Memo', type: 'string' },
                  payer_address: { title: 'Payer Address', type: 'string' },
                  payer_name: { title: 'Payer Name', type: 'string' },
                  receiver_address: {
                    title: 'Receiver Address',
                    type: 'string',
                  },
                  receiver_name: { title: 'Receiver Name', type: 'string' },
                  currency: { title: 'Currency', type: 'string' },
                  micr: {
                    required: [
                      'raw',
                      'account_number',
                      'routing_number',
                      'serial_number',
                      'check_number',
                    ],
                    title: 'MicrModel',
                    type: 'object',
                    properties: {
                      raw: { title: 'Raw', type: 'string' },
                      account_number: {
                        title: 'Account Number',
                        type: 'string',
                      },
                      routing_number: {
                        title: 'Routing Number',
                        type: 'string',
                      },
                      serial_number: { title: 'Serial Number', type: 'string' },
                      check_number: { title: 'Check Number', type: 'string' },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        base64: {
          required: ['status'],
          title: 'ocrbank_check_parsingBankCheckParsingDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              title: 'Extracted Data',
              type: 'array',
              items: {
                required: [
                  'amount',
                  'amount_text',
                  'bank_address',
                  'bank_name',
                  'date',
                  'memo',
                  'payer_address',
                  'payer_name',
                  'receiver_address',
                  'receiver_name',
                  'currency',
                  'micr',
                ],
                title: 'ItemBankCheckParsingDataClass',
                type: 'object',
                properties: {
                  amount: { title: 'Amount', type: 'integer' },
                  amount_text: { title: 'Amount Text', type: 'string' },
                  bank_address: { title: 'Bank Address', type: 'string' },
                  bank_name: { title: 'Bank Name', type: 'string' },
                  date: { title: 'Date', type: 'string' },
                  memo: { title: 'Memo', type: 'string' },
                  payer_address: { title: 'Payer Address', type: 'string' },
                  payer_name: { title: 'Payer Name', type: 'string' },
                  receiver_address: {
                    title: 'Receiver Address',
                    type: 'string',
                  },
                  receiver_name: { title: 'Receiver Name', type: 'string' },
                  currency: { title: 'Currency', type: 'string' },
                  micr: {
                    required: [
                      'raw',
                      'account_number',
                      'routing_number',
                      'serial_number',
                      'check_number',
                    ],
                    title: 'MicrModel',
                    type: 'object',
                    properties: {
                      raw: { title: 'Raw', type: 'string' },
                      account_number: {
                        title: 'Account Number',
                        type: 'string',
                      },
                      routing_number: {
                        title: 'Routing Number',
                        type: 'string',
                      },
                      serial_number: { title: 'Serial Number', type: 'string' },
                      check_number: { title: 'Check Number', type: 'string' },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        'eden-ai': {
          required: ['status'],
          title: 'ocrbank_check_parsingBankCheckParsingDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              title: 'Extracted Data',
              type: 'array',
              items: {
                required: [
                  'amount',
                  'amount_text',
                  'bank_address',
                  'bank_name',
                  'date',
                  'memo',
                  'payer_address',
                  'payer_name',
                  'receiver_address',
                  'receiver_name',
                  'currency',
                  'micr',
                ],
                title: 'ItemBankCheckParsingDataClass',
                type: 'object',
                properties: {
                  amount: { title: 'Amount', type: 'integer' },
                  amount_text: { title: 'Amount Text', type: 'string' },
                  bank_address: { title: 'Bank Address', type: 'string' },
                  bank_name: { title: 'Bank Name', type: 'string' },
                  date: { title: 'Date', type: 'string' },
                  memo: { title: 'Memo', type: 'string' },
                  payer_address: { title: 'Payer Address', type: 'string' },
                  payer_name: { title: 'Payer Name', type: 'string' },
                  receiver_address: {
                    title: 'Receiver Address',
                    type: 'string',
                  },
                  receiver_name: { title: 'Receiver Name', type: 'string' },
                  currency: { title: 'Currency', type: 'string' },
                  micr: {
                    required: [
                      'raw',
                      'account_number',
                      'routing_number',
                      'serial_number',
                      'check_number',
                    ],
                    title: 'MicrModel',
                    type: 'object',
                    properties: {
                      raw: { title: 'Raw', type: 'string' },
                      account_number: {
                        title: 'Account Number',
                        type: 'string',
                      },
                      routing_number: {
                        title: 'Routing Number',
                        type: 'string',
                      },
                      serial_number: { title: 'Serial Number', type: 'string' },
                      check_number: { title: 'Check Number', type: 'string' },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'ocrbank_check_parsingResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const OcrCustomDocumentParsingAsyncCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['amazon'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      webhook_receiver: {
        type: 'string',
        format: 'uri',
        minLength: 1,
        description:
          'Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.',
      },
      users_webhook_parameters: {
        type: 'object',
        additionalProperties: true,
        description:
          "Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.",
      },
      file: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
      },
      file_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.pdf'],
      },
      queries: {
        type: 'string',
        minLength: 1,
        description:
          "Your queries need to be a list of dict containing the questions you want answered and the page to look for the information in :  '[{'query':'your query','pages':'your pages'},{'query':'your query','pages':'your pages'}]'",
        examples: [
          '[{"query" : "What is the person full-name","pages" : "1-*"},{"query" : "What is the first Adult Care experience?","pages" : "1"}]',
        ],
      },
    },
    required: ['providers', 'queries'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      type: 'object',
      properties: { public_id: { type: 'string', format: 'uuid' } },
      required: ['public_id'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const OcrCustomDocumentParsingAsyncRetrieve = {
  response: {
    '200': {
      type: 'object',
      properties: {
        jobs: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              providers: { type: 'string' },
              nb: { type: 'integer' },
              nb_ok: { type: 'integer' },
              public_id: { type: 'string', format: 'uuid' },
              state: {
                enum: ['finished', 'failed', 'Timeout error', 'processing'],
                type: 'string',
                description:
                  '* `finished` - finished\n* `failed` - failed\n* `Timeout error` - Timeout error\n* `processing` - processing\n\n`finished` `failed` `Timeout error` `processing`',
              },
              created_at: { type: 'string', format: 'date-time' },
            },
            required: [
              'created_at',
              'nb',
              'nb_ok',
              'providers',
              'public_id',
              'state',
            ],
          },
        },
      },
      required: ['jobs'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const OcrCustomDocumentParsingAsyncRetrieve2 = {
  metadata: {
    allOf: [
      {
        type: 'object',
        properties: {
          public_id: {
            type: 'string',
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
        },
        required: ['public_id'],
      },
      {
        type: 'object',
        properties: {
          response_as_dict: {
            type: 'boolean',
            default: true,
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
          show_original_response: {
            type: 'boolean',
            default: false,
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
        },
        required: [],
      },
    ],
  },
  response: {
    '200': {
      properties: {
        results: {
          properties: {
            amazon: {
              required: ['id', 'final_status'],
              title:
                'ocrcustom_document_parsing_asyncCustomDocumentParsingAsyncDataClass',
              type: 'object',
              properties: {
                items: {
                  title: 'Items',
                  type: 'array',
                  items: {
                    required: [
                      'confidence',
                      'value',
                      'query',
                      'bounding_box',
                      'page',
                    ],
                    title: 'CustomDocumentParsingAsyncItem',
                    type: 'object',
                    properties: {
                      confidence: { title: 'Confidence', type: 'integer' },
                      value: { title: 'Value', type: 'string' },
                      query: { title: 'Query', type: 'string' },
                      bounding_box: {
                        required: ['left', 'top', 'width', 'height'],
                        title: 'CustomDocumentParsingAsyncBoundingBox',
                        type: 'object',
                        properties: {
                          left: { title: 'Left', type: 'integer' },
                          top: { title: 'Top', type: 'integer' },
                          width: { title: 'Width', type: 'integer' },
                          height: { title: 'Height', type: 'integer' },
                        },
                      },
                      page: { title: 'Page', type: 'integer' },
                    },
                  },
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
          },
          title: 'ocrcustom_document_parsing_asyncModel',
          type: 'object',
        },
        error: { title: 'Error', type: 'string' },
        public_id: { format: 'uuid', title: 'Public Id', type: 'string' },
        status: { title: 'Status', type: 'string' },
      },
      required: ['results', 'error', 'public_id', 'status'],
      title: 'asyncocrcustom_document_parsing_asyncResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const OcrDataExtractionCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['base64,amazon'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      file: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
      },
      file_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.png'],
      },
    },
    required: ['providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        base64: {
          required: ['status'],
          title: 'ocrdata_extractionDataExtractionDataClass',
          type: 'object',
          properties: {
            fields: {
              title: 'Fields',
              type: 'array',
              items: {
                required: ['key', 'value', 'bounding_box', 'confidence_score'],
                title: 'ItemDataExtraction',
                type: 'object',
                properties: {
                  key: { title: 'Key', type: 'string' },
                  value: { title: 'Value' },
                  bounding_box: {
                    description:
                      'Bounding box of a word in the image\n\n    Attributes:\n        left (float): Left coordinate of the bounding box\n        top (float): Top coordinate of the bounding box\n        width (float): Width of the bounding box\n        height (float): Height of the bounding box\n        text (str): Text detected in the bounding box\n\n    Constructor:\n        from_json (classmethod): Create a new instance of BoundingBox from a JSON object\n        from_normalized_vertices (classmethod): Create a new instance of BoundingBox from normalized vertices\n        unknown (classmethod): Return a invalid bouding_box with all field filled with `-1`\n    ',
                    required: ['left', 'top', 'width', 'height'],
                    title: 'BoundingBox',
                    type: 'object',
                    properties: {
                      left: {
                        description: 'Left coordinate of the bounding box',
                        title: 'Left',
                        type: 'integer',
                      },
                      top: {
                        description: 'Top coordinate of the bounding box',
                        title: 'Top',
                        type: 'integer',
                      },
                      width: {
                        description: 'Width of the bounding box',
                        title: 'Width',
                        type: 'integer',
                      },
                      height: {
                        description: 'Height of the bounding box',
                        title: 'Height',
                        type: 'integer',
                      },
                    },
                  },
                  confidence_score: {
                    maximum: 1,
                    minimum: 0,
                    title: 'Confidence Score',
                    type: 'integer',
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        amazon: {
          required: ['status'],
          title: 'ocrdata_extractionDataExtractionDataClass',
          type: 'object',
          properties: {
            fields: {
              title: 'Fields',
              type: 'array',
              items: {
                required: ['key', 'value', 'bounding_box', 'confidence_score'],
                title: 'ItemDataExtraction',
                type: 'object',
                properties: {
                  key: { title: 'Key', type: 'string' },
                  value: { title: 'Value' },
                  bounding_box: {
                    description:
                      'Bounding box of a word in the image\n\n    Attributes:\n        left (float): Left coordinate of the bounding box\n        top (float): Top coordinate of the bounding box\n        width (float): Width of the bounding box\n        height (float): Height of the bounding box\n        text (str): Text detected in the bounding box\n\n    Constructor:\n        from_json (classmethod): Create a new instance of BoundingBox from a JSON object\n        from_normalized_vertices (classmethod): Create a new instance of BoundingBox from normalized vertices\n        unknown (classmethod): Return a invalid bouding_box with all field filled with `-1`\n    ',
                    required: ['left', 'top', 'width', 'height'],
                    title: 'BoundingBox',
                    type: 'object',
                    properties: {
                      left: {
                        description: 'Left coordinate of the bounding box',
                        title: 'Left',
                        type: 'integer',
                      },
                      top: {
                        description: 'Top coordinate of the bounding box',
                        title: 'Top',
                        type: 'integer',
                      },
                      width: {
                        description: 'Width of the bounding box',
                        title: 'Width',
                        type: 'integer',
                      },
                      height: {
                        description: 'Height of the bounding box',
                        title: 'Height',
                        type: 'integer',
                      },
                    },
                  },
                  confidence_score: {
                    maximum: 1,
                    minimum: 0,
                    title: 'Confidence Score',
                    type: 'integer',
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'ocrdata_extractionResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const OcrIdentityParserCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['klippa,amazon,base64,mindee,microsoft'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      file: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
      },
      file_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.pdf'],
      },
    },
    required: ['providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        mindee: {
          required: ['status'],
          title: 'ocridentity_parserIdentityParserDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              title: 'Extracted Data',
              type: 'array',
              items: {
                required: [
                  'last_name',
                  'birth_place',
                  'birth_date',
                  'issuance_date',
                  'expire_date',
                  'document_id',
                  'issuing_state',
                  'address',
                  'age',
                  'country',
                  'document_type',
                  'gender',
                  'mrz',
                  'nationality',
                ],
                title: 'InfosIdentityParserDataClass',
                type: 'object',
                properties: {
                  last_name: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  given_names: {
                    title: 'Given Names',
                    type: 'array',
                    items: {
                      title: 'ItemIdentityParserDataClass',
                      type: 'object',
                      properties: {
                        value: {
                          default: null,
                          title: 'Value',
                          type: 'string',
                        },
                        confidence: {
                          default: null,
                          title: 'Confidence',
                          type: 'integer',
                        },
                      },
                    },
                  },
                  birth_place: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  birth_date: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  issuance_date: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  expire_date: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  document_id: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  issuing_state: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  address: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  age: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  country: {
                    required: ['name', 'alpha2', 'alpha3', 'confidence'],
                    title: 'Country',
                    type: 'object',
                    properties: {
                      name: { title: 'Name', type: 'string' },
                      alpha2: { title: 'Alpha2', type: 'string' },
                      alpha3: { title: 'Alpha3', type: 'string' },
                      confidence: { title: 'Confidence', type: 'integer' },
                    },
                  },
                  document_type: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  gender: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  image_id: {
                    title: 'Image Id',
                    type: 'array',
                    items: {
                      title: 'ItemIdentityParserDataClass',
                      type: 'object',
                      properties: {
                        value: {
                          default: null,
                          title: 'Value',
                          type: 'string',
                        },
                        confidence: {
                          default: null,
                          title: 'Confidence',
                          type: 'integer',
                        },
                      },
                    },
                  },
                  image_signature: {
                    title: 'Image Signature',
                    type: 'array',
                    items: {
                      title: 'ItemIdentityParserDataClass',
                      type: 'object',
                      properties: {
                        value: {
                          default: null,
                          title: 'Value',
                          type: 'string',
                        },
                        confidence: {
                          default: null,
                          title: 'Confidence',
                          type: 'integer',
                        },
                      },
                    },
                  },
                  mrz: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  nationality: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        base64: {
          required: ['status'],
          title: 'ocridentity_parserIdentityParserDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              title: 'Extracted Data',
              type: 'array',
              items: {
                required: [
                  'last_name',
                  'birth_place',
                  'birth_date',
                  'issuance_date',
                  'expire_date',
                  'document_id',
                  'issuing_state',
                  'address',
                  'age',
                  'country',
                  'document_type',
                  'gender',
                  'mrz',
                  'nationality',
                ],
                title: 'InfosIdentityParserDataClass',
                type: 'object',
                properties: {
                  last_name: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  given_names: {
                    title: 'Given Names',
                    type: 'array',
                    items: {
                      title: 'ItemIdentityParserDataClass',
                      type: 'object',
                      properties: {
                        value: {
                          default: null,
                          title: 'Value',
                          type: 'string',
                        },
                        confidence: {
                          default: null,
                          title: 'Confidence',
                          type: 'integer',
                        },
                      },
                    },
                  },
                  birth_place: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  birth_date: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  issuance_date: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  expire_date: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  document_id: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  issuing_state: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  address: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  age: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  country: {
                    required: ['name', 'alpha2', 'alpha3', 'confidence'],
                    title: 'Country',
                    type: 'object',
                    properties: {
                      name: { title: 'Name', type: 'string' },
                      alpha2: { title: 'Alpha2', type: 'string' },
                      alpha3: { title: 'Alpha3', type: 'string' },
                      confidence: { title: 'Confidence', type: 'integer' },
                    },
                  },
                  document_type: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  gender: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  image_id: {
                    title: 'Image Id',
                    type: 'array',
                    items: {
                      title: 'ItemIdentityParserDataClass',
                      type: 'object',
                      properties: {
                        value: {
                          default: null,
                          title: 'Value',
                          type: 'string',
                        },
                        confidence: {
                          default: null,
                          title: 'Confidence',
                          type: 'integer',
                        },
                      },
                    },
                  },
                  image_signature: {
                    title: 'Image Signature',
                    type: 'array',
                    items: {
                      title: 'ItemIdentityParserDataClass',
                      type: 'object',
                      properties: {
                        value: {
                          default: null,
                          title: 'Value',
                          type: 'string',
                        },
                        confidence: {
                          default: null,
                          title: 'Confidence',
                          type: 'integer',
                        },
                      },
                    },
                  },
                  mrz: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  nationality: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        microsoft: {
          required: ['status'],
          title: 'ocridentity_parserIdentityParserDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              title: 'Extracted Data',
              type: 'array',
              items: {
                required: [
                  'last_name',
                  'birth_place',
                  'birth_date',
                  'issuance_date',
                  'expire_date',
                  'document_id',
                  'issuing_state',
                  'address',
                  'age',
                  'country',
                  'document_type',
                  'gender',
                  'mrz',
                  'nationality',
                ],
                title: 'InfosIdentityParserDataClass',
                type: 'object',
                properties: {
                  last_name: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  given_names: {
                    title: 'Given Names',
                    type: 'array',
                    items: {
                      title: 'ItemIdentityParserDataClass',
                      type: 'object',
                      properties: {
                        value: {
                          default: null,
                          title: 'Value',
                          type: 'string',
                        },
                        confidence: {
                          default: null,
                          title: 'Confidence',
                          type: 'integer',
                        },
                      },
                    },
                  },
                  birth_place: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  birth_date: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  issuance_date: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  expire_date: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  document_id: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  issuing_state: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  address: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  age: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  country: {
                    required: ['name', 'alpha2', 'alpha3', 'confidence'],
                    title: 'Country',
                    type: 'object',
                    properties: {
                      name: { title: 'Name', type: 'string' },
                      alpha2: { title: 'Alpha2', type: 'string' },
                      alpha3: { title: 'Alpha3', type: 'string' },
                      confidence: { title: 'Confidence', type: 'integer' },
                    },
                  },
                  document_type: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  gender: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  image_id: {
                    title: 'Image Id',
                    type: 'array',
                    items: {
                      title: 'ItemIdentityParserDataClass',
                      type: 'object',
                      properties: {
                        value: {
                          default: null,
                          title: 'Value',
                          type: 'string',
                        },
                        confidence: {
                          default: null,
                          title: 'Confidence',
                          type: 'integer',
                        },
                      },
                    },
                  },
                  image_signature: {
                    title: 'Image Signature',
                    type: 'array',
                    items: {
                      title: 'ItemIdentityParserDataClass',
                      type: 'object',
                      properties: {
                        value: {
                          default: null,
                          title: 'Value',
                          type: 'string',
                        },
                        confidence: {
                          default: null,
                          title: 'Confidence',
                          type: 'integer',
                        },
                      },
                    },
                  },
                  mrz: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  nationality: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        klippa: {
          required: ['status'],
          title: 'ocridentity_parserIdentityParserDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              title: 'Extracted Data',
              type: 'array',
              items: {
                required: [
                  'last_name',
                  'birth_place',
                  'birth_date',
                  'issuance_date',
                  'expire_date',
                  'document_id',
                  'issuing_state',
                  'address',
                  'age',
                  'country',
                  'document_type',
                  'gender',
                  'mrz',
                  'nationality',
                ],
                title: 'InfosIdentityParserDataClass',
                type: 'object',
                properties: {
                  last_name: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  given_names: {
                    title: 'Given Names',
                    type: 'array',
                    items: {
                      title: 'ItemIdentityParserDataClass',
                      type: 'object',
                      properties: {
                        value: {
                          default: null,
                          title: 'Value',
                          type: 'string',
                        },
                        confidence: {
                          default: null,
                          title: 'Confidence',
                          type: 'integer',
                        },
                      },
                    },
                  },
                  birth_place: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  birth_date: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  issuance_date: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  expire_date: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  document_id: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  issuing_state: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  address: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  age: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  country: {
                    required: ['name', 'alpha2', 'alpha3', 'confidence'],
                    title: 'Country',
                    type: 'object',
                    properties: {
                      name: { title: 'Name', type: 'string' },
                      alpha2: { title: 'Alpha2', type: 'string' },
                      alpha3: { title: 'Alpha3', type: 'string' },
                      confidence: { title: 'Confidence', type: 'integer' },
                    },
                  },
                  document_type: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  gender: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  image_id: {
                    title: 'Image Id',
                    type: 'array',
                    items: {
                      title: 'ItemIdentityParserDataClass',
                      type: 'object',
                      properties: {
                        value: {
                          default: null,
                          title: 'Value',
                          type: 'string',
                        },
                        confidence: {
                          default: null,
                          title: 'Confidence',
                          type: 'integer',
                        },
                      },
                    },
                  },
                  image_signature: {
                    title: 'Image Signature',
                    type: 'array',
                    items: {
                      title: 'ItemIdentityParserDataClass',
                      type: 'object',
                      properties: {
                        value: {
                          default: null,
                          title: 'Value',
                          type: 'string',
                        },
                        confidence: {
                          default: null,
                          title: 'Confidence',
                          type: 'integer',
                        },
                      },
                    },
                  },
                  mrz: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  nationality: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        amazon: {
          required: ['status'],
          title: 'ocridentity_parserIdentityParserDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              title: 'Extracted Data',
              type: 'array',
              items: {
                required: [
                  'last_name',
                  'birth_place',
                  'birth_date',
                  'issuance_date',
                  'expire_date',
                  'document_id',
                  'issuing_state',
                  'address',
                  'age',
                  'country',
                  'document_type',
                  'gender',
                  'mrz',
                  'nationality',
                ],
                title: 'InfosIdentityParserDataClass',
                type: 'object',
                properties: {
                  last_name: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  given_names: {
                    title: 'Given Names',
                    type: 'array',
                    items: {
                      title: 'ItemIdentityParserDataClass',
                      type: 'object',
                      properties: {
                        value: {
                          default: null,
                          title: 'Value',
                          type: 'string',
                        },
                        confidence: {
                          default: null,
                          title: 'Confidence',
                          type: 'integer',
                        },
                      },
                    },
                  },
                  birth_place: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  birth_date: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  issuance_date: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  expire_date: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  document_id: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  issuing_state: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  address: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  age: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  country: {
                    required: ['name', 'alpha2', 'alpha3', 'confidence'],
                    title: 'Country',
                    type: 'object',
                    properties: {
                      name: { title: 'Name', type: 'string' },
                      alpha2: { title: 'Alpha2', type: 'string' },
                      alpha3: { title: 'Alpha3', type: 'string' },
                      confidence: { title: 'Confidence', type: 'integer' },
                    },
                  },
                  document_type: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  gender: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  image_id: {
                    title: 'Image Id',
                    type: 'array',
                    items: {
                      title: 'ItemIdentityParserDataClass',
                      type: 'object',
                      properties: {
                        value: {
                          default: null,
                          title: 'Value',
                          type: 'string',
                        },
                        confidence: {
                          default: null,
                          title: 'Confidence',
                          type: 'integer',
                        },
                      },
                    },
                  },
                  image_signature: {
                    title: 'Image Signature',
                    type: 'array',
                    items: {
                      title: 'ItemIdentityParserDataClass',
                      type: 'object',
                      properties: {
                        value: {
                          default: null,
                          title: 'Value',
                          type: 'string',
                        },
                        confidence: {
                          default: null,
                          title: 'Confidence',
                          type: 'integer',
                        },
                      },
                    },
                  },
                  mrz: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  nationality: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        'eden-ai': {
          required: ['status'],
          title: 'ocridentity_parserIdentityParserDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              title: 'Extracted Data',
              type: 'array',
              items: {
                required: [
                  'last_name',
                  'birth_place',
                  'birth_date',
                  'issuance_date',
                  'expire_date',
                  'document_id',
                  'issuing_state',
                  'address',
                  'age',
                  'country',
                  'document_type',
                  'gender',
                  'mrz',
                  'nationality',
                ],
                title: 'InfosIdentityParserDataClass',
                type: 'object',
                properties: {
                  last_name: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  given_names: {
                    title: 'Given Names',
                    type: 'array',
                    items: {
                      title: 'ItemIdentityParserDataClass',
                      type: 'object',
                      properties: {
                        value: {
                          default: null,
                          title: 'Value',
                          type: 'string',
                        },
                        confidence: {
                          default: null,
                          title: 'Confidence',
                          type: 'integer',
                        },
                      },
                    },
                  },
                  birth_place: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  birth_date: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  issuance_date: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  expire_date: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  document_id: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  issuing_state: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  address: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  age: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  country: {
                    required: ['name', 'alpha2', 'alpha3', 'confidence'],
                    title: 'Country',
                    type: 'object',
                    properties: {
                      name: { title: 'Name', type: 'string' },
                      alpha2: { title: 'Alpha2', type: 'string' },
                      alpha3: { title: 'Alpha3', type: 'string' },
                      confidence: { title: 'Confidence', type: 'integer' },
                    },
                  },
                  document_type: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  gender: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  image_id: {
                    title: 'Image Id',
                    type: 'array',
                    items: {
                      title: 'ItemIdentityParserDataClass',
                      type: 'object',
                      properties: {
                        value: {
                          default: null,
                          title: 'Value',
                          type: 'string',
                        },
                        confidence: {
                          default: null,
                          title: 'Confidence',
                          type: 'integer',
                        },
                      },
                    },
                  },
                  image_signature: {
                    title: 'Image Signature',
                    type: 'array',
                    items: {
                      title: 'ItemIdentityParserDataClass',
                      type: 'object',
                      properties: {
                        value: {
                          default: null,
                          title: 'Value',
                          type: 'string',
                        },
                        confidence: {
                          default: null,
                          title: 'Confidence',
                          type: 'integer',
                        },
                      },
                    },
                  },
                  mrz: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                  nationality: {
                    title: 'ItemIdentityParserDataClass',
                    type: 'object',
                    properties: {
                      value: { default: null, title: 'Value', type: 'string' },
                      confidence: {
                        default: null,
                        title: 'Confidence',
                        type: 'integer',
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'ocridentity_parserResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const OcrInvoiceParserCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: [
          'amazon,base64,dataleon,mindee,veryfi,google,klippa,affinda,microsoft',
        ],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      file: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
      },
      file_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.png'],
      },
      language: {
        type: ['string', 'null'],
        description:
          'Language code of the language the document is written in (ex: fr (French), en (English), es (Spanish))',
        examples: ['en'],
      },
    },
    required: ['providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        affinda: {
          required: ['status'],
          title: 'ocrinvoice_parserInvoiceParserDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              title: 'Extracted Data',
              type: 'array',
              items: {
                title: 'InfosInvoiceParserDataClass',
                type: 'object',
                properties: {
                  customer_information: {
                    required: [
                      'customer_name',
                      'customer_address',
                      'customer_email',
                      'customer_id',
                      'customer_tax_id',
                      'customer_mailing_address',
                      'customer_billing_address',
                      'customer_shipping_address',
                      'customer_service_address',
                      'customer_remittance_address',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number',
                    ],
                    title: 'CustomerInformationInvoice',
                    type: 'object',
                    properties: {
                      customer_name: {
                        title: 'Customer Name',
                        type: 'string',
                        default: null,
                      },
                      customer_address: {
                        title: 'Customer Address',
                        type: 'string',
                        default: null,
                      },
                      customer_email: {
                        title: 'Customer Email',
                        type: 'string',
                        default: null,
                      },
                      customer_id: {
                        title: 'Customer Id',
                        type: 'string',
                        default: null,
                      },
                      customer_tax_id: {
                        title: 'Customer Tax Id',
                        type: 'string',
                        default: null,
                      },
                      customer_mailing_address: {
                        title: 'Customer Mailing Address',
                        type: 'string',
                        default: null,
                      },
                      customer_billing_address: {
                        title: 'Customer Billing Address',
                        type: 'string',
                        default: null,
                      },
                      customer_shipping_address: {
                        title: 'Customer Shipping Address',
                        type: 'string',
                        default: null,
                      },
                      customer_service_address: {
                        title: 'Customer Service Address',
                        type: 'string',
                        default: null,
                      },
                      customer_remittance_address: {
                        title: 'Customer Remittance Address',
                        type: 'string',
                        default: null,
                      },
                      abn_number: {
                        title: 'Abn Number',
                        type: 'string',
                        default: null,
                      },
                      gst_number: {
                        title: 'Gst Number',
                        type: 'string',
                        default: null,
                      },
                      pan_number: {
                        title: 'Pan Number',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  merchant_information: {
                    required: [
                      'merchant_name',
                      'merchant_address',
                      'merchant_phone',
                      'merchant_email',
                      'merchant_fax',
                      'merchant_website',
                      'merchant_tax_id',
                      'merchant_siret',
                      'merchant_siren',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number',
                    ],
                    title: 'MerchantInformationInvoice',
                    type: 'object',
                    properties: {
                      merchant_name: {
                        title: 'Merchant Name',
                        type: 'string',
                        default: null,
                      },
                      merchant_address: {
                        title: 'Merchant Address',
                        type: 'string',
                        default: null,
                      },
                      merchant_phone: {
                        title: 'Merchant Phone',
                        type: 'string',
                        default: null,
                      },
                      merchant_email: {
                        title: 'Merchant Email',
                        type: 'string',
                        default: null,
                      },
                      merchant_fax: {
                        title: 'Merchant Fax',
                        type: 'string',
                        default: null,
                      },
                      merchant_website: {
                        title: 'Merchant Website',
                        type: 'string',
                        default: null,
                      },
                      merchant_tax_id: {
                        title: 'Merchant Tax Id',
                        type: 'string',
                        default: null,
                      },
                      merchant_siret: {
                        title: 'Merchant Siret',
                        type: 'string',
                        default: null,
                      },
                      merchant_siren: {
                        title: 'Merchant Siren',
                        type: 'string',
                        default: null,
                      },
                      abn_number: {
                        title: 'Abn Number',
                        type: 'string',
                        default: null,
                      },
                      gst_number: {
                        title: 'Gst Number',
                        type: 'string',
                        default: null,
                      },
                      pan_number: {
                        title: 'Pan Number',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  invoice_number: {
                    default: null,
                    title: 'Invoice Number',
                    type: 'string',
                  },
                  invoice_total: {
                    default: null,
                    title: 'Invoice Total',
                    type: 'integer',
                  },
                  invoice_subtotal: {
                    default: null,
                    title: 'Invoice Subtotal',
                    type: 'integer',
                  },
                  gratuity: {
                    default: null,
                    title: 'Gratuity',
                    type: 'integer',
                  },
                  amount_due: {
                    default: null,
                    title: 'Amount Due',
                    type: 'integer',
                  },
                  previous_unpaid_balance: {
                    default: null,
                    title: 'Previous Unpaid Balance',
                    type: 'integer',
                  },
                  discount: {
                    default: null,
                    title: 'Discount',
                    type: 'integer',
                  },
                  taxes: {
                    title: 'Taxes',
                    type: 'array',
                    items: {
                      required: ['value', 'rate'],
                      title: 'TaxesInvoice',
                      type: 'object',
                      properties: {
                        value: { title: 'Value', type: 'integer' },
                        rate: { title: 'Rate', type: 'integer' },
                      },
                    },
                  },
                  service_charge: {
                    default: null,
                    title: 'Service Charge',
                    type: 'integer',
                  },
                  payment_term: {
                    default: null,
                    title: 'Payment Term',
                    type: 'string',
                  },
                  purchase_order: {
                    default: null,
                    title: 'Purchase Order',
                    type: 'string',
                  },
                  date: { default: null, title: 'Date', type: 'string' },
                  due_date: {
                    default: null,
                    title: 'Due Date',
                    type: 'string',
                  },
                  service_date: {
                    default: null,
                    title: 'Service Date',
                    type: 'string',
                  },
                  service_due_date: {
                    default: null,
                    title: 'Service Due Date',
                    type: 'string',
                  },
                  po_number: {
                    default: null,
                    title: 'Po Number',
                    type: 'string',
                  },
                  locale: {
                    required: ['currency', 'language'],
                    title: 'LocaleInvoice',
                    type: 'object',
                    properties: {
                      currency: {
                        title: 'Currency',
                        type: 'string',
                        default: null,
                      },
                      language: {
                        title: 'Language',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  bank_informations: {
                    required: [
                      'account_number',
                      'iban',
                      'bsb',
                      'sort_code',
                      'vat_number',
                      'rooting_number',
                      'swift',
                    ],
                    title: 'BankInvoice',
                    type: 'object',
                    properties: {
                      account_number: {
                        title: 'Account Number',
                        type: 'string',
                        default: null,
                      },
                      iban: { title: 'Iban', type: 'string', default: null },
                      bsb: { title: 'Bsb', type: 'string', default: null },
                      sort_code: {
                        title: 'Sort Code',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                      rooting_number: {
                        title: 'Rooting Number',
                        type: 'string',
                        default: null,
                      },
                      swift: { title: 'Swift', type: 'string', default: null },
                    },
                  },
                  item_lines: {
                    title: 'Item Lines',
                    type: 'array',
                    items: {
                      title: 'ItemLinesInvoice',
                      type: 'object',
                      properties: {
                        description: {
                          default: null,
                          title: 'Description',
                          type: 'string',
                        },
                        quantity: {
                          default: null,
                          title: 'Quantity',
                          type: 'integer',
                        },
                        amount: {
                          default: null,
                          title: 'Amount',
                          type: 'integer',
                        },
                        unit_price: {
                          default: null,
                          title: 'Unit Price',
                          type: 'integer',
                        },
                        discount: {
                          default: null,
                          title: 'Discount',
                          type: 'integer',
                        },
                        product_code: {
                          default: null,
                          title: 'Product Code',
                          type: 'string',
                        },
                        date_item: {
                          default: null,
                          title: 'Date Item',
                          type: 'string',
                        },
                        tax_item: {
                          default: null,
                          title: 'Tax Item',
                          type: 'integer',
                        },
                        tax_rate: {
                          default: null,
                          title: 'Tax Rate',
                          type: 'integer',
                        },
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        veryfi: {
          required: ['status'],
          title: 'ocrinvoice_parserInvoiceParserDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              title: 'Extracted Data',
              type: 'array',
              items: {
                title: 'InfosInvoiceParserDataClass',
                type: 'object',
                properties: {
                  customer_information: {
                    required: [
                      'customer_name',
                      'customer_address',
                      'customer_email',
                      'customer_id',
                      'customer_tax_id',
                      'customer_mailing_address',
                      'customer_billing_address',
                      'customer_shipping_address',
                      'customer_service_address',
                      'customer_remittance_address',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number',
                    ],
                    title: 'CustomerInformationInvoice',
                    type: 'object',
                    properties: {
                      customer_name: {
                        title: 'Customer Name',
                        type: 'string',
                        default: null,
                      },
                      customer_address: {
                        title: 'Customer Address',
                        type: 'string',
                        default: null,
                      },
                      customer_email: {
                        title: 'Customer Email',
                        type: 'string',
                        default: null,
                      },
                      customer_id: {
                        title: 'Customer Id',
                        type: 'string',
                        default: null,
                      },
                      customer_tax_id: {
                        title: 'Customer Tax Id',
                        type: 'string',
                        default: null,
                      },
                      customer_mailing_address: {
                        title: 'Customer Mailing Address',
                        type: 'string',
                        default: null,
                      },
                      customer_billing_address: {
                        title: 'Customer Billing Address',
                        type: 'string',
                        default: null,
                      },
                      customer_shipping_address: {
                        title: 'Customer Shipping Address',
                        type: 'string',
                        default: null,
                      },
                      customer_service_address: {
                        title: 'Customer Service Address',
                        type: 'string',
                        default: null,
                      },
                      customer_remittance_address: {
                        title: 'Customer Remittance Address',
                        type: 'string',
                        default: null,
                      },
                      abn_number: {
                        title: 'Abn Number',
                        type: 'string',
                        default: null,
                      },
                      gst_number: {
                        title: 'Gst Number',
                        type: 'string',
                        default: null,
                      },
                      pan_number: {
                        title: 'Pan Number',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  merchant_information: {
                    required: [
                      'merchant_name',
                      'merchant_address',
                      'merchant_phone',
                      'merchant_email',
                      'merchant_fax',
                      'merchant_website',
                      'merchant_tax_id',
                      'merchant_siret',
                      'merchant_siren',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number',
                    ],
                    title: 'MerchantInformationInvoice',
                    type: 'object',
                    properties: {
                      merchant_name: {
                        title: 'Merchant Name',
                        type: 'string',
                        default: null,
                      },
                      merchant_address: {
                        title: 'Merchant Address',
                        type: 'string',
                        default: null,
                      },
                      merchant_phone: {
                        title: 'Merchant Phone',
                        type: 'string',
                        default: null,
                      },
                      merchant_email: {
                        title: 'Merchant Email',
                        type: 'string',
                        default: null,
                      },
                      merchant_fax: {
                        title: 'Merchant Fax',
                        type: 'string',
                        default: null,
                      },
                      merchant_website: {
                        title: 'Merchant Website',
                        type: 'string',
                        default: null,
                      },
                      merchant_tax_id: {
                        title: 'Merchant Tax Id',
                        type: 'string',
                        default: null,
                      },
                      merchant_siret: {
                        title: 'Merchant Siret',
                        type: 'string',
                        default: null,
                      },
                      merchant_siren: {
                        title: 'Merchant Siren',
                        type: 'string',
                        default: null,
                      },
                      abn_number: {
                        title: 'Abn Number',
                        type: 'string',
                        default: null,
                      },
                      gst_number: {
                        title: 'Gst Number',
                        type: 'string',
                        default: null,
                      },
                      pan_number: {
                        title: 'Pan Number',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  invoice_number: {
                    default: null,
                    title: 'Invoice Number',
                    type: 'string',
                  },
                  invoice_total: {
                    default: null,
                    title: 'Invoice Total',
                    type: 'integer',
                  },
                  invoice_subtotal: {
                    default: null,
                    title: 'Invoice Subtotal',
                    type: 'integer',
                  },
                  gratuity: {
                    default: null,
                    title: 'Gratuity',
                    type: 'integer',
                  },
                  amount_due: {
                    default: null,
                    title: 'Amount Due',
                    type: 'integer',
                  },
                  previous_unpaid_balance: {
                    default: null,
                    title: 'Previous Unpaid Balance',
                    type: 'integer',
                  },
                  discount: {
                    default: null,
                    title: 'Discount',
                    type: 'integer',
                  },
                  taxes: {
                    title: 'Taxes',
                    type: 'array',
                    items: {
                      required: ['value', 'rate'],
                      title: 'TaxesInvoice',
                      type: 'object',
                      properties: {
                        value: { title: 'Value', type: 'integer' },
                        rate: { title: 'Rate', type: 'integer' },
                      },
                    },
                  },
                  service_charge: {
                    default: null,
                    title: 'Service Charge',
                    type: 'integer',
                  },
                  payment_term: {
                    default: null,
                    title: 'Payment Term',
                    type: 'string',
                  },
                  purchase_order: {
                    default: null,
                    title: 'Purchase Order',
                    type: 'string',
                  },
                  date: { default: null, title: 'Date', type: 'string' },
                  due_date: {
                    default: null,
                    title: 'Due Date',
                    type: 'string',
                  },
                  service_date: {
                    default: null,
                    title: 'Service Date',
                    type: 'string',
                  },
                  service_due_date: {
                    default: null,
                    title: 'Service Due Date',
                    type: 'string',
                  },
                  po_number: {
                    default: null,
                    title: 'Po Number',
                    type: 'string',
                  },
                  locale: {
                    required: ['currency', 'language'],
                    title: 'LocaleInvoice',
                    type: 'object',
                    properties: {
                      currency: {
                        title: 'Currency',
                        type: 'string',
                        default: null,
                      },
                      language: {
                        title: 'Language',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  bank_informations: {
                    required: [
                      'account_number',
                      'iban',
                      'bsb',
                      'sort_code',
                      'vat_number',
                      'rooting_number',
                      'swift',
                    ],
                    title: 'BankInvoice',
                    type: 'object',
                    properties: {
                      account_number: {
                        title: 'Account Number',
                        type: 'string',
                        default: null,
                      },
                      iban: { title: 'Iban', type: 'string', default: null },
                      bsb: { title: 'Bsb', type: 'string', default: null },
                      sort_code: {
                        title: 'Sort Code',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                      rooting_number: {
                        title: 'Rooting Number',
                        type: 'string',
                        default: null,
                      },
                      swift: { title: 'Swift', type: 'string', default: null },
                    },
                  },
                  item_lines: {
                    title: 'Item Lines',
                    type: 'array',
                    items: {
                      title: 'ItemLinesInvoice',
                      type: 'object',
                      properties: {
                        description: {
                          default: null,
                          title: 'Description',
                          type: 'string',
                        },
                        quantity: {
                          default: null,
                          title: 'Quantity',
                          type: 'integer',
                        },
                        amount: {
                          default: null,
                          title: 'Amount',
                          type: 'integer',
                        },
                        unit_price: {
                          default: null,
                          title: 'Unit Price',
                          type: 'integer',
                        },
                        discount: {
                          default: null,
                          title: 'Discount',
                          type: 'integer',
                        },
                        product_code: {
                          default: null,
                          title: 'Product Code',
                          type: 'string',
                        },
                        date_item: {
                          default: null,
                          title: 'Date Item',
                          type: 'string',
                        },
                        tax_item: {
                          default: null,
                          title: 'Tax Item',
                          type: 'integer',
                        },
                        tax_rate: {
                          default: null,
                          title: 'Tax Rate',
                          type: 'integer',
                        },
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        base64: {
          required: ['status'],
          title: 'ocrinvoice_parserInvoiceParserDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              title: 'Extracted Data',
              type: 'array',
              items: {
                title: 'InfosInvoiceParserDataClass',
                type: 'object',
                properties: {
                  customer_information: {
                    required: [
                      'customer_name',
                      'customer_address',
                      'customer_email',
                      'customer_id',
                      'customer_tax_id',
                      'customer_mailing_address',
                      'customer_billing_address',
                      'customer_shipping_address',
                      'customer_service_address',
                      'customer_remittance_address',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number',
                    ],
                    title: 'CustomerInformationInvoice',
                    type: 'object',
                    properties: {
                      customer_name: {
                        title: 'Customer Name',
                        type: 'string',
                        default: null,
                      },
                      customer_address: {
                        title: 'Customer Address',
                        type: 'string',
                        default: null,
                      },
                      customer_email: {
                        title: 'Customer Email',
                        type: 'string',
                        default: null,
                      },
                      customer_id: {
                        title: 'Customer Id',
                        type: 'string',
                        default: null,
                      },
                      customer_tax_id: {
                        title: 'Customer Tax Id',
                        type: 'string',
                        default: null,
                      },
                      customer_mailing_address: {
                        title: 'Customer Mailing Address',
                        type: 'string',
                        default: null,
                      },
                      customer_billing_address: {
                        title: 'Customer Billing Address',
                        type: 'string',
                        default: null,
                      },
                      customer_shipping_address: {
                        title: 'Customer Shipping Address',
                        type: 'string',
                        default: null,
                      },
                      customer_service_address: {
                        title: 'Customer Service Address',
                        type: 'string',
                        default: null,
                      },
                      customer_remittance_address: {
                        title: 'Customer Remittance Address',
                        type: 'string',
                        default: null,
                      },
                      abn_number: {
                        title: 'Abn Number',
                        type: 'string',
                        default: null,
                      },
                      gst_number: {
                        title: 'Gst Number',
                        type: 'string',
                        default: null,
                      },
                      pan_number: {
                        title: 'Pan Number',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  merchant_information: {
                    required: [
                      'merchant_name',
                      'merchant_address',
                      'merchant_phone',
                      'merchant_email',
                      'merchant_fax',
                      'merchant_website',
                      'merchant_tax_id',
                      'merchant_siret',
                      'merchant_siren',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number',
                    ],
                    title: 'MerchantInformationInvoice',
                    type: 'object',
                    properties: {
                      merchant_name: {
                        title: 'Merchant Name',
                        type: 'string',
                        default: null,
                      },
                      merchant_address: {
                        title: 'Merchant Address',
                        type: 'string',
                        default: null,
                      },
                      merchant_phone: {
                        title: 'Merchant Phone',
                        type: 'string',
                        default: null,
                      },
                      merchant_email: {
                        title: 'Merchant Email',
                        type: 'string',
                        default: null,
                      },
                      merchant_fax: {
                        title: 'Merchant Fax',
                        type: 'string',
                        default: null,
                      },
                      merchant_website: {
                        title: 'Merchant Website',
                        type: 'string',
                        default: null,
                      },
                      merchant_tax_id: {
                        title: 'Merchant Tax Id',
                        type: 'string',
                        default: null,
                      },
                      merchant_siret: {
                        title: 'Merchant Siret',
                        type: 'string',
                        default: null,
                      },
                      merchant_siren: {
                        title: 'Merchant Siren',
                        type: 'string',
                        default: null,
                      },
                      abn_number: {
                        title: 'Abn Number',
                        type: 'string',
                        default: null,
                      },
                      gst_number: {
                        title: 'Gst Number',
                        type: 'string',
                        default: null,
                      },
                      pan_number: {
                        title: 'Pan Number',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  invoice_number: {
                    default: null,
                    title: 'Invoice Number',
                    type: 'string',
                  },
                  invoice_total: {
                    default: null,
                    title: 'Invoice Total',
                    type: 'integer',
                  },
                  invoice_subtotal: {
                    default: null,
                    title: 'Invoice Subtotal',
                    type: 'integer',
                  },
                  gratuity: {
                    default: null,
                    title: 'Gratuity',
                    type: 'integer',
                  },
                  amount_due: {
                    default: null,
                    title: 'Amount Due',
                    type: 'integer',
                  },
                  previous_unpaid_balance: {
                    default: null,
                    title: 'Previous Unpaid Balance',
                    type: 'integer',
                  },
                  discount: {
                    default: null,
                    title: 'Discount',
                    type: 'integer',
                  },
                  taxes: {
                    title: 'Taxes',
                    type: 'array',
                    items: {
                      required: ['value', 'rate'],
                      title: 'TaxesInvoice',
                      type: 'object',
                      properties: {
                        value: { title: 'Value', type: 'integer' },
                        rate: { title: 'Rate', type: 'integer' },
                      },
                    },
                  },
                  service_charge: {
                    default: null,
                    title: 'Service Charge',
                    type: 'integer',
                  },
                  payment_term: {
                    default: null,
                    title: 'Payment Term',
                    type: 'string',
                  },
                  purchase_order: {
                    default: null,
                    title: 'Purchase Order',
                    type: 'string',
                  },
                  date: { default: null, title: 'Date', type: 'string' },
                  due_date: {
                    default: null,
                    title: 'Due Date',
                    type: 'string',
                  },
                  service_date: {
                    default: null,
                    title: 'Service Date',
                    type: 'string',
                  },
                  service_due_date: {
                    default: null,
                    title: 'Service Due Date',
                    type: 'string',
                  },
                  po_number: {
                    default: null,
                    title: 'Po Number',
                    type: 'string',
                  },
                  locale: {
                    required: ['currency', 'language'],
                    title: 'LocaleInvoice',
                    type: 'object',
                    properties: {
                      currency: {
                        title: 'Currency',
                        type: 'string',
                        default: null,
                      },
                      language: {
                        title: 'Language',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  bank_informations: {
                    required: [
                      'account_number',
                      'iban',
                      'bsb',
                      'sort_code',
                      'vat_number',
                      'rooting_number',
                      'swift',
                    ],
                    title: 'BankInvoice',
                    type: 'object',
                    properties: {
                      account_number: {
                        title: 'Account Number',
                        type: 'string',
                        default: null,
                      },
                      iban: { title: 'Iban', type: 'string', default: null },
                      bsb: { title: 'Bsb', type: 'string', default: null },
                      sort_code: {
                        title: 'Sort Code',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                      rooting_number: {
                        title: 'Rooting Number',
                        type: 'string',
                        default: null,
                      },
                      swift: { title: 'Swift', type: 'string', default: null },
                    },
                  },
                  item_lines: {
                    title: 'Item Lines',
                    type: 'array',
                    items: {
                      title: 'ItemLinesInvoice',
                      type: 'object',
                      properties: {
                        description: {
                          default: null,
                          title: 'Description',
                          type: 'string',
                        },
                        quantity: {
                          default: null,
                          title: 'Quantity',
                          type: 'integer',
                        },
                        amount: {
                          default: null,
                          title: 'Amount',
                          type: 'integer',
                        },
                        unit_price: {
                          default: null,
                          title: 'Unit Price',
                          type: 'integer',
                        },
                        discount: {
                          default: null,
                          title: 'Discount',
                          type: 'integer',
                        },
                        product_code: {
                          default: null,
                          title: 'Product Code',
                          type: 'string',
                        },
                        date_item: {
                          default: null,
                          title: 'Date Item',
                          type: 'string',
                        },
                        tax_item: {
                          default: null,
                          title: 'Tax Item',
                          type: 'integer',
                        },
                        tax_rate: {
                          default: null,
                          title: 'Tax Rate',
                          type: 'integer',
                        },
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        mindee: {
          required: ['status'],
          title: 'ocrinvoice_parserInvoiceParserDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              title: 'Extracted Data',
              type: 'array',
              items: {
                title: 'InfosInvoiceParserDataClass',
                type: 'object',
                properties: {
                  customer_information: {
                    required: [
                      'customer_name',
                      'customer_address',
                      'customer_email',
                      'customer_id',
                      'customer_tax_id',
                      'customer_mailing_address',
                      'customer_billing_address',
                      'customer_shipping_address',
                      'customer_service_address',
                      'customer_remittance_address',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number',
                    ],
                    title: 'CustomerInformationInvoice',
                    type: 'object',
                    properties: {
                      customer_name: {
                        title: 'Customer Name',
                        type: 'string',
                        default: null,
                      },
                      customer_address: {
                        title: 'Customer Address',
                        type: 'string',
                        default: null,
                      },
                      customer_email: {
                        title: 'Customer Email',
                        type: 'string',
                        default: null,
                      },
                      customer_id: {
                        title: 'Customer Id',
                        type: 'string',
                        default: null,
                      },
                      customer_tax_id: {
                        title: 'Customer Tax Id',
                        type: 'string',
                        default: null,
                      },
                      customer_mailing_address: {
                        title: 'Customer Mailing Address',
                        type: 'string',
                        default: null,
                      },
                      customer_billing_address: {
                        title: 'Customer Billing Address',
                        type: 'string',
                        default: null,
                      },
                      customer_shipping_address: {
                        title: 'Customer Shipping Address',
                        type: 'string',
                        default: null,
                      },
                      customer_service_address: {
                        title: 'Customer Service Address',
                        type: 'string',
                        default: null,
                      },
                      customer_remittance_address: {
                        title: 'Customer Remittance Address',
                        type: 'string',
                        default: null,
                      },
                      abn_number: {
                        title: 'Abn Number',
                        type: 'string',
                        default: null,
                      },
                      gst_number: {
                        title: 'Gst Number',
                        type: 'string',
                        default: null,
                      },
                      pan_number: {
                        title: 'Pan Number',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  merchant_information: {
                    required: [
                      'merchant_name',
                      'merchant_address',
                      'merchant_phone',
                      'merchant_email',
                      'merchant_fax',
                      'merchant_website',
                      'merchant_tax_id',
                      'merchant_siret',
                      'merchant_siren',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number',
                    ],
                    title: 'MerchantInformationInvoice',
                    type: 'object',
                    properties: {
                      merchant_name: {
                        title: 'Merchant Name',
                        type: 'string',
                        default: null,
                      },
                      merchant_address: {
                        title: 'Merchant Address',
                        type: 'string',
                        default: null,
                      },
                      merchant_phone: {
                        title: 'Merchant Phone',
                        type: 'string',
                        default: null,
                      },
                      merchant_email: {
                        title: 'Merchant Email',
                        type: 'string',
                        default: null,
                      },
                      merchant_fax: {
                        title: 'Merchant Fax',
                        type: 'string',
                        default: null,
                      },
                      merchant_website: {
                        title: 'Merchant Website',
                        type: 'string',
                        default: null,
                      },
                      merchant_tax_id: {
                        title: 'Merchant Tax Id',
                        type: 'string',
                        default: null,
                      },
                      merchant_siret: {
                        title: 'Merchant Siret',
                        type: 'string',
                        default: null,
                      },
                      merchant_siren: {
                        title: 'Merchant Siren',
                        type: 'string',
                        default: null,
                      },
                      abn_number: {
                        title: 'Abn Number',
                        type: 'string',
                        default: null,
                      },
                      gst_number: {
                        title: 'Gst Number',
                        type: 'string',
                        default: null,
                      },
                      pan_number: {
                        title: 'Pan Number',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  invoice_number: {
                    default: null,
                    title: 'Invoice Number',
                    type: 'string',
                  },
                  invoice_total: {
                    default: null,
                    title: 'Invoice Total',
                    type: 'integer',
                  },
                  invoice_subtotal: {
                    default: null,
                    title: 'Invoice Subtotal',
                    type: 'integer',
                  },
                  gratuity: {
                    default: null,
                    title: 'Gratuity',
                    type: 'integer',
                  },
                  amount_due: {
                    default: null,
                    title: 'Amount Due',
                    type: 'integer',
                  },
                  previous_unpaid_balance: {
                    default: null,
                    title: 'Previous Unpaid Balance',
                    type: 'integer',
                  },
                  discount: {
                    default: null,
                    title: 'Discount',
                    type: 'integer',
                  },
                  taxes: {
                    title: 'Taxes',
                    type: 'array',
                    items: {
                      required: ['value', 'rate'],
                      title: 'TaxesInvoice',
                      type: 'object',
                      properties: {
                        value: { title: 'Value', type: 'integer' },
                        rate: { title: 'Rate', type: 'integer' },
                      },
                    },
                  },
                  service_charge: {
                    default: null,
                    title: 'Service Charge',
                    type: 'integer',
                  },
                  payment_term: {
                    default: null,
                    title: 'Payment Term',
                    type: 'string',
                  },
                  purchase_order: {
                    default: null,
                    title: 'Purchase Order',
                    type: 'string',
                  },
                  date: { default: null, title: 'Date', type: 'string' },
                  due_date: {
                    default: null,
                    title: 'Due Date',
                    type: 'string',
                  },
                  service_date: {
                    default: null,
                    title: 'Service Date',
                    type: 'string',
                  },
                  service_due_date: {
                    default: null,
                    title: 'Service Due Date',
                    type: 'string',
                  },
                  po_number: {
                    default: null,
                    title: 'Po Number',
                    type: 'string',
                  },
                  locale: {
                    required: ['currency', 'language'],
                    title: 'LocaleInvoice',
                    type: 'object',
                    properties: {
                      currency: {
                        title: 'Currency',
                        type: 'string',
                        default: null,
                      },
                      language: {
                        title: 'Language',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  bank_informations: {
                    required: [
                      'account_number',
                      'iban',
                      'bsb',
                      'sort_code',
                      'vat_number',
                      'rooting_number',
                      'swift',
                    ],
                    title: 'BankInvoice',
                    type: 'object',
                    properties: {
                      account_number: {
                        title: 'Account Number',
                        type: 'string',
                        default: null,
                      },
                      iban: { title: 'Iban', type: 'string', default: null },
                      bsb: { title: 'Bsb', type: 'string', default: null },
                      sort_code: {
                        title: 'Sort Code',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                      rooting_number: {
                        title: 'Rooting Number',
                        type: 'string',
                        default: null,
                      },
                      swift: { title: 'Swift', type: 'string', default: null },
                    },
                  },
                  item_lines: {
                    title: 'Item Lines',
                    type: 'array',
                    items: {
                      title: 'ItemLinesInvoice',
                      type: 'object',
                      properties: {
                        description: {
                          default: null,
                          title: 'Description',
                          type: 'string',
                        },
                        quantity: {
                          default: null,
                          title: 'Quantity',
                          type: 'integer',
                        },
                        amount: {
                          default: null,
                          title: 'Amount',
                          type: 'integer',
                        },
                        unit_price: {
                          default: null,
                          title: 'Unit Price',
                          type: 'integer',
                        },
                        discount: {
                          default: null,
                          title: 'Discount',
                          type: 'integer',
                        },
                        product_code: {
                          default: null,
                          title: 'Product Code',
                          type: 'string',
                        },
                        date_item: {
                          default: null,
                          title: 'Date Item',
                          type: 'string',
                        },
                        tax_item: {
                          default: null,
                          title: 'Tax Item',
                          type: 'integer',
                        },
                        tax_rate: {
                          default: null,
                          title: 'Tax Rate',
                          type: 'integer',
                        },
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        rossum: {
          required: ['status'],
          title: 'ocrinvoice_parserInvoiceParserDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              title: 'Extracted Data',
              type: 'array',
              items: {
                title: 'InfosInvoiceParserDataClass',
                type: 'object',
                properties: {
                  customer_information: {
                    required: [
                      'customer_name',
                      'customer_address',
                      'customer_email',
                      'customer_id',
                      'customer_tax_id',
                      'customer_mailing_address',
                      'customer_billing_address',
                      'customer_shipping_address',
                      'customer_service_address',
                      'customer_remittance_address',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number',
                    ],
                    title: 'CustomerInformationInvoice',
                    type: 'object',
                    properties: {
                      customer_name: {
                        title: 'Customer Name',
                        type: 'string',
                        default: null,
                      },
                      customer_address: {
                        title: 'Customer Address',
                        type: 'string',
                        default: null,
                      },
                      customer_email: {
                        title: 'Customer Email',
                        type: 'string',
                        default: null,
                      },
                      customer_id: {
                        title: 'Customer Id',
                        type: 'string',
                        default: null,
                      },
                      customer_tax_id: {
                        title: 'Customer Tax Id',
                        type: 'string',
                        default: null,
                      },
                      customer_mailing_address: {
                        title: 'Customer Mailing Address',
                        type: 'string',
                        default: null,
                      },
                      customer_billing_address: {
                        title: 'Customer Billing Address',
                        type: 'string',
                        default: null,
                      },
                      customer_shipping_address: {
                        title: 'Customer Shipping Address',
                        type: 'string',
                        default: null,
                      },
                      customer_service_address: {
                        title: 'Customer Service Address',
                        type: 'string',
                        default: null,
                      },
                      customer_remittance_address: {
                        title: 'Customer Remittance Address',
                        type: 'string',
                        default: null,
                      },
                      abn_number: {
                        title: 'Abn Number',
                        type: 'string',
                        default: null,
                      },
                      gst_number: {
                        title: 'Gst Number',
                        type: 'string',
                        default: null,
                      },
                      pan_number: {
                        title: 'Pan Number',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  merchant_information: {
                    required: [
                      'merchant_name',
                      'merchant_address',
                      'merchant_phone',
                      'merchant_email',
                      'merchant_fax',
                      'merchant_website',
                      'merchant_tax_id',
                      'merchant_siret',
                      'merchant_siren',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number',
                    ],
                    title: 'MerchantInformationInvoice',
                    type: 'object',
                    properties: {
                      merchant_name: {
                        title: 'Merchant Name',
                        type: 'string',
                        default: null,
                      },
                      merchant_address: {
                        title: 'Merchant Address',
                        type: 'string',
                        default: null,
                      },
                      merchant_phone: {
                        title: 'Merchant Phone',
                        type: 'string',
                        default: null,
                      },
                      merchant_email: {
                        title: 'Merchant Email',
                        type: 'string',
                        default: null,
                      },
                      merchant_fax: {
                        title: 'Merchant Fax',
                        type: 'string',
                        default: null,
                      },
                      merchant_website: {
                        title: 'Merchant Website',
                        type: 'string',
                        default: null,
                      },
                      merchant_tax_id: {
                        title: 'Merchant Tax Id',
                        type: 'string',
                        default: null,
                      },
                      merchant_siret: {
                        title: 'Merchant Siret',
                        type: 'string',
                        default: null,
                      },
                      merchant_siren: {
                        title: 'Merchant Siren',
                        type: 'string',
                        default: null,
                      },
                      abn_number: {
                        title: 'Abn Number',
                        type: 'string',
                        default: null,
                      },
                      gst_number: {
                        title: 'Gst Number',
                        type: 'string',
                        default: null,
                      },
                      pan_number: {
                        title: 'Pan Number',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  invoice_number: {
                    default: null,
                    title: 'Invoice Number',
                    type: 'string',
                  },
                  invoice_total: {
                    default: null,
                    title: 'Invoice Total',
                    type: 'integer',
                  },
                  invoice_subtotal: {
                    default: null,
                    title: 'Invoice Subtotal',
                    type: 'integer',
                  },
                  gratuity: {
                    default: null,
                    title: 'Gratuity',
                    type: 'integer',
                  },
                  amount_due: {
                    default: null,
                    title: 'Amount Due',
                    type: 'integer',
                  },
                  previous_unpaid_balance: {
                    default: null,
                    title: 'Previous Unpaid Balance',
                    type: 'integer',
                  },
                  discount: {
                    default: null,
                    title: 'Discount',
                    type: 'integer',
                  },
                  taxes: {
                    title: 'Taxes',
                    type: 'array',
                    items: {
                      required: ['value', 'rate'],
                      title: 'TaxesInvoice',
                      type: 'object',
                      properties: {
                        value: { title: 'Value', type: 'integer' },
                        rate: { title: 'Rate', type: 'integer' },
                      },
                    },
                  },
                  service_charge: {
                    default: null,
                    title: 'Service Charge',
                    type: 'integer',
                  },
                  payment_term: {
                    default: null,
                    title: 'Payment Term',
                    type: 'string',
                  },
                  purchase_order: {
                    default: null,
                    title: 'Purchase Order',
                    type: 'string',
                  },
                  date: { default: null, title: 'Date', type: 'string' },
                  due_date: {
                    default: null,
                    title: 'Due Date',
                    type: 'string',
                  },
                  service_date: {
                    default: null,
                    title: 'Service Date',
                    type: 'string',
                  },
                  service_due_date: {
                    default: null,
                    title: 'Service Due Date',
                    type: 'string',
                  },
                  po_number: {
                    default: null,
                    title: 'Po Number',
                    type: 'string',
                  },
                  locale: {
                    required: ['currency', 'language'],
                    title: 'LocaleInvoice',
                    type: 'object',
                    properties: {
                      currency: {
                        title: 'Currency',
                        type: 'string',
                        default: null,
                      },
                      language: {
                        title: 'Language',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  bank_informations: {
                    required: [
                      'account_number',
                      'iban',
                      'bsb',
                      'sort_code',
                      'vat_number',
                      'rooting_number',
                      'swift',
                    ],
                    title: 'BankInvoice',
                    type: 'object',
                    properties: {
                      account_number: {
                        title: 'Account Number',
                        type: 'string',
                        default: null,
                      },
                      iban: { title: 'Iban', type: 'string', default: null },
                      bsb: { title: 'Bsb', type: 'string', default: null },
                      sort_code: {
                        title: 'Sort Code',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                      rooting_number: {
                        title: 'Rooting Number',
                        type: 'string',
                        default: null,
                      },
                      swift: { title: 'Swift', type: 'string', default: null },
                    },
                  },
                  item_lines: {
                    title: 'Item Lines',
                    type: 'array',
                    items: {
                      title: 'ItemLinesInvoice',
                      type: 'object',
                      properties: {
                        description: {
                          default: null,
                          title: 'Description',
                          type: 'string',
                        },
                        quantity: {
                          default: null,
                          title: 'Quantity',
                          type: 'integer',
                        },
                        amount: {
                          default: null,
                          title: 'Amount',
                          type: 'integer',
                        },
                        unit_price: {
                          default: null,
                          title: 'Unit Price',
                          type: 'integer',
                        },
                        discount: {
                          default: null,
                          title: 'Discount',
                          type: 'integer',
                        },
                        product_code: {
                          default: null,
                          title: 'Product Code',
                          type: 'string',
                        },
                        date_item: {
                          default: null,
                          title: 'Date Item',
                          type: 'string',
                        },
                        tax_item: {
                          default: null,
                          title: 'Tax Item',
                          type: 'integer',
                        },
                        tax_rate: {
                          default: null,
                          title: 'Tax Rate',
                          type: 'integer',
                        },
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        microsoft: {
          required: ['status'],
          title: 'ocrinvoice_parserInvoiceParserDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              title: 'Extracted Data',
              type: 'array',
              items: {
                title: 'InfosInvoiceParserDataClass',
                type: 'object',
                properties: {
                  customer_information: {
                    required: [
                      'customer_name',
                      'customer_address',
                      'customer_email',
                      'customer_id',
                      'customer_tax_id',
                      'customer_mailing_address',
                      'customer_billing_address',
                      'customer_shipping_address',
                      'customer_service_address',
                      'customer_remittance_address',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number',
                    ],
                    title: 'CustomerInformationInvoice',
                    type: 'object',
                    properties: {
                      customer_name: {
                        title: 'Customer Name',
                        type: 'string',
                        default: null,
                      },
                      customer_address: {
                        title: 'Customer Address',
                        type: 'string',
                        default: null,
                      },
                      customer_email: {
                        title: 'Customer Email',
                        type: 'string',
                        default: null,
                      },
                      customer_id: {
                        title: 'Customer Id',
                        type: 'string',
                        default: null,
                      },
                      customer_tax_id: {
                        title: 'Customer Tax Id',
                        type: 'string',
                        default: null,
                      },
                      customer_mailing_address: {
                        title: 'Customer Mailing Address',
                        type: 'string',
                        default: null,
                      },
                      customer_billing_address: {
                        title: 'Customer Billing Address',
                        type: 'string',
                        default: null,
                      },
                      customer_shipping_address: {
                        title: 'Customer Shipping Address',
                        type: 'string',
                        default: null,
                      },
                      customer_service_address: {
                        title: 'Customer Service Address',
                        type: 'string',
                        default: null,
                      },
                      customer_remittance_address: {
                        title: 'Customer Remittance Address',
                        type: 'string',
                        default: null,
                      },
                      abn_number: {
                        title: 'Abn Number',
                        type: 'string',
                        default: null,
                      },
                      gst_number: {
                        title: 'Gst Number',
                        type: 'string',
                        default: null,
                      },
                      pan_number: {
                        title: 'Pan Number',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  merchant_information: {
                    required: [
                      'merchant_name',
                      'merchant_address',
                      'merchant_phone',
                      'merchant_email',
                      'merchant_fax',
                      'merchant_website',
                      'merchant_tax_id',
                      'merchant_siret',
                      'merchant_siren',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number',
                    ],
                    title: 'MerchantInformationInvoice',
                    type: 'object',
                    properties: {
                      merchant_name: {
                        title: 'Merchant Name',
                        type: 'string',
                        default: null,
                      },
                      merchant_address: {
                        title: 'Merchant Address',
                        type: 'string',
                        default: null,
                      },
                      merchant_phone: {
                        title: 'Merchant Phone',
                        type: 'string',
                        default: null,
                      },
                      merchant_email: {
                        title: 'Merchant Email',
                        type: 'string',
                        default: null,
                      },
                      merchant_fax: {
                        title: 'Merchant Fax',
                        type: 'string',
                        default: null,
                      },
                      merchant_website: {
                        title: 'Merchant Website',
                        type: 'string',
                        default: null,
                      },
                      merchant_tax_id: {
                        title: 'Merchant Tax Id',
                        type: 'string',
                        default: null,
                      },
                      merchant_siret: {
                        title: 'Merchant Siret',
                        type: 'string',
                        default: null,
                      },
                      merchant_siren: {
                        title: 'Merchant Siren',
                        type: 'string',
                        default: null,
                      },
                      abn_number: {
                        title: 'Abn Number',
                        type: 'string',
                        default: null,
                      },
                      gst_number: {
                        title: 'Gst Number',
                        type: 'string',
                        default: null,
                      },
                      pan_number: {
                        title: 'Pan Number',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  invoice_number: {
                    default: null,
                    title: 'Invoice Number',
                    type: 'string',
                  },
                  invoice_total: {
                    default: null,
                    title: 'Invoice Total',
                    type: 'integer',
                  },
                  invoice_subtotal: {
                    default: null,
                    title: 'Invoice Subtotal',
                    type: 'integer',
                  },
                  gratuity: {
                    default: null,
                    title: 'Gratuity',
                    type: 'integer',
                  },
                  amount_due: {
                    default: null,
                    title: 'Amount Due',
                    type: 'integer',
                  },
                  previous_unpaid_balance: {
                    default: null,
                    title: 'Previous Unpaid Balance',
                    type: 'integer',
                  },
                  discount: {
                    default: null,
                    title: 'Discount',
                    type: 'integer',
                  },
                  taxes: {
                    title: 'Taxes',
                    type: 'array',
                    items: {
                      required: ['value', 'rate'],
                      title: 'TaxesInvoice',
                      type: 'object',
                      properties: {
                        value: { title: 'Value', type: 'integer' },
                        rate: { title: 'Rate', type: 'integer' },
                      },
                    },
                  },
                  service_charge: {
                    default: null,
                    title: 'Service Charge',
                    type: 'integer',
                  },
                  payment_term: {
                    default: null,
                    title: 'Payment Term',
                    type: 'string',
                  },
                  purchase_order: {
                    default: null,
                    title: 'Purchase Order',
                    type: 'string',
                  },
                  date: { default: null, title: 'Date', type: 'string' },
                  due_date: {
                    default: null,
                    title: 'Due Date',
                    type: 'string',
                  },
                  service_date: {
                    default: null,
                    title: 'Service Date',
                    type: 'string',
                  },
                  service_due_date: {
                    default: null,
                    title: 'Service Due Date',
                    type: 'string',
                  },
                  po_number: {
                    default: null,
                    title: 'Po Number',
                    type: 'string',
                  },
                  locale: {
                    required: ['currency', 'language'],
                    title: 'LocaleInvoice',
                    type: 'object',
                    properties: {
                      currency: {
                        title: 'Currency',
                        type: 'string',
                        default: null,
                      },
                      language: {
                        title: 'Language',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  bank_informations: {
                    required: [
                      'account_number',
                      'iban',
                      'bsb',
                      'sort_code',
                      'vat_number',
                      'rooting_number',
                      'swift',
                    ],
                    title: 'BankInvoice',
                    type: 'object',
                    properties: {
                      account_number: {
                        title: 'Account Number',
                        type: 'string',
                        default: null,
                      },
                      iban: { title: 'Iban', type: 'string', default: null },
                      bsb: { title: 'Bsb', type: 'string', default: null },
                      sort_code: {
                        title: 'Sort Code',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                      rooting_number: {
                        title: 'Rooting Number',
                        type: 'string',
                        default: null,
                      },
                      swift: { title: 'Swift', type: 'string', default: null },
                    },
                  },
                  item_lines: {
                    title: 'Item Lines',
                    type: 'array',
                    items: {
                      title: 'ItemLinesInvoice',
                      type: 'object',
                      properties: {
                        description: {
                          default: null,
                          title: 'Description',
                          type: 'string',
                        },
                        quantity: {
                          default: null,
                          title: 'Quantity',
                          type: 'integer',
                        },
                        amount: {
                          default: null,
                          title: 'Amount',
                          type: 'integer',
                        },
                        unit_price: {
                          default: null,
                          title: 'Unit Price',
                          type: 'integer',
                        },
                        discount: {
                          default: null,
                          title: 'Discount',
                          type: 'integer',
                        },
                        product_code: {
                          default: null,
                          title: 'Product Code',
                          type: 'string',
                        },
                        date_item: {
                          default: null,
                          title: 'Date Item',
                          type: 'string',
                        },
                        tax_item: {
                          default: null,
                          title: 'Tax Item',
                          type: 'integer',
                        },
                        tax_rate: {
                          default: null,
                          title: 'Tax Rate',
                          type: 'integer',
                        },
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        dataleon: {
          required: ['status'],
          title: 'ocrinvoice_parserInvoiceParserDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              title: 'Extracted Data',
              type: 'array',
              items: {
                title: 'InfosInvoiceParserDataClass',
                type: 'object',
                properties: {
                  customer_information: {
                    required: [
                      'customer_name',
                      'customer_address',
                      'customer_email',
                      'customer_id',
                      'customer_tax_id',
                      'customer_mailing_address',
                      'customer_billing_address',
                      'customer_shipping_address',
                      'customer_service_address',
                      'customer_remittance_address',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number',
                    ],
                    title: 'CustomerInformationInvoice',
                    type: 'object',
                    properties: {
                      customer_name: {
                        title: 'Customer Name',
                        type: 'string',
                        default: null,
                      },
                      customer_address: {
                        title: 'Customer Address',
                        type: 'string',
                        default: null,
                      },
                      customer_email: {
                        title: 'Customer Email',
                        type: 'string',
                        default: null,
                      },
                      customer_id: {
                        title: 'Customer Id',
                        type: 'string',
                        default: null,
                      },
                      customer_tax_id: {
                        title: 'Customer Tax Id',
                        type: 'string',
                        default: null,
                      },
                      customer_mailing_address: {
                        title: 'Customer Mailing Address',
                        type: 'string',
                        default: null,
                      },
                      customer_billing_address: {
                        title: 'Customer Billing Address',
                        type: 'string',
                        default: null,
                      },
                      customer_shipping_address: {
                        title: 'Customer Shipping Address',
                        type: 'string',
                        default: null,
                      },
                      customer_service_address: {
                        title: 'Customer Service Address',
                        type: 'string',
                        default: null,
                      },
                      customer_remittance_address: {
                        title: 'Customer Remittance Address',
                        type: 'string',
                        default: null,
                      },
                      abn_number: {
                        title: 'Abn Number',
                        type: 'string',
                        default: null,
                      },
                      gst_number: {
                        title: 'Gst Number',
                        type: 'string',
                        default: null,
                      },
                      pan_number: {
                        title: 'Pan Number',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  merchant_information: {
                    required: [
                      'merchant_name',
                      'merchant_address',
                      'merchant_phone',
                      'merchant_email',
                      'merchant_fax',
                      'merchant_website',
                      'merchant_tax_id',
                      'merchant_siret',
                      'merchant_siren',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number',
                    ],
                    title: 'MerchantInformationInvoice',
                    type: 'object',
                    properties: {
                      merchant_name: {
                        title: 'Merchant Name',
                        type: 'string',
                        default: null,
                      },
                      merchant_address: {
                        title: 'Merchant Address',
                        type: 'string',
                        default: null,
                      },
                      merchant_phone: {
                        title: 'Merchant Phone',
                        type: 'string',
                        default: null,
                      },
                      merchant_email: {
                        title: 'Merchant Email',
                        type: 'string',
                        default: null,
                      },
                      merchant_fax: {
                        title: 'Merchant Fax',
                        type: 'string',
                        default: null,
                      },
                      merchant_website: {
                        title: 'Merchant Website',
                        type: 'string',
                        default: null,
                      },
                      merchant_tax_id: {
                        title: 'Merchant Tax Id',
                        type: 'string',
                        default: null,
                      },
                      merchant_siret: {
                        title: 'Merchant Siret',
                        type: 'string',
                        default: null,
                      },
                      merchant_siren: {
                        title: 'Merchant Siren',
                        type: 'string',
                        default: null,
                      },
                      abn_number: {
                        title: 'Abn Number',
                        type: 'string',
                        default: null,
                      },
                      gst_number: {
                        title: 'Gst Number',
                        type: 'string',
                        default: null,
                      },
                      pan_number: {
                        title: 'Pan Number',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  invoice_number: {
                    default: null,
                    title: 'Invoice Number',
                    type: 'string',
                  },
                  invoice_total: {
                    default: null,
                    title: 'Invoice Total',
                    type: 'integer',
                  },
                  invoice_subtotal: {
                    default: null,
                    title: 'Invoice Subtotal',
                    type: 'integer',
                  },
                  gratuity: {
                    default: null,
                    title: 'Gratuity',
                    type: 'integer',
                  },
                  amount_due: {
                    default: null,
                    title: 'Amount Due',
                    type: 'integer',
                  },
                  previous_unpaid_balance: {
                    default: null,
                    title: 'Previous Unpaid Balance',
                    type: 'integer',
                  },
                  discount: {
                    default: null,
                    title: 'Discount',
                    type: 'integer',
                  },
                  taxes: {
                    title: 'Taxes',
                    type: 'array',
                    items: {
                      required: ['value', 'rate'],
                      title: 'TaxesInvoice',
                      type: 'object',
                      properties: {
                        value: { title: 'Value', type: 'integer' },
                        rate: { title: 'Rate', type: 'integer' },
                      },
                    },
                  },
                  service_charge: {
                    default: null,
                    title: 'Service Charge',
                    type: 'integer',
                  },
                  payment_term: {
                    default: null,
                    title: 'Payment Term',
                    type: 'string',
                  },
                  purchase_order: {
                    default: null,
                    title: 'Purchase Order',
                    type: 'string',
                  },
                  date: { default: null, title: 'Date', type: 'string' },
                  due_date: {
                    default: null,
                    title: 'Due Date',
                    type: 'string',
                  },
                  service_date: {
                    default: null,
                    title: 'Service Date',
                    type: 'string',
                  },
                  service_due_date: {
                    default: null,
                    title: 'Service Due Date',
                    type: 'string',
                  },
                  po_number: {
                    default: null,
                    title: 'Po Number',
                    type: 'string',
                  },
                  locale: {
                    required: ['currency', 'language'],
                    title: 'LocaleInvoice',
                    type: 'object',
                    properties: {
                      currency: {
                        title: 'Currency',
                        type: 'string',
                        default: null,
                      },
                      language: {
                        title: 'Language',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  bank_informations: {
                    required: [
                      'account_number',
                      'iban',
                      'bsb',
                      'sort_code',
                      'vat_number',
                      'rooting_number',
                      'swift',
                    ],
                    title: 'BankInvoice',
                    type: 'object',
                    properties: {
                      account_number: {
                        title: 'Account Number',
                        type: 'string',
                        default: null,
                      },
                      iban: { title: 'Iban', type: 'string', default: null },
                      bsb: { title: 'Bsb', type: 'string', default: null },
                      sort_code: {
                        title: 'Sort Code',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                      rooting_number: {
                        title: 'Rooting Number',
                        type: 'string',
                        default: null,
                      },
                      swift: { title: 'Swift', type: 'string', default: null },
                    },
                  },
                  item_lines: {
                    title: 'Item Lines',
                    type: 'array',
                    items: {
                      title: 'ItemLinesInvoice',
                      type: 'object',
                      properties: {
                        description: {
                          default: null,
                          title: 'Description',
                          type: 'string',
                        },
                        quantity: {
                          default: null,
                          title: 'Quantity',
                          type: 'integer',
                        },
                        amount: {
                          default: null,
                          title: 'Amount',
                          type: 'integer',
                        },
                        unit_price: {
                          default: null,
                          title: 'Unit Price',
                          type: 'integer',
                        },
                        discount: {
                          default: null,
                          title: 'Discount',
                          type: 'integer',
                        },
                        product_code: {
                          default: null,
                          title: 'Product Code',
                          type: 'string',
                        },
                        date_item: {
                          default: null,
                          title: 'Date Item',
                          type: 'string',
                        },
                        tax_item: {
                          default: null,
                          title: 'Tax Item',
                          type: 'integer',
                        },
                        tax_rate: {
                          default: null,
                          title: 'Tax Rate',
                          type: 'integer',
                        },
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        google: {
          required: ['status'],
          title: 'ocrinvoice_parserInvoiceParserDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              title: 'Extracted Data',
              type: 'array',
              items: {
                title: 'InfosInvoiceParserDataClass',
                type: 'object',
                properties: {
                  customer_information: {
                    required: [
                      'customer_name',
                      'customer_address',
                      'customer_email',
                      'customer_id',
                      'customer_tax_id',
                      'customer_mailing_address',
                      'customer_billing_address',
                      'customer_shipping_address',
                      'customer_service_address',
                      'customer_remittance_address',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number',
                    ],
                    title: 'CustomerInformationInvoice',
                    type: 'object',
                    properties: {
                      customer_name: {
                        title: 'Customer Name',
                        type: 'string',
                        default: null,
                      },
                      customer_address: {
                        title: 'Customer Address',
                        type: 'string',
                        default: null,
                      },
                      customer_email: {
                        title: 'Customer Email',
                        type: 'string',
                        default: null,
                      },
                      customer_id: {
                        title: 'Customer Id',
                        type: 'string',
                        default: null,
                      },
                      customer_tax_id: {
                        title: 'Customer Tax Id',
                        type: 'string',
                        default: null,
                      },
                      customer_mailing_address: {
                        title: 'Customer Mailing Address',
                        type: 'string',
                        default: null,
                      },
                      customer_billing_address: {
                        title: 'Customer Billing Address',
                        type: 'string',
                        default: null,
                      },
                      customer_shipping_address: {
                        title: 'Customer Shipping Address',
                        type: 'string',
                        default: null,
                      },
                      customer_service_address: {
                        title: 'Customer Service Address',
                        type: 'string',
                        default: null,
                      },
                      customer_remittance_address: {
                        title: 'Customer Remittance Address',
                        type: 'string',
                        default: null,
                      },
                      abn_number: {
                        title: 'Abn Number',
                        type: 'string',
                        default: null,
                      },
                      gst_number: {
                        title: 'Gst Number',
                        type: 'string',
                        default: null,
                      },
                      pan_number: {
                        title: 'Pan Number',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  merchant_information: {
                    required: [
                      'merchant_name',
                      'merchant_address',
                      'merchant_phone',
                      'merchant_email',
                      'merchant_fax',
                      'merchant_website',
                      'merchant_tax_id',
                      'merchant_siret',
                      'merchant_siren',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number',
                    ],
                    title: 'MerchantInformationInvoice',
                    type: 'object',
                    properties: {
                      merchant_name: {
                        title: 'Merchant Name',
                        type: 'string',
                        default: null,
                      },
                      merchant_address: {
                        title: 'Merchant Address',
                        type: 'string',
                        default: null,
                      },
                      merchant_phone: {
                        title: 'Merchant Phone',
                        type: 'string',
                        default: null,
                      },
                      merchant_email: {
                        title: 'Merchant Email',
                        type: 'string',
                        default: null,
                      },
                      merchant_fax: {
                        title: 'Merchant Fax',
                        type: 'string',
                        default: null,
                      },
                      merchant_website: {
                        title: 'Merchant Website',
                        type: 'string',
                        default: null,
                      },
                      merchant_tax_id: {
                        title: 'Merchant Tax Id',
                        type: 'string',
                        default: null,
                      },
                      merchant_siret: {
                        title: 'Merchant Siret',
                        type: 'string',
                        default: null,
                      },
                      merchant_siren: {
                        title: 'Merchant Siren',
                        type: 'string',
                        default: null,
                      },
                      abn_number: {
                        title: 'Abn Number',
                        type: 'string',
                        default: null,
                      },
                      gst_number: {
                        title: 'Gst Number',
                        type: 'string',
                        default: null,
                      },
                      pan_number: {
                        title: 'Pan Number',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  invoice_number: {
                    default: null,
                    title: 'Invoice Number',
                    type: 'string',
                  },
                  invoice_total: {
                    default: null,
                    title: 'Invoice Total',
                    type: 'integer',
                  },
                  invoice_subtotal: {
                    default: null,
                    title: 'Invoice Subtotal',
                    type: 'integer',
                  },
                  gratuity: {
                    default: null,
                    title: 'Gratuity',
                    type: 'integer',
                  },
                  amount_due: {
                    default: null,
                    title: 'Amount Due',
                    type: 'integer',
                  },
                  previous_unpaid_balance: {
                    default: null,
                    title: 'Previous Unpaid Balance',
                    type: 'integer',
                  },
                  discount: {
                    default: null,
                    title: 'Discount',
                    type: 'integer',
                  },
                  taxes: {
                    title: 'Taxes',
                    type: 'array',
                    items: {
                      required: ['value', 'rate'],
                      title: 'TaxesInvoice',
                      type: 'object',
                      properties: {
                        value: { title: 'Value', type: 'integer' },
                        rate: { title: 'Rate', type: 'integer' },
                      },
                    },
                  },
                  service_charge: {
                    default: null,
                    title: 'Service Charge',
                    type: 'integer',
                  },
                  payment_term: {
                    default: null,
                    title: 'Payment Term',
                    type: 'string',
                  },
                  purchase_order: {
                    default: null,
                    title: 'Purchase Order',
                    type: 'string',
                  },
                  date: { default: null, title: 'Date', type: 'string' },
                  due_date: {
                    default: null,
                    title: 'Due Date',
                    type: 'string',
                  },
                  service_date: {
                    default: null,
                    title: 'Service Date',
                    type: 'string',
                  },
                  service_due_date: {
                    default: null,
                    title: 'Service Due Date',
                    type: 'string',
                  },
                  po_number: {
                    default: null,
                    title: 'Po Number',
                    type: 'string',
                  },
                  locale: {
                    required: ['currency', 'language'],
                    title: 'LocaleInvoice',
                    type: 'object',
                    properties: {
                      currency: {
                        title: 'Currency',
                        type: 'string',
                        default: null,
                      },
                      language: {
                        title: 'Language',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  bank_informations: {
                    required: [
                      'account_number',
                      'iban',
                      'bsb',
                      'sort_code',
                      'vat_number',
                      'rooting_number',
                      'swift',
                    ],
                    title: 'BankInvoice',
                    type: 'object',
                    properties: {
                      account_number: {
                        title: 'Account Number',
                        type: 'string',
                        default: null,
                      },
                      iban: { title: 'Iban', type: 'string', default: null },
                      bsb: { title: 'Bsb', type: 'string', default: null },
                      sort_code: {
                        title: 'Sort Code',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                      rooting_number: {
                        title: 'Rooting Number',
                        type: 'string',
                        default: null,
                      },
                      swift: { title: 'Swift', type: 'string', default: null },
                    },
                  },
                  item_lines: {
                    title: 'Item Lines',
                    type: 'array',
                    items: {
                      title: 'ItemLinesInvoice',
                      type: 'object',
                      properties: {
                        description: {
                          default: null,
                          title: 'Description',
                          type: 'string',
                        },
                        quantity: {
                          default: null,
                          title: 'Quantity',
                          type: 'integer',
                        },
                        amount: {
                          default: null,
                          title: 'Amount',
                          type: 'integer',
                        },
                        unit_price: {
                          default: null,
                          title: 'Unit Price',
                          type: 'integer',
                        },
                        discount: {
                          default: null,
                          title: 'Discount',
                          type: 'integer',
                        },
                        product_code: {
                          default: null,
                          title: 'Product Code',
                          type: 'string',
                        },
                        date_item: {
                          default: null,
                          title: 'Date Item',
                          type: 'string',
                        },
                        tax_item: {
                          default: null,
                          title: 'Tax Item',
                          type: 'integer',
                        },
                        tax_rate: {
                          default: null,
                          title: 'Tax Rate',
                          type: 'integer',
                        },
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        klippa: {
          required: ['status'],
          title: 'ocrinvoice_parserInvoiceParserDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              title: 'Extracted Data',
              type: 'array',
              items: {
                title: 'InfosInvoiceParserDataClass',
                type: 'object',
                properties: {
                  customer_information: {
                    required: [
                      'customer_name',
                      'customer_address',
                      'customer_email',
                      'customer_id',
                      'customer_tax_id',
                      'customer_mailing_address',
                      'customer_billing_address',
                      'customer_shipping_address',
                      'customer_service_address',
                      'customer_remittance_address',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number',
                    ],
                    title: 'CustomerInformationInvoice',
                    type: 'object',
                    properties: {
                      customer_name: {
                        title: 'Customer Name',
                        type: 'string',
                        default: null,
                      },
                      customer_address: {
                        title: 'Customer Address',
                        type: 'string',
                        default: null,
                      },
                      customer_email: {
                        title: 'Customer Email',
                        type: 'string',
                        default: null,
                      },
                      customer_id: {
                        title: 'Customer Id',
                        type: 'string',
                        default: null,
                      },
                      customer_tax_id: {
                        title: 'Customer Tax Id',
                        type: 'string',
                        default: null,
                      },
                      customer_mailing_address: {
                        title: 'Customer Mailing Address',
                        type: 'string',
                        default: null,
                      },
                      customer_billing_address: {
                        title: 'Customer Billing Address',
                        type: 'string',
                        default: null,
                      },
                      customer_shipping_address: {
                        title: 'Customer Shipping Address',
                        type: 'string',
                        default: null,
                      },
                      customer_service_address: {
                        title: 'Customer Service Address',
                        type: 'string',
                        default: null,
                      },
                      customer_remittance_address: {
                        title: 'Customer Remittance Address',
                        type: 'string',
                        default: null,
                      },
                      abn_number: {
                        title: 'Abn Number',
                        type: 'string',
                        default: null,
                      },
                      gst_number: {
                        title: 'Gst Number',
                        type: 'string',
                        default: null,
                      },
                      pan_number: {
                        title: 'Pan Number',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  merchant_information: {
                    required: [
                      'merchant_name',
                      'merchant_address',
                      'merchant_phone',
                      'merchant_email',
                      'merchant_fax',
                      'merchant_website',
                      'merchant_tax_id',
                      'merchant_siret',
                      'merchant_siren',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number',
                    ],
                    title: 'MerchantInformationInvoice',
                    type: 'object',
                    properties: {
                      merchant_name: {
                        title: 'Merchant Name',
                        type: 'string',
                        default: null,
                      },
                      merchant_address: {
                        title: 'Merchant Address',
                        type: 'string',
                        default: null,
                      },
                      merchant_phone: {
                        title: 'Merchant Phone',
                        type: 'string',
                        default: null,
                      },
                      merchant_email: {
                        title: 'Merchant Email',
                        type: 'string',
                        default: null,
                      },
                      merchant_fax: {
                        title: 'Merchant Fax',
                        type: 'string',
                        default: null,
                      },
                      merchant_website: {
                        title: 'Merchant Website',
                        type: 'string',
                        default: null,
                      },
                      merchant_tax_id: {
                        title: 'Merchant Tax Id',
                        type: 'string',
                        default: null,
                      },
                      merchant_siret: {
                        title: 'Merchant Siret',
                        type: 'string',
                        default: null,
                      },
                      merchant_siren: {
                        title: 'Merchant Siren',
                        type: 'string',
                        default: null,
                      },
                      abn_number: {
                        title: 'Abn Number',
                        type: 'string',
                        default: null,
                      },
                      gst_number: {
                        title: 'Gst Number',
                        type: 'string',
                        default: null,
                      },
                      pan_number: {
                        title: 'Pan Number',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  invoice_number: {
                    default: null,
                    title: 'Invoice Number',
                    type: 'string',
                  },
                  invoice_total: {
                    default: null,
                    title: 'Invoice Total',
                    type: 'integer',
                  },
                  invoice_subtotal: {
                    default: null,
                    title: 'Invoice Subtotal',
                    type: 'integer',
                  },
                  gratuity: {
                    default: null,
                    title: 'Gratuity',
                    type: 'integer',
                  },
                  amount_due: {
                    default: null,
                    title: 'Amount Due',
                    type: 'integer',
                  },
                  previous_unpaid_balance: {
                    default: null,
                    title: 'Previous Unpaid Balance',
                    type: 'integer',
                  },
                  discount: {
                    default: null,
                    title: 'Discount',
                    type: 'integer',
                  },
                  taxes: {
                    title: 'Taxes',
                    type: 'array',
                    items: {
                      required: ['value', 'rate'],
                      title: 'TaxesInvoice',
                      type: 'object',
                      properties: {
                        value: { title: 'Value', type: 'integer' },
                        rate: { title: 'Rate', type: 'integer' },
                      },
                    },
                  },
                  service_charge: {
                    default: null,
                    title: 'Service Charge',
                    type: 'integer',
                  },
                  payment_term: {
                    default: null,
                    title: 'Payment Term',
                    type: 'string',
                  },
                  purchase_order: {
                    default: null,
                    title: 'Purchase Order',
                    type: 'string',
                  },
                  date: { default: null, title: 'Date', type: 'string' },
                  due_date: {
                    default: null,
                    title: 'Due Date',
                    type: 'string',
                  },
                  service_date: {
                    default: null,
                    title: 'Service Date',
                    type: 'string',
                  },
                  service_due_date: {
                    default: null,
                    title: 'Service Due Date',
                    type: 'string',
                  },
                  po_number: {
                    default: null,
                    title: 'Po Number',
                    type: 'string',
                  },
                  locale: {
                    required: ['currency', 'language'],
                    title: 'LocaleInvoice',
                    type: 'object',
                    properties: {
                      currency: {
                        title: 'Currency',
                        type: 'string',
                        default: null,
                      },
                      language: {
                        title: 'Language',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  bank_informations: {
                    required: [
                      'account_number',
                      'iban',
                      'bsb',
                      'sort_code',
                      'vat_number',
                      'rooting_number',
                      'swift',
                    ],
                    title: 'BankInvoice',
                    type: 'object',
                    properties: {
                      account_number: {
                        title: 'Account Number',
                        type: 'string',
                        default: null,
                      },
                      iban: { title: 'Iban', type: 'string', default: null },
                      bsb: { title: 'Bsb', type: 'string', default: null },
                      sort_code: {
                        title: 'Sort Code',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                      rooting_number: {
                        title: 'Rooting Number',
                        type: 'string',
                        default: null,
                      },
                      swift: { title: 'Swift', type: 'string', default: null },
                    },
                  },
                  item_lines: {
                    title: 'Item Lines',
                    type: 'array',
                    items: {
                      title: 'ItemLinesInvoice',
                      type: 'object',
                      properties: {
                        description: {
                          default: null,
                          title: 'Description',
                          type: 'string',
                        },
                        quantity: {
                          default: null,
                          title: 'Quantity',
                          type: 'integer',
                        },
                        amount: {
                          default: null,
                          title: 'Amount',
                          type: 'integer',
                        },
                        unit_price: {
                          default: null,
                          title: 'Unit Price',
                          type: 'integer',
                        },
                        discount: {
                          default: null,
                          title: 'Discount',
                          type: 'integer',
                        },
                        product_code: {
                          default: null,
                          title: 'Product Code',
                          type: 'string',
                        },
                        date_item: {
                          default: null,
                          title: 'Date Item',
                          type: 'string',
                        },
                        tax_item: {
                          default: null,
                          title: 'Tax Item',
                          type: 'integer',
                        },
                        tax_rate: {
                          default: null,
                          title: 'Tax Rate',
                          type: 'integer',
                        },
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        amazon: {
          required: ['status'],
          title: 'ocrinvoice_parserInvoiceParserDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              title: 'Extracted Data',
              type: 'array',
              items: {
                title: 'InfosInvoiceParserDataClass',
                type: 'object',
                properties: {
                  customer_information: {
                    required: [
                      'customer_name',
                      'customer_address',
                      'customer_email',
                      'customer_id',
                      'customer_tax_id',
                      'customer_mailing_address',
                      'customer_billing_address',
                      'customer_shipping_address',
                      'customer_service_address',
                      'customer_remittance_address',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number',
                    ],
                    title: 'CustomerInformationInvoice',
                    type: 'object',
                    properties: {
                      customer_name: {
                        title: 'Customer Name',
                        type: 'string',
                        default: null,
                      },
                      customer_address: {
                        title: 'Customer Address',
                        type: 'string',
                        default: null,
                      },
                      customer_email: {
                        title: 'Customer Email',
                        type: 'string',
                        default: null,
                      },
                      customer_id: {
                        title: 'Customer Id',
                        type: 'string',
                        default: null,
                      },
                      customer_tax_id: {
                        title: 'Customer Tax Id',
                        type: 'string',
                        default: null,
                      },
                      customer_mailing_address: {
                        title: 'Customer Mailing Address',
                        type: 'string',
                        default: null,
                      },
                      customer_billing_address: {
                        title: 'Customer Billing Address',
                        type: 'string',
                        default: null,
                      },
                      customer_shipping_address: {
                        title: 'Customer Shipping Address',
                        type: 'string',
                        default: null,
                      },
                      customer_service_address: {
                        title: 'Customer Service Address',
                        type: 'string',
                        default: null,
                      },
                      customer_remittance_address: {
                        title: 'Customer Remittance Address',
                        type: 'string',
                        default: null,
                      },
                      abn_number: {
                        title: 'Abn Number',
                        type: 'string',
                        default: null,
                      },
                      gst_number: {
                        title: 'Gst Number',
                        type: 'string',
                        default: null,
                      },
                      pan_number: {
                        title: 'Pan Number',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  merchant_information: {
                    required: [
                      'merchant_name',
                      'merchant_address',
                      'merchant_phone',
                      'merchant_email',
                      'merchant_fax',
                      'merchant_website',
                      'merchant_tax_id',
                      'merchant_siret',
                      'merchant_siren',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number',
                    ],
                    title: 'MerchantInformationInvoice',
                    type: 'object',
                    properties: {
                      merchant_name: {
                        title: 'Merchant Name',
                        type: 'string',
                        default: null,
                      },
                      merchant_address: {
                        title: 'Merchant Address',
                        type: 'string',
                        default: null,
                      },
                      merchant_phone: {
                        title: 'Merchant Phone',
                        type: 'string',
                        default: null,
                      },
                      merchant_email: {
                        title: 'Merchant Email',
                        type: 'string',
                        default: null,
                      },
                      merchant_fax: {
                        title: 'Merchant Fax',
                        type: 'string',
                        default: null,
                      },
                      merchant_website: {
                        title: 'Merchant Website',
                        type: 'string',
                        default: null,
                      },
                      merchant_tax_id: {
                        title: 'Merchant Tax Id',
                        type: 'string',
                        default: null,
                      },
                      merchant_siret: {
                        title: 'Merchant Siret',
                        type: 'string',
                        default: null,
                      },
                      merchant_siren: {
                        title: 'Merchant Siren',
                        type: 'string',
                        default: null,
                      },
                      abn_number: {
                        title: 'Abn Number',
                        type: 'string',
                        default: null,
                      },
                      gst_number: {
                        title: 'Gst Number',
                        type: 'string',
                        default: null,
                      },
                      pan_number: {
                        title: 'Pan Number',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  invoice_number: {
                    default: null,
                    title: 'Invoice Number',
                    type: 'string',
                  },
                  invoice_total: {
                    default: null,
                    title: 'Invoice Total',
                    type: 'integer',
                  },
                  invoice_subtotal: {
                    default: null,
                    title: 'Invoice Subtotal',
                    type: 'integer',
                  },
                  gratuity: {
                    default: null,
                    title: 'Gratuity',
                    type: 'integer',
                  },
                  amount_due: {
                    default: null,
                    title: 'Amount Due',
                    type: 'integer',
                  },
                  previous_unpaid_balance: {
                    default: null,
                    title: 'Previous Unpaid Balance',
                    type: 'integer',
                  },
                  discount: {
                    default: null,
                    title: 'Discount',
                    type: 'integer',
                  },
                  taxes: {
                    title: 'Taxes',
                    type: 'array',
                    items: {
                      required: ['value', 'rate'],
                      title: 'TaxesInvoice',
                      type: 'object',
                      properties: {
                        value: { title: 'Value', type: 'integer' },
                        rate: { title: 'Rate', type: 'integer' },
                      },
                    },
                  },
                  service_charge: {
                    default: null,
                    title: 'Service Charge',
                    type: 'integer',
                  },
                  payment_term: {
                    default: null,
                    title: 'Payment Term',
                    type: 'string',
                  },
                  purchase_order: {
                    default: null,
                    title: 'Purchase Order',
                    type: 'string',
                  },
                  date: { default: null, title: 'Date', type: 'string' },
                  due_date: {
                    default: null,
                    title: 'Due Date',
                    type: 'string',
                  },
                  service_date: {
                    default: null,
                    title: 'Service Date',
                    type: 'string',
                  },
                  service_due_date: {
                    default: null,
                    title: 'Service Due Date',
                    type: 'string',
                  },
                  po_number: {
                    default: null,
                    title: 'Po Number',
                    type: 'string',
                  },
                  locale: {
                    required: ['currency', 'language'],
                    title: 'LocaleInvoice',
                    type: 'object',
                    properties: {
                      currency: {
                        title: 'Currency',
                        type: 'string',
                        default: null,
                      },
                      language: {
                        title: 'Language',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  bank_informations: {
                    required: [
                      'account_number',
                      'iban',
                      'bsb',
                      'sort_code',
                      'vat_number',
                      'rooting_number',
                      'swift',
                    ],
                    title: 'BankInvoice',
                    type: 'object',
                    properties: {
                      account_number: {
                        title: 'Account Number',
                        type: 'string',
                        default: null,
                      },
                      iban: { title: 'Iban', type: 'string', default: null },
                      bsb: { title: 'Bsb', type: 'string', default: null },
                      sort_code: {
                        title: 'Sort Code',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                      rooting_number: {
                        title: 'Rooting Number',
                        type: 'string',
                        default: null,
                      },
                      swift: { title: 'Swift', type: 'string', default: null },
                    },
                  },
                  item_lines: {
                    title: 'Item Lines',
                    type: 'array',
                    items: {
                      title: 'ItemLinesInvoice',
                      type: 'object',
                      properties: {
                        description: {
                          default: null,
                          title: 'Description',
                          type: 'string',
                        },
                        quantity: {
                          default: null,
                          title: 'Quantity',
                          type: 'integer',
                        },
                        amount: {
                          default: null,
                          title: 'Amount',
                          type: 'integer',
                        },
                        unit_price: {
                          default: null,
                          title: 'Unit Price',
                          type: 'integer',
                        },
                        discount: {
                          default: null,
                          title: 'Discount',
                          type: 'integer',
                        },
                        product_code: {
                          default: null,
                          title: 'Product Code',
                          type: 'string',
                        },
                        date_item: {
                          default: null,
                          title: 'Date Item',
                          type: 'string',
                        },
                        tax_item: {
                          default: null,
                          title: 'Tax Item',
                          type: 'integer',
                        },
                        tax_rate: {
                          default: null,
                          title: 'Tax Rate',
                          type: 'integer',
                        },
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        'eden-ai': {
          required: ['status'],
          title: 'ocrinvoice_parserInvoiceParserDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              title: 'Extracted Data',
              type: 'array',
              items: {
                title: 'InfosInvoiceParserDataClass',
                type: 'object',
                properties: {
                  customer_information: {
                    required: [
                      'customer_name',
                      'customer_address',
                      'customer_email',
                      'customer_id',
                      'customer_tax_id',
                      'customer_mailing_address',
                      'customer_billing_address',
                      'customer_shipping_address',
                      'customer_service_address',
                      'customer_remittance_address',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number',
                    ],
                    title: 'CustomerInformationInvoice',
                    type: 'object',
                    properties: {
                      customer_name: {
                        title: 'Customer Name',
                        type: 'string',
                        default: null,
                      },
                      customer_address: {
                        title: 'Customer Address',
                        type: 'string',
                        default: null,
                      },
                      customer_email: {
                        title: 'Customer Email',
                        type: 'string',
                        default: null,
                      },
                      customer_id: {
                        title: 'Customer Id',
                        type: 'string',
                        default: null,
                      },
                      customer_tax_id: {
                        title: 'Customer Tax Id',
                        type: 'string',
                        default: null,
                      },
                      customer_mailing_address: {
                        title: 'Customer Mailing Address',
                        type: 'string',
                        default: null,
                      },
                      customer_billing_address: {
                        title: 'Customer Billing Address',
                        type: 'string',
                        default: null,
                      },
                      customer_shipping_address: {
                        title: 'Customer Shipping Address',
                        type: 'string',
                        default: null,
                      },
                      customer_service_address: {
                        title: 'Customer Service Address',
                        type: 'string',
                        default: null,
                      },
                      customer_remittance_address: {
                        title: 'Customer Remittance Address',
                        type: 'string',
                        default: null,
                      },
                      abn_number: {
                        title: 'Abn Number',
                        type: 'string',
                        default: null,
                      },
                      gst_number: {
                        title: 'Gst Number',
                        type: 'string',
                        default: null,
                      },
                      pan_number: {
                        title: 'Pan Number',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  merchant_information: {
                    required: [
                      'merchant_name',
                      'merchant_address',
                      'merchant_phone',
                      'merchant_email',
                      'merchant_fax',
                      'merchant_website',
                      'merchant_tax_id',
                      'merchant_siret',
                      'merchant_siren',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number',
                    ],
                    title: 'MerchantInformationInvoice',
                    type: 'object',
                    properties: {
                      merchant_name: {
                        title: 'Merchant Name',
                        type: 'string',
                        default: null,
                      },
                      merchant_address: {
                        title: 'Merchant Address',
                        type: 'string',
                        default: null,
                      },
                      merchant_phone: {
                        title: 'Merchant Phone',
                        type: 'string',
                        default: null,
                      },
                      merchant_email: {
                        title: 'Merchant Email',
                        type: 'string',
                        default: null,
                      },
                      merchant_fax: {
                        title: 'Merchant Fax',
                        type: 'string',
                        default: null,
                      },
                      merchant_website: {
                        title: 'Merchant Website',
                        type: 'string',
                        default: null,
                      },
                      merchant_tax_id: {
                        title: 'Merchant Tax Id',
                        type: 'string',
                        default: null,
                      },
                      merchant_siret: {
                        title: 'Merchant Siret',
                        type: 'string',
                        default: null,
                      },
                      merchant_siren: {
                        title: 'Merchant Siren',
                        type: 'string',
                        default: null,
                      },
                      abn_number: {
                        title: 'Abn Number',
                        type: 'string',
                        default: null,
                      },
                      gst_number: {
                        title: 'Gst Number',
                        type: 'string',
                        default: null,
                      },
                      pan_number: {
                        title: 'Pan Number',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  invoice_number: {
                    default: null,
                    title: 'Invoice Number',
                    type: 'string',
                  },
                  invoice_total: {
                    default: null,
                    title: 'Invoice Total',
                    type: 'integer',
                  },
                  invoice_subtotal: {
                    default: null,
                    title: 'Invoice Subtotal',
                    type: 'integer',
                  },
                  gratuity: {
                    default: null,
                    title: 'Gratuity',
                    type: 'integer',
                  },
                  amount_due: {
                    default: null,
                    title: 'Amount Due',
                    type: 'integer',
                  },
                  previous_unpaid_balance: {
                    default: null,
                    title: 'Previous Unpaid Balance',
                    type: 'integer',
                  },
                  discount: {
                    default: null,
                    title: 'Discount',
                    type: 'integer',
                  },
                  taxes: {
                    title: 'Taxes',
                    type: 'array',
                    items: {
                      required: ['value', 'rate'],
                      title: 'TaxesInvoice',
                      type: 'object',
                      properties: {
                        value: { title: 'Value', type: 'integer' },
                        rate: { title: 'Rate', type: 'integer' },
                      },
                    },
                  },
                  service_charge: {
                    default: null,
                    title: 'Service Charge',
                    type: 'integer',
                  },
                  payment_term: {
                    default: null,
                    title: 'Payment Term',
                    type: 'string',
                  },
                  purchase_order: {
                    default: null,
                    title: 'Purchase Order',
                    type: 'string',
                  },
                  date: { default: null, title: 'Date', type: 'string' },
                  due_date: {
                    default: null,
                    title: 'Due Date',
                    type: 'string',
                  },
                  service_date: {
                    default: null,
                    title: 'Service Date',
                    type: 'string',
                  },
                  service_due_date: {
                    default: null,
                    title: 'Service Due Date',
                    type: 'string',
                  },
                  po_number: {
                    default: null,
                    title: 'Po Number',
                    type: 'string',
                  },
                  locale: {
                    required: ['currency', 'language'],
                    title: 'LocaleInvoice',
                    type: 'object',
                    properties: {
                      currency: {
                        title: 'Currency',
                        type: 'string',
                        default: null,
                      },
                      language: {
                        title: 'Language',
                        type: 'string',
                        default: null,
                      },
                    },
                  },
                  bank_informations: {
                    required: [
                      'account_number',
                      'iban',
                      'bsb',
                      'sort_code',
                      'vat_number',
                      'rooting_number',
                      'swift',
                    ],
                    title: 'BankInvoice',
                    type: 'object',
                    properties: {
                      account_number: {
                        title: 'Account Number',
                        type: 'string',
                        default: null,
                      },
                      iban: { title: 'Iban', type: 'string', default: null },
                      bsb: { title: 'Bsb', type: 'string', default: null },
                      sort_code: {
                        title: 'Sort Code',
                        type: 'string',
                        default: null,
                      },
                      vat_number: {
                        title: 'Vat Number',
                        type: 'string',
                        default: null,
                      },
                      rooting_number: {
                        title: 'Rooting Number',
                        type: 'string',
                        default: null,
                      },
                      swift: { title: 'Swift', type: 'string', default: null },
                    },
                  },
                  item_lines: {
                    title: 'Item Lines',
                    type: 'array',
                    items: {
                      title: 'ItemLinesInvoice',
                      type: 'object',
                      properties: {
                        description: {
                          default: null,
                          title: 'Description',
                          type: 'string',
                        },
                        quantity: {
                          default: null,
                          title: 'Quantity',
                          type: 'integer',
                        },
                        amount: {
                          default: null,
                          title: 'Amount',
                          type: 'integer',
                        },
                        unit_price: {
                          default: null,
                          title: 'Unit Price',
                          type: 'integer',
                        },
                        discount: {
                          default: null,
                          title: 'Discount',
                          type: 'integer',
                        },
                        product_code: {
                          default: null,
                          title: 'Product Code',
                          type: 'string',
                        },
                        date_item: {
                          default: null,
                          title: 'Date Item',
                          type: 'string',
                        },
                        tax_item: {
                          default: null,
                          title: 'Tax Item',
                          type: 'integer',
                        },
                        tax_rate: {
                          default: null,
                          title: 'Tax Rate',
                          type: 'integer',
                        },
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'ocrinvoice_parserResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const OcrOcrAsyncCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['amazon'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      webhook_receiver: {
        type: 'string',
        format: 'uri',
        minLength: 1,
        description:
          'Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.',
      },
      users_webhook_parameters: {
        type: 'object',
        additionalProperties: true,
        description:
          "Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.",
      },
      file: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
      },
      file_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.pdf'],
      },
    },
    required: ['providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      type: 'object',
      properties: { public_id: { type: 'string', format: 'uuid' } },
      required: ['public_id'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const OcrOcrAsyncRetrieve = {
  response: {
    '200': {
      type: 'object',
      properties: {
        jobs: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              providers: { type: 'string' },
              nb: { type: 'integer' },
              nb_ok: { type: 'integer' },
              public_id: { type: 'string', format: 'uuid' },
              state: {
                enum: ['finished', 'failed', 'Timeout error', 'processing'],
                type: 'string',
                description:
                  '* `finished` - finished\n* `failed` - failed\n* `Timeout error` - Timeout error\n* `processing` - processing\n\n`finished` `failed` `Timeout error` `processing`',
              },
              created_at: { type: 'string', format: 'date-time' },
            },
            required: [
              'created_at',
              'nb',
              'nb_ok',
              'providers',
              'public_id',
              'state',
            ],
          },
        },
      },
      required: ['jobs'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const OcrOcrAsyncRetrieve2 = {
  metadata: {
    allOf: [
      {
        type: 'object',
        properties: {
          public_id: {
            type: 'string',
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
        },
        required: ['public_id'],
      },
      {
        type: 'object',
        properties: {
          response_as_dict: {
            type: 'boolean',
            default: true,
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
          show_original_response: {
            type: 'boolean',
            default: false,
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
        },
        required: [],
      },
    ],
  },
  response: {
    '200': {
      properties: {
        results: {
          properties: {
            oneai: {
              required: ['raw_text', 'number_of_pages', 'id', 'final_status'],
              title: 'ocrocr_asyncOcrAsyncDataClass',
              type: 'object',
              properties: {
                raw_text: { title: 'Raw Text', type: 'string' },
                pages: {
                  description: 'List of pages',
                  title: 'Pages',
                  type: 'array',
                  items: {
                    description:
                      'Page of a document\n\n    Attributes:\n        lines (Sequence[Line]): List of lines of the page\n    ',
                    title: 'Page',
                    type: 'object',
                    properties: {
                      lines: {
                        description: 'List of lines',
                        title: 'Lines',
                        type: 'array',
                        items: {
                          description:
                            'Line of a document\n\n    Attributes:\n        text (str): Text detected in the line\n        bounding_boxes (Sequence[BoundingBox]): Bounding boxes of the words in the line\n        words (Sequence[Word]): List of words of the line\n        confidence (float): Confidence of the line\n    ',
                          required: ['text', 'bounding_box', 'confidence'],
                          title: 'Line',
                          type: 'object',
                          properties: {
                            text: {
                              description: 'Text detected in the line',
                              title: 'Text',
                              type: 'string',
                            },
                            words: {
                              description: 'List of words',
                              title: 'Words',
                              type: 'array',
                              items: {
                                description:
                                  'Word of a document\n\n    Attributes:\n        text (str): Text detected in the word\n        bounding_boxes (Sequence[BoundingBox]): Bounding boxes of the words in the word\n        confidence (float): Confidence score of the word\n    ',
                                required: [
                                  'text',
                                  'bounding_box',
                                  'confidence',
                                ],
                                title: 'Word',
                                type: 'object',
                                properties: {
                                  text: {
                                    description: 'Text detected in the word',
                                    title: 'Text',
                                    type: 'string',
                                  },
                                  bounding_box: {
                                    description:
                                      'Bounding box of a word in the image\n\n    Attributes:\n        left (float): Left coordinate of the bounding box\n        top (float): Top coordinate of the bounding box\n        width (float): Width of the bounding box\n        height (float): Height of the bounding box\n        text (str): Text detected in the bounding box\n\n    Constructor:\n        from_json (classmethod): Create a new instance of BoundingBox from a JSON object\n        from_normalized_vertices (classmethod): Create a new instance of BoundingBox from normalized vertices\n        unknown (classmethod): Return a invalid bouding_box with all field filled with `-1`\n    ',
                                    required: [
                                      'left',
                                      'top',
                                      'width',
                                      'height',
                                    ],
                                    title: 'BoundingBox',
                                    type: 'object',
                                    properties: {
                                      left: {
                                        description:
                                          'Left coordinate of the bounding box',
                                        title: 'Left',
                                        type: 'integer',
                                      },
                                      top: {
                                        description:
                                          'Top coordinate of the bounding box',
                                        title: 'Top',
                                        type: 'integer',
                                      },
                                      width: {
                                        description:
                                          'Width of the bounding box',
                                        title: 'Width',
                                        type: 'integer',
                                      },
                                      height: {
                                        description:
                                          'Height of the bounding box',
                                        title: 'Height',
                                        type: 'integer',
                                      },
                                    },
                                  },
                                  confidence: {
                                    description: 'Confidence score of the word',
                                    title: 'Confidence',
                                    type: 'integer',
                                  },
                                },
                              },
                            },
                            bounding_box: {
                              description:
                                'Bounding box of a word in the image\n\n    Attributes:\n        left (float): Left coordinate of the bounding box\n        top (float): Top coordinate of the bounding box\n        width (float): Width of the bounding box\n        height (float): Height of the bounding box\n        text (str): Text detected in the bounding box\n\n    Constructor:\n        from_json (classmethod): Create a new instance of BoundingBox from a JSON object\n        from_normalized_vertices (classmethod): Create a new instance of BoundingBox from normalized vertices\n        unknown (classmethod): Return a invalid bouding_box with all field filled with `-1`\n    ',
                              required: ['left', 'top', 'width', 'height'],
                              title: 'BoundingBox',
                              type: 'object',
                              properties: {
                                left: {
                                  description:
                                    'Left coordinate of the bounding box',
                                  title: 'Left',
                                  type: 'integer',
                                },
                                top: {
                                  description:
                                    'Top coordinate of the bounding box',
                                  title: 'Top',
                                  type: 'integer',
                                },
                                width: {
                                  description: 'Width of the bounding box',
                                  title: 'Width',
                                  type: 'integer',
                                },
                                height: {
                                  description: 'Height of the bounding box',
                                  title: 'Height',
                                  type: 'integer',
                                },
                              },
                            },
                            confidence: {
                              description: 'Confidence of the line',
                              title: 'Confidence',
                              type: 'integer',
                            },
                          },
                        },
                      },
                    },
                  },
                },
                number_of_pages: {
                  description: 'Number of pages in the document',
                  title: 'Number Of Pages',
                  type: 'integer',
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
            google: {
              required: ['raw_text', 'number_of_pages', 'id', 'final_status'],
              title: 'ocrocr_asyncOcrAsyncDataClass',
              type: 'object',
              properties: {
                raw_text: { title: 'Raw Text', type: 'string' },
                pages: {
                  description: 'List of pages',
                  title: 'Pages',
                  type: 'array',
                  items: {
                    description:
                      'Page of a document\n\n    Attributes:\n        lines (Sequence[Line]): List of lines of the page\n    ',
                    title: 'Page',
                    type: 'object',
                    properties: {
                      lines: {
                        description: 'List of lines',
                        title: 'Lines',
                        type: 'array',
                        items: {
                          description:
                            'Line of a document\n\n    Attributes:\n        text (str): Text detected in the line\n        bounding_boxes (Sequence[BoundingBox]): Bounding boxes of the words in the line\n        words (Sequence[Word]): List of words of the line\n        confidence (float): Confidence of the line\n    ',
                          required: ['text', 'bounding_box', 'confidence'],
                          title: 'Line',
                          type: 'object',
                          properties: {
                            text: {
                              description: 'Text detected in the line',
                              title: 'Text',
                              type: 'string',
                            },
                            words: {
                              description: 'List of words',
                              title: 'Words',
                              type: 'array',
                              items: {
                                description:
                                  'Word of a document\n\n    Attributes:\n        text (str): Text detected in the word\n        bounding_boxes (Sequence[BoundingBox]): Bounding boxes of the words in the word\n        confidence (float): Confidence score of the word\n    ',
                                required: [
                                  'text',
                                  'bounding_box',
                                  'confidence',
                                ],
                                title: 'Word',
                                type: 'object',
                                properties: {
                                  text: {
                                    description: 'Text detected in the word',
                                    title: 'Text',
                                    type: 'string',
                                  },
                                  bounding_box: {
                                    description:
                                      'Bounding box of a word in the image\n\n    Attributes:\n        left (float): Left coordinate of the bounding box\n        top (float): Top coordinate of the bounding box\n        width (float): Width of the bounding box\n        height (float): Height of the bounding box\n        text (str): Text detected in the bounding box\n\n    Constructor:\n        from_json (classmethod): Create a new instance of BoundingBox from a JSON object\n        from_normalized_vertices (classmethod): Create a new instance of BoundingBox from normalized vertices\n        unknown (classmethod): Return a invalid bouding_box with all field filled with `-1`\n    ',
                                    required: [
                                      'left',
                                      'top',
                                      'width',
                                      'height',
                                    ],
                                    title: 'BoundingBox',
                                    type: 'object',
                                    properties: {
                                      left: {
                                        description:
                                          'Left coordinate of the bounding box',
                                        title: 'Left',
                                        type: 'integer',
                                      },
                                      top: {
                                        description:
                                          'Top coordinate of the bounding box',
                                        title: 'Top',
                                        type: 'integer',
                                      },
                                      width: {
                                        description:
                                          'Width of the bounding box',
                                        title: 'Width',
                                        type: 'integer',
                                      },
                                      height: {
                                        description:
                                          'Height of the bounding box',
                                        title: 'Height',
                                        type: 'integer',
                                      },
                                    },
                                  },
                                  confidence: {
                                    description: 'Confidence score of the word',
                                    title: 'Confidence',
                                    type: 'integer',
                                  },
                                },
                              },
                            },
                            bounding_box: {
                              description:
                                'Bounding box of a word in the image\n\n    Attributes:\n        left (float): Left coordinate of the bounding box\n        top (float): Top coordinate of the bounding box\n        width (float): Width of the bounding box\n        height (float): Height of the bounding box\n        text (str): Text detected in the bounding box\n\n    Constructor:\n        from_json (classmethod): Create a new instance of BoundingBox from a JSON object\n        from_normalized_vertices (classmethod): Create a new instance of BoundingBox from normalized vertices\n        unknown (classmethod): Return a invalid bouding_box with all field filled with `-1`\n    ',
                              required: ['left', 'top', 'width', 'height'],
                              title: 'BoundingBox',
                              type: 'object',
                              properties: {
                                left: {
                                  description:
                                    'Left coordinate of the bounding box',
                                  title: 'Left',
                                  type: 'integer',
                                },
                                top: {
                                  description:
                                    'Top coordinate of the bounding box',
                                  title: 'Top',
                                  type: 'integer',
                                },
                                width: {
                                  description: 'Width of the bounding box',
                                  title: 'Width',
                                  type: 'integer',
                                },
                                height: {
                                  description: 'Height of the bounding box',
                                  title: 'Height',
                                  type: 'integer',
                                },
                              },
                            },
                            confidence: {
                              description: 'Confidence of the line',
                              title: 'Confidence',
                              type: 'integer',
                            },
                          },
                        },
                      },
                    },
                  },
                },
                number_of_pages: {
                  description: 'Number of pages in the document',
                  title: 'Number Of Pages',
                  type: 'integer',
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
            amazon: {
              required: ['raw_text', 'number_of_pages', 'id', 'final_status'],
              title: 'ocrocr_asyncOcrAsyncDataClass',
              type: 'object',
              properties: {
                raw_text: { title: 'Raw Text', type: 'string' },
                pages: {
                  description: 'List of pages',
                  title: 'Pages',
                  type: 'array',
                  items: {
                    description:
                      'Page of a document\n\n    Attributes:\n        lines (Sequence[Line]): List of lines of the page\n    ',
                    title: 'Page',
                    type: 'object',
                    properties: {
                      lines: {
                        description: 'List of lines',
                        title: 'Lines',
                        type: 'array',
                        items: {
                          description:
                            'Line of a document\n\n    Attributes:\n        text (str): Text detected in the line\n        bounding_boxes (Sequence[BoundingBox]): Bounding boxes of the words in the line\n        words (Sequence[Word]): List of words of the line\n        confidence (float): Confidence of the line\n    ',
                          required: ['text', 'bounding_box', 'confidence'],
                          title: 'Line',
                          type: 'object',
                          properties: {
                            text: {
                              description: 'Text detected in the line',
                              title: 'Text',
                              type: 'string',
                            },
                            words: {
                              description: 'List of words',
                              title: 'Words',
                              type: 'array',
                              items: {
                                description:
                                  'Word of a document\n\n    Attributes:\n        text (str): Text detected in the word\n        bounding_boxes (Sequence[BoundingBox]): Bounding boxes of the words in the word\n        confidence (float): Confidence score of the word\n    ',
                                required: [
                                  'text',
                                  'bounding_box',
                                  'confidence',
                                ],
                                title: 'Word',
                                type: 'object',
                                properties: {
                                  text: {
                                    description: 'Text detected in the word',
                                    title: 'Text',
                                    type: 'string',
                                  },
                                  bounding_box: {
                                    description:
                                      'Bounding box of a word in the image\n\n    Attributes:\n        left (float): Left coordinate of the bounding box\n        top (float): Top coordinate of the bounding box\n        width (float): Width of the bounding box\n        height (float): Height of the bounding box\n        text (str): Text detected in the bounding box\n\n    Constructor:\n        from_json (classmethod): Create a new instance of BoundingBox from a JSON object\n        from_normalized_vertices (classmethod): Create a new instance of BoundingBox from normalized vertices\n        unknown (classmethod): Return a invalid bouding_box with all field filled with `-1`\n    ',
                                    required: [
                                      'left',
                                      'top',
                                      'width',
                                      'height',
                                    ],
                                    title: 'BoundingBox',
                                    type: 'object',
                                    properties: {
                                      left: {
                                        description:
                                          'Left coordinate of the bounding box',
                                        title: 'Left',
                                        type: 'integer',
                                      },
                                      top: {
                                        description:
                                          'Top coordinate of the bounding box',
                                        title: 'Top',
                                        type: 'integer',
                                      },
                                      width: {
                                        description:
                                          'Width of the bounding box',
                                        title: 'Width',
                                        type: 'integer',
                                      },
                                      height: {
                                        description:
                                          'Height of the bounding box',
                                        title: 'Height',
                                        type: 'integer',
                                      },
                                    },
                                  },
                                  confidence: {
                                    description: 'Confidence score of the word',
                                    title: 'Confidence',
                                    type: 'integer',
                                  },
                                },
                              },
                            },
                            bounding_box: {
                              description:
                                'Bounding box of a word in the image\n\n    Attributes:\n        left (float): Left coordinate of the bounding box\n        top (float): Top coordinate of the bounding box\n        width (float): Width of the bounding box\n        height (float): Height of the bounding box\n        text (str): Text detected in the bounding box\n\n    Constructor:\n        from_json (classmethod): Create a new instance of BoundingBox from a JSON object\n        from_normalized_vertices (classmethod): Create a new instance of BoundingBox from normalized vertices\n        unknown (classmethod): Return a invalid bouding_box with all field filled with `-1`\n    ',
                              required: ['left', 'top', 'width', 'height'],
                              title: 'BoundingBox',
                              type: 'object',
                              properties: {
                                left: {
                                  description:
                                    'Left coordinate of the bounding box',
                                  title: 'Left',
                                  type: 'integer',
                                },
                                top: {
                                  description:
                                    'Top coordinate of the bounding box',
                                  title: 'Top',
                                  type: 'integer',
                                },
                                width: {
                                  description: 'Width of the bounding box',
                                  title: 'Width',
                                  type: 'integer',
                                },
                                height: {
                                  description: 'Height of the bounding box',
                                  title: 'Height',
                                  type: 'integer',
                                },
                              },
                            },
                            confidence: {
                              description: 'Confidence of the line',
                              title: 'Confidence',
                              type: 'integer',
                            },
                          },
                        },
                      },
                    },
                  },
                },
                number_of_pages: {
                  description: 'Number of pages in the document',
                  title: 'Number Of Pages',
                  type: 'integer',
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
          },
          title: 'ocrocr_asyncModel',
          type: 'object',
        },
        error: { title: 'Error', type: 'string' },
        public_id: { format: 'uuid', title: 'Public Id', type: 'string' },
        status: { title: 'Status', type: 'string' },
      },
      required: ['results', 'error', 'public_id', 'status'],
      title: 'asyncocrocr_asyncResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const OcrOcrCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['clarifai,google,sentisight,microsoft,amazon,api4ai'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      file: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
      },
      file_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.png'],
      },
      language: {
        type: ['string', 'null'],
        description:
          'Language code of the language the document is written in (ex: fr (French), en (English), es (Spanish))',
        examples: ['en'],
      },
    },
    required: ['providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        clarifai: {
          required: ['text', 'status'],
          title: 'ocrocrOcrDataClass',
          type: 'object',
          properties: {
            text: { title: 'Text', type: 'string' },
            bounding_boxes: {
              title: 'Bounding Boxes',
              type: 'array',
              items: {
                required: ['text', 'left', 'top', 'width', 'height'],
                title: 'Bounding_box',
                type: 'object',
                properties: {
                  text: { title: 'Text', type: 'string' },
                  left: { title: 'Left', type: 'integer' },
                  top: { title: 'Top', type: 'integer' },
                  width: { title: 'Width', type: 'integer' },
                  height: { title: 'Height', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        base64: {
          required: ['text', 'status'],
          title: 'ocrocrOcrDataClass',
          type: 'object',
          properties: {
            text: { title: 'Text', type: 'string' },
            bounding_boxes: {
              title: 'Bounding Boxes',
              type: 'array',
              items: {
                required: ['text', 'left', 'top', 'width', 'height'],
                title: 'Bounding_box',
                type: 'object',
                properties: {
                  text: { title: 'Text', type: 'string' },
                  left: { title: 'Left', type: 'integer' },
                  top: { title: 'Top', type: 'integer' },
                  width: { title: 'Width', type: 'integer' },
                  height: { title: 'Height', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        microsoft: {
          required: ['text', 'status'],
          title: 'ocrocrOcrDataClass',
          type: 'object',
          properties: {
            text: { title: 'Text', type: 'string' },
            bounding_boxes: {
              title: 'Bounding Boxes',
              type: 'array',
              items: {
                required: ['text', 'left', 'top', 'width', 'height'],
                title: 'Bounding_box',
                type: 'object',
                properties: {
                  text: { title: 'Text', type: 'string' },
                  left: { title: 'Left', type: 'integer' },
                  top: { title: 'Top', type: 'integer' },
                  width: { title: 'Width', type: 'integer' },
                  height: { title: 'Height', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        api4ai: {
          required: ['text', 'status'],
          title: 'ocrocrOcrDataClass',
          type: 'object',
          properties: {
            text: { title: 'Text', type: 'string' },
            bounding_boxes: {
              title: 'Bounding Boxes',
              type: 'array',
              items: {
                required: ['text', 'left', 'top', 'width', 'height'],
                title: 'Bounding_box',
                type: 'object',
                properties: {
                  text: { title: 'Text', type: 'string' },
                  left: { title: 'Left', type: 'integer' },
                  top: { title: 'Top', type: 'integer' },
                  width: { title: 'Width', type: 'integer' },
                  height: { title: 'Height', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        google: {
          required: ['text', 'status'],
          title: 'ocrocrOcrDataClass',
          type: 'object',
          properties: {
            text: { title: 'Text', type: 'string' },
            bounding_boxes: {
              title: 'Bounding Boxes',
              type: 'array',
              items: {
                required: ['text', 'left', 'top', 'width', 'height'],
                title: 'Bounding_box',
                type: 'object',
                properties: {
                  text: { title: 'Text', type: 'string' },
                  left: { title: 'Left', type: 'integer' },
                  top: { title: 'Top', type: 'integer' },
                  width: { title: 'Width', type: 'integer' },
                  height: { title: 'Height', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        sentisight: {
          required: ['text', 'status'],
          title: 'ocrocrOcrDataClass',
          type: 'object',
          properties: {
            text: { title: 'Text', type: 'string' },
            bounding_boxes: {
              title: 'Bounding Boxes',
              type: 'array',
              items: {
                required: ['text', 'left', 'top', 'width', 'height'],
                title: 'Bounding_box',
                type: 'object',
                properties: {
                  text: { title: 'Text', type: 'string' },
                  left: { title: 'Left', type: 'integer' },
                  top: { title: 'Top', type: 'integer' },
                  width: { title: 'Width', type: 'integer' },
                  height: { title: 'Height', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        amazon: {
          required: ['text', 'status'],
          title: 'ocrocrOcrDataClass',
          type: 'object',
          properties: {
            text: { title: 'Text', type: 'string' },
            bounding_boxes: {
              title: 'Bounding Boxes',
              type: 'array',
              items: {
                required: ['text', 'left', 'top', 'width', 'height'],
                title: 'Bounding_box',
                type: 'object',
                properties: {
                  text: { title: 'Text', type: 'string' },
                  left: { title: 'Left', type: 'integer' },
                  top: { title: 'Top', type: 'integer' },
                  width: { title: 'Width', type: 'integer' },
                  height: { title: 'Height', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'ocrocrResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const OcrOcrTablesAsyncCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['google,microsoft,amazon'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      webhook_receiver: {
        type: 'string',
        format: 'uri',
        minLength: 1,
        description:
          'Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.',
      },
      users_webhook_parameters: {
        type: 'object',
        additionalProperties: true,
        description:
          "Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.",
      },
      file: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
      },
      file_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.png'],
      },
      language: {
        type: ['string', 'null'],
        description:
          'Language code of the language the document is written in (ex: fr (French), en (English), es (Spanish))',
        examples: ['en'],
      },
    },
    required: ['providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      type: 'object',
      properties: { public_id: { type: 'string', format: 'uuid' } },
      required: ['public_id'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const OcrOcrTablesAsyncRetrieve = {
  response: {
    '200': {
      type: 'object',
      properties: {
        jobs: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              providers: { type: 'string' },
              nb: { type: 'integer' },
              nb_ok: { type: 'integer' },
              public_id: { type: 'string', format: 'uuid' },
              state: {
                enum: ['finished', 'failed', 'Timeout error', 'processing'],
                type: 'string',
                description:
                  '* `finished` - finished\n* `failed` - failed\n* `Timeout error` - Timeout error\n* `processing` - processing\n\n`finished` `failed` `Timeout error` `processing`',
              },
              created_at: { type: 'string', format: 'date-time' },
            },
            required: [
              'created_at',
              'nb',
              'nb_ok',
              'providers',
              'public_id',
              'state',
            ],
          },
        },
      },
      required: ['jobs'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const OcrOcrTablesAsyncRetrieve2 = {
  metadata: {
    allOf: [
      {
        type: 'object',
        properties: {
          public_id: {
            type: 'string',
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
        },
        required: ['public_id'],
      },
      {
        type: 'object',
        properties: {
          response_as_dict: {
            type: 'boolean',
            default: true,
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
          show_original_response: {
            type: 'boolean',
            default: false,
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
        },
        required: [],
      },
    ],
  },
  response: {
    '200': {
      properties: {
        results: {
          properties: {
            google: {
              required: ['num_pages', 'id', 'final_status'],
              title: 'ocrocr_tables_asyncOcrTablesAsyncDataClass',
              type: 'object',
              properties: {
                pages: {
                  title: 'Pages',
                  type: 'array',
                  items: {
                    description:
                      'Page of a document\n\n    Attributes:\n        lines (Sequence[Line]): List of lines of the page\n    ',
                    title: 'Page',
                    type: 'object',
                    properties: {
                      lines: {
                        description: 'List of lines',
                        title: 'Lines',
                        type: 'array',
                        items: {
                          description:
                            'Line of a document\n\n    Attributes:\n        text (str): Text detected in the line\n        bounding_boxes (Sequence[BoundingBox]): Bounding boxes of the words in the line\n        words (Sequence[Word]): List of words of the line\n        confidence (float): Confidence of the line\n    ',
                          required: ['text', 'bounding_box', 'confidence'],
                          title: 'Line',
                          type: 'object',
                          properties: {
                            text: {
                              description: 'Text detected in the line',
                              title: 'Text',
                              type: 'string',
                            },
                            words: {
                              description: 'List of words',
                              title: 'Words',
                              type: 'array',
                              items: {
                                description:
                                  'Word of a document\n\n    Attributes:\n        text (str): Text detected in the word\n        bounding_boxes (Sequence[BoundingBox]): Bounding boxes of the words in the word\n        confidence (float): Confidence score of the word\n    ',
                                required: [
                                  'text',
                                  'bounding_box',
                                  'confidence',
                                ],
                                title: 'Word',
                                type: 'object',
                                properties: {
                                  text: {
                                    description: 'Text detected in the word',
                                    title: 'Text',
                                    type: 'string',
                                  },
                                  bounding_box: {
                                    description:
                                      'Bounding box of a word in the image\n\n    Attributes:\n        left (float): Left coordinate of the bounding box\n        top (float): Top coordinate of the bounding box\n        width (float): Width of the bounding box\n        height (float): Height of the bounding box\n        text (str): Text detected in the bounding box\n\n    Constructor:\n        from_json (classmethod): Create a new instance of BoundingBox from a JSON object\n        from_normalized_vertices (classmethod): Create a new instance of BoundingBox from normalized vertices\n        unknown (classmethod): Return a invalid bouding_box with all field filled with `-1`\n    ',
                                    required: [
                                      'left',
                                      'top',
                                      'width',
                                      'height',
                                    ],
                                    title: 'BoundingBox',
                                    type: 'object',
                                    properties: {
                                      left: {
                                        description:
                                          'Left coordinate of the bounding box',
                                        title: 'Left',
                                        type: 'integer',
                                      },
                                      top: {
                                        description:
                                          'Top coordinate of the bounding box',
                                        title: 'Top',
                                        type: 'integer',
                                      },
                                      width: {
                                        description:
                                          'Width of the bounding box',
                                        title: 'Width',
                                        type: 'integer',
                                      },
                                      height: {
                                        description:
                                          'Height of the bounding box',
                                        title: 'Height',
                                        type: 'integer',
                                      },
                                    },
                                  },
                                  confidence: {
                                    description: 'Confidence score of the word',
                                    title: 'Confidence',
                                    type: 'integer',
                                  },
                                },
                              },
                            },
                            bounding_box: {
                              description:
                                'Bounding box of a word in the image\n\n    Attributes:\n        left (float): Left coordinate of the bounding box\n        top (float): Top coordinate of the bounding box\n        width (float): Width of the bounding box\n        height (float): Height of the bounding box\n        text (str): Text detected in the bounding box\n\n    Constructor:\n        from_json (classmethod): Create a new instance of BoundingBox from a JSON object\n        from_normalized_vertices (classmethod): Create a new instance of BoundingBox from normalized vertices\n        unknown (classmethod): Return a invalid bouding_box with all field filled with `-1`\n    ',
                              required: ['left', 'top', 'width', 'height'],
                              title: 'BoundingBox',
                              type: 'object',
                              properties: {
                                left: {
                                  description:
                                    'Left coordinate of the bounding box',
                                  title: 'Left',
                                  type: 'integer',
                                },
                                top: {
                                  description:
                                    'Top coordinate of the bounding box',
                                  title: 'Top',
                                  type: 'integer',
                                },
                                width: {
                                  description: 'Width of the bounding box',
                                  title: 'Width',
                                  type: 'integer',
                                },
                                height: {
                                  description: 'Height of the bounding box',
                                  title: 'Height',
                                  type: 'integer',
                                },
                              },
                            },
                            confidence: {
                              description: 'Confidence of the line',
                              title: 'Confidence',
                              type: 'integer',
                            },
                          },
                        },
                      },
                    },
                  },
                },
                num_pages: { title: 'Num Pages', type: 'integer' },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
            microsoft: {
              required: ['num_pages', 'id', 'final_status'],
              title: 'ocrocr_tables_asyncOcrTablesAsyncDataClass',
              type: 'object',
              properties: {
                pages: {
                  title: 'Pages',
                  type: 'array',
                  items: {
                    description:
                      'Page of a document\n\n    Attributes:\n        lines (Sequence[Line]): List of lines of the page\n    ',
                    title: 'Page',
                    type: 'object',
                    properties: {
                      lines: {
                        description: 'List of lines',
                        title: 'Lines',
                        type: 'array',
                        items: {
                          description:
                            'Line of a document\n\n    Attributes:\n        text (str): Text detected in the line\n        bounding_boxes (Sequence[BoundingBox]): Bounding boxes of the words in the line\n        words (Sequence[Word]): List of words of the line\n        confidence (float): Confidence of the line\n    ',
                          required: ['text', 'bounding_box', 'confidence'],
                          title: 'Line',
                          type: 'object',
                          properties: {
                            text: {
                              description: 'Text detected in the line',
                              title: 'Text',
                              type: 'string',
                            },
                            words: {
                              description: 'List of words',
                              title: 'Words',
                              type: 'array',
                              items: {
                                description:
                                  'Word of a document\n\n    Attributes:\n        text (str): Text detected in the word\n        bounding_boxes (Sequence[BoundingBox]): Bounding boxes of the words in the word\n        confidence (float): Confidence score of the word\n    ',
                                required: [
                                  'text',
                                  'bounding_box',
                                  'confidence',
                                ],
                                title: 'Word',
                                type: 'object',
                                properties: {
                                  text: {
                                    description: 'Text detected in the word',
                                    title: 'Text',
                                    type: 'string',
                                  },
                                  bounding_box: {
                                    description:
                                      'Bounding box of a word in the image\n\n    Attributes:\n        left (float): Left coordinate of the bounding box\n        top (float): Top coordinate of the bounding box\n        width (float): Width of the bounding box\n        height (float): Height of the bounding box\n        text (str): Text detected in the bounding box\n\n    Constructor:\n        from_json (classmethod): Create a new instance of BoundingBox from a JSON object\n        from_normalized_vertices (classmethod): Create a new instance of BoundingBox from normalized vertices\n        unknown (classmethod): Return a invalid bouding_box with all field filled with `-1`\n    ',
                                    required: [
                                      'left',
                                      'top',
                                      'width',
                                      'height',
                                    ],
                                    title: 'BoundingBox',
                                    type: 'object',
                                    properties: {
                                      left: {
                                        description:
                                          'Left coordinate of the bounding box',
                                        title: 'Left',
                                        type: 'integer',
                                      },
                                      top: {
                                        description:
                                          'Top coordinate of the bounding box',
                                        title: 'Top',
                                        type: 'integer',
                                      },
                                      width: {
                                        description:
                                          'Width of the bounding box',
                                        title: 'Width',
                                        type: 'integer',
                                      },
                                      height: {
                                        description:
                                          'Height of the bounding box',
                                        title: 'Height',
                                        type: 'integer',
                                      },
                                    },
                                  },
                                  confidence: {
                                    description: 'Confidence score of the word',
                                    title: 'Confidence',
                                    type: 'integer',
                                  },
                                },
                              },
                            },
                            bounding_box: {
                              description:
                                'Bounding box of a word in the image\n\n    Attributes:\n        left (float): Left coordinate of the bounding box\n        top (float): Top coordinate of the bounding box\n        width (float): Width of the bounding box\n        height (float): Height of the bounding box\n        text (str): Text detected in the bounding box\n\n    Constructor:\n        from_json (classmethod): Create a new instance of BoundingBox from a JSON object\n        from_normalized_vertices (classmethod): Create a new instance of BoundingBox from normalized vertices\n        unknown (classmethod): Return a invalid bouding_box with all field filled with `-1`\n    ',
                              required: ['left', 'top', 'width', 'height'],
                              title: 'BoundingBox',
                              type: 'object',
                              properties: {
                                left: {
                                  description:
                                    'Left coordinate of the bounding box',
                                  title: 'Left',
                                  type: 'integer',
                                },
                                top: {
                                  description:
                                    'Top coordinate of the bounding box',
                                  title: 'Top',
                                  type: 'integer',
                                },
                                width: {
                                  description: 'Width of the bounding box',
                                  title: 'Width',
                                  type: 'integer',
                                },
                                height: {
                                  description: 'Height of the bounding box',
                                  title: 'Height',
                                  type: 'integer',
                                },
                              },
                            },
                            confidence: {
                              description: 'Confidence of the line',
                              title: 'Confidence',
                              type: 'integer',
                            },
                          },
                        },
                      },
                    },
                  },
                },
                num_pages: { title: 'Num Pages', type: 'integer' },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
            amazon: {
              required: ['num_pages', 'id', 'final_status'],
              title: 'ocrocr_tables_asyncOcrTablesAsyncDataClass',
              type: 'object',
              properties: {
                pages: {
                  title: 'Pages',
                  type: 'array',
                  items: {
                    description:
                      'Page of a document\n\n    Attributes:\n        lines (Sequence[Line]): List of lines of the page\n    ',
                    title: 'Page',
                    type: 'object',
                    properties: {
                      lines: {
                        description: 'List of lines',
                        title: 'Lines',
                        type: 'array',
                        items: {
                          description:
                            'Line of a document\n\n    Attributes:\n        text (str): Text detected in the line\n        bounding_boxes (Sequence[BoundingBox]): Bounding boxes of the words in the line\n        words (Sequence[Word]): List of words of the line\n        confidence (float): Confidence of the line\n    ',
                          required: ['text', 'bounding_box', 'confidence'],
                          title: 'Line',
                          type: 'object',
                          properties: {
                            text: {
                              description: 'Text detected in the line',
                              title: 'Text',
                              type: 'string',
                            },
                            words: {
                              description: 'List of words',
                              title: 'Words',
                              type: 'array',
                              items: {
                                description:
                                  'Word of a document\n\n    Attributes:\n        text (str): Text detected in the word\n        bounding_boxes (Sequence[BoundingBox]): Bounding boxes of the words in the word\n        confidence (float): Confidence score of the word\n    ',
                                required: [
                                  'text',
                                  'bounding_box',
                                  'confidence',
                                ],
                                title: 'Word',
                                type: 'object',
                                properties: {
                                  text: {
                                    description: 'Text detected in the word',
                                    title: 'Text',
                                    type: 'string',
                                  },
                                  bounding_box: {
                                    description:
                                      'Bounding box of a word in the image\n\n    Attributes:\n        left (float): Left coordinate of the bounding box\n        top (float): Top coordinate of the bounding box\n        width (float): Width of the bounding box\n        height (float): Height of the bounding box\n        text (str): Text detected in the bounding box\n\n    Constructor:\n        from_json (classmethod): Create a new instance of BoundingBox from a JSON object\n        from_normalized_vertices (classmethod): Create a new instance of BoundingBox from normalized vertices\n        unknown (classmethod): Return a invalid bouding_box with all field filled with `-1`\n    ',
                                    required: [
                                      'left',
                                      'top',
                                      'width',
                                      'height',
                                    ],
                                    title: 'BoundingBox',
                                    type: 'object',
                                    properties: {
                                      left: {
                                        description:
                                          'Left coordinate of the bounding box',
                                        title: 'Left',
                                        type: 'integer',
                                      },
                                      top: {
                                        description:
                                          'Top coordinate of the bounding box',
                                        title: 'Top',
                                        type: 'integer',
                                      },
                                      width: {
                                        description:
                                          'Width of the bounding box',
                                        title: 'Width',
                                        type: 'integer',
                                      },
                                      height: {
                                        description:
                                          'Height of the bounding box',
                                        title: 'Height',
                                        type: 'integer',
                                      },
                                    },
                                  },
                                  confidence: {
                                    description: 'Confidence score of the word',
                                    title: 'Confidence',
                                    type: 'integer',
                                  },
                                },
                              },
                            },
                            bounding_box: {
                              description:
                                'Bounding box of a word in the image\n\n    Attributes:\n        left (float): Left coordinate of the bounding box\n        top (float): Top coordinate of the bounding box\n        width (float): Width of the bounding box\n        height (float): Height of the bounding box\n        text (str): Text detected in the bounding box\n\n    Constructor:\n        from_json (classmethod): Create a new instance of BoundingBox from a JSON object\n        from_normalized_vertices (classmethod): Create a new instance of BoundingBox from normalized vertices\n        unknown (classmethod): Return a invalid bouding_box with all field filled with `-1`\n    ',
                              required: ['left', 'top', 'width', 'height'],
                              title: 'BoundingBox',
                              type: 'object',
                              properties: {
                                left: {
                                  description:
                                    'Left coordinate of the bounding box',
                                  title: 'Left',
                                  type: 'integer',
                                },
                                top: {
                                  description:
                                    'Top coordinate of the bounding box',
                                  title: 'Top',
                                  type: 'integer',
                                },
                                width: {
                                  description: 'Width of the bounding box',
                                  title: 'Width',
                                  type: 'integer',
                                },
                                height: {
                                  description: 'Height of the bounding box',
                                  title: 'Height',
                                  type: 'integer',
                                },
                              },
                            },
                            confidence: {
                              description: 'Confidence of the line',
                              title: 'Confidence',
                              type: 'integer',
                            },
                          },
                        },
                      },
                    },
                  },
                },
                num_pages: { title: 'Num Pages', type: 'integer' },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
          },
          title: 'ocrocr_tables_asyncModel',
          type: 'object',
        },
        error: { title: 'Error', type: 'string' },
        public_id: { format: 'uuid', title: 'Public Id', type: 'string' },
        status: { title: 'Status', type: 'string' },
      },
      required: ['results', 'error', 'public_id', 'status'],
      title: 'asyncocrocr_tables_asyncResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const OcrReceiptParserCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: [
          'base64,dataleon,veryfi,amazon,google,microsoft,klippa,mindee,tabscanner',
        ],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      file: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
      },
      file_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.jpg'],
      },
      language: {
        type: ['string', 'null'],
        description:
          'Language code of the language the document is written in (ex: fr (French), en (English), es (Spanish))',
        examples: ['en'],
      },
    },
    required: ['providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        veryfi: {
          required: ['status'],
          title: 'ocrreceipt_parserReceiptParserDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              title: 'Extracted Data',
              type: 'array',
              items: {
                title: 'InfosReceiptParserDataClass',
                type: 'object',
                properties: {
                  invoice_number: {
                    default: null,
                    title: 'Invoice Number',
                    type: 'string',
                  },
                  invoice_total: {
                    default: null,
                    title: 'Invoice Total',
                    type: 'integer',
                  },
                  invoice_subtotal: {
                    default: null,
                    title: 'Invoice Subtotal',
                    type: 'integer',
                  },
                  barcodes: {
                    title: 'Barcodes',
                    type: 'array',
                    items: {
                      required: ['value', 'type'],
                      title: 'BarCode',
                      type: 'object',
                      properties: {
                        value: { title: 'Value', type: 'string' },
                        type: { title: 'Type', type: 'string' },
                      },
                    },
                  },
                  category: {
                    default: null,
                    title: 'Category',
                    type: 'string',
                  },
                  date: { default: null, title: 'Date', type: 'string' },
                  due_date: {
                    default: null,
                    title: 'Due Date',
                    type: 'string',
                  },
                  time: { default: null, title: 'Time', type: 'string' },
                  customer_information: {
                    title: 'CustomerInformation',
                    type: 'object',
                    properties: {
                      customer_name: {
                        default: null,
                        title: 'Customer Name',
                        type: 'string',
                      },
                    },
                  },
                  merchant_information: {
                    title: 'MerchantInformation',
                    type: 'object',
                    properties: {
                      merchant_name: {
                        default: null,
                        title: 'Merchant Name',
                        type: 'string',
                      },
                      merchant_address: {
                        default: null,
                        title: 'Merchant Address',
                        type: 'string',
                      },
                      merchant_phone: {
                        default: null,
                        title: 'Merchant Phone',
                        type: 'string',
                      },
                      merchant_url: {
                        default: null,
                        title: 'Merchant Url',
                        type: 'string',
                      },
                      merchant_siret: {
                        default: null,
                        title: 'Merchant Siret',
                        type: 'string',
                      },
                      merchant_siren: {
                        default: null,
                        title: 'Merchant Siren',
                        type: 'string',
                      },
                    },
                  },
                  payment_information: {
                    title: 'PaymentInformation',
                    type: 'object',
                    properties: {
                      card_type: {
                        default: null,
                        title: 'Card Type',
                        type: 'string',
                      },
                      card_number: {
                        default: null,
                        title: 'Card Number',
                        type: 'string',
                      },
                      cash: { default: null, title: 'Cash', type: 'string' },
                      tip: { default: null, title: 'Tip', type: 'string' },
                      discount: {
                        default: null,
                        title: 'Discount',
                        type: 'string',
                      },
                      change: {
                        default: null,
                        title: 'Change',
                        type: 'string',
                      },
                    },
                  },
                  locale: {
                    title: 'Locale',
                    type: 'object',
                    properties: {
                      currency: {
                        default: null,
                        title: 'Currency',
                        type: 'string',
                      },
                      language: {
                        default: null,
                        title: 'Language',
                        type: 'string',
                      },
                      country: {
                        default: null,
                        title: 'Country',
                        type: 'string',
                      },
                    },
                  },
                  taxes: {
                    title: 'Taxes',
                    type: 'array',
                    items: {
                      title: 'Taxes',
                      type: 'object',
                      properties: {
                        taxes: {
                          default: null,
                          title: 'Taxes',
                          type: 'integer',
                        },
                        rate: { default: null, title: 'Rate', type: 'integer' },
                      },
                    },
                  },
                  receipt_infos: {
                    title: 'Receipt Infos',
                    type: 'object',
                    additionalProperties: true,
                  },
                  item_lines: {
                    title: 'Item Lines',
                    type: 'array',
                    items: {
                      title: 'ItemLines',
                      type: 'object',
                      properties: {
                        description: {
                          default: null,
                          title: 'Description',
                          type: 'string',
                        },
                        quantity: {
                          default: null,
                          title: 'Quantity',
                          type: 'integer',
                        },
                        amount: {
                          default: null,
                          title: 'Amount',
                          type: 'integer',
                        },
                        unit_price: {
                          default: null,
                          title: 'Unit Price',
                          type: 'integer',
                        },
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        base64: {
          required: ['status'],
          title: 'ocrreceipt_parserReceiptParserDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              title: 'Extracted Data',
              type: 'array',
              items: {
                title: 'InfosReceiptParserDataClass',
                type: 'object',
                properties: {
                  invoice_number: {
                    default: null,
                    title: 'Invoice Number',
                    type: 'string',
                  },
                  invoice_total: {
                    default: null,
                    title: 'Invoice Total',
                    type: 'integer',
                  },
                  invoice_subtotal: {
                    default: null,
                    title: 'Invoice Subtotal',
                    type: 'integer',
                  },
                  barcodes: {
                    title: 'Barcodes',
                    type: 'array',
                    items: {
                      required: ['value', 'type'],
                      title: 'BarCode',
                      type: 'object',
                      properties: {
                        value: { title: 'Value', type: 'string' },
                        type: { title: 'Type', type: 'string' },
                      },
                    },
                  },
                  category: {
                    default: null,
                    title: 'Category',
                    type: 'string',
                  },
                  date: { default: null, title: 'Date', type: 'string' },
                  due_date: {
                    default: null,
                    title: 'Due Date',
                    type: 'string',
                  },
                  time: { default: null, title: 'Time', type: 'string' },
                  customer_information: {
                    title: 'CustomerInformation',
                    type: 'object',
                    properties: {
                      customer_name: {
                        default: null,
                        title: 'Customer Name',
                        type: 'string',
                      },
                    },
                  },
                  merchant_information: {
                    title: 'MerchantInformation',
                    type: 'object',
                    properties: {
                      merchant_name: {
                        default: null,
                        title: 'Merchant Name',
                        type: 'string',
                      },
                      merchant_address: {
                        default: null,
                        title: 'Merchant Address',
                        type: 'string',
                      },
                      merchant_phone: {
                        default: null,
                        title: 'Merchant Phone',
                        type: 'string',
                      },
                      merchant_url: {
                        default: null,
                        title: 'Merchant Url',
                        type: 'string',
                      },
                      merchant_siret: {
                        default: null,
                        title: 'Merchant Siret',
                        type: 'string',
                      },
                      merchant_siren: {
                        default: null,
                        title: 'Merchant Siren',
                        type: 'string',
                      },
                    },
                  },
                  payment_information: {
                    title: 'PaymentInformation',
                    type: 'object',
                    properties: {
                      card_type: {
                        default: null,
                        title: 'Card Type',
                        type: 'string',
                      },
                      card_number: {
                        default: null,
                        title: 'Card Number',
                        type: 'string',
                      },
                      cash: { default: null, title: 'Cash', type: 'string' },
                      tip: { default: null, title: 'Tip', type: 'string' },
                      discount: {
                        default: null,
                        title: 'Discount',
                        type: 'string',
                      },
                      change: {
                        default: null,
                        title: 'Change',
                        type: 'string',
                      },
                    },
                  },
                  locale: {
                    title: 'Locale',
                    type: 'object',
                    properties: {
                      currency: {
                        default: null,
                        title: 'Currency',
                        type: 'string',
                      },
                      language: {
                        default: null,
                        title: 'Language',
                        type: 'string',
                      },
                      country: {
                        default: null,
                        title: 'Country',
                        type: 'string',
                      },
                    },
                  },
                  taxes: {
                    title: 'Taxes',
                    type: 'array',
                    items: {
                      title: 'Taxes',
                      type: 'object',
                      properties: {
                        taxes: {
                          default: null,
                          title: 'Taxes',
                          type: 'integer',
                        },
                        rate: { default: null, title: 'Rate', type: 'integer' },
                      },
                    },
                  },
                  receipt_infos: {
                    title: 'Receipt Infos',
                    type: 'object',
                    additionalProperties: true,
                  },
                  item_lines: {
                    title: 'Item Lines',
                    type: 'array',
                    items: {
                      title: 'ItemLines',
                      type: 'object',
                      properties: {
                        description: {
                          default: null,
                          title: 'Description',
                          type: 'string',
                        },
                        quantity: {
                          default: null,
                          title: 'Quantity',
                          type: 'integer',
                        },
                        amount: {
                          default: null,
                          title: 'Amount',
                          type: 'integer',
                        },
                        unit_price: {
                          default: null,
                          title: 'Unit Price',
                          type: 'integer',
                        },
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        mindee: {
          required: ['status'],
          title: 'ocrreceipt_parserReceiptParserDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              title: 'Extracted Data',
              type: 'array',
              items: {
                title: 'InfosReceiptParserDataClass',
                type: 'object',
                properties: {
                  invoice_number: {
                    default: null,
                    title: 'Invoice Number',
                    type: 'string',
                  },
                  invoice_total: {
                    default: null,
                    title: 'Invoice Total',
                    type: 'integer',
                  },
                  invoice_subtotal: {
                    default: null,
                    title: 'Invoice Subtotal',
                    type: 'integer',
                  },
                  barcodes: {
                    title: 'Barcodes',
                    type: 'array',
                    items: {
                      required: ['value', 'type'],
                      title: 'BarCode',
                      type: 'object',
                      properties: {
                        value: { title: 'Value', type: 'string' },
                        type: { title: 'Type', type: 'string' },
                      },
                    },
                  },
                  category: {
                    default: null,
                    title: 'Category',
                    type: 'string',
                  },
                  date: { default: null, title: 'Date', type: 'string' },
                  due_date: {
                    default: null,
                    title: 'Due Date',
                    type: 'string',
                  },
                  time: { default: null, title: 'Time', type: 'string' },
                  customer_information: {
                    title: 'CustomerInformation',
                    type: 'object',
                    properties: {
                      customer_name: {
                        default: null,
                        title: 'Customer Name',
                        type: 'string',
                      },
                    },
                  },
                  merchant_information: {
                    title: 'MerchantInformation',
                    type: 'object',
                    properties: {
                      merchant_name: {
                        default: null,
                        title: 'Merchant Name',
                        type: 'string',
                      },
                      merchant_address: {
                        default: null,
                        title: 'Merchant Address',
                        type: 'string',
                      },
                      merchant_phone: {
                        default: null,
                        title: 'Merchant Phone',
                        type: 'string',
                      },
                      merchant_url: {
                        default: null,
                        title: 'Merchant Url',
                        type: 'string',
                      },
                      merchant_siret: {
                        default: null,
                        title: 'Merchant Siret',
                        type: 'string',
                      },
                      merchant_siren: {
                        default: null,
                        title: 'Merchant Siren',
                        type: 'string',
                      },
                    },
                  },
                  payment_information: {
                    title: 'PaymentInformation',
                    type: 'object',
                    properties: {
                      card_type: {
                        default: null,
                        title: 'Card Type',
                        type: 'string',
                      },
                      card_number: {
                        default: null,
                        title: 'Card Number',
                        type: 'string',
                      },
                      cash: { default: null, title: 'Cash', type: 'string' },
                      tip: { default: null, title: 'Tip', type: 'string' },
                      discount: {
                        default: null,
                        title: 'Discount',
                        type: 'string',
                      },
                      change: {
                        default: null,
                        title: 'Change',
                        type: 'string',
                      },
                    },
                  },
                  locale: {
                    title: 'Locale',
                    type: 'object',
                    properties: {
                      currency: {
                        default: null,
                        title: 'Currency',
                        type: 'string',
                      },
                      language: {
                        default: null,
                        title: 'Language',
                        type: 'string',
                      },
                      country: {
                        default: null,
                        title: 'Country',
                        type: 'string',
                      },
                    },
                  },
                  taxes: {
                    title: 'Taxes',
                    type: 'array',
                    items: {
                      title: 'Taxes',
                      type: 'object',
                      properties: {
                        taxes: {
                          default: null,
                          title: 'Taxes',
                          type: 'integer',
                        },
                        rate: { default: null, title: 'Rate', type: 'integer' },
                      },
                    },
                  },
                  receipt_infos: {
                    title: 'Receipt Infos',
                    type: 'object',
                    additionalProperties: true,
                  },
                  item_lines: {
                    title: 'Item Lines',
                    type: 'array',
                    items: {
                      title: 'ItemLines',
                      type: 'object',
                      properties: {
                        description: {
                          default: null,
                          title: 'Description',
                          type: 'string',
                        },
                        quantity: {
                          default: null,
                          title: 'Quantity',
                          type: 'integer',
                        },
                        amount: {
                          default: null,
                          title: 'Amount',
                          type: 'integer',
                        },
                        unit_price: {
                          default: null,
                          title: 'Unit Price',
                          type: 'integer',
                        },
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        microsoft: {
          required: ['status'],
          title: 'ocrreceipt_parserReceiptParserDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              title: 'Extracted Data',
              type: 'array',
              items: {
                title: 'InfosReceiptParserDataClass',
                type: 'object',
                properties: {
                  invoice_number: {
                    default: null,
                    title: 'Invoice Number',
                    type: 'string',
                  },
                  invoice_total: {
                    default: null,
                    title: 'Invoice Total',
                    type: 'integer',
                  },
                  invoice_subtotal: {
                    default: null,
                    title: 'Invoice Subtotal',
                    type: 'integer',
                  },
                  barcodes: {
                    title: 'Barcodes',
                    type: 'array',
                    items: {
                      required: ['value', 'type'],
                      title: 'BarCode',
                      type: 'object',
                      properties: {
                        value: { title: 'Value', type: 'string' },
                        type: { title: 'Type', type: 'string' },
                      },
                    },
                  },
                  category: {
                    default: null,
                    title: 'Category',
                    type: 'string',
                  },
                  date: { default: null, title: 'Date', type: 'string' },
                  due_date: {
                    default: null,
                    title: 'Due Date',
                    type: 'string',
                  },
                  time: { default: null, title: 'Time', type: 'string' },
                  customer_information: {
                    title: 'CustomerInformation',
                    type: 'object',
                    properties: {
                      customer_name: {
                        default: null,
                        title: 'Customer Name',
                        type: 'string',
                      },
                    },
                  },
                  merchant_information: {
                    title: 'MerchantInformation',
                    type: 'object',
                    properties: {
                      merchant_name: {
                        default: null,
                        title: 'Merchant Name',
                        type: 'string',
                      },
                      merchant_address: {
                        default: null,
                        title: 'Merchant Address',
                        type: 'string',
                      },
                      merchant_phone: {
                        default: null,
                        title: 'Merchant Phone',
                        type: 'string',
                      },
                      merchant_url: {
                        default: null,
                        title: 'Merchant Url',
                        type: 'string',
                      },
                      merchant_siret: {
                        default: null,
                        title: 'Merchant Siret',
                        type: 'string',
                      },
                      merchant_siren: {
                        default: null,
                        title: 'Merchant Siren',
                        type: 'string',
                      },
                    },
                  },
                  payment_information: {
                    title: 'PaymentInformation',
                    type: 'object',
                    properties: {
                      card_type: {
                        default: null,
                        title: 'Card Type',
                        type: 'string',
                      },
                      card_number: {
                        default: null,
                        title: 'Card Number',
                        type: 'string',
                      },
                      cash: { default: null, title: 'Cash', type: 'string' },
                      tip: { default: null, title: 'Tip', type: 'string' },
                      discount: {
                        default: null,
                        title: 'Discount',
                        type: 'string',
                      },
                      change: {
                        default: null,
                        title: 'Change',
                        type: 'string',
                      },
                    },
                  },
                  locale: {
                    title: 'Locale',
                    type: 'object',
                    properties: {
                      currency: {
                        default: null,
                        title: 'Currency',
                        type: 'string',
                      },
                      language: {
                        default: null,
                        title: 'Language',
                        type: 'string',
                      },
                      country: {
                        default: null,
                        title: 'Country',
                        type: 'string',
                      },
                    },
                  },
                  taxes: {
                    title: 'Taxes',
                    type: 'array',
                    items: {
                      title: 'Taxes',
                      type: 'object',
                      properties: {
                        taxes: {
                          default: null,
                          title: 'Taxes',
                          type: 'integer',
                        },
                        rate: { default: null, title: 'Rate', type: 'integer' },
                      },
                    },
                  },
                  receipt_infos: {
                    title: 'Receipt Infos',
                    type: 'object',
                    additionalProperties: true,
                  },
                  item_lines: {
                    title: 'Item Lines',
                    type: 'array',
                    items: {
                      title: 'ItemLines',
                      type: 'object',
                      properties: {
                        description: {
                          default: null,
                          title: 'Description',
                          type: 'string',
                        },
                        quantity: {
                          default: null,
                          title: 'Quantity',
                          type: 'integer',
                        },
                        amount: {
                          default: null,
                          title: 'Amount',
                          type: 'integer',
                        },
                        unit_price: {
                          default: null,
                          title: 'Unit Price',
                          type: 'integer',
                        },
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        tabscanner: {
          required: ['status'],
          title: 'ocrreceipt_parserReceiptParserDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              title: 'Extracted Data',
              type: 'array',
              items: {
                title: 'InfosReceiptParserDataClass',
                type: 'object',
                properties: {
                  invoice_number: {
                    default: null,
                    title: 'Invoice Number',
                    type: 'string',
                  },
                  invoice_total: {
                    default: null,
                    title: 'Invoice Total',
                    type: 'integer',
                  },
                  invoice_subtotal: {
                    default: null,
                    title: 'Invoice Subtotal',
                    type: 'integer',
                  },
                  barcodes: {
                    title: 'Barcodes',
                    type: 'array',
                    items: {
                      required: ['value', 'type'],
                      title: 'BarCode',
                      type: 'object',
                      properties: {
                        value: { title: 'Value', type: 'string' },
                        type: { title: 'Type', type: 'string' },
                      },
                    },
                  },
                  category: {
                    default: null,
                    title: 'Category',
                    type: 'string',
                  },
                  date: { default: null, title: 'Date', type: 'string' },
                  due_date: {
                    default: null,
                    title: 'Due Date',
                    type: 'string',
                  },
                  time: { default: null, title: 'Time', type: 'string' },
                  customer_information: {
                    title: 'CustomerInformation',
                    type: 'object',
                    properties: {
                      customer_name: {
                        default: null,
                        title: 'Customer Name',
                        type: 'string',
                      },
                    },
                  },
                  merchant_information: {
                    title: 'MerchantInformation',
                    type: 'object',
                    properties: {
                      merchant_name: {
                        default: null,
                        title: 'Merchant Name',
                        type: 'string',
                      },
                      merchant_address: {
                        default: null,
                        title: 'Merchant Address',
                        type: 'string',
                      },
                      merchant_phone: {
                        default: null,
                        title: 'Merchant Phone',
                        type: 'string',
                      },
                      merchant_url: {
                        default: null,
                        title: 'Merchant Url',
                        type: 'string',
                      },
                      merchant_siret: {
                        default: null,
                        title: 'Merchant Siret',
                        type: 'string',
                      },
                      merchant_siren: {
                        default: null,
                        title: 'Merchant Siren',
                        type: 'string',
                      },
                    },
                  },
                  payment_information: {
                    title: 'PaymentInformation',
                    type: 'object',
                    properties: {
                      card_type: {
                        default: null,
                        title: 'Card Type',
                        type: 'string',
                      },
                      card_number: {
                        default: null,
                        title: 'Card Number',
                        type: 'string',
                      },
                      cash: { default: null, title: 'Cash', type: 'string' },
                      tip: { default: null, title: 'Tip', type: 'string' },
                      discount: {
                        default: null,
                        title: 'Discount',
                        type: 'string',
                      },
                      change: {
                        default: null,
                        title: 'Change',
                        type: 'string',
                      },
                    },
                  },
                  locale: {
                    title: 'Locale',
                    type: 'object',
                    properties: {
                      currency: {
                        default: null,
                        title: 'Currency',
                        type: 'string',
                      },
                      language: {
                        default: null,
                        title: 'Language',
                        type: 'string',
                      },
                      country: {
                        default: null,
                        title: 'Country',
                        type: 'string',
                      },
                    },
                  },
                  taxes: {
                    title: 'Taxes',
                    type: 'array',
                    items: {
                      title: 'Taxes',
                      type: 'object',
                      properties: {
                        taxes: {
                          default: null,
                          title: 'Taxes',
                          type: 'integer',
                        },
                        rate: { default: null, title: 'Rate', type: 'integer' },
                      },
                    },
                  },
                  receipt_infos: {
                    title: 'Receipt Infos',
                    type: 'object',
                    additionalProperties: true,
                  },
                  item_lines: {
                    title: 'Item Lines',
                    type: 'array',
                    items: {
                      title: 'ItemLines',
                      type: 'object',
                      properties: {
                        description: {
                          default: null,
                          title: 'Description',
                          type: 'string',
                        },
                        quantity: {
                          default: null,
                          title: 'Quantity',
                          type: 'integer',
                        },
                        amount: {
                          default: null,
                          title: 'Amount',
                          type: 'integer',
                        },
                        unit_price: {
                          default: null,
                          title: 'Unit Price',
                          type: 'integer',
                        },
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        dataleon: {
          required: ['status'],
          title: 'ocrreceipt_parserReceiptParserDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              title: 'Extracted Data',
              type: 'array',
              items: {
                title: 'InfosReceiptParserDataClass',
                type: 'object',
                properties: {
                  invoice_number: {
                    default: null,
                    title: 'Invoice Number',
                    type: 'string',
                  },
                  invoice_total: {
                    default: null,
                    title: 'Invoice Total',
                    type: 'integer',
                  },
                  invoice_subtotal: {
                    default: null,
                    title: 'Invoice Subtotal',
                    type: 'integer',
                  },
                  barcodes: {
                    title: 'Barcodes',
                    type: 'array',
                    items: {
                      required: ['value', 'type'],
                      title: 'BarCode',
                      type: 'object',
                      properties: {
                        value: { title: 'Value', type: 'string' },
                        type: { title: 'Type', type: 'string' },
                      },
                    },
                  },
                  category: {
                    default: null,
                    title: 'Category',
                    type: 'string',
                  },
                  date: { default: null, title: 'Date', type: 'string' },
                  due_date: {
                    default: null,
                    title: 'Due Date',
                    type: 'string',
                  },
                  time: { default: null, title: 'Time', type: 'string' },
                  customer_information: {
                    title: 'CustomerInformation',
                    type: 'object',
                    properties: {
                      customer_name: {
                        default: null,
                        title: 'Customer Name',
                        type: 'string',
                      },
                    },
                  },
                  merchant_information: {
                    title: 'MerchantInformation',
                    type: 'object',
                    properties: {
                      merchant_name: {
                        default: null,
                        title: 'Merchant Name',
                        type: 'string',
                      },
                      merchant_address: {
                        default: null,
                        title: 'Merchant Address',
                        type: 'string',
                      },
                      merchant_phone: {
                        default: null,
                        title: 'Merchant Phone',
                        type: 'string',
                      },
                      merchant_url: {
                        default: null,
                        title: 'Merchant Url',
                        type: 'string',
                      },
                      merchant_siret: {
                        default: null,
                        title: 'Merchant Siret',
                        type: 'string',
                      },
                      merchant_siren: {
                        default: null,
                        title: 'Merchant Siren',
                        type: 'string',
                      },
                    },
                  },
                  payment_information: {
                    title: 'PaymentInformation',
                    type: 'object',
                    properties: {
                      card_type: {
                        default: null,
                        title: 'Card Type',
                        type: 'string',
                      },
                      card_number: {
                        default: null,
                        title: 'Card Number',
                        type: 'string',
                      },
                      cash: { default: null, title: 'Cash', type: 'string' },
                      tip: { default: null, title: 'Tip', type: 'string' },
                      discount: {
                        default: null,
                        title: 'Discount',
                        type: 'string',
                      },
                      change: {
                        default: null,
                        title: 'Change',
                        type: 'string',
                      },
                    },
                  },
                  locale: {
                    title: 'Locale',
                    type: 'object',
                    properties: {
                      currency: {
                        default: null,
                        title: 'Currency',
                        type: 'string',
                      },
                      language: {
                        default: null,
                        title: 'Language',
                        type: 'string',
                      },
                      country: {
                        default: null,
                        title: 'Country',
                        type: 'string',
                      },
                    },
                  },
                  taxes: {
                    title: 'Taxes',
                    type: 'array',
                    items: {
                      title: 'Taxes',
                      type: 'object',
                      properties: {
                        taxes: {
                          default: null,
                          title: 'Taxes',
                          type: 'integer',
                        },
                        rate: { default: null, title: 'Rate', type: 'integer' },
                      },
                    },
                  },
                  receipt_infos: {
                    title: 'Receipt Infos',
                    type: 'object',
                    additionalProperties: true,
                  },
                  item_lines: {
                    title: 'Item Lines',
                    type: 'array',
                    items: {
                      title: 'ItemLines',
                      type: 'object',
                      properties: {
                        description: {
                          default: null,
                          title: 'Description',
                          type: 'string',
                        },
                        quantity: {
                          default: null,
                          title: 'Quantity',
                          type: 'integer',
                        },
                        amount: {
                          default: null,
                          title: 'Amount',
                          type: 'integer',
                        },
                        unit_price: {
                          default: null,
                          title: 'Unit Price',
                          type: 'integer',
                        },
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        google: {
          required: ['status'],
          title: 'ocrreceipt_parserReceiptParserDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              title: 'Extracted Data',
              type: 'array',
              items: {
                title: 'InfosReceiptParserDataClass',
                type: 'object',
                properties: {
                  invoice_number: {
                    default: null,
                    title: 'Invoice Number',
                    type: 'string',
                  },
                  invoice_total: {
                    default: null,
                    title: 'Invoice Total',
                    type: 'integer',
                  },
                  invoice_subtotal: {
                    default: null,
                    title: 'Invoice Subtotal',
                    type: 'integer',
                  },
                  barcodes: {
                    title: 'Barcodes',
                    type: 'array',
                    items: {
                      required: ['value', 'type'],
                      title: 'BarCode',
                      type: 'object',
                      properties: {
                        value: { title: 'Value', type: 'string' },
                        type: { title: 'Type', type: 'string' },
                      },
                    },
                  },
                  category: {
                    default: null,
                    title: 'Category',
                    type: 'string',
                  },
                  date: { default: null, title: 'Date', type: 'string' },
                  due_date: {
                    default: null,
                    title: 'Due Date',
                    type: 'string',
                  },
                  time: { default: null, title: 'Time', type: 'string' },
                  customer_information: {
                    title: 'CustomerInformation',
                    type: 'object',
                    properties: {
                      customer_name: {
                        default: null,
                        title: 'Customer Name',
                        type: 'string',
                      },
                    },
                  },
                  merchant_information: {
                    title: 'MerchantInformation',
                    type: 'object',
                    properties: {
                      merchant_name: {
                        default: null,
                        title: 'Merchant Name',
                        type: 'string',
                      },
                      merchant_address: {
                        default: null,
                        title: 'Merchant Address',
                        type: 'string',
                      },
                      merchant_phone: {
                        default: null,
                        title: 'Merchant Phone',
                        type: 'string',
                      },
                      merchant_url: {
                        default: null,
                        title: 'Merchant Url',
                        type: 'string',
                      },
                      merchant_siret: {
                        default: null,
                        title: 'Merchant Siret',
                        type: 'string',
                      },
                      merchant_siren: {
                        default: null,
                        title: 'Merchant Siren',
                        type: 'string',
                      },
                    },
                  },
                  payment_information: {
                    title: 'PaymentInformation',
                    type: 'object',
                    properties: {
                      card_type: {
                        default: null,
                        title: 'Card Type',
                        type: 'string',
                      },
                      card_number: {
                        default: null,
                        title: 'Card Number',
                        type: 'string',
                      },
                      cash: { default: null, title: 'Cash', type: 'string' },
                      tip: { default: null, title: 'Tip', type: 'string' },
                      discount: {
                        default: null,
                        title: 'Discount',
                        type: 'string',
                      },
                      change: {
                        default: null,
                        title: 'Change',
                        type: 'string',
                      },
                    },
                  },
                  locale: {
                    title: 'Locale',
                    type: 'object',
                    properties: {
                      currency: {
                        default: null,
                        title: 'Currency',
                        type: 'string',
                      },
                      language: {
                        default: null,
                        title: 'Language',
                        type: 'string',
                      },
                      country: {
                        default: null,
                        title: 'Country',
                        type: 'string',
                      },
                    },
                  },
                  taxes: {
                    title: 'Taxes',
                    type: 'array',
                    items: {
                      title: 'Taxes',
                      type: 'object',
                      properties: {
                        taxes: {
                          default: null,
                          title: 'Taxes',
                          type: 'integer',
                        },
                        rate: { default: null, title: 'Rate', type: 'integer' },
                      },
                    },
                  },
                  receipt_infos: {
                    title: 'Receipt Infos',
                    type: 'object',
                    additionalProperties: true,
                  },
                  item_lines: {
                    title: 'Item Lines',
                    type: 'array',
                    items: {
                      title: 'ItemLines',
                      type: 'object',
                      properties: {
                        description: {
                          default: null,
                          title: 'Description',
                          type: 'string',
                        },
                        quantity: {
                          default: null,
                          title: 'Quantity',
                          type: 'integer',
                        },
                        amount: {
                          default: null,
                          title: 'Amount',
                          type: 'integer',
                        },
                        unit_price: {
                          default: null,
                          title: 'Unit Price',
                          type: 'integer',
                        },
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        klippa: {
          required: ['status'],
          title: 'ocrreceipt_parserReceiptParserDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              title: 'Extracted Data',
              type: 'array',
              items: {
                title: 'InfosReceiptParserDataClass',
                type: 'object',
                properties: {
                  invoice_number: {
                    default: null,
                    title: 'Invoice Number',
                    type: 'string',
                  },
                  invoice_total: {
                    default: null,
                    title: 'Invoice Total',
                    type: 'integer',
                  },
                  invoice_subtotal: {
                    default: null,
                    title: 'Invoice Subtotal',
                    type: 'integer',
                  },
                  barcodes: {
                    title: 'Barcodes',
                    type: 'array',
                    items: {
                      required: ['value', 'type'],
                      title: 'BarCode',
                      type: 'object',
                      properties: {
                        value: { title: 'Value', type: 'string' },
                        type: { title: 'Type', type: 'string' },
                      },
                    },
                  },
                  category: {
                    default: null,
                    title: 'Category',
                    type: 'string',
                  },
                  date: { default: null, title: 'Date', type: 'string' },
                  due_date: {
                    default: null,
                    title: 'Due Date',
                    type: 'string',
                  },
                  time: { default: null, title: 'Time', type: 'string' },
                  customer_information: {
                    title: 'CustomerInformation',
                    type: 'object',
                    properties: {
                      customer_name: {
                        default: null,
                        title: 'Customer Name',
                        type: 'string',
                      },
                    },
                  },
                  merchant_information: {
                    title: 'MerchantInformation',
                    type: 'object',
                    properties: {
                      merchant_name: {
                        default: null,
                        title: 'Merchant Name',
                        type: 'string',
                      },
                      merchant_address: {
                        default: null,
                        title: 'Merchant Address',
                        type: 'string',
                      },
                      merchant_phone: {
                        default: null,
                        title: 'Merchant Phone',
                        type: 'string',
                      },
                      merchant_url: {
                        default: null,
                        title: 'Merchant Url',
                        type: 'string',
                      },
                      merchant_siret: {
                        default: null,
                        title: 'Merchant Siret',
                        type: 'string',
                      },
                      merchant_siren: {
                        default: null,
                        title: 'Merchant Siren',
                        type: 'string',
                      },
                    },
                  },
                  payment_information: {
                    title: 'PaymentInformation',
                    type: 'object',
                    properties: {
                      card_type: {
                        default: null,
                        title: 'Card Type',
                        type: 'string',
                      },
                      card_number: {
                        default: null,
                        title: 'Card Number',
                        type: 'string',
                      },
                      cash: { default: null, title: 'Cash', type: 'string' },
                      tip: { default: null, title: 'Tip', type: 'string' },
                      discount: {
                        default: null,
                        title: 'Discount',
                        type: 'string',
                      },
                      change: {
                        default: null,
                        title: 'Change',
                        type: 'string',
                      },
                    },
                  },
                  locale: {
                    title: 'Locale',
                    type: 'object',
                    properties: {
                      currency: {
                        default: null,
                        title: 'Currency',
                        type: 'string',
                      },
                      language: {
                        default: null,
                        title: 'Language',
                        type: 'string',
                      },
                      country: {
                        default: null,
                        title: 'Country',
                        type: 'string',
                      },
                    },
                  },
                  taxes: {
                    title: 'Taxes',
                    type: 'array',
                    items: {
                      title: 'Taxes',
                      type: 'object',
                      properties: {
                        taxes: {
                          default: null,
                          title: 'Taxes',
                          type: 'integer',
                        },
                        rate: { default: null, title: 'Rate', type: 'integer' },
                      },
                    },
                  },
                  receipt_infos: {
                    title: 'Receipt Infos',
                    type: 'object',
                    additionalProperties: true,
                  },
                  item_lines: {
                    title: 'Item Lines',
                    type: 'array',
                    items: {
                      title: 'ItemLines',
                      type: 'object',
                      properties: {
                        description: {
                          default: null,
                          title: 'Description',
                          type: 'string',
                        },
                        quantity: {
                          default: null,
                          title: 'Quantity',
                          type: 'integer',
                        },
                        amount: {
                          default: null,
                          title: 'Amount',
                          type: 'integer',
                        },
                        unit_price: {
                          default: null,
                          title: 'Unit Price',
                          type: 'integer',
                        },
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        amazon: {
          required: ['status'],
          title: 'ocrreceipt_parserReceiptParserDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              title: 'Extracted Data',
              type: 'array',
              items: {
                title: 'InfosReceiptParserDataClass',
                type: 'object',
                properties: {
                  invoice_number: {
                    default: null,
                    title: 'Invoice Number',
                    type: 'string',
                  },
                  invoice_total: {
                    default: null,
                    title: 'Invoice Total',
                    type: 'integer',
                  },
                  invoice_subtotal: {
                    default: null,
                    title: 'Invoice Subtotal',
                    type: 'integer',
                  },
                  barcodes: {
                    title: 'Barcodes',
                    type: 'array',
                    items: {
                      required: ['value', 'type'],
                      title: 'BarCode',
                      type: 'object',
                      properties: {
                        value: { title: 'Value', type: 'string' },
                        type: { title: 'Type', type: 'string' },
                      },
                    },
                  },
                  category: {
                    default: null,
                    title: 'Category',
                    type: 'string',
                  },
                  date: { default: null, title: 'Date', type: 'string' },
                  due_date: {
                    default: null,
                    title: 'Due Date',
                    type: 'string',
                  },
                  time: { default: null, title: 'Time', type: 'string' },
                  customer_information: {
                    title: 'CustomerInformation',
                    type: 'object',
                    properties: {
                      customer_name: {
                        default: null,
                        title: 'Customer Name',
                        type: 'string',
                      },
                    },
                  },
                  merchant_information: {
                    title: 'MerchantInformation',
                    type: 'object',
                    properties: {
                      merchant_name: {
                        default: null,
                        title: 'Merchant Name',
                        type: 'string',
                      },
                      merchant_address: {
                        default: null,
                        title: 'Merchant Address',
                        type: 'string',
                      },
                      merchant_phone: {
                        default: null,
                        title: 'Merchant Phone',
                        type: 'string',
                      },
                      merchant_url: {
                        default: null,
                        title: 'Merchant Url',
                        type: 'string',
                      },
                      merchant_siret: {
                        default: null,
                        title: 'Merchant Siret',
                        type: 'string',
                      },
                      merchant_siren: {
                        default: null,
                        title: 'Merchant Siren',
                        type: 'string',
                      },
                    },
                  },
                  payment_information: {
                    title: 'PaymentInformation',
                    type: 'object',
                    properties: {
                      card_type: {
                        default: null,
                        title: 'Card Type',
                        type: 'string',
                      },
                      card_number: {
                        default: null,
                        title: 'Card Number',
                        type: 'string',
                      },
                      cash: { default: null, title: 'Cash', type: 'string' },
                      tip: { default: null, title: 'Tip', type: 'string' },
                      discount: {
                        default: null,
                        title: 'Discount',
                        type: 'string',
                      },
                      change: {
                        default: null,
                        title: 'Change',
                        type: 'string',
                      },
                    },
                  },
                  locale: {
                    title: 'Locale',
                    type: 'object',
                    properties: {
                      currency: {
                        default: null,
                        title: 'Currency',
                        type: 'string',
                      },
                      language: {
                        default: null,
                        title: 'Language',
                        type: 'string',
                      },
                      country: {
                        default: null,
                        title: 'Country',
                        type: 'string',
                      },
                    },
                  },
                  taxes: {
                    title: 'Taxes',
                    type: 'array',
                    items: {
                      title: 'Taxes',
                      type: 'object',
                      properties: {
                        taxes: {
                          default: null,
                          title: 'Taxes',
                          type: 'integer',
                        },
                        rate: { default: null, title: 'Rate', type: 'integer' },
                      },
                    },
                  },
                  receipt_infos: {
                    title: 'Receipt Infos',
                    type: 'object',
                    additionalProperties: true,
                  },
                  item_lines: {
                    title: 'Item Lines',
                    type: 'array',
                    items: {
                      title: 'ItemLines',
                      type: 'object',
                      properties: {
                        description: {
                          default: null,
                          title: 'Description',
                          type: 'string',
                        },
                        quantity: {
                          default: null,
                          title: 'Quantity',
                          type: 'integer',
                        },
                        amount: {
                          default: null,
                          title: 'Amount',
                          type: 'integer',
                        },
                        unit_price: {
                          default: null,
                          title: 'Unit Price',
                          type: 'integer',
                        },
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        'eden-ai': {
          required: ['status'],
          title: 'ocrreceipt_parserReceiptParserDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              title: 'Extracted Data',
              type: 'array',
              items: {
                title: 'InfosReceiptParserDataClass',
                type: 'object',
                properties: {
                  invoice_number: {
                    default: null,
                    title: 'Invoice Number',
                    type: 'string',
                  },
                  invoice_total: {
                    default: null,
                    title: 'Invoice Total',
                    type: 'integer',
                  },
                  invoice_subtotal: {
                    default: null,
                    title: 'Invoice Subtotal',
                    type: 'integer',
                  },
                  barcodes: {
                    title: 'Barcodes',
                    type: 'array',
                    items: {
                      required: ['value', 'type'],
                      title: 'BarCode',
                      type: 'object',
                      properties: {
                        value: { title: 'Value', type: 'string' },
                        type: { title: 'Type', type: 'string' },
                      },
                    },
                  },
                  category: {
                    default: null,
                    title: 'Category',
                    type: 'string',
                  },
                  date: { default: null, title: 'Date', type: 'string' },
                  due_date: {
                    default: null,
                    title: 'Due Date',
                    type: 'string',
                  },
                  time: { default: null, title: 'Time', type: 'string' },
                  customer_information: {
                    title: 'CustomerInformation',
                    type: 'object',
                    properties: {
                      customer_name: {
                        default: null,
                        title: 'Customer Name',
                        type: 'string',
                      },
                    },
                  },
                  merchant_information: {
                    title: 'MerchantInformation',
                    type: 'object',
                    properties: {
                      merchant_name: {
                        default: null,
                        title: 'Merchant Name',
                        type: 'string',
                      },
                      merchant_address: {
                        default: null,
                        title: 'Merchant Address',
                        type: 'string',
                      },
                      merchant_phone: {
                        default: null,
                        title: 'Merchant Phone',
                        type: 'string',
                      },
                      merchant_url: {
                        default: null,
                        title: 'Merchant Url',
                        type: 'string',
                      },
                      merchant_siret: {
                        default: null,
                        title: 'Merchant Siret',
                        type: 'string',
                      },
                      merchant_siren: {
                        default: null,
                        title: 'Merchant Siren',
                        type: 'string',
                      },
                    },
                  },
                  payment_information: {
                    title: 'PaymentInformation',
                    type: 'object',
                    properties: {
                      card_type: {
                        default: null,
                        title: 'Card Type',
                        type: 'string',
                      },
                      card_number: {
                        default: null,
                        title: 'Card Number',
                        type: 'string',
                      },
                      cash: { default: null, title: 'Cash', type: 'string' },
                      tip: { default: null, title: 'Tip', type: 'string' },
                      discount: {
                        default: null,
                        title: 'Discount',
                        type: 'string',
                      },
                      change: {
                        default: null,
                        title: 'Change',
                        type: 'string',
                      },
                    },
                  },
                  locale: {
                    title: 'Locale',
                    type: 'object',
                    properties: {
                      currency: {
                        default: null,
                        title: 'Currency',
                        type: 'string',
                      },
                      language: {
                        default: null,
                        title: 'Language',
                        type: 'string',
                      },
                      country: {
                        default: null,
                        title: 'Country',
                        type: 'string',
                      },
                    },
                  },
                  taxes: {
                    title: 'Taxes',
                    type: 'array',
                    items: {
                      title: 'Taxes',
                      type: 'object',
                      properties: {
                        taxes: {
                          default: null,
                          title: 'Taxes',
                          type: 'integer',
                        },
                        rate: { default: null, title: 'Rate', type: 'integer' },
                      },
                    },
                  },
                  receipt_infos: {
                    title: 'Receipt Infos',
                    type: 'object',
                    additionalProperties: true,
                  },
                  item_lines: {
                    title: 'Item Lines',
                    type: 'array',
                    items: {
                      title: 'ItemLines',
                      type: 'object',
                      properties: {
                        description: {
                          default: null,
                          title: 'Description',
                          type: 'string',
                        },
                        quantity: {
                          default: null,
                          title: 'Quantity',
                          type: 'integer',
                        },
                        amount: {
                          default: null,
                          title: 'Amount',
                          type: 'integer',
                        },
                        unit_price: {
                          default: null,
                          title: 'Unit Price',
                          type: 'integer',
                        },
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'ocrreceipt_parserResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const OcrResumeParserCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['hireability,affinda'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      file: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
      },
      file_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.pdf'],
      },
    },
    required: ['providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        affinda: {
          required: ['extracted_data', 'status'],
          title: 'ocrresume_parserResumeParserDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              required: ['personal_infos', 'education', 'work_experience'],
              title: 'ResumeExtractedData',
              type: 'object',
              properties: {
                personal_infos: {
                  required: [
                    'name',
                    'address',
                    'self_summary',
                    'objective',
                    'date_of_birth',
                    'place_of_birth',
                    'current_profession',
                    'gender',
                    'nationality',
                    'martial_status',
                    'current_salary',
                  ],
                  title: 'ResumePersonalInfo',
                  type: 'object',
                  properties: {
                    name: {
                      required: [
                        'first_name',
                        'last_name',
                        'raw_name',
                        'middle',
                        'title',
                        'prefix',
                        'sufix',
                      ],
                      title: 'ResumePersonalName',
                      type: 'object',
                      properties: {
                        first_name: { title: 'First Name', type: 'string' },
                        last_name: { title: 'Last Name', type: 'string' },
                        raw_name: { title: 'Raw Name', type: 'string' },
                        middle: { title: 'Middle', type: 'string' },
                        title: { title: 'Title', type: 'string' },
                        prefix: { title: 'Prefix', type: 'string' },
                        sufix: { title: 'Sufix', type: 'string' },
                      },
                    },
                    address: {
                      required: [
                        'formatted_location',
                        'postal_code',
                        'region',
                        'country',
                        'country_code',
                        'raw_input_location',
                        'street',
                        'street_number',
                        'appartment_number',
                        'city',
                      ],
                      title: 'ResumeLocation',
                      type: 'object',
                      properties: {
                        formatted_location: {
                          title: 'Formatted Location',
                          type: 'string',
                        },
                        postal_code: { title: 'Postal Code', type: 'string' },
                        region: { title: 'Region', type: 'string' },
                        country: { title: 'Country', type: 'string' },
                        country_code: { title: 'Country Code', type: 'string' },
                        raw_input_location: {
                          title: 'Raw Input Location',
                          type: 'string',
                        },
                        street: { title: 'Street', type: 'string' },
                        street_number: {
                          title: 'Street Number',
                          type: 'string',
                        },
                        appartment_number: {
                          title: 'Appartment Number',
                          type: 'string',
                        },
                        city: { title: 'City', type: 'string' },
                      },
                    },
                    self_summary: { title: 'Self Summary', type: 'string' },
                    objective: { title: 'Objective', type: 'string' },
                    date_of_birth: { title: 'Date Of Birth', type: 'string' },
                    place_of_birth: { title: 'Place Of Birth', type: 'string' },
                    phones: {
                      title: 'Phones',
                      type: 'array',
                      items: { type: 'string' },
                    },
                    mails: {
                      title: 'Mails',
                      type: 'array',
                      items: { type: 'string' },
                    },
                    urls: {
                      title: 'Urls',
                      type: 'array',
                      items: { type: 'string' },
                    },
                    fax: {
                      title: 'Fax',
                      type: 'array',
                      items: { type: 'string' },
                    },
                    current_profession: {
                      title: 'Current Profession',
                      type: 'string',
                    },
                    gender: { title: 'Gender', type: 'string' },
                    nationality: { title: 'Nationality', type: 'string' },
                    martial_status: { title: 'Martial Status', type: 'string' },
                    current_salary: { title: 'Current Salary', type: 'string' },
                  },
                },
                education: {
                  required: ['total_years_education'],
                  title: 'ResumeEducation',
                  type: 'object',
                  properties: {
                    total_years_education: {
                      title: 'Total Years Education',
                      type: 'integer',
                    },
                    entries: {
                      title: 'Entries',
                      type: 'array',
                      items: {
                        required: [
                          'title',
                          'start_date',
                          'end_date',
                          'location',
                          'establishment',
                          'description',
                          'gpa',
                          'accreditation',
                        ],
                        title: 'ResumeEducationEntry',
                        type: 'object',
                        properties: {
                          title: { title: 'Title', type: 'string' },
                          start_date: { title: 'Start Date', type: 'string' },
                          end_date: { title: 'End Date', type: 'string' },
                          location: {
                            required: [
                              'formatted_location',
                              'postal_code',
                              'region',
                              'country',
                              'country_code',
                              'raw_input_location',
                              'street',
                              'street_number',
                              'appartment_number',
                              'city',
                            ],
                            title: 'ResumeLocation',
                            type: 'object',
                            properties: {
                              formatted_location: {
                                title: 'Formatted Location',
                                type: 'string',
                              },
                              postal_code: {
                                title: 'Postal Code',
                                type: 'string',
                              },
                              region: { title: 'Region', type: 'string' },
                              country: { title: 'Country', type: 'string' },
                              country_code: {
                                title: 'Country Code',
                                type: 'string',
                              },
                              raw_input_location: {
                                title: 'Raw Input Location',
                                type: 'string',
                              },
                              street: { title: 'Street', type: 'string' },
                              street_number: {
                                title: 'Street Number',
                                type: 'string',
                              },
                              appartment_number: {
                                title: 'Appartment Number',
                                type: 'string',
                              },
                              city: { title: 'City', type: 'string' },
                            },
                          },
                          establishment: {
                            title: 'Establishment',
                            type: 'string',
                          },
                          description: { title: 'Description', type: 'string' },
                          gpa: { title: 'Gpa', type: 'string' },
                          accreditation: {
                            title: 'Accreditation',
                            type: 'string',
                          },
                        },
                      },
                    },
                  },
                },
                work_experience: {
                  required: ['total_years_experience'],
                  title: 'ResumeWorkExp',
                  type: 'object',
                  properties: {
                    total_years_experience: {
                      title: 'Total Years Experience',
                      type: 'string',
                    },
                    entries: {
                      title: 'Entries',
                      type: 'array',
                      items: {
                        required: [
                          'title',
                          'start_date',
                          'end_date',
                          'company',
                          'location',
                          'description',
                          'industry',
                        ],
                        title: 'ResumeWorkExpEntry',
                        type: 'object',
                        properties: {
                          title: { title: 'Title', type: 'string' },
                          start_date: { title: 'Start Date', type: 'string' },
                          end_date: { title: 'End Date', type: 'string' },
                          company: { title: 'Company', type: 'string' },
                          location: {
                            required: [
                              'formatted_location',
                              'postal_code',
                              'region',
                              'country',
                              'country_code',
                              'raw_input_location',
                              'street',
                              'street_number',
                              'appartment_number',
                              'city',
                            ],
                            title: 'ResumeLocation',
                            type: 'object',
                            properties: {
                              formatted_location: {
                                title: 'Formatted Location',
                                type: 'string',
                              },
                              postal_code: {
                                title: 'Postal Code',
                                type: 'string',
                              },
                              region: { title: 'Region', type: 'string' },
                              country: { title: 'Country', type: 'string' },
                              country_code: {
                                title: 'Country Code',
                                type: 'string',
                              },
                              raw_input_location: {
                                title: 'Raw Input Location',
                                type: 'string',
                              },
                              street: { title: 'Street', type: 'string' },
                              street_number: {
                                title: 'Street Number',
                                type: 'string',
                              },
                              appartment_number: {
                                title: 'Appartment Number',
                                type: 'string',
                              },
                              city: { title: 'City', type: 'string' },
                            },
                          },
                          description: { title: 'Description', type: 'string' },
                          industry: { title: 'Industry', type: 'string' },
                        },
                      },
                    },
                  },
                },
                languages: {
                  title: 'Languages',
                  type: 'array',
                  items: {
                    required: ['name', 'code'],
                    title: 'ResumeLang',
                    type: 'object',
                    properties: {
                      name: { title: 'Name', type: 'string' },
                      code: { title: 'Code', type: 'string' },
                    },
                  },
                },
                skills: {
                  title: 'Skills',
                  type: 'array',
                  items: {
                    required: ['name', 'type'],
                    title: 'ResumeSkill',
                    type: 'object',
                    properties: {
                      name: { title: 'Name', type: 'string' },
                      type: { title: 'Type', type: 'string' },
                    },
                  },
                },
                certifications: {
                  title: 'Certifications',
                  type: 'array',
                  items: {
                    required: ['name', 'type'],
                    title: 'ResumeSkill',
                    type: 'object',
                    properties: {
                      name: { title: 'Name', type: 'string' },
                      type: { title: 'Type', type: 'string' },
                    },
                  },
                },
                courses: {
                  title: 'Courses',
                  type: 'array',
                  items: {
                    required: ['name', 'type'],
                    title: 'ResumeSkill',
                    type: 'object',
                    properties: {
                      name: { title: 'Name', type: 'string' },
                      type: { title: 'Type', type: 'string' },
                    },
                  },
                },
                publications: {
                  title: 'Publications',
                  type: 'array',
                  items: {
                    required: ['name', 'type'],
                    title: 'ResumeSkill',
                    type: 'object',
                    properties: {
                      name: { title: 'Name', type: 'string' },
                      type: { title: 'Type', type: 'string' },
                    },
                  },
                },
                interests: {
                  title: 'Interests',
                  type: 'array',
                  items: {
                    required: ['name', 'type'],
                    title: 'ResumeSkill',
                    type: 'object',
                    properties: {
                      name: { title: 'Name', type: 'string' },
                      type: { title: 'Type', type: 'string' },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        hireability: {
          required: ['extracted_data', 'status'],
          title: 'ocrresume_parserResumeParserDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              required: ['personal_infos', 'education', 'work_experience'],
              title: 'ResumeExtractedData',
              type: 'object',
              properties: {
                personal_infos: {
                  required: [
                    'name',
                    'address',
                    'self_summary',
                    'objective',
                    'date_of_birth',
                    'place_of_birth',
                    'current_profession',
                    'gender',
                    'nationality',
                    'martial_status',
                    'current_salary',
                  ],
                  title: 'ResumePersonalInfo',
                  type: 'object',
                  properties: {
                    name: {
                      required: [
                        'first_name',
                        'last_name',
                        'raw_name',
                        'middle',
                        'title',
                        'prefix',
                        'sufix',
                      ],
                      title: 'ResumePersonalName',
                      type: 'object',
                      properties: {
                        first_name: { title: 'First Name', type: 'string' },
                        last_name: { title: 'Last Name', type: 'string' },
                        raw_name: { title: 'Raw Name', type: 'string' },
                        middle: { title: 'Middle', type: 'string' },
                        title: { title: 'Title', type: 'string' },
                        prefix: { title: 'Prefix', type: 'string' },
                        sufix: { title: 'Sufix', type: 'string' },
                      },
                    },
                    address: {
                      required: [
                        'formatted_location',
                        'postal_code',
                        'region',
                        'country',
                        'country_code',
                        'raw_input_location',
                        'street',
                        'street_number',
                        'appartment_number',
                        'city',
                      ],
                      title: 'ResumeLocation',
                      type: 'object',
                      properties: {
                        formatted_location: {
                          title: 'Formatted Location',
                          type: 'string',
                        },
                        postal_code: { title: 'Postal Code', type: 'string' },
                        region: { title: 'Region', type: 'string' },
                        country: { title: 'Country', type: 'string' },
                        country_code: { title: 'Country Code', type: 'string' },
                        raw_input_location: {
                          title: 'Raw Input Location',
                          type: 'string',
                        },
                        street: { title: 'Street', type: 'string' },
                        street_number: {
                          title: 'Street Number',
                          type: 'string',
                        },
                        appartment_number: {
                          title: 'Appartment Number',
                          type: 'string',
                        },
                        city: { title: 'City', type: 'string' },
                      },
                    },
                    self_summary: { title: 'Self Summary', type: 'string' },
                    objective: { title: 'Objective', type: 'string' },
                    date_of_birth: { title: 'Date Of Birth', type: 'string' },
                    place_of_birth: { title: 'Place Of Birth', type: 'string' },
                    phones: {
                      title: 'Phones',
                      type: 'array',
                      items: { type: 'string' },
                    },
                    mails: {
                      title: 'Mails',
                      type: 'array',
                      items: { type: 'string' },
                    },
                    urls: {
                      title: 'Urls',
                      type: 'array',
                      items: { type: 'string' },
                    },
                    fax: {
                      title: 'Fax',
                      type: 'array',
                      items: { type: 'string' },
                    },
                    current_profession: {
                      title: 'Current Profession',
                      type: 'string',
                    },
                    gender: { title: 'Gender', type: 'string' },
                    nationality: { title: 'Nationality', type: 'string' },
                    martial_status: { title: 'Martial Status', type: 'string' },
                    current_salary: { title: 'Current Salary', type: 'string' },
                  },
                },
                education: {
                  required: ['total_years_education'],
                  title: 'ResumeEducation',
                  type: 'object',
                  properties: {
                    total_years_education: {
                      title: 'Total Years Education',
                      type: 'integer',
                    },
                    entries: {
                      title: 'Entries',
                      type: 'array',
                      items: {
                        required: [
                          'title',
                          'start_date',
                          'end_date',
                          'location',
                          'establishment',
                          'description',
                          'gpa',
                          'accreditation',
                        ],
                        title: 'ResumeEducationEntry',
                        type: 'object',
                        properties: {
                          title: { title: 'Title', type: 'string' },
                          start_date: { title: 'Start Date', type: 'string' },
                          end_date: { title: 'End Date', type: 'string' },
                          location: {
                            required: [
                              'formatted_location',
                              'postal_code',
                              'region',
                              'country',
                              'country_code',
                              'raw_input_location',
                              'street',
                              'street_number',
                              'appartment_number',
                              'city',
                            ],
                            title: 'ResumeLocation',
                            type: 'object',
                            properties: {
                              formatted_location: {
                                title: 'Formatted Location',
                                type: 'string',
                              },
                              postal_code: {
                                title: 'Postal Code',
                                type: 'string',
                              },
                              region: { title: 'Region', type: 'string' },
                              country: { title: 'Country', type: 'string' },
                              country_code: {
                                title: 'Country Code',
                                type: 'string',
                              },
                              raw_input_location: {
                                title: 'Raw Input Location',
                                type: 'string',
                              },
                              street: { title: 'Street', type: 'string' },
                              street_number: {
                                title: 'Street Number',
                                type: 'string',
                              },
                              appartment_number: {
                                title: 'Appartment Number',
                                type: 'string',
                              },
                              city: { title: 'City', type: 'string' },
                            },
                          },
                          establishment: {
                            title: 'Establishment',
                            type: 'string',
                          },
                          description: { title: 'Description', type: 'string' },
                          gpa: { title: 'Gpa', type: 'string' },
                          accreditation: {
                            title: 'Accreditation',
                            type: 'string',
                          },
                        },
                      },
                    },
                  },
                },
                work_experience: {
                  required: ['total_years_experience'],
                  title: 'ResumeWorkExp',
                  type: 'object',
                  properties: {
                    total_years_experience: {
                      title: 'Total Years Experience',
                      type: 'string',
                    },
                    entries: {
                      title: 'Entries',
                      type: 'array',
                      items: {
                        required: [
                          'title',
                          'start_date',
                          'end_date',
                          'company',
                          'location',
                          'description',
                          'industry',
                        ],
                        title: 'ResumeWorkExpEntry',
                        type: 'object',
                        properties: {
                          title: { title: 'Title', type: 'string' },
                          start_date: { title: 'Start Date', type: 'string' },
                          end_date: { title: 'End Date', type: 'string' },
                          company: { title: 'Company', type: 'string' },
                          location: {
                            required: [
                              'formatted_location',
                              'postal_code',
                              'region',
                              'country',
                              'country_code',
                              'raw_input_location',
                              'street',
                              'street_number',
                              'appartment_number',
                              'city',
                            ],
                            title: 'ResumeLocation',
                            type: 'object',
                            properties: {
                              formatted_location: {
                                title: 'Formatted Location',
                                type: 'string',
                              },
                              postal_code: {
                                title: 'Postal Code',
                                type: 'string',
                              },
                              region: { title: 'Region', type: 'string' },
                              country: { title: 'Country', type: 'string' },
                              country_code: {
                                title: 'Country Code',
                                type: 'string',
                              },
                              raw_input_location: {
                                title: 'Raw Input Location',
                                type: 'string',
                              },
                              street: { title: 'Street', type: 'string' },
                              street_number: {
                                title: 'Street Number',
                                type: 'string',
                              },
                              appartment_number: {
                                title: 'Appartment Number',
                                type: 'string',
                              },
                              city: { title: 'City', type: 'string' },
                            },
                          },
                          description: { title: 'Description', type: 'string' },
                          industry: { title: 'Industry', type: 'string' },
                        },
                      },
                    },
                  },
                },
                languages: {
                  title: 'Languages',
                  type: 'array',
                  items: {
                    required: ['name', 'code'],
                    title: 'ResumeLang',
                    type: 'object',
                    properties: {
                      name: { title: 'Name', type: 'string' },
                      code: { title: 'Code', type: 'string' },
                    },
                  },
                },
                skills: {
                  title: 'Skills',
                  type: 'array',
                  items: {
                    required: ['name', 'type'],
                    title: 'ResumeSkill',
                    type: 'object',
                    properties: {
                      name: { title: 'Name', type: 'string' },
                      type: { title: 'Type', type: 'string' },
                    },
                  },
                },
                certifications: {
                  title: 'Certifications',
                  type: 'array',
                  items: {
                    required: ['name', 'type'],
                    title: 'ResumeSkill',
                    type: 'object',
                    properties: {
                      name: { title: 'Name', type: 'string' },
                      type: { title: 'Type', type: 'string' },
                    },
                  },
                },
                courses: {
                  title: 'Courses',
                  type: 'array',
                  items: {
                    required: ['name', 'type'],
                    title: 'ResumeSkill',
                    type: 'object',
                    properties: {
                      name: { title: 'Name', type: 'string' },
                      type: { title: 'Type', type: 'string' },
                    },
                  },
                },
                publications: {
                  title: 'Publications',
                  type: 'array',
                  items: {
                    required: ['name', 'type'],
                    title: 'ResumeSkill',
                    type: 'object',
                    properties: {
                      name: { title: 'Name', type: 'string' },
                      type: { title: 'Type', type: 'string' },
                    },
                  },
                },
                interests: {
                  title: 'Interests',
                  type: 'array',
                  items: {
                    required: ['name', 'type'],
                    title: 'ResumeSkill',
                    type: 'object',
                    properties: {
                      name: { title: 'Name', type: 'string' },
                      type: { title: 'Type', type: 'string' },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        'eden-ai': {
          required: ['extracted_data', 'status'],
          title: 'ocrresume_parserResumeParserDataClass',
          type: 'object',
          properties: {
            extracted_data: {
              required: ['personal_infos', 'education', 'work_experience'],
              title: 'ResumeExtractedData',
              type: 'object',
              properties: {
                personal_infos: {
                  required: [
                    'name',
                    'address',
                    'self_summary',
                    'objective',
                    'date_of_birth',
                    'place_of_birth',
                    'current_profession',
                    'gender',
                    'nationality',
                    'martial_status',
                    'current_salary',
                  ],
                  title: 'ResumePersonalInfo',
                  type: 'object',
                  properties: {
                    name: {
                      required: [
                        'first_name',
                        'last_name',
                        'raw_name',
                        'middle',
                        'title',
                        'prefix',
                        'sufix',
                      ],
                      title: 'ResumePersonalName',
                      type: 'object',
                      properties: {
                        first_name: { title: 'First Name', type: 'string' },
                        last_name: { title: 'Last Name', type: 'string' },
                        raw_name: { title: 'Raw Name', type: 'string' },
                        middle: { title: 'Middle', type: 'string' },
                        title: { title: 'Title', type: 'string' },
                        prefix: { title: 'Prefix', type: 'string' },
                        sufix: { title: 'Sufix', type: 'string' },
                      },
                    },
                    address: {
                      required: [
                        'formatted_location',
                        'postal_code',
                        'region',
                        'country',
                        'country_code',
                        'raw_input_location',
                        'street',
                        'street_number',
                        'appartment_number',
                        'city',
                      ],
                      title: 'ResumeLocation',
                      type: 'object',
                      properties: {
                        formatted_location: {
                          title: 'Formatted Location',
                          type: 'string',
                        },
                        postal_code: { title: 'Postal Code', type: 'string' },
                        region: { title: 'Region', type: 'string' },
                        country: { title: 'Country', type: 'string' },
                        country_code: { title: 'Country Code', type: 'string' },
                        raw_input_location: {
                          title: 'Raw Input Location',
                          type: 'string',
                        },
                        street: { title: 'Street', type: 'string' },
                        street_number: {
                          title: 'Street Number',
                          type: 'string',
                        },
                        appartment_number: {
                          title: 'Appartment Number',
                          type: 'string',
                        },
                        city: { title: 'City', type: 'string' },
                      },
                    },
                    self_summary: { title: 'Self Summary', type: 'string' },
                    objective: { title: 'Objective', type: 'string' },
                    date_of_birth: { title: 'Date Of Birth', type: 'string' },
                    place_of_birth: { title: 'Place Of Birth', type: 'string' },
                    phones: {
                      title: 'Phones',
                      type: 'array',
                      items: { type: 'string' },
                    },
                    mails: {
                      title: 'Mails',
                      type: 'array',
                      items: { type: 'string' },
                    },
                    urls: {
                      title: 'Urls',
                      type: 'array',
                      items: { type: 'string' },
                    },
                    fax: {
                      title: 'Fax',
                      type: 'array',
                      items: { type: 'string' },
                    },
                    current_profession: {
                      title: 'Current Profession',
                      type: 'string',
                    },
                    gender: { title: 'Gender', type: 'string' },
                    nationality: { title: 'Nationality', type: 'string' },
                    martial_status: { title: 'Martial Status', type: 'string' },
                    current_salary: { title: 'Current Salary', type: 'string' },
                  },
                },
                education: {
                  required: ['total_years_education'],
                  title: 'ResumeEducation',
                  type: 'object',
                  properties: {
                    total_years_education: {
                      title: 'Total Years Education',
                      type: 'integer',
                    },
                    entries: {
                      title: 'Entries',
                      type: 'array',
                      items: {
                        required: [
                          'title',
                          'start_date',
                          'end_date',
                          'location',
                          'establishment',
                          'description',
                          'gpa',
                          'accreditation',
                        ],
                        title: 'ResumeEducationEntry',
                        type: 'object',
                        properties: {
                          title: { title: 'Title', type: 'string' },
                          start_date: { title: 'Start Date', type: 'string' },
                          end_date: { title: 'End Date', type: 'string' },
                          location: {
                            required: [
                              'formatted_location',
                              'postal_code',
                              'region',
                              'country',
                              'country_code',
                              'raw_input_location',
                              'street',
                              'street_number',
                              'appartment_number',
                              'city',
                            ],
                            title: 'ResumeLocation',
                            type: 'object',
                            properties: {
                              formatted_location: {
                                title: 'Formatted Location',
                                type: 'string',
                              },
                              postal_code: {
                                title: 'Postal Code',
                                type: 'string',
                              },
                              region: { title: 'Region', type: 'string' },
                              country: { title: 'Country', type: 'string' },
                              country_code: {
                                title: 'Country Code',
                                type: 'string',
                              },
                              raw_input_location: {
                                title: 'Raw Input Location',
                                type: 'string',
                              },
                              street: { title: 'Street', type: 'string' },
                              street_number: {
                                title: 'Street Number',
                                type: 'string',
                              },
                              appartment_number: {
                                title: 'Appartment Number',
                                type: 'string',
                              },
                              city: { title: 'City', type: 'string' },
                            },
                          },
                          establishment: {
                            title: 'Establishment',
                            type: 'string',
                          },
                          description: { title: 'Description', type: 'string' },
                          gpa: { title: 'Gpa', type: 'string' },
                          accreditation: {
                            title: 'Accreditation',
                            type: 'string',
                          },
                        },
                      },
                    },
                  },
                },
                work_experience: {
                  required: ['total_years_experience'],
                  title: 'ResumeWorkExp',
                  type: 'object',
                  properties: {
                    total_years_experience: {
                      title: 'Total Years Experience',
                      type: 'string',
                    },
                    entries: {
                      title: 'Entries',
                      type: 'array',
                      items: {
                        required: [
                          'title',
                          'start_date',
                          'end_date',
                          'company',
                          'location',
                          'description',
                          'industry',
                        ],
                        title: 'ResumeWorkExpEntry',
                        type: 'object',
                        properties: {
                          title: { title: 'Title', type: 'string' },
                          start_date: { title: 'Start Date', type: 'string' },
                          end_date: { title: 'End Date', type: 'string' },
                          company: { title: 'Company', type: 'string' },
                          location: {
                            required: [
                              'formatted_location',
                              'postal_code',
                              'region',
                              'country',
                              'country_code',
                              'raw_input_location',
                              'street',
                              'street_number',
                              'appartment_number',
                              'city',
                            ],
                            title: 'ResumeLocation',
                            type: 'object',
                            properties: {
                              formatted_location: {
                                title: 'Formatted Location',
                                type: 'string',
                              },
                              postal_code: {
                                title: 'Postal Code',
                                type: 'string',
                              },
                              region: { title: 'Region', type: 'string' },
                              country: { title: 'Country', type: 'string' },
                              country_code: {
                                title: 'Country Code',
                                type: 'string',
                              },
                              raw_input_location: {
                                title: 'Raw Input Location',
                                type: 'string',
                              },
                              street: { title: 'Street', type: 'string' },
                              street_number: {
                                title: 'Street Number',
                                type: 'string',
                              },
                              appartment_number: {
                                title: 'Appartment Number',
                                type: 'string',
                              },
                              city: { title: 'City', type: 'string' },
                            },
                          },
                          description: { title: 'Description', type: 'string' },
                          industry: { title: 'Industry', type: 'string' },
                        },
                      },
                    },
                  },
                },
                languages: {
                  title: 'Languages',
                  type: 'array',
                  items: {
                    required: ['name', 'code'],
                    title: 'ResumeLang',
                    type: 'object',
                    properties: {
                      name: { title: 'Name', type: 'string' },
                      code: { title: 'Code', type: 'string' },
                    },
                  },
                },
                skills: {
                  title: 'Skills',
                  type: 'array',
                  items: {
                    required: ['name', 'type'],
                    title: 'ResumeSkill',
                    type: 'object',
                    properties: {
                      name: { title: 'Name', type: 'string' },
                      type: { title: 'Type', type: 'string' },
                    },
                  },
                },
                certifications: {
                  title: 'Certifications',
                  type: 'array',
                  items: {
                    required: ['name', 'type'],
                    title: 'ResumeSkill',
                    type: 'object',
                    properties: {
                      name: { title: 'Name', type: 'string' },
                      type: { title: 'Type', type: 'string' },
                    },
                  },
                },
                courses: {
                  title: 'Courses',
                  type: 'array',
                  items: {
                    required: ['name', 'type'],
                    title: 'ResumeSkill',
                    type: 'object',
                    properties: {
                      name: { title: 'Name', type: 'string' },
                      type: { title: 'Type', type: 'string' },
                    },
                  },
                },
                publications: {
                  title: 'Publications',
                  type: 'array',
                  items: {
                    required: ['name', 'type'],
                    title: 'ResumeSkill',
                    type: 'object',
                    properties: {
                      name: { title: 'Name', type: 'string' },
                      type: { title: 'Type', type: 'string' },
                    },
                  },
                },
                interests: {
                  title: 'Interests',
                  type: 'array',
                  items: {
                    required: ['name', 'type'],
                    title: 'ResumeSkill',
                    type: 'object',
                    properties: {
                      name: { title: 'Name', type: 'string' },
                      type: { title: 'Type', type: 'string' },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'ocrresume_parserResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const PipelineCreate = {
  body: {
    type: 'object',
    properties: {
      description: {
        type: 'string',
        minLength: 1,
        examples: [
          '[\n  {\n    "feature": "ocr",\n    "subfeature": "ocr",\n    "params": {\n      "language": "auto-detect",\n      "providers": "google"\n    }\n  },\n  {\n    "feature": "translation",\n    "subfeature": "automatic_translation",\n    "params": {\n      "source_language": "auto-detect",\n      "target_language": "fr",\n      "providers": "google"\n    }\n  },\n  {\n    "feature": "text",\n    "subfeature": "summarize",\n    "params": {\n      "providers": "openai"\n    }\n  }\n]',
        ],
      },
      text: {
        type: 'string',
        minLength: 1,
        description: 'The input text for the first feature of the pipeline',
      },
      texts: {
        type: 'string',
        minLength: 1,
        description: 'List of texts for the first feature of the pipeline',
      },
      file: {
        type: 'string',
        format: 'binary',
        description: 'The input file for the first feature of the pipeline',
        examples: ['<file_content>'],
      },
      return_only_last: {
        type: 'boolean',
        default: true,
        description:
          'This parameter allows user to choose to output only the final result or all the intermediate results.',
      },
    },
    required: ['description'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      oneOf: [],
      discriminator: { propertyName: 'type', mapping: {} },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const TextAiDetectionCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['originalityai,sapling'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      text: {
        type: 'string',
        minLength: 1,
        description: 'Text to analyze',
        examples: [
          'The panther, also known as the black panther, is a magnificent and enigmatic creature that captivates the imagination of many. It is not a distinct species itself, but rather a melanistic variant of leopards and jaguars. The mesmerizing black coat of the panther is a result of a genetic mutation that increases the production of dark pigment, melanin.         Panthers are highly adaptable predators, found primarily in dense forests and jungles across Africa, Asia, and the Americas. Their stealthy nature and exceptional agility make them formidable hunters. They are solitary creatures, preferring to roam alone in their vast territories, which can span over a hundred square miles.         Equipped with incredible strength and sharp retractable claws, panthers are skilled climbers and swimmers. Their keen senses, including sharp vision and acute hearing, aid them in locating prey, often stalking their victims from the cover of trees or thick underbrush before launching a precise and powerful attack.         The diet of a panther consists mainly of deer, wild boar, and smaller mammals. However, they are opportunistic hunters and can also target livestock and domestic animals in areas where their habitats overlap with human settlements. Unfortunately, this sometimes leads to conflicts with humans, resulting in the panther being perceived as a threat.         Despite their association with darkness and mystery, panthers play a vital role in maintaining the balance of ecosystems. As apex predators, they help control populations of herbivores, preventing overgrazing and maintaining healthy prey dynamics.         Conservation efforts are crucial to the survival of panther populations worldwide. Habitat loss, poaching, and illegal wildlife trade pose significant threats to their existence. Various organizations and governments are working tirelessly to protect these magnificent creatures through initiatives such as establishing protected areas, promoting sustainable land use practices, and raising awareness about their importance in the natural world.',
        ],
      },
      language: {
        type: ['string', 'null'],
        description:
          'Language code for the language the input text is written in (eg: en, fr).',
      },
    },
    required: ['providers', 'text'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        sapling: {
          required: ['ai_score', 'status'],
          title: 'textai_detectionAiDetectionDataClass',
          type: 'object',
          properties: {
            ai_score: { title: 'Ai Score', type: 'integer' },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['text', 'prediction', 'ai_score'],
                title: 'AiDetectionItem',
                type: 'object',
                properties: {
                  text: { title: 'Text', type: 'string' },
                  prediction: { title: 'Prediction', type: 'string' },
                  ai_score: { title: 'Ai Score', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        originalityai: {
          required: ['ai_score', 'status'],
          title: 'textai_detectionAiDetectionDataClass',
          type: 'object',
          properties: {
            ai_score: { title: 'Ai Score', type: 'integer' },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['text', 'prediction', 'ai_score'],
                title: 'AiDetectionItem',
                type: 'object',
                properties: {
                  text: { title: 'Text', type: 'string' },
                  prediction: { title: 'Prediction', type: 'string' },
                  ai_score: { title: 'Ai Score', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'textai_detectionResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const TextAnonymizationCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['microsoft,amazon,emvista,oneai,openai'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      text: {
        type: 'string',
        minLength: 1,
        description: 'Text to analyze',
        examples: [
          "Overall I am satisfied with my experience at Amazon, but two areas of major improvement needed. First is the product reviews and pricing. There are thousands of positive reviews for so many items, and it's clear that the reviews are bogus or not really associated with that product. There needs to be a way to only view products sold by Amazon directly, because many market sellers way overprice items that can be purchased cheaper elsewhere (like Walmart, Target, etc). The second issue is they make it too difficult to get help when there's an issue with an order.",
        ],
      },
      language: {
        type: ['string', 'null'],
        description:
          'Language code for the language the input text is written in (eg: en, fr).',
        examples: ['en'],
      },
    },
    required: ['providers', 'text'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        emvista: {
          required: ['result', 'status'],
          title: 'textanonymizationAnonymizationDataClass',
          type: 'object',
          properties: {
            result: { title: 'Result', type: 'string' },
            entities: {
              title: 'Entities',
              type: 'array',
              items: {
                description:
                  'This model represents an entity extracted from the text.\n\n    Attributes:\n        offset (int): The offset of the entity in the text.\n        length (int): The lenght of the entity in the text.\n        category (CategoryType): The category of the entity.\n        subcategory (SubCategoryType): The subcategory of the entity.\n        original_label (str): The original label of the entity.\n        content (str): The content of the entity.\n    ',
                required: [
                  'offset',
                  'length',
                  'category',
                  'subcategory',
                  'original_label',
                  'content',
                  'confidence_score',
                ],
                title: 'AnonymizationEntity',
                type: 'object',
                properties: {
                  offset: { minimum: 0, title: 'Offset', type: 'integer' },
                  length: {
                    exclusiveMinimum: 0,
                    title: 'Length',
                    type: 'integer',
                  },
                  category: {
                    description:
                      'This enum are used to categorize the entities extracted from the text.\n\n`PersonalInformation` `FinancialInformation` `IdentificationNumbers` `Miscellaneous` `OrganizationInformation` `DateAndTime` `LocationInformation` `Other`',
                    enum: [
                      'PersonalInformation',
                      'FinancialInformation',
                      'IdentificationNumbers',
                      'Miscellaneous',
                      'OrganizationInformation',
                      'DateAndTime',
                      'LocationInformation',
                      'Other',
                    ],
                    title: 'CategoryType',
                    type: 'string',
                  },
                  subcategory: {
                    anyOf: [
                      {
                        enum: [
                          'CreditCard',
                          'CardExpiry',
                          'BankAccountNumber',
                          'BankRoutingNumber',
                          'SwiftCode',
                          'TaxIdentificationNumber',
                        ],
                        title: 'FinancialInformationSubCategoryType',
                        type: 'string',
                        description:
                          '`CreditCard` `CardExpiry` `BankAccountNumber` `BankRoutingNumber` `SwiftCode` `TaxIdentificationNumber`',
                      },
                      {
                        enum: ['Name', 'Age', 'Email', 'Phone', 'PersonType'],
                        title: 'PersonalInformationSubCategoryType',
                        type: 'string',
                        description:
                          '`Name` `Age` `Email` `Phone` `PersonType`',
                      },
                      {
                        enum: [
                          'SocialSecurityNumber',
                          'NationalIdentificationNumber',
                          'NationalHealthService',
                          'ResidentRegistrationNumber',
                          'DriverLicenseNumber',
                          'PassportNumber',
                        ],
                        title: 'IdentificationNumbersSubCategoryType',
                        type: 'string',
                        description:
                          '`SocialSecurityNumber` `NationalIdentificationNumber` `NationalHealthService` `ResidentRegistrationNumber` `DriverLicenseNumber` `PassportNumber`',
                      },
                      {
                        enum: [
                          'URL',
                          'IP',
                          'MAC',
                          'VehicleIdentificationNumber',
                          'LicensePlate',
                          'VoterNumber',
                          'AWSKeys',
                          'AzureKeys',
                          'Password',
                        ],
                        title: 'MiscellaneousSubCategoryType',
                        type: 'string',
                        description:
                          '`URL` `IP` `MAC` `VehicleIdentificationNumber` `LicensePlate` `VoterNumber` `AWSKeys` `AzureKeys` `Password`',
                      },
                      {
                        enum: [
                          'CompanyName',
                          'CompanyNumber',
                          'BuisnessNumber',
                        ],
                        title: 'OrganizationSubCategoryType',
                        type: 'string',
                        description:
                          '`CompanyName` `CompanyNumber` `BuisnessNumber`',
                      },
                      {
                        enum: ['Date', 'Time', 'DateTime', 'Duration'],
                        title: 'DateAndTimeSubCategoryType',
                        type: 'string',
                        description: '`Date` `Time` `DateTime` `Duration`',
                      },
                      {
                        enum: ['Address', 'Location'],
                        title: 'LocationInformationSubCategoryType',
                        type: 'string',
                        description: '`Address` `Location`',
                      },
                      {
                        enum: ['Other', 'Anonymized', 'Nerd', 'Wsd', 'Unknown'],
                        title: 'OtherSubCategoryType',
                        type: 'string',
                        description:
                          '`Other` `Anonymized` `Nerd` `Wsd` `Unknown`',
                      },
                    ],
                    title: 'Subcategory',
                  },
                  original_label: {
                    minLength: 1,
                    title: 'Original Label',
                    type: 'string',
                  },
                  content: { minLength: 1, title: 'Content', type: 'string' },
                  confidence_score: {
                    maximum: 1,
                    minimum: 0,
                    title: 'Confidence Score',
                    type: 'integer',
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        microsoft: {
          required: ['result', 'status'],
          title: 'textanonymizationAnonymizationDataClass',
          type: 'object',
          properties: {
            result: { title: 'Result', type: 'string' },
            entities: {
              title: 'Entities',
              type: 'array',
              items: {
                description:
                  'This model represents an entity extracted from the text.\n\n    Attributes:\n        offset (int): The offset of the entity in the text.\n        length (int): The lenght of the entity in the text.\n        category (CategoryType): The category of the entity.\n        subcategory (SubCategoryType): The subcategory of the entity.\n        original_label (str): The original label of the entity.\n        content (str): The content of the entity.\n    ',
                required: [
                  'offset',
                  'length',
                  'category',
                  'subcategory',
                  'original_label',
                  'content',
                  'confidence_score',
                ],
                title: 'AnonymizationEntity',
                type: 'object',
                properties: {
                  offset: { minimum: 0, title: 'Offset', type: 'integer' },
                  length: {
                    exclusiveMinimum: 0,
                    title: 'Length',
                    type: 'integer',
                  },
                  category: {
                    description:
                      'This enum are used to categorize the entities extracted from the text.\n\n`PersonalInformation` `FinancialInformation` `IdentificationNumbers` `Miscellaneous` `OrganizationInformation` `DateAndTime` `LocationInformation` `Other`',
                    enum: [
                      'PersonalInformation',
                      'FinancialInformation',
                      'IdentificationNumbers',
                      'Miscellaneous',
                      'OrganizationInformation',
                      'DateAndTime',
                      'LocationInformation',
                      'Other',
                    ],
                    title: 'CategoryType',
                    type: 'string',
                  },
                  subcategory: {
                    anyOf: [
                      {
                        enum: [
                          'CreditCard',
                          'CardExpiry',
                          'BankAccountNumber',
                          'BankRoutingNumber',
                          'SwiftCode',
                          'TaxIdentificationNumber',
                        ],
                        title: 'FinancialInformationSubCategoryType',
                        type: 'string',
                        description:
                          '`CreditCard` `CardExpiry` `BankAccountNumber` `BankRoutingNumber` `SwiftCode` `TaxIdentificationNumber`',
                      },
                      {
                        enum: ['Name', 'Age', 'Email', 'Phone', 'PersonType'],
                        title: 'PersonalInformationSubCategoryType',
                        type: 'string',
                        description:
                          '`Name` `Age` `Email` `Phone` `PersonType`',
                      },
                      {
                        enum: [
                          'SocialSecurityNumber',
                          'NationalIdentificationNumber',
                          'NationalHealthService',
                          'ResidentRegistrationNumber',
                          'DriverLicenseNumber',
                          'PassportNumber',
                        ],
                        title: 'IdentificationNumbersSubCategoryType',
                        type: 'string',
                        description:
                          '`SocialSecurityNumber` `NationalIdentificationNumber` `NationalHealthService` `ResidentRegistrationNumber` `DriverLicenseNumber` `PassportNumber`',
                      },
                      {
                        enum: [
                          'URL',
                          'IP',
                          'MAC',
                          'VehicleIdentificationNumber',
                          'LicensePlate',
                          'VoterNumber',
                          'AWSKeys',
                          'AzureKeys',
                          'Password',
                        ],
                        title: 'MiscellaneousSubCategoryType',
                        type: 'string',
                        description:
                          '`URL` `IP` `MAC` `VehicleIdentificationNumber` `LicensePlate` `VoterNumber` `AWSKeys` `AzureKeys` `Password`',
                      },
                      {
                        enum: [
                          'CompanyName',
                          'CompanyNumber',
                          'BuisnessNumber',
                        ],
                        title: 'OrganizationSubCategoryType',
                        type: 'string',
                        description:
                          '`CompanyName` `CompanyNumber` `BuisnessNumber`',
                      },
                      {
                        enum: ['Date', 'Time', 'DateTime', 'Duration'],
                        title: 'DateAndTimeSubCategoryType',
                        type: 'string',
                        description: '`Date` `Time` `DateTime` `Duration`',
                      },
                      {
                        enum: ['Address', 'Location'],
                        title: 'LocationInformationSubCategoryType',
                        type: 'string',
                        description: '`Address` `Location`',
                      },
                      {
                        enum: ['Other', 'Anonymized', 'Nerd', 'Wsd', 'Unknown'],
                        title: 'OtherSubCategoryType',
                        type: 'string',
                        description:
                          '`Other` `Anonymized` `Nerd` `Wsd` `Unknown`',
                      },
                    ],
                    title: 'Subcategory',
                  },
                  original_label: {
                    minLength: 1,
                    title: 'Original Label',
                    type: 'string',
                  },
                  content: { minLength: 1, title: 'Content', type: 'string' },
                  confidence_score: {
                    maximum: 1,
                    minimum: 0,
                    title: 'Confidence Score',
                    type: 'integer',
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        oneai: {
          required: ['result', 'status'],
          title: 'textanonymizationAnonymizationDataClass',
          type: 'object',
          properties: {
            result: { title: 'Result', type: 'string' },
            entities: {
              title: 'Entities',
              type: 'array',
              items: {
                description:
                  'This model represents an entity extracted from the text.\n\n    Attributes:\n        offset (int): The offset of the entity in the text.\n        length (int): The lenght of the entity in the text.\n        category (CategoryType): The category of the entity.\n        subcategory (SubCategoryType): The subcategory of the entity.\n        original_label (str): The original label of the entity.\n        content (str): The content of the entity.\n    ',
                required: [
                  'offset',
                  'length',
                  'category',
                  'subcategory',
                  'original_label',
                  'content',
                  'confidence_score',
                ],
                title: 'AnonymizationEntity',
                type: 'object',
                properties: {
                  offset: { minimum: 0, title: 'Offset', type: 'integer' },
                  length: {
                    exclusiveMinimum: 0,
                    title: 'Length',
                    type: 'integer',
                  },
                  category: {
                    description:
                      'This enum are used to categorize the entities extracted from the text.\n\n`PersonalInformation` `FinancialInformation` `IdentificationNumbers` `Miscellaneous` `OrganizationInformation` `DateAndTime` `LocationInformation` `Other`',
                    enum: [
                      'PersonalInformation',
                      'FinancialInformation',
                      'IdentificationNumbers',
                      'Miscellaneous',
                      'OrganizationInformation',
                      'DateAndTime',
                      'LocationInformation',
                      'Other',
                    ],
                    title: 'CategoryType',
                    type: 'string',
                  },
                  subcategory: {
                    anyOf: [
                      {
                        enum: [
                          'CreditCard',
                          'CardExpiry',
                          'BankAccountNumber',
                          'BankRoutingNumber',
                          'SwiftCode',
                          'TaxIdentificationNumber',
                        ],
                        title: 'FinancialInformationSubCategoryType',
                        type: 'string',
                        description:
                          '`CreditCard` `CardExpiry` `BankAccountNumber` `BankRoutingNumber` `SwiftCode` `TaxIdentificationNumber`',
                      },
                      {
                        enum: ['Name', 'Age', 'Email', 'Phone', 'PersonType'],
                        title: 'PersonalInformationSubCategoryType',
                        type: 'string',
                        description:
                          '`Name` `Age` `Email` `Phone` `PersonType`',
                      },
                      {
                        enum: [
                          'SocialSecurityNumber',
                          'NationalIdentificationNumber',
                          'NationalHealthService',
                          'ResidentRegistrationNumber',
                          'DriverLicenseNumber',
                          'PassportNumber',
                        ],
                        title: 'IdentificationNumbersSubCategoryType',
                        type: 'string',
                        description:
                          '`SocialSecurityNumber` `NationalIdentificationNumber` `NationalHealthService` `ResidentRegistrationNumber` `DriverLicenseNumber` `PassportNumber`',
                      },
                      {
                        enum: [
                          'URL',
                          'IP',
                          'MAC',
                          'VehicleIdentificationNumber',
                          'LicensePlate',
                          'VoterNumber',
                          'AWSKeys',
                          'AzureKeys',
                          'Password',
                        ],
                        title: 'MiscellaneousSubCategoryType',
                        type: 'string',
                        description:
                          '`URL` `IP` `MAC` `VehicleIdentificationNumber` `LicensePlate` `VoterNumber` `AWSKeys` `AzureKeys` `Password`',
                      },
                      {
                        enum: [
                          'CompanyName',
                          'CompanyNumber',
                          'BuisnessNumber',
                        ],
                        title: 'OrganizationSubCategoryType',
                        type: 'string',
                        description:
                          '`CompanyName` `CompanyNumber` `BuisnessNumber`',
                      },
                      {
                        enum: ['Date', 'Time', 'DateTime', 'Duration'],
                        title: 'DateAndTimeSubCategoryType',
                        type: 'string',
                        description: '`Date` `Time` `DateTime` `Duration`',
                      },
                      {
                        enum: ['Address', 'Location'],
                        title: 'LocationInformationSubCategoryType',
                        type: 'string',
                        description: '`Address` `Location`',
                      },
                      {
                        enum: ['Other', 'Anonymized', 'Nerd', 'Wsd', 'Unknown'],
                        title: 'OtherSubCategoryType',
                        type: 'string',
                        description:
                          '`Other` `Anonymized` `Nerd` `Wsd` `Unknown`',
                      },
                    ],
                    title: 'Subcategory',
                  },
                  original_label: {
                    minLength: 1,
                    title: 'Original Label',
                    type: 'string',
                  },
                  content: { minLength: 1, title: 'Content', type: 'string' },
                  confidence_score: {
                    maximum: 1,
                    minimum: 0,
                    title: 'Confidence Score',
                    type: 'integer',
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        openai: {
          required: ['result', 'status'],
          title: 'textanonymizationAnonymizationDataClass',
          type: 'object',
          properties: {
            result: { title: 'Result', type: 'string' },
            entities: {
              title: 'Entities',
              type: 'array',
              items: {
                description:
                  'This model represents an entity extracted from the text.\n\n    Attributes:\n        offset (int): The offset of the entity in the text.\n        length (int): The lenght of the entity in the text.\n        category (CategoryType): The category of the entity.\n        subcategory (SubCategoryType): The subcategory of the entity.\n        original_label (str): The original label of the entity.\n        content (str): The content of the entity.\n    ',
                required: [
                  'offset',
                  'length',
                  'category',
                  'subcategory',
                  'original_label',
                  'content',
                  'confidence_score',
                ],
                title: 'AnonymizationEntity',
                type: 'object',
                properties: {
                  offset: { minimum: 0, title: 'Offset', type: 'integer' },
                  length: {
                    exclusiveMinimum: 0,
                    title: 'Length',
                    type: 'integer',
                  },
                  category: {
                    description:
                      'This enum are used to categorize the entities extracted from the text.\n\n`PersonalInformation` `FinancialInformation` `IdentificationNumbers` `Miscellaneous` `OrganizationInformation` `DateAndTime` `LocationInformation` `Other`',
                    enum: [
                      'PersonalInformation',
                      'FinancialInformation',
                      'IdentificationNumbers',
                      'Miscellaneous',
                      'OrganizationInformation',
                      'DateAndTime',
                      'LocationInformation',
                      'Other',
                    ],
                    title: 'CategoryType',
                    type: 'string',
                  },
                  subcategory: {
                    anyOf: [
                      {
                        enum: [
                          'CreditCard',
                          'CardExpiry',
                          'BankAccountNumber',
                          'BankRoutingNumber',
                          'SwiftCode',
                          'TaxIdentificationNumber',
                        ],
                        title: 'FinancialInformationSubCategoryType',
                        type: 'string',
                        description:
                          '`CreditCard` `CardExpiry` `BankAccountNumber` `BankRoutingNumber` `SwiftCode` `TaxIdentificationNumber`',
                      },
                      {
                        enum: ['Name', 'Age', 'Email', 'Phone', 'PersonType'],
                        title: 'PersonalInformationSubCategoryType',
                        type: 'string',
                        description:
                          '`Name` `Age` `Email` `Phone` `PersonType`',
                      },
                      {
                        enum: [
                          'SocialSecurityNumber',
                          'NationalIdentificationNumber',
                          'NationalHealthService',
                          'ResidentRegistrationNumber',
                          'DriverLicenseNumber',
                          'PassportNumber',
                        ],
                        title: 'IdentificationNumbersSubCategoryType',
                        type: 'string',
                        description:
                          '`SocialSecurityNumber` `NationalIdentificationNumber` `NationalHealthService` `ResidentRegistrationNumber` `DriverLicenseNumber` `PassportNumber`',
                      },
                      {
                        enum: [
                          'URL',
                          'IP',
                          'MAC',
                          'VehicleIdentificationNumber',
                          'LicensePlate',
                          'VoterNumber',
                          'AWSKeys',
                          'AzureKeys',
                          'Password',
                        ],
                        title: 'MiscellaneousSubCategoryType',
                        type: 'string',
                        description:
                          '`URL` `IP` `MAC` `VehicleIdentificationNumber` `LicensePlate` `VoterNumber` `AWSKeys` `AzureKeys` `Password`',
                      },
                      {
                        enum: [
                          'CompanyName',
                          'CompanyNumber',
                          'BuisnessNumber',
                        ],
                        title: 'OrganizationSubCategoryType',
                        type: 'string',
                        description:
                          '`CompanyName` `CompanyNumber` `BuisnessNumber`',
                      },
                      {
                        enum: ['Date', 'Time', 'DateTime', 'Duration'],
                        title: 'DateAndTimeSubCategoryType',
                        type: 'string',
                        description: '`Date` `Time` `DateTime` `Duration`',
                      },
                      {
                        enum: ['Address', 'Location'],
                        title: 'LocationInformationSubCategoryType',
                        type: 'string',
                        description: '`Address` `Location`',
                      },
                      {
                        enum: ['Other', 'Anonymized', 'Nerd', 'Wsd', 'Unknown'],
                        title: 'OtherSubCategoryType',
                        type: 'string',
                        description:
                          '`Other` `Anonymized` `Nerd` `Wsd` `Unknown`',
                      },
                    ],
                    title: 'Subcategory',
                  },
                  original_label: {
                    minLength: 1,
                    title: 'Original Label',
                    type: 'string',
                  },
                  content: { minLength: 1, title: 'Content', type: 'string' },
                  confidence_score: {
                    maximum: 1,
                    minimum: 0,
                    title: 'Confidence Score',
                    type: 'integer',
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        amazon: {
          required: ['result', 'status'],
          title: 'textanonymizationAnonymizationDataClass',
          type: 'object',
          properties: {
            result: { title: 'Result', type: 'string' },
            entities: {
              title: 'Entities',
              type: 'array',
              items: {
                description:
                  'This model represents an entity extracted from the text.\n\n    Attributes:\n        offset (int): The offset of the entity in the text.\n        length (int): The lenght of the entity in the text.\n        category (CategoryType): The category of the entity.\n        subcategory (SubCategoryType): The subcategory of the entity.\n        original_label (str): The original label of the entity.\n        content (str): The content of the entity.\n    ',
                required: [
                  'offset',
                  'length',
                  'category',
                  'subcategory',
                  'original_label',
                  'content',
                  'confidence_score',
                ],
                title: 'AnonymizationEntity',
                type: 'object',
                properties: {
                  offset: { minimum: 0, title: 'Offset', type: 'integer' },
                  length: {
                    exclusiveMinimum: 0,
                    title: 'Length',
                    type: 'integer',
                  },
                  category: {
                    description:
                      'This enum are used to categorize the entities extracted from the text.\n\n`PersonalInformation` `FinancialInformation` `IdentificationNumbers` `Miscellaneous` `OrganizationInformation` `DateAndTime` `LocationInformation` `Other`',
                    enum: [
                      'PersonalInformation',
                      'FinancialInformation',
                      'IdentificationNumbers',
                      'Miscellaneous',
                      'OrganizationInformation',
                      'DateAndTime',
                      'LocationInformation',
                      'Other',
                    ],
                    title: 'CategoryType',
                    type: 'string',
                  },
                  subcategory: {
                    anyOf: [
                      {
                        enum: [
                          'CreditCard',
                          'CardExpiry',
                          'BankAccountNumber',
                          'BankRoutingNumber',
                          'SwiftCode',
                          'TaxIdentificationNumber',
                        ],
                        title: 'FinancialInformationSubCategoryType',
                        type: 'string',
                        description:
                          '`CreditCard` `CardExpiry` `BankAccountNumber` `BankRoutingNumber` `SwiftCode` `TaxIdentificationNumber`',
                      },
                      {
                        enum: ['Name', 'Age', 'Email', 'Phone', 'PersonType'],
                        title: 'PersonalInformationSubCategoryType',
                        type: 'string',
                        description:
                          '`Name` `Age` `Email` `Phone` `PersonType`',
                      },
                      {
                        enum: [
                          'SocialSecurityNumber',
                          'NationalIdentificationNumber',
                          'NationalHealthService',
                          'ResidentRegistrationNumber',
                          'DriverLicenseNumber',
                          'PassportNumber',
                        ],
                        title: 'IdentificationNumbersSubCategoryType',
                        type: 'string',
                        description:
                          '`SocialSecurityNumber` `NationalIdentificationNumber` `NationalHealthService` `ResidentRegistrationNumber` `DriverLicenseNumber` `PassportNumber`',
                      },
                      {
                        enum: [
                          'URL',
                          'IP',
                          'MAC',
                          'VehicleIdentificationNumber',
                          'LicensePlate',
                          'VoterNumber',
                          'AWSKeys',
                          'AzureKeys',
                          'Password',
                        ],
                        title: 'MiscellaneousSubCategoryType',
                        type: 'string',
                        description:
                          '`URL` `IP` `MAC` `VehicleIdentificationNumber` `LicensePlate` `VoterNumber` `AWSKeys` `AzureKeys` `Password`',
                      },
                      {
                        enum: [
                          'CompanyName',
                          'CompanyNumber',
                          'BuisnessNumber',
                        ],
                        title: 'OrganizationSubCategoryType',
                        type: 'string',
                        description:
                          '`CompanyName` `CompanyNumber` `BuisnessNumber`',
                      },
                      {
                        enum: ['Date', 'Time', 'DateTime', 'Duration'],
                        title: 'DateAndTimeSubCategoryType',
                        type: 'string',
                        description: '`Date` `Time` `DateTime` `Duration`',
                      },
                      {
                        enum: ['Address', 'Location'],
                        title: 'LocationInformationSubCategoryType',
                        type: 'string',
                        description: '`Address` `Location`',
                      },
                      {
                        enum: ['Other', 'Anonymized', 'Nerd', 'Wsd', 'Unknown'],
                        title: 'OtherSubCategoryType',
                        type: 'string',
                        description:
                          '`Other` `Anonymized` `Nerd` `Wsd` `Unknown`',
                      },
                    ],
                    title: 'Subcategory',
                  },
                  original_label: {
                    minLength: 1,
                    title: 'Original Label',
                    type: 'string',
                  },
                  content: { minLength: 1, title: 'Content', type: 'string' },
                  confidence_score: {
                    maximum: 1,
                    minimum: 0,
                    title: 'Confidence Score',
                    type: 'integer',
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'textanonymizationResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const TextChatCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['google,openai'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      settings: {
        type: ['object', 'null'],
        additionalProperties: {
          type: 'string',
          minLength: 1,
          description: 'The model id/name specified for the provider',
          maxLength: 50,
        },
        description:
          "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {'google' : 'google_model', ibm': 'ibm_model'...}.\n                     **Caution**: setting models can be done only with `Content-Type` : `application/json`.\n                     ",
      },
      text: {
        type: ['string', 'null'],
        description: 'Start your conversation here...',
        examples: [
          'Barack Hussein Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party, Obama was the first African-American president of the United States. He previously served as a U.S. senator from Illinois from 2005 to 2008 and as an Illinois state senator from 1997 to 2004.',
        ],
      },
      chatbot_global_action: {
        type: ['string', 'null'],
        description:
          "A system message that helps set the behavior of the assistant. For example, 'You are a helpful assistant'.",
        examples: [
          'You are a keyword extractor. Extract Only the word from the text provided.',
        ],
      },
      previous_history: {
        type: 'array',
        items: {
          type: 'object',
          additionalProperties: true,
          description:
            "A dictionary representing a single conversation in the previous history. Must contain 'role' and 'message' fields.",
        },
        description:
          "A list containing all the previous conversations between the user and the chatbot AI. Each item in the list should be a dictionary with two keys: 'role' and 'message'. The 'role' key specifies the role of the speaker and can have the values 'user' or 'assistant'. The 'message' key contains the text of the conversation from the respective role. For example: [{'role': 'user', 'message': 'Hello'}, {'role': 'assistant', 'message': 'Hi, how can I help you?'}, ...]. This format allows easy identification of the speaker's role and their corresponding message.",
      },
      temperature: {
        type: 'number',
        format: 'double',
        maximum: 2,
        minimum: 0,
        default: 0,
        description:
          'Higher values mean the model will take more risks and value 0 (argmax sampling) works better for scenarios with a well-defined answer.',
      },
      max_tokens: {
        type: 'integer',
        maximum: 4048,
        minimum: 1,
        default: 1000,
        description:
          "The maximum number of tokens to generate in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        examples: [100],
      },
    },
    required: ['providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        openai: {
          required: ['generated_text', 'status'],
          title: 'textchatChatDataClass',
          type: 'object',
          properties: {
            generated_text: { title: 'Generated Text', type: 'string' },
            message: {
              title: 'Message',
              type: 'array',
              items: {
                required: ['role', 'message'],
                title: 'ChatMessageDataClass',
                type: 'object',
                properties: {
                  role: { title: 'Role', type: 'string' },
                  message: { title: 'Message', type: 'string' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        google: {
          required: ['generated_text', 'status'],
          title: 'textchatChatDataClass',
          type: 'object',
          properties: {
            generated_text: { title: 'Generated Text', type: 'string' },
            message: {
              title: 'Message',
              type: 'array',
              items: {
                required: ['role', 'message'],
                title: 'ChatMessageDataClass',
                type: 'object',
                properties: {
                  role: { title: 'Role', type: 'string' },
                  message: { title: 'Message', type: 'string' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'textchatResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const TextCodeGenerationCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['openai,google'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      prompt: {
        type: ['string', 'null'],
        description: 'Entrer the source code that will be used as a context.',
      },
      instruction: {
        type: 'string',
        minLength: 1,
        description: 'Entrer the instruction you want to be followed.',
        examples: ['Write a function in python that calculates fibonacci'],
      },
      temperature: {
        type: 'number',
        format: 'double',
        maximum: 1,
        minimum: 0,
        default: 0,
        description:
          'Higher values mean the model will take more risks and value 0 (argmax sampling) works better for scenarios with a well-defined answer.',
        examples: [0.1],
      },
      max_tokens: {
        type: 'integer',
        maximum: 4096,
        minimum: 1,
        default: 1000,
        description:
          "The maximum number of tokens to generate in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        examples: [100],
      },
    },
    required: ['instruction', 'providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        openai: {
          required: ['generated_text', 'status'],
          title: 'textcode_generationCodeGenerationDataClass',
          type: 'object',
          properties: {
            generated_text: { title: 'Generated Text', type: 'string' },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        google: {
          required: ['generated_text', 'status'],
          title: 'textcode_generationCodeGenerationDataClass',
          type: 'object',
          properties: {
            generated_text: { title: 'Generated Text', type: 'string' },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'textcode_generationResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const TextCustomClassificationCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['cohere,openai'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      texts: {
        type: 'array',
        items: {
          type: 'string',
          minLength: 1,
          examples: ['Confirm your email address'],
        },
        description: 'List of texts to classify',
      },
      labels: {
        type: 'array',
        items: { type: 'string', minLength: 1, examples: ['spam'] },
        description:
          'List of the labels (classes) you want the texts to be classified as.',
      },
      examples: {
        type: 'array',
        items: {
          type: 'array',
          items: {
            type: 'string',
            minLength: 1,
            examples: ['I need help please wire me $1000 right now'],
          },
          maxItems: 2,
          minItems: 2,
        },
        description:
          "List of text/label pairs (eg: [['I need help please wire me $1000 right now', 'spam'],]",
      },
    },
    required: ['examples', 'labels', 'providers', 'texts'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        openai: {
          required: ['status'],
          title: 'textcustom_classificationCustomClassificationDataClass',
          type: 'object',
          properties: {
            classifications: {
              title: 'Classifications',
              type: 'array',
              items: {
                required: ['input', 'label', 'confidence'],
                title: 'ItemCustomClassificationDataClass',
                type: 'object',
                properties: {
                  input: { title: 'Input', type: 'string' },
                  label: { title: 'Label', type: 'string' },
                  confidence: { title: 'Confidence', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        cohere: {
          required: ['status'],
          title: 'textcustom_classificationCustomClassificationDataClass',
          type: 'object',
          properties: {
            classifications: {
              title: 'Classifications',
              type: 'array',
              items: {
                required: ['input', 'label', 'confidence'],
                title: 'ItemCustomClassificationDataClass',
                type: 'object',
                properties: {
                  input: { title: 'Input', type: 'string' },
                  label: { title: 'Label', type: 'string' },
                  confidence: { title: 'Confidence', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'textcustom_classificationResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const TextCustomNamedEntityRecognitionCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['openai,cohere'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      text: {
        type: 'string',
        minLength: 1,
        description: 'Enter your input text.',
        examples: [
          'Barack Hussein Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party, Obama was the first African-American president of the United States. He previously served as a U.S. senator from Illinois from 2005 to 2008 and as an Illinois state senator from 1997 to 2004.',
        ],
      },
      entities: {
        type: 'array',
        items: { type: 'string', minLength: 1, examples: ['Politician'] },
        description:
          "List of entities (at least two) to extract from your text eg : ['job', 'country'].",
        minItems: 2,
      },
      examples: {
        type: 'array',
        items: { type: 'object', additionalProperties: true },
        description:
          "List of examples eg : [{'text': 'an input text', 'entities' : [{'entity':'entity_1', 'category':'category_1'}, ...]}, ...]",
      },
    },
    required: ['entities', 'providers', 'text'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        openai: {
          required: ['status'],
          title:
            'textcustom_named_entity_recognitionCustomNamedEntityRecognitionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['entity', 'category'],
                title: 'InfosCustomNamedEntityRecognitionDataClass',
                type: 'object',
                properties: {
                  entity: { title: 'Entity', type: 'string' },
                  category: { title: 'Category', type: 'string' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        cohere: {
          required: ['status'],
          title:
            'textcustom_named_entity_recognitionCustomNamedEntityRecognitionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['entity', 'category'],
                title: 'InfosCustomNamedEntityRecognitionDataClass',
                type: 'object',
                properties: {
                  entity: { title: 'Entity', type: 'string' },
                  category: { title: 'Category', type: 'string' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        'eden-ai': {
          required: ['status'],
          title:
            'textcustom_named_entity_recognitionCustomNamedEntityRecognitionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['entity', 'category'],
                title: 'InfosCustomNamedEntityRecognitionDataClass',
                type: 'object',
                properties: {
                  entity: { title: 'Entity', type: 'string' },
                  category: { title: 'Category', type: 'string' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'textcustom_named_entity_recognitionResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const TextEmbeddingsCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['openai,google'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      texts: {
        type: 'array',
        items: { type: 'string', minLength: 1, examples: ['Hello world'] },
        description: 'List of texts to transform into embeddings.',
      },
    },
    required: ['providers', 'texts'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        openai: {
          required: ['status'],
          title: 'textembeddingsEmbeddingsDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['embedding'],
                title: 'EmbeddingDataClass',
                type: 'object',
                properties: {
                  embedding: {
                    title: 'Embedding',
                    type: 'array',
                    items: { type: 'integer' },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        google: {
          required: ['status'],
          title: 'textembeddingsEmbeddingsDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['embedding'],
                title: 'EmbeddingDataClass',
                type: 'object',
                properties: {
                  embedding: {
                    title: 'Embedding',
                    type: 'array',
                    items: { type: 'integer' },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        cohere: {
          required: ['status'],
          title: 'textembeddingsEmbeddingsDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['embedding'],
                title: 'EmbeddingDataClass',
                type: 'object',
                properties: {
                  embedding: {
                    title: 'Embedding',
                    type: 'array',
                    items: { type: 'integer' },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'textembeddingsResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const TextEntitySentimentCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['google,amazon'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      text: {
        type: 'string',
        minLength: 1,
        description: 'Text to analyze',
        examples: [
          "Overall I am satisfied with my experience at Amazon, but two areas of major improvement needed. First is the product reviews and pricing. There are thousands of positive reviews for so many items, and it's clear that the reviews are bogus or not really associated with that product. There needs to be a way to only view products sold by Amazon directly, because many market sellers way overprice items that can be purchased cheaper elsewhere (like Walmart, Target, etc). The second issue is they make it too difficult to get help when there's an issue with an order.",
        ],
      },
      language: {
        type: ['string', 'null'],
        description:
          'Language code for the language the input text is written in (eg: en, fr).',
        examples: ['en'],
      },
    },
    required: ['providers', 'text'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        google: {
          required: ['items', 'status'],
          title: 'textentity_sentimentEntitySentimentDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['type', 'text', 'sentiment'],
                title: 'Entity',
                type: 'object',
                properties: {
                  type: {
                    description: 'Recognized Entity type',
                    title: 'Type',
                    type: 'string',
                  },
                  text: {
                    description: 'Text corresponding to the entity',
                    title: 'Text',
                    type: 'string',
                  },
                  sentiment: {
                    title: 'Sentiment',
                    enum: ['Positive', 'Negative', 'Neutral', 'Mixed'],
                    type: 'string',
                    description: '`Positive` `Negative` `Neutral` `Mixed`',
                  },
                  begin_offset: {
                    default: null,
                    title: 'Begin Offset',
                    type: 'integer',
                  },
                  end_offset: {
                    default: null,
                    title: 'End Offset',
                    type: 'integer',
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        amazon: {
          required: ['items', 'status'],
          title: 'textentity_sentimentEntitySentimentDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['type', 'text', 'sentiment'],
                title: 'Entity',
                type: 'object',
                properties: {
                  type: {
                    description: 'Recognized Entity type',
                    title: 'Type',
                    type: 'string',
                  },
                  text: {
                    description: 'Text corresponding to the entity',
                    title: 'Text',
                    type: 'string',
                  },
                  sentiment: {
                    title: 'Sentiment',
                    enum: ['Positive', 'Negative', 'Neutral', 'Mixed'],
                    type: 'string',
                    description: '`Positive` `Negative` `Neutral` `Mixed`',
                  },
                  begin_offset: {
                    default: null,
                    title: 'Begin Offset',
                    type: 'integer',
                  },
                  end_offset: {
                    default: null,
                    title: 'End Offset',
                    type: 'integer',
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'textentity_sentimentResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const TextGenerationCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['cohere,openai,google'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      settings: {
        type: ['object', 'null'],
        additionalProperties: {
          type: 'string',
          minLength: 1,
          description: 'The model id/name specified for the provider',
          maxLength: 50,
        },
        description:
          "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {'google' : 'google_model', ibm': 'ibm_model'...}.\n                     **Caution**: setting models can be done only with `Content-Type` : `application/json`.\n                     ",
      },
      text: {
        type: 'string',
        minLength: 1,
        description: 'Enter your prompt',
        examples: [
          'The following is a conversation with an AI assistant. The assistant is helpful, creative, clever, and very friendly.\n\nHuman: Hello, who are you?',
        ],
      },
      temperature: {
        type: 'number',
        format: 'double',
        maximum: 1,
        minimum: 0,
        default: 0,
        description:
          'Higher values mean the model will take more risks and value 0 (argmax sampling) works better for scenarios with a well-defined answer.',
      },
      max_tokens: {
        type: 'integer',
        maximum: 2048,
        minimum: 1,
        default: 1000,
        description:
          "The maximum number of tokens to generate in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        examples: [10],
      },
    },
    required: ['providers', 'text'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        openai: {
          required: ['generated_text', 'status'],
          title: 'textgenerationGenerationDataClass',
          type: 'object',
          properties: {
            generated_text: { title: 'Generated Text', type: 'string' },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        google: {
          required: ['generated_text', 'status'],
          title: 'textgenerationGenerationDataClass',
          type: 'object',
          properties: {
            generated_text: { title: 'Generated Text', type: 'string' },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        cohere: {
          required: ['generated_text', 'status'],
          title: 'textgenerationGenerationDataClass',
          type: 'object',
          properties: {
            generated_text: { title: 'Generated Text', type: 'string' },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'textgenerationResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const TextKeywordExtractionCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['microsoft,tenstorrent,oneai,ibm,emvista,amazon,openai'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      text: {
        type: 'string',
        minLength: 1,
        description: 'Text to analyze',
        examples: [
          'Barack Hussein Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party, Obama was the first African-American president of the United States. He previously served as a U.S. senator from Illinois from 2005 to 2008 and as an Illinois state senator from 1997 to 2004.',
        ],
      },
      language: {
        type: ['string', 'null'],
        description:
          'Language code for the language the input text is written in (eg: en, fr).',
        examples: ['en'],
      },
    },
    required: ['providers', 'text'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        emvista: {
          required: ['status'],
          title: 'textkeyword_extractionKeywordExtractionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['keyword', 'importance'],
                title: 'InfosKeywordExtractionDataClass',
                type: 'object',
                properties: {
                  keyword: { title: 'Keyword', type: 'string' },
                  importance: { title: 'Importance', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        tenstorrent: {
          required: ['status'],
          title: 'textkeyword_extractionKeywordExtractionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['keyword', 'importance'],
                title: 'InfosKeywordExtractionDataClass',
                type: 'object',
                properties: {
                  keyword: { title: 'Keyword', type: 'string' },
                  importance: { title: 'Importance', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        microsoft: {
          required: ['status'],
          title: 'textkeyword_extractionKeywordExtractionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['keyword', 'importance'],
                title: 'InfosKeywordExtractionDataClass',
                type: 'object',
                properties: {
                  keyword: { title: 'Keyword', type: 'string' },
                  importance: { title: 'Importance', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        ibm: {
          required: ['status'],
          title: 'textkeyword_extractionKeywordExtractionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['keyword', 'importance'],
                title: 'InfosKeywordExtractionDataClass',
                type: 'object',
                properties: {
                  keyword: { title: 'Keyword', type: 'string' },
                  importance: { title: 'Importance', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        oneai: {
          required: ['status'],
          title: 'textkeyword_extractionKeywordExtractionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['keyword', 'importance'],
                title: 'InfosKeywordExtractionDataClass',
                type: 'object',
                properties: {
                  keyword: { title: 'Keyword', type: 'string' },
                  importance: { title: 'Importance', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        openai: {
          required: ['status'],
          title: 'textkeyword_extractionKeywordExtractionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['keyword', 'importance'],
                title: 'InfosKeywordExtractionDataClass',
                type: 'object',
                properties: {
                  keyword: { title: 'Keyword', type: 'string' },
                  importance: { title: 'Importance', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        amazon: {
          required: ['status'],
          title: 'textkeyword_extractionKeywordExtractionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['keyword', 'importance'],
                title: 'InfosKeywordExtractionDataClass',
                type: 'object',
                properties: {
                  keyword: { title: 'Keyword', type: 'string' },
                  importance: { title: 'Importance', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        'eden-ai': {
          required: ['status'],
          title: 'textkeyword_extractionKeywordExtractionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['keyword', 'importance'],
                title: 'InfosKeywordExtractionDataClass',
                type: 'object',
                properties: {
                  keyword: { title: 'Keyword', type: 'string' },
                  importance: { title: 'Importance', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'textkeyword_extractionResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const TextModerationCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['microsoft,openai,google,clarifai'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      text: {
        type: 'string',
        minLength: 1,
        description: 'Text to analyze',
        examples: [
          'Is this a crap email abcdef@abcd.com, phone: 0617730730, IP: 255.255.255.255, 1 Microsoft Way, Redmond, WA 98052',
        ],
      },
      language: {
        type: ['string', 'null'],
        description:
          'Language code for the language the input text is written in (eg: en, fr).',
        examples: ['en'],
      },
    },
    required: ['providers', 'text'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        clarifai: {
          required: ['nsfw_likelihood', 'status'],
          title: 'textmoderationModerationDataClass',
          type: 'object',
          properties: {
            nsfw_likelihood: { title: 'Nsfw Likelihood', type: 'integer' },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['label', 'likelihood'],
                title: 'TextModerationItem',
                type: 'object',
                properties: {
                  label: { title: 'Label', type: 'string' },
                  likelihood: { title: 'Likelihood', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        openai: {
          required: ['nsfw_likelihood', 'status'],
          title: 'textmoderationModerationDataClass',
          type: 'object',
          properties: {
            nsfw_likelihood: { title: 'Nsfw Likelihood', type: 'integer' },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['label', 'likelihood'],
                title: 'TextModerationItem',
                type: 'object',
                properties: {
                  label: { title: 'Label', type: 'string' },
                  likelihood: { title: 'Likelihood', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        google: {
          required: ['nsfw_likelihood', 'status'],
          title: 'textmoderationModerationDataClass',
          type: 'object',
          properties: {
            nsfw_likelihood: { title: 'Nsfw Likelihood', type: 'integer' },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['label', 'likelihood'],
                title: 'TextModerationItem',
                type: 'object',
                properties: {
                  label: { title: 'Label', type: 'string' },
                  likelihood: { title: 'Likelihood', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        microsoft: {
          required: ['nsfw_likelihood', 'status'],
          title: 'textmoderationModerationDataClass',
          type: 'object',
          properties: {
            nsfw_likelihood: { title: 'Nsfw Likelihood', type: 'integer' },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['label', 'likelihood'],
                title: 'TextModerationItem',
                type: 'object',
                properties: {
                  label: { title: 'Label', type: 'string' },
                  likelihood: { title: 'Likelihood', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'textmoderationResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const TextNamedEntityRecognitionCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: [
          'amazon,google,openai,lettria,microsoft,neuralspace,ibm,oneai,tenstorrent',
        ],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      text: {
        type: 'string',
        minLength: 1,
        description: 'Text to analyze',
        examples: [
          'Barack Hussein Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party, Obama was the first African-American president of the United States. He previously served as a U.S. senator from Illinois from 2005 to 2008 and as an Illinois state senator from 1997 to 2004.',
        ],
      },
      language: {
        type: ['string', 'null'],
        description:
          'Language code for the language the input text is written in (eg: en, fr).',
        examples: ['en'],
      },
    },
    required: ['providers', 'text'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        lettria: {
          required: ['status'],
          title: 'textnamed_entity_recognitionNamedEntityRecognitionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['entity', 'category', 'importance'],
                title: 'InfosNamedEntityRecognitionDataClass',
                type: 'object',
                properties: {
                  entity: { title: 'Entity', type: 'string' },
                  category: { title: 'Category', type: 'string' },
                  importance: { title: 'Importance', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        tenstorrent: {
          required: ['status'],
          title: 'textnamed_entity_recognitionNamedEntityRecognitionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['entity', 'category', 'importance'],
                title: 'InfosNamedEntityRecognitionDataClass',
                type: 'object',
                properties: {
                  entity: { title: 'Entity', type: 'string' },
                  category: { title: 'Category', type: 'string' },
                  importance: { title: 'Importance', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        microsoft: {
          required: ['status'],
          title: 'textnamed_entity_recognitionNamedEntityRecognitionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['entity', 'category', 'importance'],
                title: 'InfosNamedEntityRecognitionDataClass',
                type: 'object',
                properties: {
                  entity: { title: 'Entity', type: 'string' },
                  category: { title: 'Category', type: 'string' },
                  importance: { title: 'Importance', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        openai: {
          required: ['status'],
          title: 'textnamed_entity_recognitionNamedEntityRecognitionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['entity', 'category', 'importance'],
                title: 'InfosNamedEntityRecognitionDataClass',
                type: 'object',
                properties: {
                  entity: { title: 'Entity', type: 'string' },
                  category: { title: 'Category', type: 'string' },
                  importance: { title: 'Importance', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        ibm: {
          required: ['status'],
          title: 'textnamed_entity_recognitionNamedEntityRecognitionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['entity', 'category', 'importance'],
                title: 'InfosNamedEntityRecognitionDataClass',
                type: 'object',
                properties: {
                  entity: { title: 'Entity', type: 'string' },
                  category: { title: 'Category', type: 'string' },
                  importance: { title: 'Importance', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        oneai: {
          required: ['status'],
          title: 'textnamed_entity_recognitionNamedEntityRecognitionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['entity', 'category', 'importance'],
                title: 'InfosNamedEntityRecognitionDataClass',
                type: 'object',
                properties: {
                  entity: { title: 'Entity', type: 'string' },
                  category: { title: 'Category', type: 'string' },
                  importance: { title: 'Importance', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        google: {
          required: ['status'],
          title: 'textnamed_entity_recognitionNamedEntityRecognitionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['entity', 'category', 'importance'],
                title: 'InfosNamedEntityRecognitionDataClass',
                type: 'object',
                properties: {
                  entity: { title: 'Entity', type: 'string' },
                  category: { title: 'Category', type: 'string' },
                  importance: { title: 'Importance', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        neuralspace: {
          required: ['status'],
          title: 'textnamed_entity_recognitionNamedEntityRecognitionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['entity', 'category', 'importance'],
                title: 'InfosNamedEntityRecognitionDataClass',
                type: 'object',
                properties: {
                  entity: { title: 'Entity', type: 'string' },
                  category: { title: 'Category', type: 'string' },
                  importance: { title: 'Importance', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        amazon: {
          required: ['status'],
          title: 'textnamed_entity_recognitionNamedEntityRecognitionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['entity', 'category', 'importance'],
                title: 'InfosNamedEntityRecognitionDataClass',
                type: 'object',
                properties: {
                  entity: { title: 'Entity', type: 'string' },
                  category: { title: 'Category', type: 'string' },
                  importance: { title: 'Importance', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        'eden-ai': {
          required: ['status'],
          title: 'textnamed_entity_recognitionNamedEntityRecognitionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['entity', 'category', 'importance'],
                title: 'InfosNamedEntityRecognitionDataClass',
                type: 'object',
                properties: {
                  entity: { title: 'Entity', type: 'string' },
                  category: { title: 'Category', type: 'string' },
                  importance: { title: 'Importance', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'textnamed_entity_recognitionResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const TextPlagiaDetectionCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['originalityai'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      text: {
        type: 'string',
        minLength: 1,
        description:
          'A text content on which a plagiarism detection analysis will be run',
        examples: [
          "The Galaxy S23 launch may be far behind us, but Samsung likely has plenty more to announce in 2023.             That's if history repeats itself. Should Samsung stick to its annual routine, we can expect to see new             foldable phones and wearable devices in August. The company also previewed new designs for bendable phones and tablets             earlier this year, hinting that the company may be planning to expand beyond the Z Fold and Z Flip in the near future.             Though Samsung regularly releases new products across many categories, including TVs, home appliances and monitors,             I'm most interested in where its mobile devices are headed. Samsung is one of the world's largest smartphone manufacturers             by market share, meaning it has more influence than most other tech companies on the devices we carry in our pockets each day.             Wearables have also become a large part of how Samsung intends to differentiate its phones from those of other Android device makers.             It's a strategy to create a web of products that keep people hooked, much like Apple's range of devices.",
        ],
      },
      title: {
        type: ['string', 'null'],
        description: 'Content title',
        examples: ["n'importe nawak"],
      },
    },
    required: ['providers', 'text'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        originalityai: {
          required: ['plagia_score', 'status'],
          title: 'textplagia_detectionPlagiaDetectionDataClass',
          type: 'object',
          properties: {
            plagia_score: { title: 'Plagia Score', type: 'integer' },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['text'],
                title: 'PlagiaDetectionItem',
                type: 'object',
                properties: {
                  text: { title: 'Text', type: 'string' },
                  candidates: {
                    title: 'Candidates',
                    type: 'array',
                    items: {
                      required: [
                        'url',
                        'plagia_score',
                        'prediction',
                        'plagiarized_text',
                      ],
                      title: 'PlagiaDetectionCandidate',
                      type: 'object',
                      properties: {
                        url: { title: 'Url', type: 'string' },
                        plagia_score: {
                          title: 'Plagia Score',
                          type: 'integer',
                        },
                        prediction: { title: 'Prediction', type: 'string' },
                        plagiarized_text: {
                          title: 'Plagiarized Text',
                          type: 'string',
                        },
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'textplagia_detectionResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const TextPromptOptimizationCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['openai'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      text: {
        type: 'string',
        minLength: 1,
        description: 'Description of the desired prompt.',
        examples: [
          'Entity extractor, i give you an entity or multiple entities and a text and i want the entitites extracted from the text',
        ],
      },
      target_provider: {
        description:
          '* `google` - google\n* `openai` - openai\n* `cohere` - cohere',
        enum: ['google', 'openai', 'cohere'],
        type: 'string',
        examples: ['google'],
      },
    },
    required: ['providers', 'target_provider', 'text'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        openai: {
          required: ['missing_information', 'status'],
          title: 'textprompt_optimizationPromptOptimizationDataClass',
          type: 'object',
          properties: {
            missing_information: {
              title: 'Missing Information',
              type: 'string',
            },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['text'],
                title: 'PromptDataClass',
                type: 'object',
                properties: { text: { title: 'Text', type: 'string' } },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'textprompt_optimizationResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const TextQuestionAnswerCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['openai,tenstorrent'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      texts: {
        type: 'array',
        items: {
          type: 'string',
          minLength: 1,
          examples: [
            'The bar-shouldered dove (Geopelia humeralis) is a species of dove, in the family Columbidae, native to Australia and southern New Guinea. Its typical habitat consists of areas of thick vegetation where water is present, damp gullies, forests and gorges, mangroves, plantations, swamps, eucalyptus woodland, tropical and sub-tropical shrubland, and river margins. It can be found in both inland and coastal regions.',
          ],
        },
        description: 'List of texts to analyze',
      },
      question: {
        type: 'string',
        minLength: 1,
        description: 'Question about the text content',
        examples: ['What is the scientific name of bar-shouldered dove?'],
      },
      temperature: {
        type: 'number',
        format: 'double',
        maximum: 1,
        minimum: 0,
        default: 0,
        description:
          'Higher values mean the model will take more risks and value 0 (argmax sampling) works better for scenarios with a well-defined answer.',
      },
      examples_context: {
        type: 'string',
        minLength: 1,
        description: 'example text serving as context',
        examples: ['In 2017, U.S. life expectancy was 78.6 years.'],
      },
      examples: {
        type: 'array',
        items: {
          type: 'array',
          items: {
            type: 'string',
            minLength: 1,
            examples: ['What is human life expectancy in the United States?'],
          },
          maxItems: 2,
          minItems: 2,
        },
        description:
          "List of question/answer pairs (eg: [['When was Barack Obama elected president?', 'in 2009.'],]",
      },
    },
    required: [
      'examples',
      'examples_context',
      'providers',
      'question',
      'texts',
    ],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        tenstorrent: {
          required: ['status'],
          title: 'textquestion_answerQuestionAnswerDataClass',
          type: 'object',
          properties: {
            answers: {
              title: 'Answers',
              type: 'array',
              items: { type: 'string' },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        openai: {
          required: ['status'],
          title: 'textquestion_answerQuestionAnswerDataClass',
          type: 'object',
          properties: {
            answers: {
              title: 'Answers',
              type: 'array',
              items: { type: 'string' },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        huggingface: {
          required: ['status'],
          title: 'textquestion_answerQuestionAnswerDataClass',
          type: 'object',
          properties: {
            answers: {
              title: 'Answers',
              type: 'array',
              items: { type: 'string' },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        'eden-ai': {
          required: ['status'],
          title: 'textquestion_answerQuestionAnswerDataClass',
          type: 'object',
          properties: {
            answers: {
              title: 'Answers',
              type: 'array',
              items: { type: 'string' },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'textquestion_answerResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const TextSearchCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['openai'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      texts: {
        type: 'array',
        items: {
          type: 'string',
          minLength: 1,
          examples: [
            'In Roman mythology, Romulus and Remus (Latin: [ˈroːmʊlʊs], [ˈrɛmʊs]) are twin brothers whose story tells of the events that led to the founding of the city of Rome and the Roman Kingdom by Romulus.',
          ],
        },
        description: 'A list of texts to search in.',
        minItems: 2,
      },
      query: {
        type: 'string',
        minLength: 1,
        description: 'Your text query.',
        examples: ['Rome'],
      },
    },
    required: ['providers', 'query', 'texts'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        openai: {
          required: ['status'],
          title: 'textsearchSearchDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['object', 'document', 'score'],
                title: 'InfosSearchDataClass',
                type: 'object',
                properties: {
                  object: { title: 'Object', type: 'string' },
                  document: { title: 'Document', type: 'integer' },
                  score: { title: 'Score', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'textsearchResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const TextSentimentAnalysisCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: [
          'connexun,amazon,google,microsoft,tenstorrent,sapling,oneai,emvista,openai,ibm,lettria',
        ],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      text: {
        type: 'string',
        minLength: 1,
        description: 'Text to analyze',
        examples: [
          "Overall I am satisfied with my experience at Amazon, but two areas of major improvement needed. First is the product reviews and pricing. There are thousands of positive reviews for so many items, and it's clear that the reviews are bogus or not really associated with that product. There needs to be a way to only view products sold by Amazon directly, because many market sellers way overprice items that can be purchased cheaper elsewhere (like Walmart, Target, etc). The second issue is they make it too difficult to get help when there's an issue with an order.",
        ],
      },
      language: {
        type: ['string', 'null'],
        description:
          'Language code for the language the input text is written in (eg: en, fr).',
        examples: ['en'],
      },
    },
    required: ['providers', 'text'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        emvista: {
          required: ['general_sentiment', 'general_sentiment_rate', 'status'],
          title: 'textsentiment_analysisSentimentAnalysisDataClass',
          type: 'object',
          properties: {
            general_sentiment: {
              title: 'General Sentiment',
              enum: ['Positive', 'Negative', 'Neutral'],
              type: 'string',
              description: '`Positive` `Negative` `Neutral`',
            },
            general_sentiment_rate: {
              maximum: 1,
              minimum: 0,
              title: 'General Sentiment Rate',
              type: 'integer',
            },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                description:
                  "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\n    Args:\n        - segment (str): The segment analyzed\n        - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n        - sentiment_rate (float between 0 and 1): Rate of sentiment\n    ",
                required: ['segment', 'sentiment', 'sentiment_rate'],
                title: 'SegmentSentimentAnalysisDataClass',
                type: 'object',
                properties: {
                  segment: { title: 'Segment', type: 'string' },
                  sentiment: {
                    title: 'Sentiment',
                    enum: ['Positive', 'Negative', 'Neutral'],
                    type: 'string',
                    description: '`Positive` `Negative` `Neutral`',
                  },
                  sentiment_rate: {
                    maximum: 1,
                    minimum: 0,
                    title: 'Sentiment Rate',
                    type: 'integer',
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        lettria: {
          required: ['general_sentiment', 'general_sentiment_rate', 'status'],
          title: 'textsentiment_analysisSentimentAnalysisDataClass',
          type: 'object',
          properties: {
            general_sentiment: {
              title: 'General Sentiment',
              enum: ['Positive', 'Negative', 'Neutral'],
              type: 'string',
              description: '`Positive` `Negative` `Neutral`',
            },
            general_sentiment_rate: {
              maximum: 1,
              minimum: 0,
              title: 'General Sentiment Rate',
              type: 'integer',
            },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                description:
                  "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\n    Args:\n        - segment (str): The segment analyzed\n        - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n        - sentiment_rate (float between 0 and 1): Rate of sentiment\n    ",
                required: ['segment', 'sentiment', 'sentiment_rate'],
                title: 'SegmentSentimentAnalysisDataClass',
                type: 'object',
                properties: {
                  segment: { title: 'Segment', type: 'string' },
                  sentiment: {
                    title: 'Sentiment',
                    enum: ['Positive', 'Negative', 'Neutral'],
                    type: 'string',
                    description: '`Positive` `Negative` `Neutral`',
                  },
                  sentiment_rate: {
                    maximum: 1,
                    minimum: 0,
                    title: 'Sentiment Rate',
                    type: 'integer',
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        sapling: {
          required: ['general_sentiment', 'general_sentiment_rate', 'status'],
          title: 'textsentiment_analysisSentimentAnalysisDataClass',
          type: 'object',
          properties: {
            general_sentiment: {
              title: 'General Sentiment',
              enum: ['Positive', 'Negative', 'Neutral'],
              type: 'string',
              description: '`Positive` `Negative` `Neutral`',
            },
            general_sentiment_rate: {
              maximum: 1,
              minimum: 0,
              title: 'General Sentiment Rate',
              type: 'integer',
            },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                description:
                  "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\n    Args:\n        - segment (str): The segment analyzed\n        - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n        - sentiment_rate (float between 0 and 1): Rate of sentiment\n    ",
                required: ['segment', 'sentiment', 'sentiment_rate'],
                title: 'SegmentSentimentAnalysisDataClass',
                type: 'object',
                properties: {
                  segment: { title: 'Segment', type: 'string' },
                  sentiment: {
                    title: 'Sentiment',
                    enum: ['Positive', 'Negative', 'Neutral'],
                    type: 'string',
                    description: '`Positive` `Negative` `Neutral`',
                  },
                  sentiment_rate: {
                    maximum: 1,
                    minimum: 0,
                    title: 'Sentiment Rate',
                    type: 'integer',
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        tenstorrent: {
          required: ['general_sentiment', 'general_sentiment_rate', 'status'],
          title: 'textsentiment_analysisSentimentAnalysisDataClass',
          type: 'object',
          properties: {
            general_sentiment: {
              title: 'General Sentiment',
              enum: ['Positive', 'Negative', 'Neutral'],
              type: 'string',
              description: '`Positive` `Negative` `Neutral`',
            },
            general_sentiment_rate: {
              maximum: 1,
              minimum: 0,
              title: 'General Sentiment Rate',
              type: 'integer',
            },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                description:
                  "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\n    Args:\n        - segment (str): The segment analyzed\n        - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n        - sentiment_rate (float between 0 and 1): Rate of sentiment\n    ",
                required: ['segment', 'sentiment', 'sentiment_rate'],
                title: 'SegmentSentimentAnalysisDataClass',
                type: 'object',
                properties: {
                  segment: { title: 'Segment', type: 'string' },
                  sentiment: {
                    title: 'Sentiment',
                    enum: ['Positive', 'Negative', 'Neutral'],
                    type: 'string',
                    description: '`Positive` `Negative` `Neutral`',
                  },
                  sentiment_rate: {
                    maximum: 1,
                    minimum: 0,
                    title: 'Sentiment Rate',
                    type: 'integer',
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        microsoft: {
          required: ['general_sentiment', 'general_sentiment_rate', 'status'],
          title: 'textsentiment_analysisSentimentAnalysisDataClass',
          type: 'object',
          properties: {
            general_sentiment: {
              title: 'General Sentiment',
              enum: ['Positive', 'Negative', 'Neutral'],
              type: 'string',
              description: '`Positive` `Negative` `Neutral`',
            },
            general_sentiment_rate: {
              maximum: 1,
              minimum: 0,
              title: 'General Sentiment Rate',
              type: 'integer',
            },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                description:
                  "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\n    Args:\n        - segment (str): The segment analyzed\n        - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n        - sentiment_rate (float between 0 and 1): Rate of sentiment\n    ",
                required: ['segment', 'sentiment', 'sentiment_rate'],
                title: 'SegmentSentimentAnalysisDataClass',
                type: 'object',
                properties: {
                  segment: { title: 'Segment', type: 'string' },
                  sentiment: {
                    title: 'Sentiment',
                    enum: ['Positive', 'Negative', 'Neutral'],
                    type: 'string',
                    description: '`Positive` `Negative` `Neutral`',
                  },
                  sentiment_rate: {
                    maximum: 1,
                    minimum: 0,
                    title: 'Sentiment Rate',
                    type: 'integer',
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        connexun: {
          required: ['general_sentiment', 'general_sentiment_rate', 'status'],
          title: 'textsentiment_analysisSentimentAnalysisDataClass',
          type: 'object',
          properties: {
            general_sentiment: {
              title: 'General Sentiment',
              enum: ['Positive', 'Negative', 'Neutral'],
              type: 'string',
              description: '`Positive` `Negative` `Neutral`',
            },
            general_sentiment_rate: {
              maximum: 1,
              minimum: 0,
              title: 'General Sentiment Rate',
              type: 'integer',
            },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                description:
                  "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\n    Args:\n        - segment (str): The segment analyzed\n        - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n        - sentiment_rate (float between 0 and 1): Rate of sentiment\n    ",
                required: ['segment', 'sentiment', 'sentiment_rate'],
                title: 'SegmentSentimentAnalysisDataClass',
                type: 'object',
                properties: {
                  segment: { title: 'Segment', type: 'string' },
                  sentiment: {
                    title: 'Sentiment',
                    enum: ['Positive', 'Negative', 'Neutral'],
                    type: 'string',
                    description: '`Positive` `Negative` `Neutral`',
                  },
                  sentiment_rate: {
                    maximum: 1,
                    minimum: 0,
                    title: 'Sentiment Rate',
                    type: 'integer',
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        openai: {
          required: ['general_sentiment', 'general_sentiment_rate', 'status'],
          title: 'textsentiment_analysisSentimentAnalysisDataClass',
          type: 'object',
          properties: {
            general_sentiment: {
              title: 'General Sentiment',
              enum: ['Positive', 'Negative', 'Neutral'],
              type: 'string',
              description: '`Positive` `Negative` `Neutral`',
            },
            general_sentiment_rate: {
              maximum: 1,
              minimum: 0,
              title: 'General Sentiment Rate',
              type: 'integer',
            },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                description:
                  "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\n    Args:\n        - segment (str): The segment analyzed\n        - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n        - sentiment_rate (float between 0 and 1): Rate of sentiment\n    ",
                required: ['segment', 'sentiment', 'sentiment_rate'],
                title: 'SegmentSentimentAnalysisDataClass',
                type: 'object',
                properties: {
                  segment: { title: 'Segment', type: 'string' },
                  sentiment: {
                    title: 'Sentiment',
                    enum: ['Positive', 'Negative', 'Neutral'],
                    type: 'string',
                    description: '`Positive` `Negative` `Neutral`',
                  },
                  sentiment_rate: {
                    maximum: 1,
                    minimum: 0,
                    title: 'Sentiment Rate',
                    type: 'integer',
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        ibm: {
          required: ['general_sentiment', 'general_sentiment_rate', 'status'],
          title: 'textsentiment_analysisSentimentAnalysisDataClass',
          type: 'object',
          properties: {
            general_sentiment: {
              title: 'General Sentiment',
              enum: ['Positive', 'Negative', 'Neutral'],
              type: 'string',
              description: '`Positive` `Negative` `Neutral`',
            },
            general_sentiment_rate: {
              maximum: 1,
              minimum: 0,
              title: 'General Sentiment Rate',
              type: 'integer',
            },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                description:
                  "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\n    Args:\n        - segment (str): The segment analyzed\n        - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n        - sentiment_rate (float between 0 and 1): Rate of sentiment\n    ",
                required: ['segment', 'sentiment', 'sentiment_rate'],
                title: 'SegmentSentimentAnalysisDataClass',
                type: 'object',
                properties: {
                  segment: { title: 'Segment', type: 'string' },
                  sentiment: {
                    title: 'Sentiment',
                    enum: ['Positive', 'Negative', 'Neutral'],
                    type: 'string',
                    description: '`Positive` `Negative` `Neutral`',
                  },
                  sentiment_rate: {
                    maximum: 1,
                    minimum: 0,
                    title: 'Sentiment Rate',
                    type: 'integer',
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        oneai: {
          required: ['general_sentiment', 'general_sentiment_rate', 'status'],
          title: 'textsentiment_analysisSentimentAnalysisDataClass',
          type: 'object',
          properties: {
            general_sentiment: {
              title: 'General Sentiment',
              enum: ['Positive', 'Negative', 'Neutral'],
              type: 'string',
              description: '`Positive` `Negative` `Neutral`',
            },
            general_sentiment_rate: {
              maximum: 1,
              minimum: 0,
              title: 'General Sentiment Rate',
              type: 'integer',
            },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                description:
                  "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\n    Args:\n        - segment (str): The segment analyzed\n        - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n        - sentiment_rate (float between 0 and 1): Rate of sentiment\n    ",
                required: ['segment', 'sentiment', 'sentiment_rate'],
                title: 'SegmentSentimentAnalysisDataClass',
                type: 'object',
                properties: {
                  segment: { title: 'Segment', type: 'string' },
                  sentiment: {
                    title: 'Sentiment',
                    enum: ['Positive', 'Negative', 'Neutral'],
                    type: 'string',
                    description: '`Positive` `Negative` `Neutral`',
                  },
                  sentiment_rate: {
                    maximum: 1,
                    minimum: 0,
                    title: 'Sentiment Rate',
                    type: 'integer',
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        google: {
          required: ['general_sentiment', 'general_sentiment_rate', 'status'],
          title: 'textsentiment_analysisSentimentAnalysisDataClass',
          type: 'object',
          properties: {
            general_sentiment: {
              title: 'General Sentiment',
              enum: ['Positive', 'Negative', 'Neutral'],
              type: 'string',
              description: '`Positive` `Negative` `Neutral`',
            },
            general_sentiment_rate: {
              maximum: 1,
              minimum: 0,
              title: 'General Sentiment Rate',
              type: 'integer',
            },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                description:
                  "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\n    Args:\n        - segment (str): The segment analyzed\n        - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n        - sentiment_rate (float between 0 and 1): Rate of sentiment\n    ",
                required: ['segment', 'sentiment', 'sentiment_rate'],
                title: 'SegmentSentimentAnalysisDataClass',
                type: 'object',
                properties: {
                  segment: { title: 'Segment', type: 'string' },
                  sentiment: {
                    title: 'Sentiment',
                    enum: ['Positive', 'Negative', 'Neutral'],
                    type: 'string',
                    description: '`Positive` `Negative` `Neutral`',
                  },
                  sentiment_rate: {
                    maximum: 1,
                    minimum: 0,
                    title: 'Sentiment Rate',
                    type: 'integer',
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        amazon: {
          required: ['general_sentiment', 'general_sentiment_rate', 'status'],
          title: 'textsentiment_analysisSentimentAnalysisDataClass',
          type: 'object',
          properties: {
            general_sentiment: {
              title: 'General Sentiment',
              enum: ['Positive', 'Negative', 'Neutral'],
              type: 'string',
              description: '`Positive` `Negative` `Neutral`',
            },
            general_sentiment_rate: {
              maximum: 1,
              minimum: 0,
              title: 'General Sentiment Rate',
              type: 'integer',
            },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                description:
                  "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\n    Args:\n        - segment (str): The segment analyzed\n        - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n        - sentiment_rate (float between 0 and 1): Rate of sentiment\n    ",
                required: ['segment', 'sentiment', 'sentiment_rate'],
                title: 'SegmentSentimentAnalysisDataClass',
                type: 'object',
                properties: {
                  segment: { title: 'Segment', type: 'string' },
                  sentiment: {
                    title: 'Sentiment',
                    enum: ['Positive', 'Negative', 'Neutral'],
                    type: 'string',
                    description: '`Positive` `Negative` `Neutral`',
                  },
                  sentiment_rate: {
                    maximum: 1,
                    minimum: 0,
                    title: 'Sentiment Rate',
                    type: 'integer',
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'textsentiment_analysisResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const TextSpellCheckCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['cohere,prowritingaid,openai,microsoft,sapling'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      text: {
        type: 'string',
        minLength: 1,
        description: 'Text to analyze',
        examples: ['Hollo, wrld! How re yu?'],
      },
      language: {
        type: ['string', 'null'],
        description:
          'Language code for the language the input text is written in (eg: en, fr).',
        examples: ['en'],
      },
    },
    required: ['providers', 'text'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        prowritingaid: {
          required: ['text', 'status'],
          title: 'textspell_checkSpellCheckDataClass',
          type: 'object',
          properties: {
            text: { title: 'Text', type: 'string' },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                description:
                  '\n    Represents a spell check item with suggestions.\n\n    Args:\n        text (str): The text to spell check.\n        type (str, optional): The type of the text.\n        offset (int): The offset of the text.\n        length (int): The length of the text.\n        suggestions (Sequence[SuggestionItem], optional): The list of suggestions for the misspelled text.\n\n    Raises:\n        ValueError: If the offset or length is not positive.\n\n    Returns:\n        SpellCheckItem: An instance of the SpellCheckItem class.\n    ',
                required: ['text', 'type', 'offset', 'length'],
                title: 'SpellCheckItem',
                type: 'object',
                properties: {
                  text: { title: 'Text', type: 'string' },
                  type: { title: 'Type', type: 'string' },
                  offset: { minimum: 0, title: 'Offset', type: 'integer' },
                  length: { minimum: 0, title: 'Length', type: 'integer' },
                  suggestions: {
                    title: 'Suggestions',
                    type: 'array',
                    items: {
                      description:
                        '\n    Represents a suggestion for a misspelled word.\n\n    Args:\n        suggestion (str): The suggested text.\n        score (float, optional): The score of the suggested text (between 0 and 1).\n\n    Raises:\n        ValueError: If the score is not between 0 and 1.\n\n    Returns:\n        SuggestionItem: An instance of the SuggestionItem class.\n    ',
                      required: ['suggestion', 'score'],
                      title: 'SuggestionItem',
                      type: 'object',
                      properties: {
                        suggestion: { title: 'Suggestion', type: 'string' },
                        score: {
                          maximum: 1,
                          minimum: 0,
                          title: 'Score',
                          type: 'integer',
                        },
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        sapling: {
          required: ['text', 'status'],
          title: 'textspell_checkSpellCheckDataClass',
          type: 'object',
          properties: {
            text: { title: 'Text', type: 'string' },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                description:
                  '\n    Represents a spell check item with suggestions.\n\n    Args:\n        text (str): The text to spell check.\n        type (str, optional): The type of the text.\n        offset (int): The offset of the text.\n        length (int): The length of the text.\n        suggestions (Sequence[SuggestionItem], optional): The list of suggestions for the misspelled text.\n\n    Raises:\n        ValueError: If the offset or length is not positive.\n\n    Returns:\n        SpellCheckItem: An instance of the SpellCheckItem class.\n    ',
                required: ['text', 'type', 'offset', 'length'],
                title: 'SpellCheckItem',
                type: 'object',
                properties: {
                  text: { title: 'Text', type: 'string' },
                  type: { title: 'Type', type: 'string' },
                  offset: { minimum: 0, title: 'Offset', type: 'integer' },
                  length: { minimum: 0, title: 'Length', type: 'integer' },
                  suggestions: {
                    title: 'Suggestions',
                    type: 'array',
                    items: {
                      description:
                        '\n    Represents a suggestion for a misspelled word.\n\n    Args:\n        suggestion (str): The suggested text.\n        score (float, optional): The score of the suggested text (between 0 and 1).\n\n    Raises:\n        ValueError: If the score is not between 0 and 1.\n\n    Returns:\n        SuggestionItem: An instance of the SuggestionItem class.\n    ',
                      required: ['suggestion', 'score'],
                      title: 'SuggestionItem',
                      type: 'object',
                      properties: {
                        suggestion: { title: 'Suggestion', type: 'string' },
                        score: {
                          maximum: 1,
                          minimum: 0,
                          title: 'Score',
                          type: 'integer',
                        },
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        microsoft: {
          required: ['text', 'status'],
          title: 'textspell_checkSpellCheckDataClass',
          type: 'object',
          properties: {
            text: { title: 'Text', type: 'string' },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                description:
                  '\n    Represents a spell check item with suggestions.\n\n    Args:\n        text (str): The text to spell check.\n        type (str, optional): The type of the text.\n        offset (int): The offset of the text.\n        length (int): The length of the text.\n        suggestions (Sequence[SuggestionItem], optional): The list of suggestions for the misspelled text.\n\n    Raises:\n        ValueError: If the offset or length is not positive.\n\n    Returns:\n        SpellCheckItem: An instance of the SpellCheckItem class.\n    ',
                required: ['text', 'type', 'offset', 'length'],
                title: 'SpellCheckItem',
                type: 'object',
                properties: {
                  text: { title: 'Text', type: 'string' },
                  type: { title: 'Type', type: 'string' },
                  offset: { minimum: 0, title: 'Offset', type: 'integer' },
                  length: { minimum: 0, title: 'Length', type: 'integer' },
                  suggestions: {
                    title: 'Suggestions',
                    type: 'array',
                    items: {
                      description:
                        '\n    Represents a suggestion for a misspelled word.\n\n    Args:\n        suggestion (str): The suggested text.\n        score (float, optional): The score of the suggested text (between 0 and 1).\n\n    Raises:\n        ValueError: If the score is not between 0 and 1.\n\n    Returns:\n        SuggestionItem: An instance of the SuggestionItem class.\n    ',
                      required: ['suggestion', 'score'],
                      title: 'SuggestionItem',
                      type: 'object',
                      properties: {
                        suggestion: { title: 'Suggestion', type: 'string' },
                        score: {
                          maximum: 1,
                          minimum: 0,
                          title: 'Score',
                          type: 'integer',
                        },
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        cohere: {
          required: ['text', 'status'],
          title: 'textspell_checkSpellCheckDataClass',
          type: 'object',
          properties: {
            text: { title: 'Text', type: 'string' },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                description:
                  '\n    Represents a spell check item with suggestions.\n\n    Args:\n        text (str): The text to spell check.\n        type (str, optional): The type of the text.\n        offset (int): The offset of the text.\n        length (int): The length of the text.\n        suggestions (Sequence[SuggestionItem], optional): The list of suggestions for the misspelled text.\n\n    Raises:\n        ValueError: If the offset or length is not positive.\n\n    Returns:\n        SpellCheckItem: An instance of the SpellCheckItem class.\n    ',
                required: ['text', 'type', 'offset', 'length'],
                title: 'SpellCheckItem',
                type: 'object',
                properties: {
                  text: { title: 'Text', type: 'string' },
                  type: { title: 'Type', type: 'string' },
                  offset: { minimum: 0, title: 'Offset', type: 'integer' },
                  length: { minimum: 0, title: 'Length', type: 'integer' },
                  suggestions: {
                    title: 'Suggestions',
                    type: 'array',
                    items: {
                      description:
                        '\n    Represents a suggestion for a misspelled word.\n\n    Args:\n        suggestion (str): The suggested text.\n        score (float, optional): The score of the suggested text (between 0 and 1).\n\n    Raises:\n        ValueError: If the score is not between 0 and 1.\n\n    Returns:\n        SuggestionItem: An instance of the SuggestionItem class.\n    ',
                      required: ['suggestion', 'score'],
                      title: 'SuggestionItem',
                      type: 'object',
                      properties: {
                        suggestion: { title: 'Suggestion', type: 'string' },
                        score: {
                          maximum: 1,
                          minimum: 0,
                          title: 'Score',
                          type: 'integer',
                        },
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        openai: {
          required: ['text', 'status'],
          title: 'textspell_checkSpellCheckDataClass',
          type: 'object',
          properties: {
            text: { title: 'Text', type: 'string' },
            items: {
              title: 'Items',
              type: 'array',
              items: {
                description:
                  '\n    Represents a spell check item with suggestions.\n\n    Args:\n        text (str): The text to spell check.\n        type (str, optional): The type of the text.\n        offset (int): The offset of the text.\n        length (int): The length of the text.\n        suggestions (Sequence[SuggestionItem], optional): The list of suggestions for the misspelled text.\n\n    Raises:\n        ValueError: If the offset or length is not positive.\n\n    Returns:\n        SpellCheckItem: An instance of the SpellCheckItem class.\n    ',
                required: ['text', 'type', 'offset', 'length'],
                title: 'SpellCheckItem',
                type: 'object',
                properties: {
                  text: { title: 'Text', type: 'string' },
                  type: { title: 'Type', type: 'string' },
                  offset: { minimum: 0, title: 'Offset', type: 'integer' },
                  length: { minimum: 0, title: 'Length', type: 'integer' },
                  suggestions: {
                    title: 'Suggestions',
                    type: 'array',
                    items: {
                      description:
                        '\n    Represents a suggestion for a misspelled word.\n\n    Args:\n        suggestion (str): The suggested text.\n        score (float, optional): The score of the suggested text (between 0 and 1).\n\n    Raises:\n        ValueError: If the score is not between 0 and 1.\n\n    Returns:\n        SuggestionItem: An instance of the SuggestionItem class.\n    ',
                      required: ['suggestion', 'score'],
                      title: 'SuggestionItem',
                      type: 'object',
                      properties: {
                        suggestion: { title: 'Suggestion', type: 'string' },
                        score: {
                          maximum: 1,
                          minimum: 0,
                          title: 'Score',
                          type: 'integer',
                        },
                      },
                    },
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'textspell_checkResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const TextSummarizeCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['cohere,openai,microsoft,emvista,oneai,connexun'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      text: {
        type: 'string',
        minLength: 1,
        description: 'Text to analyze',
        examples: [
          'Barack Hussein Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party, Obama was the first African-American president of the United States. He previously served as a U.S. senator from Illinois from 2005 to 2008 and as an Illinois state senator from 1997 to 2004.',
        ],
      },
      language: {
        type: ['string', 'null'],
        description:
          'Language code for the language the input text is written in (eg: en, fr).',
        examples: ['en'],
      },
      settings: {
        type: ['object', 'null'],
        additionalProperties: {
          type: 'string',
          minLength: 1,
          description: 'The model id/name specified for the provider',
          maxLength: 50,
        },
        description:
          "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {'google' : 'google_model', ibm': 'ibm_model'...}.\n                     **Caution**: setting models can be done only with `Content-Type` : `application/json`.\n                     ",
      },
      output_sentences: {
        type: 'integer',
        minimum: 1,
        default: 1,
        examples: [3],
      },
    },
    required: ['providers', 'text'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        emvista: {
          required: ['result', 'status'],
          title: 'textsummarizeSummarizeDataClass',
          type: 'object',
          properties: {
            result: { title: 'Result', type: 'string' },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        writesonic: {
          required: ['result', 'status'],
          title: 'textsummarizeSummarizeDataClass',
          type: 'object',
          properties: {
            result: { title: 'Result', type: 'string' },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        microsoft: {
          required: ['result', 'status'],
          title: 'textsummarizeSummarizeDataClass',
          type: 'object',
          properties: {
            result: { title: 'Result', type: 'string' },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        connexun: {
          required: ['result', 'status'],
          title: 'textsummarizeSummarizeDataClass',
          type: 'object',
          properties: {
            result: { title: 'Result', type: 'string' },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        cohere: {
          required: ['result', 'status'],
          title: 'textsummarizeSummarizeDataClass',
          type: 'object',
          properties: {
            result: { title: 'Result', type: 'string' },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        meaningcloud: {
          required: ['result', 'status'],
          title: 'textsummarizeSummarizeDataClass',
          type: 'object',
          properties: {
            result: { title: 'Result', type: 'string' },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        oneai: {
          required: ['result', 'status'],
          title: 'textsummarizeSummarizeDataClass',
          type: 'object',
          properties: {
            result: { title: 'Result', type: 'string' },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        openai: {
          required: ['result', 'status'],
          title: 'textsummarizeSummarizeDataClass',
          type: 'object',
          properties: {
            result: { title: 'Result', type: 'string' },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        huggingface: {
          required: ['result', 'status'],
          title: 'textsummarizeSummarizeDataClass',
          type: 'object',
          properties: {
            result: { title: 'Result', type: 'string' },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'textsummarizeResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const TextSyntaxAnalysisCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['google,lettria,ibm,emvista,amazon'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      text: {
        type: 'string',
        minLength: 1,
        description: 'Text to analyze',
        examples: [
          'Barack Hussein Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party, Obama was the first African-American president of the United States. He previously served as a U.S. senator from Illinois from 2005 to 2008 and as an Illinois state senator from 1997 to 2004.',
        ],
      },
      language: {
        type: ['string', 'null'],
        description:
          'Language code for the language the input text is written in (eg: en, fr).',
        examples: ['en'],
      },
    },
    required: ['providers', 'text'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        emvista: {
          required: ['status'],
          title: 'textsyntax_analysisSyntaxAnalysisDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['word', 'importance', 'tag', 'lemma'],
                title: 'InfosSyntaxAnalysisDataClass',
                type: 'object',
                properties: {
                  word: { title: 'Word', type: 'string' },
                  importance: { title: 'Importance', type: 'integer' },
                  tag: { title: 'Tag', type: 'string' },
                  lemma: { title: 'Lemma', type: 'string' },
                  others: {
                    title: 'Others',
                    type: 'object',
                    additionalProperties: true,
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        lettria: {
          required: ['status'],
          title: 'textsyntax_analysisSyntaxAnalysisDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['word', 'importance', 'tag', 'lemma'],
                title: 'InfosSyntaxAnalysisDataClass',
                type: 'object',
                properties: {
                  word: { title: 'Word', type: 'string' },
                  importance: { title: 'Importance', type: 'integer' },
                  tag: { title: 'Tag', type: 'string' },
                  lemma: { title: 'Lemma', type: 'string' },
                  others: {
                    title: 'Others',
                    type: 'object',
                    additionalProperties: true,
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        ibm: {
          required: ['status'],
          title: 'textsyntax_analysisSyntaxAnalysisDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['word', 'importance', 'tag', 'lemma'],
                title: 'InfosSyntaxAnalysisDataClass',
                type: 'object',
                properties: {
                  word: { title: 'Word', type: 'string' },
                  importance: { title: 'Importance', type: 'integer' },
                  tag: { title: 'Tag', type: 'string' },
                  lemma: { title: 'Lemma', type: 'string' },
                  others: {
                    title: 'Others',
                    type: 'object',
                    additionalProperties: true,
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        google: {
          required: ['status'],
          title: 'textsyntax_analysisSyntaxAnalysisDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['word', 'importance', 'tag', 'lemma'],
                title: 'InfosSyntaxAnalysisDataClass',
                type: 'object',
                properties: {
                  word: { title: 'Word', type: 'string' },
                  importance: { title: 'Importance', type: 'integer' },
                  tag: { title: 'Tag', type: 'string' },
                  lemma: { title: 'Lemma', type: 'string' },
                  others: {
                    title: 'Others',
                    type: 'object',
                    additionalProperties: true,
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        amazon: {
          required: ['status'],
          title: 'textsyntax_analysisSyntaxAnalysisDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['word', 'importance', 'tag', 'lemma'],
                title: 'InfosSyntaxAnalysisDataClass',
                type: 'object',
                properties: {
                  word: { title: 'Word', type: 'string' },
                  importance: { title: 'Importance', type: 'integer' },
                  tag: { title: 'Tag', type: 'string' },
                  lemma: { title: 'Lemma', type: 'string' },
                  others: {
                    title: 'Others',
                    type: 'object',
                    additionalProperties: true,
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        'eden-ai': {
          required: ['status'],
          title: 'textsyntax_analysisSyntaxAnalysisDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['word', 'importance', 'tag', 'lemma'],
                title: 'InfosSyntaxAnalysisDataClass',
                type: 'object',
                properties: {
                  word: { title: 'Word', type: 'string' },
                  importance: { title: 'Importance', type: 'integer' },
                  tag: { title: 'Tag', type: 'string' },
                  lemma: { title: 'Lemma', type: 'string' },
                  others: {
                    title: 'Others',
                    type: 'object',
                    additionalProperties: true,
                  },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'textsyntax_analysisResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const TextTopicExtractionCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['google,ibm,openai,tenstorrent'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      text: {
        type: 'string',
        minLength: 1,
        description: 'Text to analyze',
        examples: [
          'That actor on TV makes movies in Hollywood and also stars in a variety of popular new TV shows.',
        ],
      },
      language: {
        type: ['string', 'null'],
        description:
          'Language code for the language the input text is written in (eg: en, fr).',
        examples: ['en'],
      },
    },
    required: ['providers', 'text'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        openai: {
          required: ['status'],
          title: 'texttopic_extractionTopicExtractionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['category', 'importance'],
                title: 'ExtractedTopic',
                type: 'object',
                properties: {
                  category: { title: 'Category', type: 'string' },
                  importance: { title: 'Importance', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        google: {
          required: ['status'],
          title: 'texttopic_extractionTopicExtractionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['category', 'importance'],
                title: 'ExtractedTopic',
                type: 'object',
                properties: {
                  category: { title: 'Category', type: 'string' },
                  importance: { title: 'Importance', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        tenstorrent: {
          required: ['status'],
          title: 'texttopic_extractionTopicExtractionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['category', 'importance'],
                title: 'ExtractedTopic',
                type: 'object',
                properties: {
                  category: { title: 'Category', type: 'string' },
                  importance: { title: 'Importance', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        ibm: {
          required: ['status'],
          title: 'texttopic_extractionTopicExtractionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['category', 'importance'],
                title: 'ExtractedTopic',
                type: 'object',
                properties: {
                  category: { title: 'Category', type: 'string' },
                  importance: { title: 'Importance', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        'eden-ai': {
          required: ['status'],
          title: 'texttopic_extractionTopicExtractionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['category', 'importance'],
                title: 'ExtractedTopic',
                type: 'object',
                properties: {
                  category: { title: 'Category', type: 'string' },
                  importance: { title: 'Importance', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'texttopic_extractionResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const TranslationAutomaticTranslationCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: [
          'google,amazon,neuralspace,modernmt,phedone,deepl,openai,microsoft,ibm',
        ],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      text: {
        type: 'string',
        minLength: 1,
        description: 'Text to analyze',
        examples: [
          '人工智能 亦稱智械、機器智能，指由人製造出來的機器所表現出來的智慧。通常人工智能是指通过普通電腦程式來呈現人類智能的技術。該詞也指出研究這樣的智能系統是否能夠實現，以及如何實現。同时，通過醫學、神經科學、機器人學及統計學等的進步，常態預測則認為人類的很多職業也逐漸被其取代。',
        ],
      },
      source_language: {
        type: ['string', 'null'],
        description: 'Source language code (ex: en, fr)',
        examples: ['zh'],
      },
      target_language: {
        type: 'string',
        minLength: 1,
        description: 'Target language code (ex: en, fr)',
        examples: ['en'],
      },
    },
    required: ['providers', 'target_language', 'text'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        modernmt: {
          required: ['text', 'status'],
          title:
            'translationautomatic_translationAutomaticTranslationDataClass',
          type: 'object',
          properties: {
            text: { title: 'Text', type: 'string' },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        deepl: {
          required: ['text', 'status'],
          title:
            'translationautomatic_translationAutomaticTranslationDataClass',
          type: 'object',
          properties: {
            text: { title: 'Text', type: 'string' },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        microsoft: {
          required: ['text', 'status'],
          title:
            'translationautomatic_translationAutomaticTranslationDataClass',
          type: 'object',
          properties: {
            text: { title: 'Text', type: 'string' },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        phedone: {
          required: ['text', 'status'],
          title:
            'translationautomatic_translationAutomaticTranslationDataClass',
          type: 'object',
          properties: {
            text: { title: 'Text', type: 'string' },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        openai: {
          required: ['text', 'status'],
          title:
            'translationautomatic_translationAutomaticTranslationDataClass',
          type: 'object',
          properties: {
            text: { title: 'Text', type: 'string' },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        ibm: {
          required: ['text', 'status'],
          title:
            'translationautomatic_translationAutomaticTranslationDataClass',
          type: 'object',
          properties: {
            text: { title: 'Text', type: 'string' },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        google: {
          required: ['text', 'status'],
          title:
            'translationautomatic_translationAutomaticTranslationDataClass',
          type: 'object',
          properties: {
            text: { title: 'Text', type: 'string' },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        neuralspace: {
          required: ['text', 'status'],
          title:
            'translationautomatic_translationAutomaticTranslationDataClass',
          type: 'object',
          properties: {
            text: { title: 'Text', type: 'string' },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        huggingface: {
          required: ['text', 'status'],
          title:
            'translationautomatic_translationAutomaticTranslationDataClass',
          type: 'object',
          properties: {
            text: { title: 'Text', type: 'string' },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        amazon: {
          required: ['text', 'status'],
          title:
            'translationautomatic_translationAutomaticTranslationDataClass',
          type: 'object',
          properties: {
            text: { title: 'Text', type: 'string' },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'translationautomatic_translationResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const TranslationDocumentTranslationCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['google,deepl'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      file: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
      },
      file_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.pdf'],
      },
      source_language: {
        type: ['string', 'null'],
        description: 'Source language code (ex: en, fr)',
        examples: ['en'],
      },
      target_language: {
        type: 'string',
        minLength: 1,
        description: 'Target language code (ex: en, fr)',
        examples: ['fr'],
      },
    },
    required: ['providers', 'target_language'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        google: {
          required: ['file', 'document_resource_url', 'status'],
          title: 'translationdocument_translationDocumentTranslationDataClass',
          type: 'object',
          properties: {
            file: { title: 'File', type: 'string' },
            document_resource_url: {
              title: 'Document Resource Url',
              type: 'string',
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        deepl: {
          required: ['file', 'document_resource_url', 'status'],
          title: 'translationdocument_translationDocumentTranslationDataClass',
          type: 'object',
          properties: {
            file: { title: 'File', type: 'string' },
            document_resource_url: {
              title: 'Document Resource Url',
              type: 'string',
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'translationdocument_translationResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const TranslationLanguageDetectionCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: [
          'google,neuralspace,oneai,modernmt,amazon,ibm,openai,microsoft',
        ],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      response_as_dict: {
        type: 'boolean',
        default: true,
        description:
          "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ",
      },
      attributes_as_list: {
        type: 'boolean',
        default: false,
        description:
          "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      text: {
        type: 'string',
        minLength: 1,
        description: 'Text to analyze',
        examples: [
          "Ogni individuo ha diritto all'istruzione. L'istruzione deve essere gratuita almeno per quanto riguarda le classi elementari e fondamentali. L'istruzione elementare deve essere obbligatoria. L'istruzione tecnica e professionale deve essere messa alla portata di tutti e l'istruzione superiore deve essere egualmente accessibile a tutti sulla base del merito.\nL'istruzione deve essere indirizzata al pieno sviluppo della personalità umana ed al rafforzamento del rispetto dei diritti umani e delle libertà fondamentali. Essa deve promuovere la comprensione, la tolleranza, l'amicizia fra tutte le Nazioni, i gruppi razziali e religiosi, e deve favorire l'opera delle Nazioni Unite per il mantenimento della pace.\nI genitori hanno diritto di priorità nella scelta del genere di istruzione da impartire ai loro figli.",
        ],
      },
    },
    required: ['providers', 'text'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      properties: {
        modernmt: {
          required: ['status'],
          title: 'translationlanguage_detectionLanguageDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['language', 'display_name', 'confidence'],
                title: 'InfosLanguageDetectionDataClass',
                type: 'object',
                properties: {
                  language: { title: 'Language', type: 'string' },
                  display_name: { title: 'Display Name', type: 'string' },
                  confidence: { title: 'Confidence', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        microsoft: {
          required: ['status'],
          title: 'translationlanguage_detectionLanguageDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['language', 'display_name', 'confidence'],
                title: 'InfosLanguageDetectionDataClass',
                type: 'object',
                properties: {
                  language: { title: 'Language', type: 'string' },
                  display_name: { title: 'Display Name', type: 'string' },
                  confidence: { title: 'Confidence', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        openai: {
          required: ['status'],
          title: 'translationlanguage_detectionLanguageDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['language', 'display_name', 'confidence'],
                title: 'InfosLanguageDetectionDataClass',
                type: 'object',
                properties: {
                  language: { title: 'Language', type: 'string' },
                  display_name: { title: 'Display Name', type: 'string' },
                  confidence: { title: 'Confidence', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        ibm: {
          required: ['status'],
          title: 'translationlanguage_detectionLanguageDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['language', 'display_name', 'confidence'],
                title: 'InfosLanguageDetectionDataClass',
                type: 'object',
                properties: {
                  language: { title: 'Language', type: 'string' },
                  display_name: { title: 'Display Name', type: 'string' },
                  confidence: { title: 'Confidence', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        oneai: {
          required: ['status'],
          title: 'translationlanguage_detectionLanguageDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['language', 'display_name', 'confidence'],
                title: 'InfosLanguageDetectionDataClass',
                type: 'object',
                properties: {
                  language: { title: 'Language', type: 'string' },
                  display_name: { title: 'Display Name', type: 'string' },
                  confidence: { title: 'Confidence', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        google: {
          required: ['status'],
          title: 'translationlanguage_detectionLanguageDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['language', 'display_name', 'confidence'],
                title: 'InfosLanguageDetectionDataClass',
                type: 'object',
                properties: {
                  language: { title: 'Language', type: 'string' },
                  display_name: { title: 'Display Name', type: 'string' },
                  confidence: { title: 'Confidence', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        neuralspace: {
          required: ['status'],
          title: 'translationlanguage_detectionLanguageDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['language', 'display_name', 'confidence'],
                title: 'InfosLanguageDetectionDataClass',
                type: 'object',
                properties: {
                  language: { title: 'Language', type: 'string' },
                  display_name: { title: 'Display Name', type: 'string' },
                  confidence: { title: 'Confidence', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        amazon: {
          required: ['status'],
          title: 'translationlanguage_detectionLanguageDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['language', 'display_name', 'confidence'],
                title: 'InfosLanguageDetectionDataClass',
                type: 'object',
                properties: {
                  language: { title: 'Language', type: 'string' },
                  display_name: { title: 'Display Name', type: 'string' },
                  confidence: { title: 'Confidence', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
        'eden-ai': {
          required: ['status'],
          title: 'translationlanguage_detectionLanguageDetectionDataClass',
          type: 'object',
          properties: {
            items: {
              title: 'Items',
              type: 'array',
              items: {
                required: ['language', 'display_name', 'confidence'],
                title: 'InfosLanguageDetectionDataClass',
                type: 'object',
                properties: {
                  language: { title: 'Language', type: 'string' },
                  display_name: { title: 'Display Name', type: 'string' },
                  confidence: { title: 'Confidence', type: 'integer' },
                },
              },
            },
            original_response: {
              default: null,
              description:
                'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
              title: 'Original Response',
            },
            status: {
              title: 'Status',
              enum: ['sucess', 'fail'],
              type: 'string',
              description: '`sucess` `fail`',
            },
          },
        },
      },
      title: 'translationlanguage_detectionResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const VideoExplicitContentDetectionAsyncCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['amazon,google'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      webhook_receiver: {
        type: 'string',
        format: 'uri',
        minLength: 1,
        description:
          'Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.',
      },
      users_webhook_parameters: {
        type: 'object',
        additionalProperties: true,
        description:
          "Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.",
      },
      file: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
        pattern: '(?:mov|mp4|avi)$',
      },
      file_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.mp4'],
      },
    },
    required: ['providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      type: 'object',
      properties: { public_id: { type: 'string', format: 'uuid' } },
      required: ['public_id'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const VideoExplicitContentDetectionAsyncRetrieve = {
  response: {
    '200': {
      type: 'object',
      properties: {
        jobs: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              providers: { type: 'string' },
              nb: { type: 'integer' },
              nb_ok: { type: 'integer' },
              public_id: { type: 'string', format: 'uuid' },
              state: {
                enum: ['finished', 'failed', 'Timeout error', 'processing'],
                type: 'string',
                description:
                  '* `finished` - finished\n* `failed` - failed\n* `Timeout error` - Timeout error\n* `processing` - processing\n\n`finished` `failed` `Timeout error` `processing`',
              },
              created_at: { type: 'string', format: 'date-time' },
            },
            required: [
              'created_at',
              'nb',
              'nb_ok',
              'providers',
              'public_id',
              'state',
            ],
          },
        },
      },
      required: ['jobs'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const VideoExplicitContentDetectionAsyncRetrieve2 = {
  metadata: {
    allOf: [
      {
        type: 'object',
        properties: {
          public_id: {
            type: 'string',
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
        },
        required: ['public_id'],
      },
      {
        type: 'object',
        properties: {
          response_as_dict: {
            type: 'boolean',
            default: true,
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
          show_original_response: {
            type: 'boolean',
            default: false,
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
        },
        required: [],
      },
    ],
  },
  response: {
    '200': {
      properties: {
        results: {
          properties: {
            google: {
              required: ['id', 'final_status'],
              title:
                'videoexplicit_content_detection_asyncExplicitContentDetectionAsyncDataClass',
              type: 'object',
              properties: {
                moderation: {
                  title: 'Moderation',
                  type: 'array',
                  items: {
                    required: ['timestamp', 'confidence', 'category'],
                    title: 'ContentNSFW',
                    type: 'object',
                    properties: {
                      timestamp: { title: 'Timestamp', type: 'integer' },
                      confidence: { title: 'Confidence', type: 'integer' },
                      category: { title: 'Category', type: 'string' },
                    },
                  },
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
            amazon: {
              required: ['id', 'final_status'],
              title:
                'videoexplicit_content_detection_asyncExplicitContentDetectionAsyncDataClass',
              type: 'object',
              properties: {
                moderation: {
                  title: 'Moderation',
                  type: 'array',
                  items: {
                    required: ['timestamp', 'confidence', 'category'],
                    title: 'ContentNSFW',
                    type: 'object',
                    properties: {
                      timestamp: { title: 'Timestamp', type: 'integer' },
                      confidence: { title: 'Confidence', type: 'integer' },
                      category: { title: 'Category', type: 'string' },
                    },
                  },
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
          },
          title: 'videoexplicit_content_detection_asyncModel',
          type: 'object',
        },
        error: { title: 'Error', type: 'string' },
        public_id: { format: 'uuid', title: 'Public Id', type: 'string' },
        status: { title: 'Status', type: 'string' },
      },
      required: ['results', 'error', 'public_id', 'status'],
      title: 'asyncvideoexplicit_content_detection_asyncResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const VideoFaceDetectionAsyncCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['amazon,google'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      webhook_receiver: {
        type: 'string',
        format: 'uri',
        minLength: 1,
        description:
          'Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.',
      },
      users_webhook_parameters: {
        type: 'object',
        additionalProperties: true,
        description:
          "Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.",
      },
      file: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
        pattern: '(?:mov|mp4|avi)$',
      },
      file_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.mp4'],
      },
    },
    required: ['providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      type: 'object',
      properties: { public_id: { type: 'string', format: 'uuid' } },
      required: ['public_id'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const VideoFaceDetectionAsyncRetrieve = {
  response: {
    '200': {
      type: 'object',
      properties: {
        jobs: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              providers: { type: 'string' },
              nb: { type: 'integer' },
              nb_ok: { type: 'integer' },
              public_id: { type: 'string', format: 'uuid' },
              state: {
                enum: ['finished', 'failed', 'Timeout error', 'processing'],
                type: 'string',
                description:
                  '* `finished` - finished\n* `failed` - failed\n* `Timeout error` - Timeout error\n* `processing` - processing\n\n`finished` `failed` `Timeout error` `processing`',
              },
              created_at: { type: 'string', format: 'date-time' },
            },
            required: [
              'created_at',
              'nb',
              'nb_ok',
              'providers',
              'public_id',
              'state',
            ],
          },
        },
      },
      required: ['jobs'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const VideoFaceDetectionAsyncRetrieve2 = {
  metadata: {
    allOf: [
      {
        type: 'object',
        properties: {
          public_id: {
            type: 'string',
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
        },
        required: ['public_id'],
      },
      {
        type: 'object',
        properties: {
          response_as_dict: {
            type: 'boolean',
            default: true,
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
          show_original_response: {
            type: 'boolean',
            default: false,
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
        },
        required: [],
      },
    ],
  },
  response: {
    '200': {
      properties: {
        results: {
          properties: {
            google: {
              required: ['id', 'final_status'],
              title: 'videoface_detection_asyncFaceDetectionAsyncDataClass',
              type: 'object',
              properties: {
                faces: {
                  title: 'Faces',
                  type: 'array',
                  items: {
                    required: [
                      'offset',
                      'bounding_box',
                      'attributes',
                      'landmarks',
                    ],
                    title: 'VideoFace',
                    type: 'object',
                    properties: {
                      offset: { title: 'Offset', type: 'integer' },
                      bounding_box: {
                        required: ['top', 'left', 'height', 'width'],
                        title: 'VideoBoundingBox',
                        type: 'object',
                        properties: {
                          top: { title: 'Top', type: 'integer' },
                          left: { title: 'Left', type: 'integer' },
                          height: { title: 'Height', type: 'integer' },
                          width: { title: 'Width', type: 'integer' },
                        },
                      },
                      attributes: {
                        required: [
                          'headwear',
                          'frontal_gaze',
                          'eyes_visible',
                          'glasses',
                          'mouth_open',
                          'smiling',
                          'brightness',
                          'sharpness',
                          'pose',
                        ],
                        title: 'FaceAttributes',
                        type: 'object',
                        properties: {
                          headwear: { title: 'Headwear', type: 'integer' },
                          frontal_gaze: {
                            title: 'Frontal Gaze',
                            type: 'integer',
                          },
                          eyes_visible: {
                            title: 'Eyes Visible',
                            type: 'integer',
                          },
                          glasses: { title: 'Glasses', type: 'integer' },
                          mouth_open: { title: 'Mouth Open', type: 'integer' },
                          smiling: { title: 'Smiling', type: 'integer' },
                          brightness: { title: 'Brightness', type: 'integer' },
                          sharpness: { title: 'Sharpness', type: 'integer' },
                          pose: {
                            required: ['pitch', 'roll', 'yawn'],
                            title: 'VideoFacePoses',
                            type: 'object',
                            properties: {
                              pitch: { title: 'Pitch', type: 'integer' },
                              roll: { title: 'Roll', type: 'integer' },
                              yawn: { title: 'Yawn', type: 'integer' },
                            },
                          },
                        },
                      },
                      landmarks: {
                        title: 'LandmarksVideo',
                        type: 'object',
                        properties: {
                          eye_left: {
                            title: 'Eye Left',
                            type: 'array',
                            items: { type: 'integer' },
                          },
                          eye_right: {
                            title: 'Eye Right',
                            type: 'array',
                            items: { type: 'integer' },
                          },
                          nose: {
                            title: 'Nose',
                            type: 'array',
                            items: { type: 'integer' },
                          },
                          mouth_left: {
                            title: 'Mouth Left',
                            type: 'array',
                            items: { type: 'integer' },
                          },
                          mouth_right: {
                            title: 'Mouth Right',
                            type: 'array',
                            items: { type: 'integer' },
                          },
                        },
                      },
                    },
                  },
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
            amazon: {
              required: ['id', 'final_status'],
              title: 'videoface_detection_asyncFaceDetectionAsyncDataClass',
              type: 'object',
              properties: {
                faces: {
                  title: 'Faces',
                  type: 'array',
                  items: {
                    required: [
                      'offset',
                      'bounding_box',
                      'attributes',
                      'landmarks',
                    ],
                    title: 'VideoFace',
                    type: 'object',
                    properties: {
                      offset: { title: 'Offset', type: 'integer' },
                      bounding_box: {
                        required: ['top', 'left', 'height', 'width'],
                        title: 'VideoBoundingBox',
                        type: 'object',
                        properties: {
                          top: { title: 'Top', type: 'integer' },
                          left: { title: 'Left', type: 'integer' },
                          height: { title: 'Height', type: 'integer' },
                          width: { title: 'Width', type: 'integer' },
                        },
                      },
                      attributes: {
                        required: [
                          'headwear',
                          'frontal_gaze',
                          'eyes_visible',
                          'glasses',
                          'mouth_open',
                          'smiling',
                          'brightness',
                          'sharpness',
                          'pose',
                        ],
                        title: 'FaceAttributes',
                        type: 'object',
                        properties: {
                          headwear: { title: 'Headwear', type: 'integer' },
                          frontal_gaze: {
                            title: 'Frontal Gaze',
                            type: 'integer',
                          },
                          eyes_visible: {
                            title: 'Eyes Visible',
                            type: 'integer',
                          },
                          glasses: { title: 'Glasses', type: 'integer' },
                          mouth_open: { title: 'Mouth Open', type: 'integer' },
                          smiling: { title: 'Smiling', type: 'integer' },
                          brightness: { title: 'Brightness', type: 'integer' },
                          sharpness: { title: 'Sharpness', type: 'integer' },
                          pose: {
                            required: ['pitch', 'roll', 'yawn'],
                            title: 'VideoFacePoses',
                            type: 'object',
                            properties: {
                              pitch: { title: 'Pitch', type: 'integer' },
                              roll: { title: 'Roll', type: 'integer' },
                              yawn: { title: 'Yawn', type: 'integer' },
                            },
                          },
                        },
                      },
                      landmarks: {
                        title: 'LandmarksVideo',
                        type: 'object',
                        properties: {
                          eye_left: {
                            title: 'Eye Left',
                            type: 'array',
                            items: { type: 'integer' },
                          },
                          eye_right: {
                            title: 'Eye Right',
                            type: 'array',
                            items: { type: 'integer' },
                          },
                          nose: {
                            title: 'Nose',
                            type: 'array',
                            items: { type: 'integer' },
                          },
                          mouth_left: {
                            title: 'Mouth Left',
                            type: 'array',
                            items: { type: 'integer' },
                          },
                          mouth_right: {
                            title: 'Mouth Right',
                            type: 'array',
                            items: { type: 'integer' },
                          },
                        },
                      },
                    },
                  },
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
          },
          title: 'videoface_detection_asyncModel',
          type: 'object',
        },
        error: { title: 'Error', type: 'string' },
        public_id: { format: 'uuid', title: 'Public Id', type: 'string' },
        status: { title: 'Status', type: 'string' },
      },
      required: ['results', 'error', 'public_id', 'status'],
      title: 'asyncvideoface_detection_asyncResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const VideoLabelDetectionAsyncCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['amazon,google'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      webhook_receiver: {
        type: 'string',
        format: 'uri',
        minLength: 1,
        description:
          'Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.',
      },
      users_webhook_parameters: {
        type: 'object',
        additionalProperties: true,
        description:
          "Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.",
      },
      file: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
        pattern: '(?:mov|mp4|avi)$',
      },
      file_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.mp4'],
      },
    },
    required: ['providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      type: 'object',
      properties: { public_id: { type: 'string', format: 'uuid' } },
      required: ['public_id'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const VideoLabelDetectionAsyncRetrieve = {
  response: {
    '200': {
      type: 'object',
      properties: {
        jobs: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              providers: { type: 'string' },
              nb: { type: 'integer' },
              nb_ok: { type: 'integer' },
              public_id: { type: 'string', format: 'uuid' },
              state: {
                enum: ['finished', 'failed', 'Timeout error', 'processing'],
                type: 'string',
                description:
                  '* `finished` - finished\n* `failed` - failed\n* `Timeout error` - Timeout error\n* `processing` - processing\n\n`finished` `failed` `Timeout error` `processing`',
              },
              created_at: { type: 'string', format: 'date-time' },
            },
            required: [
              'created_at',
              'nb',
              'nb_ok',
              'providers',
              'public_id',
              'state',
            ],
          },
        },
      },
      required: ['jobs'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const VideoLabelDetectionAsyncRetrieve2 = {
  metadata: {
    allOf: [
      {
        type: 'object',
        properties: {
          public_id: {
            type: 'string',
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
        },
        required: ['public_id'],
      },
      {
        type: 'object',
        properties: {
          response_as_dict: {
            type: 'boolean',
            default: true,
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
          show_original_response: {
            type: 'boolean',
            default: false,
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
        },
        required: [],
      },
    ],
  },
  response: {
    '200': {
      properties: {
        results: {
          properties: {
            google: {
              required: ['id', 'final_status'],
              title: 'videolabel_detection_asyncLabelDetectionAsyncDataClass',
              type: 'object',
              properties: {
                labels: {
                  title: 'Labels',
                  type: 'array',
                  items: {
                    required: ['name', 'confidence'],
                    title: 'VideoLabel',
                    type: 'object',
                    properties: {
                      name: { title: 'Name', type: 'string' },
                      confidence: { title: 'Confidence', type: 'integer' },
                      timestamp: {
                        title: 'Timestamp',
                        type: 'array',
                        items: {
                          required: ['start', 'end'],
                          title: 'VideoLabelTimeStamp',
                          type: 'object',
                          properties: {
                            start: { title: 'Start', type: 'integer' },
                            end: { title: 'End', type: 'integer' },
                          },
                        },
                      },
                      category: {
                        title: 'Category',
                        type: 'array',
                        items: { type: 'string' },
                      },
                      bounding_box: {
                        title: 'Bounding Box',
                        type: 'array',
                        items: {
                          required: ['top', 'left', 'height', 'width'],
                          title: 'VideoLabelBoundingBox',
                          type: 'object',
                          properties: {
                            top: { title: 'Top', type: 'integer' },
                            left: { title: 'Left', type: 'integer' },
                            height: { title: 'Height', type: 'integer' },
                            width: { title: 'Width', type: 'integer' },
                          },
                        },
                      },
                    },
                  },
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
            amazon: {
              required: ['id', 'final_status'],
              title: 'videolabel_detection_asyncLabelDetectionAsyncDataClass',
              type: 'object',
              properties: {
                labels: {
                  title: 'Labels',
                  type: 'array',
                  items: {
                    required: ['name', 'confidence'],
                    title: 'VideoLabel',
                    type: 'object',
                    properties: {
                      name: { title: 'Name', type: 'string' },
                      confidence: { title: 'Confidence', type: 'integer' },
                      timestamp: {
                        title: 'Timestamp',
                        type: 'array',
                        items: {
                          required: ['start', 'end'],
                          title: 'VideoLabelTimeStamp',
                          type: 'object',
                          properties: {
                            start: { title: 'Start', type: 'integer' },
                            end: { title: 'End', type: 'integer' },
                          },
                        },
                      },
                      category: {
                        title: 'Category',
                        type: 'array',
                        items: { type: 'string' },
                      },
                      bounding_box: {
                        title: 'Bounding Box',
                        type: 'array',
                        items: {
                          required: ['top', 'left', 'height', 'width'],
                          title: 'VideoLabelBoundingBox',
                          type: 'object',
                          properties: {
                            top: { title: 'Top', type: 'integer' },
                            left: { title: 'Left', type: 'integer' },
                            height: { title: 'Height', type: 'integer' },
                            width: { title: 'Width', type: 'integer' },
                          },
                        },
                      },
                    },
                  },
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
          },
          title: 'videolabel_detection_asyncModel',
          type: 'object',
        },
        error: { title: 'Error', type: 'string' },
        public_id: { format: 'uuid', title: 'Public Id', type: 'string' },
        status: { title: 'Status', type: 'string' },
      },
      required: ['results', 'error', 'public_id', 'status'],
      title: 'asyncvideolabel_detection_asyncResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const VideoLogoDetectionAsyncCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['google'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      webhook_receiver: {
        type: 'string',
        format: 'uri',
        minLength: 1,
        description:
          'Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.',
      },
      users_webhook_parameters: {
        type: 'object',
        additionalProperties: true,
        description:
          "Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.",
      },
      file: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
        pattern: '(?:mov|mp4|avi)$',
      },
      file_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.mp4'],
      },
    },
    required: ['providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      type: 'object',
      properties: { public_id: { type: 'string', format: 'uuid' } },
      required: ['public_id'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const VideoLogoDetectionAsyncRetrieve = {
  response: {
    '200': {
      type: 'object',
      properties: {
        jobs: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              providers: { type: 'string' },
              nb: { type: 'integer' },
              nb_ok: { type: 'integer' },
              public_id: { type: 'string', format: 'uuid' },
              state: {
                enum: ['finished', 'failed', 'Timeout error', 'processing'],
                type: 'string',
                description:
                  '* `finished` - finished\n* `failed` - failed\n* `Timeout error` - Timeout error\n* `processing` - processing\n\n`finished` `failed` `Timeout error` `processing`',
              },
              created_at: { type: 'string', format: 'date-time' },
            },
            required: [
              'created_at',
              'nb',
              'nb_ok',
              'providers',
              'public_id',
              'state',
            ],
          },
        },
      },
      required: ['jobs'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const VideoLogoDetectionAsyncRetrieve2 = {
  metadata: {
    allOf: [
      {
        type: 'object',
        properties: {
          public_id: {
            type: 'string',
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
        },
        required: ['public_id'],
      },
      {
        type: 'object',
        properties: {
          response_as_dict: {
            type: 'boolean',
            default: true,
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
          show_original_response: {
            type: 'boolean',
            default: false,
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
        },
        required: [],
      },
    ],
  },
  response: {
    '200': {
      properties: {
        results: {
          properties: {
            google: {
              required: ['id', 'final_status'],
              title: 'videologo_detection_asyncLogoDetectionAsyncDataClass',
              type: 'object',
              properties: {
                logos: {
                  title: 'Logos',
                  type: 'array',
                  items: {
                    required: ['description'],
                    title: 'LogoTrack',
                    type: 'object',
                    properties: {
                      description: { title: 'Description', type: 'string' },
                      tracking: {
                        title: 'Tracking',
                        type: 'array',
                        items: {
                          required: ['timestamp', 'bounding_box', 'confidence'],
                          title: 'VideoLogo',
                          type: 'object',
                          properties: {
                            timestamp: { title: 'Timestamp', type: 'integer' },
                            bounding_box: {
                              required: ['top', 'left', 'height', 'width'],
                              title: 'VideoLogoBoundingBox',
                              type: 'object',
                              properties: {
                                top: { title: 'Top', type: 'integer' },
                                left: { title: 'Left', type: 'integer' },
                                height: { title: 'Height', type: 'integer' },
                                width: { title: 'Width', type: 'integer' },
                              },
                            },
                            confidence: {
                              title: 'Confidence',
                              type: 'integer',
                            },
                          },
                        },
                      },
                    },
                  },
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
          },
          title: 'videologo_detection_asyncModel',
          type: 'object',
        },
        error: { title: 'Error', type: 'string' },
        public_id: { format: 'uuid', title: 'Public Id', type: 'string' },
        status: { title: 'Status', type: 'string' },
      },
      required: ['results', 'error', 'public_id', 'status'],
      title: 'asyncvideologo_detection_asyncResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const VideoObjectTrackingAsyncCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['google'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      webhook_receiver: {
        type: 'string',
        format: 'uri',
        minLength: 1,
        description:
          'Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.',
      },
      users_webhook_parameters: {
        type: 'object',
        additionalProperties: true,
        description:
          "Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.",
      },
      file: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
        pattern: '(?:mov|mp4|avi)$',
      },
      file_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.mp4'],
      },
    },
    required: ['providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      type: 'object',
      properties: { public_id: { type: 'string', format: 'uuid' } },
      required: ['public_id'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const VideoObjectTrackingAsyncRetrieve = {
  response: {
    '200': {
      type: 'object',
      properties: {
        jobs: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              providers: { type: 'string' },
              nb: { type: 'integer' },
              nb_ok: { type: 'integer' },
              public_id: { type: 'string', format: 'uuid' },
              state: {
                enum: ['finished', 'failed', 'Timeout error', 'processing'],
                type: 'string',
                description:
                  '* `finished` - finished\n* `failed` - failed\n* `Timeout error` - Timeout error\n* `processing` - processing\n\n`finished` `failed` `Timeout error` `processing`',
              },
              created_at: { type: 'string', format: 'date-time' },
            },
            required: [
              'created_at',
              'nb',
              'nb_ok',
              'providers',
              'public_id',
              'state',
            ],
          },
        },
      },
      required: ['jobs'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const VideoObjectTrackingAsyncRetrieve2 = {
  metadata: {
    allOf: [
      {
        type: 'object',
        properties: {
          public_id: {
            type: 'string',
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
        },
        required: ['public_id'],
      },
      {
        type: 'object',
        properties: {
          response_as_dict: {
            type: 'boolean',
            default: true,
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
          show_original_response: {
            type: 'boolean',
            default: false,
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
        },
        required: [],
      },
    ],
  },
  response: {
    '200': {
      properties: {
        results: {
          properties: {
            google: {
              required: ['id', 'final_status'],
              title: 'videoobject_tracking_asyncObjectTrackingAsyncDataClass',
              type: 'object',
              properties: {
                objects: {
                  title: 'Objects',
                  type: 'array',
                  items: {
                    required: ['description', 'confidence'],
                    title: 'ObjectTrack',
                    type: 'object',
                    properties: {
                      description: { title: 'Description', type: 'string' },
                      confidence: { title: 'Confidence', type: 'integer' },
                      frames: {
                        title: 'Frames',
                        type: 'array',
                        items: {
                          required: ['timestamp', 'bounding_box'],
                          title: 'ObjectFrame',
                          type: 'object',
                          properties: {
                            timestamp: { title: 'Timestamp', type: 'integer' },
                            bounding_box: {
                              required: ['top', 'left', 'height', 'width'],
                              title: 'VideoObjectBoundingBox',
                              type: 'object',
                              properties: {
                                top: { title: 'Top', type: 'integer' },
                                left: { title: 'Left', type: 'integer' },
                                height: { title: 'Height', type: 'integer' },
                                width: { title: 'Width', type: 'integer' },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
          },
          title: 'videoobject_tracking_asyncModel',
          type: 'object',
        },
        error: { title: 'Error', type: 'string' },
        public_id: { format: 'uuid', title: 'Public Id', type: 'string' },
        status: { title: 'Status', type: 'string' },
      },
      required: ['results', 'error', 'public_id', 'status'],
      title: 'asyncvideoobject_tracking_asyncResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const VideoPersonTrackingAsyncCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['google,amazon'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      webhook_receiver: {
        type: 'string',
        format: 'uri',
        minLength: 1,
        description:
          'Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.',
      },
      users_webhook_parameters: {
        type: 'object',
        additionalProperties: true,
        description:
          "Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.",
      },
      file: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
        pattern: '(?:mov|mp4|avi)$',
      },
      file_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.mp4'],
      },
    },
    required: ['providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      type: 'object',
      properties: { public_id: { type: 'string', format: 'uuid' } },
      required: ['public_id'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const VideoPersonTrackingAsyncRetrieve = {
  response: {
    '200': {
      type: 'object',
      properties: {
        jobs: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              providers: { type: 'string' },
              nb: { type: 'integer' },
              nb_ok: { type: 'integer' },
              public_id: { type: 'string', format: 'uuid' },
              state: {
                enum: ['finished', 'failed', 'Timeout error', 'processing'],
                type: 'string',
                description:
                  '* `finished` - finished\n* `failed` - failed\n* `Timeout error` - Timeout error\n* `processing` - processing\n\n`finished` `failed` `Timeout error` `processing`',
              },
              created_at: { type: 'string', format: 'date-time' },
            },
            required: [
              'created_at',
              'nb',
              'nb_ok',
              'providers',
              'public_id',
              'state',
            ],
          },
        },
      },
      required: ['jobs'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const VideoPersonTrackingAsyncRetrieve2 = {
  metadata: {
    allOf: [
      {
        type: 'object',
        properties: {
          public_id: {
            type: 'string',
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
        },
        required: ['public_id'],
      },
      {
        type: 'object',
        properties: {
          response_as_dict: {
            type: 'boolean',
            default: true,
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
          show_original_response: {
            type: 'boolean',
            default: false,
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
        },
        required: [],
      },
    ],
  },
  response: {
    '200': {
      properties: {
        results: {
          properties: {
            google: {
              required: ['id', 'final_status'],
              title: 'videoperson_tracking_asyncPersonTrackingAsyncDataClass',
              type: 'object',
              properties: {
                persons: {
                  title: 'Persons',
                  type: 'array',
                  items: {
                    title: 'VideoTrackingPerson',
                    type: 'object',
                    properties: {
                      tracked: {
                        title: 'Tracked',
                        type: 'array',
                        items: {
                          required: ['offset', 'bounding_box'],
                          title: 'PersonTracking',
                          type: 'object',
                          properties: {
                            offset: { title: 'Offset', type: 'integer' },
                            attributes: {
                              title: 'PersonAttributes',
                              type: 'object',
                              properties: {
                                upper_cloths: {
                                  title: 'Upper Cloths',
                                  type: 'array',
                                  items: {
                                    required: ['value', 'confidence'],
                                    title: 'UpperCloth',
                                    type: 'object',
                                    properties: {
                                      value: { title: 'Value', type: 'string' },
                                      confidence: {
                                        title: 'Confidence',
                                        type: 'integer',
                                      },
                                    },
                                  },
                                },
                                lower_cloths: {
                                  title: 'Lower Cloths',
                                  type: 'array',
                                  items: {
                                    required: ['value', 'confidence'],
                                    title: 'LowerCloth',
                                    type: 'object',
                                    properties: {
                                      value: { title: 'Value', type: 'string' },
                                      confidence: {
                                        title: 'Confidence',
                                        type: 'integer',
                                      },
                                    },
                                  },
                                },
                              },
                            },
                            landmarks: {
                              title: 'PersonLandmarks',
                              type: 'object',
                              properties: {
                                eye_left: {
                                  title: 'Eye Left',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                eye_right: {
                                  title: 'Eye Right',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                nose: {
                                  title: 'Nose',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                ear_left: {
                                  title: 'Ear Left',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                ear_right: {
                                  title: 'Ear Right',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                shoulder_left: {
                                  title: 'Shoulder Left',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                shoulder_right: {
                                  title: 'Shoulder Right',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                elbow_left: {
                                  title: 'Elbow Left',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                elbow_right: {
                                  title: 'Elbow Right',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                wrist_left: {
                                  title: 'Wrist Left',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                wrist_right: {
                                  title: 'Wrist Right',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                hip_left: {
                                  title: 'Hip Left',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                hip_right: {
                                  title: 'Hip Right',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                knee_left: {
                                  title: 'Knee Left',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                knee_right: {
                                  title: 'Knee Right',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                ankle_left: {
                                  title: 'Ankle Left',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                ankle_right: {
                                  title: 'Ankle Right',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                mouth_left: {
                                  title: 'Mouth Left',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                mouth_right: {
                                  title: 'Mouth Right',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                              },
                            },
                            poses: {
                              required: ['pitch', 'roll', 'yaw'],
                              title: 'VideoPersonPoses',
                              type: 'object',
                              properties: {
                                pitch: { title: 'Pitch', type: 'integer' },
                                roll: { title: 'Roll', type: 'integer' },
                                yaw: { title: 'Yaw', type: 'integer' },
                              },
                            },
                            quality: {
                              required: ['brightness', 'sharpness'],
                              title: 'VideoPersonQuality',
                              type: 'object',
                              properties: {
                                brightness: {
                                  title: 'Brightness',
                                  type: 'integer',
                                },
                                sharpness: {
                                  title: 'Sharpness',
                                  type: 'integer',
                                },
                              },
                            },
                            bounding_box: {
                              required: ['top', 'left', 'height', 'width'],
                              title: 'VideoTrackingBoundingBox',
                              type: 'object',
                              properties: {
                                top: { title: 'Top', type: 'integer' },
                                left: { title: 'Left', type: 'integer' },
                                height: { title: 'Height', type: 'integer' },
                                width: { title: 'Width', type: 'integer' },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
            amazon: {
              required: ['id', 'final_status'],
              title: 'videoperson_tracking_asyncPersonTrackingAsyncDataClass',
              type: 'object',
              properties: {
                persons: {
                  title: 'Persons',
                  type: 'array',
                  items: {
                    title: 'VideoTrackingPerson',
                    type: 'object',
                    properties: {
                      tracked: {
                        title: 'Tracked',
                        type: 'array',
                        items: {
                          required: ['offset', 'bounding_box'],
                          title: 'PersonTracking',
                          type: 'object',
                          properties: {
                            offset: { title: 'Offset', type: 'integer' },
                            attributes: {
                              title: 'PersonAttributes',
                              type: 'object',
                              properties: {
                                upper_cloths: {
                                  title: 'Upper Cloths',
                                  type: 'array',
                                  items: {
                                    required: ['value', 'confidence'],
                                    title: 'UpperCloth',
                                    type: 'object',
                                    properties: {
                                      value: { title: 'Value', type: 'string' },
                                      confidence: {
                                        title: 'Confidence',
                                        type: 'integer',
                                      },
                                    },
                                  },
                                },
                                lower_cloths: {
                                  title: 'Lower Cloths',
                                  type: 'array',
                                  items: {
                                    required: ['value', 'confidence'],
                                    title: 'LowerCloth',
                                    type: 'object',
                                    properties: {
                                      value: { title: 'Value', type: 'string' },
                                      confidence: {
                                        title: 'Confidence',
                                        type: 'integer',
                                      },
                                    },
                                  },
                                },
                              },
                            },
                            landmarks: {
                              title: 'PersonLandmarks',
                              type: 'object',
                              properties: {
                                eye_left: {
                                  title: 'Eye Left',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                eye_right: {
                                  title: 'Eye Right',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                nose: {
                                  title: 'Nose',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                ear_left: {
                                  title: 'Ear Left',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                ear_right: {
                                  title: 'Ear Right',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                shoulder_left: {
                                  title: 'Shoulder Left',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                shoulder_right: {
                                  title: 'Shoulder Right',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                elbow_left: {
                                  title: 'Elbow Left',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                elbow_right: {
                                  title: 'Elbow Right',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                wrist_left: {
                                  title: 'Wrist Left',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                wrist_right: {
                                  title: 'Wrist Right',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                hip_left: {
                                  title: 'Hip Left',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                hip_right: {
                                  title: 'Hip Right',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                knee_left: {
                                  title: 'Knee Left',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                knee_right: {
                                  title: 'Knee Right',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                ankle_left: {
                                  title: 'Ankle Left',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                ankle_right: {
                                  title: 'Ankle Right',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                mouth_left: {
                                  title: 'Mouth Left',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                                mouth_right: {
                                  title: 'Mouth Right',
                                  type: 'array',
                                  items: { type: 'integer' },
                                },
                              },
                            },
                            poses: {
                              required: ['pitch', 'roll', 'yaw'],
                              title: 'VideoPersonPoses',
                              type: 'object',
                              properties: {
                                pitch: { title: 'Pitch', type: 'integer' },
                                roll: { title: 'Roll', type: 'integer' },
                                yaw: { title: 'Yaw', type: 'integer' },
                              },
                            },
                            quality: {
                              required: ['brightness', 'sharpness'],
                              title: 'VideoPersonQuality',
                              type: 'object',
                              properties: {
                                brightness: {
                                  title: 'Brightness',
                                  type: 'integer',
                                },
                                sharpness: {
                                  title: 'Sharpness',
                                  type: 'integer',
                                },
                              },
                            },
                            bounding_box: {
                              required: ['top', 'left', 'height', 'width'],
                              title: 'VideoTrackingBoundingBox',
                              type: 'object',
                              properties: {
                                top: { title: 'Top', type: 'integer' },
                                left: { title: 'Left', type: 'integer' },
                                height: { title: 'Height', type: 'integer' },
                                width: { title: 'Width', type: 'integer' },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
          },
          title: 'videoperson_tracking_asyncModel',
          type: 'object',
        },
        error: { title: 'Error', type: 'string' },
        public_id: { format: 'uuid', title: 'Public Id', type: 'string' },
        status: { title: 'Status', type: 'string' },
      },
      required: ['results', 'error', 'public_id', 'status'],
      title: 'asyncvideoperson_tracking_asyncResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const VideoTextDetectionAsyncCreate = {
  body: {
    type: 'object',
    properties: {
      providers: {
        type: 'string',
        minLength: 1,
        description:
          "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
        examples: ['amazon,google'],
      },
      fallback_providers: {
        type: 'string',
        minLength: 1,
        description:
          "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ",
      },
      show_original_response: {
        type: 'boolean',
        default: false,
        description:
          'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.',
      },
      webhook_receiver: {
        type: 'string',
        format: 'uri',
        minLength: 1,
        description:
          'Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.',
      },
      users_webhook_parameters: {
        type: 'object',
        additionalProperties: true,
        description:
          "Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.",
      },
      file: {
        type: 'string',
        format: 'binary',
        description:
          'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**',
        pattern: '(?:mov|mp4|avi)$',
      },
      file_url: {
        type: ['string', 'null'],
        format: 'uri',
        description:
          'File **URL** to analyse to be used with with *content-type*: **application/json**.',
        examples: ['http://edenai-resource-example.mp4'],
      },
    },
    required: ['providers'],
    $schema: 'http://json-schema.org/draft-04/schema#',
  },
  response: {
    '200': {
      type: 'object',
      properties: { public_id: { type: 'string', format: 'uuid' } },
      required: ['public_id'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const VideoTextDetectionAsyncRetrieve = {
  response: {
    '200': {
      type: 'object',
      properties: {
        jobs: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              providers: { type: 'string' },
              nb: { type: 'integer' },
              nb_ok: { type: 'integer' },
              public_id: { type: 'string', format: 'uuid' },
              state: {
                enum: ['finished', 'failed', 'Timeout error', 'processing'],
                type: 'string',
                description:
                  '* `finished` - finished\n* `failed` - failed\n* `Timeout error` - Timeout error\n* `processing` - processing\n\n`finished` `failed` `Timeout error` `processing`',
              },
              created_at: { type: 'string', format: 'date-time' },
            },
            required: [
              'created_at',
              'nb',
              'nb_ok',
              'providers',
              'public_id',
              'state',
            ],
          },
        },
      },
      required: ['jobs'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
const VideoTextDetectionAsyncRetrieve2 = {
  metadata: {
    allOf: [
      {
        type: 'object',
        properties: {
          public_id: {
            type: 'string',
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
        },
        required: ['public_id'],
      },
      {
        type: 'object',
        properties: {
          response_as_dict: {
            type: 'boolean',
            default: true,
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
          show_original_response: {
            type: 'boolean',
            default: false,
            $schema: 'http://json-schema.org/draft-04/schema#',
          },
        },
        required: [],
      },
    ],
  },
  response: {
    '200': {
      properties: {
        results: {
          properties: {
            google: {
              required: ['id', 'final_status'],
              title: 'videotext_detection_asyncTextDetectionAsyncDataClass',
              type: 'object',
              properties: {
                texts: {
                  title: 'Texts',
                  type: 'array',
                  items: {
                    required: ['text'],
                    title: 'VideoText',
                    type: 'object',
                    properties: {
                      text: { title: 'Text', type: 'string' },
                      frames: {
                        title: 'Frames',
                        type: 'array',
                        items: {
                          required: ['confidence', 'timestamp', 'bounding_box'],
                          title: 'VideoTextFrames',
                          type: 'object',
                          properties: {
                            confidence: {
                              title: 'Confidence',
                              type: 'integer',
                            },
                            timestamp: { title: 'Timestamp', type: 'integer' },
                            bounding_box: {
                              required: ['top', 'left', 'height', 'width'],
                              title: 'VideoTextBoundingBox',
                              type: 'object',
                              properties: {
                                top: { title: 'Top', type: 'integer' },
                                left: { title: 'Left', type: 'integer' },
                                height: { title: 'Height', type: 'integer' },
                                width: { title: 'Width', type: 'integer' },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
            amazon: {
              required: ['id', 'final_status'],
              title: 'videotext_detection_asyncTextDetectionAsyncDataClass',
              type: 'object',
              properties: {
                texts: {
                  title: 'Texts',
                  type: 'array',
                  items: {
                    required: ['text'],
                    title: 'VideoText',
                    type: 'object',
                    properties: {
                      text: { title: 'Text', type: 'string' },
                      frames: {
                        title: 'Frames',
                        type: 'array',
                        items: {
                          required: ['confidence', 'timestamp', 'bounding_box'],
                          title: 'VideoTextFrames',
                          type: 'object',
                          properties: {
                            confidence: {
                              title: 'Confidence',
                              type: 'integer',
                            },
                            timestamp: { title: 'Timestamp', type: 'integer' },
                            bounding_box: {
                              required: ['top', 'left', 'height', 'width'],
                              title: 'VideoTextBoundingBox',
                              type: 'object',
                              properties: {
                                top: { title: 'Top', type: 'integer' },
                                left: { title: 'Left', type: 'integer' },
                                height: { title: 'Height', type: 'integer' },
                                width: { title: 'Width', type: 'integer' },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
                original_response: {
                  default: null,
                  description:
                    'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request',
                  title: 'Original Response',
                },
                id: { title: 'Id', type: 'string' },
                final_status: {
                  title: 'Final Status',
                  enum: ['sucess', 'fail'],
                  type: 'string',
                  description: '`sucess` `fail`',
                },
                error: {
                  title: 'Error',
                  type: 'object',
                  additionalProperties: true,
                },
              },
            },
          },
          title: 'videotext_detection_asyncModel',
          type: 'object',
        },
        error: { title: 'Error', type: 'string' },
        public_id: { format: 'uuid', title: 'Public Id', type: 'string' },
        status: { title: 'Status', type: 'string' },
      },
      required: ['results', 'error', 'public_id', 'status'],
      title: 'asyncvideotext_detection_asyncResponseModel',
      type: 'object',
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '400': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: {
            type: { type: 'string' },
            message: {
              type: 'object',
              properties: {
                '<parameter_name>': {
                  type: 'array',
                  items: { type: 'string' },
                },
              },
              required: ['<parameter_name>'],
            },
          },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '403': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '404': {
      type: 'object',
      properties: { details: { type: 'string', default: 'Not Found' } },
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
    '500': {
      type: 'object',
      properties: {
        error: {
          type: 'object',
          properties: { type: { type: 'string' }, message: { type: 'string' } },
          required: ['message', 'type'],
        },
      },
      required: ['error'],
      $schema: 'http://json-schema.org/draft-04/schema#',
    },
  },
} as const
export {
  AudioSpeechToTextAsyncCreate,
  AudioSpeechToTextAsyncRetrieve,
  AudioSpeechToTextAsyncRetrieve2,
  AudioTextToSpeechAsyncCreate,
  AudioTextToSpeechAsyncRetrieve,
  AudioTextToSpeechAsyncRetrieve2,
  AudioTextToSpeechCreate,
  BatchCreate,
  BatchRetrieve,
  ImageAnonymizationCreate,
  ImageExplicitContentCreate,
  ImageFaceCompareCreate,
  ImageFaceDetectionCreate,
  ImageFaceRecognitionAddFaceCreate,
  ImageFaceRecognitionDeleteFaceCreate,
  ImageFaceRecognitionListFacesRetrieve,
  ImageFaceRecognitionRecognizeCreate,
  ImageGenerationCreate,
  ImageLandmarkDetectionCreate,
  ImageLogoDetectionCreate,
  ImageObjectDetectionCreate,
  ImageSearchDeleteImageCreate,
  ImageSearchGetImageRetrieve,
  ImageSearchGetImagesRetrieve,
  ImageSearchLaunchSimilarityCreate,
  ImageSearchUploadImageCreate,
  InfoProviderSubfeaturesList,
  OcrBankCheckParsingCreate,
  OcrCustomDocumentParsingAsyncCreate,
  OcrCustomDocumentParsingAsyncRetrieve,
  OcrCustomDocumentParsingAsyncRetrieve2,
  OcrDataExtractionCreate,
  OcrIdentityParserCreate,
  OcrInvoiceParserCreate,
  OcrOcrAsyncCreate,
  OcrOcrAsyncRetrieve,
  OcrOcrAsyncRetrieve2,
  OcrOcrCreate,
  OcrOcrTablesAsyncCreate,
  OcrOcrTablesAsyncRetrieve,
  OcrOcrTablesAsyncRetrieve2,
  OcrReceiptParserCreate,
  OcrResumeParserCreate,
  PipelineCreate,
  TextAiDetectionCreate,
  TextAnonymizationCreate,
  TextChatCreate,
  TextCodeGenerationCreate,
  TextCustomClassificationCreate,
  TextCustomNamedEntityRecognitionCreate,
  TextEmbeddingsCreate,
  TextEntitySentimentCreate,
  TextGenerationCreate,
  TextKeywordExtractionCreate,
  TextModerationCreate,
  TextNamedEntityRecognitionCreate,
  TextPlagiaDetectionCreate,
  TextPromptOptimizationCreate,
  TextQuestionAnswerCreate,
  TextSearchCreate,
  TextSentimentAnalysisCreate,
  TextSpellCheckCreate,
  TextSummarizeCreate,
  TextSyntaxAnalysisCreate,
  TextTopicExtractionCreate,
  TranslationAutomaticTranslationCreate,
  TranslationDocumentTranslationCreate,
  TranslationLanguageDetectionCreate,
  VideoExplicitContentDetectionAsyncCreate,
  VideoExplicitContentDetectionAsyncRetrieve,
  VideoExplicitContentDetectionAsyncRetrieve2,
  VideoFaceDetectionAsyncCreate,
  VideoFaceDetectionAsyncRetrieve,
  VideoFaceDetectionAsyncRetrieve2,
  VideoLabelDetectionAsyncCreate,
  VideoLabelDetectionAsyncRetrieve,
  VideoLabelDetectionAsyncRetrieve2,
  VideoLogoDetectionAsyncCreate,
  VideoLogoDetectionAsyncRetrieve,
  VideoLogoDetectionAsyncRetrieve2,
  VideoObjectTrackingAsyncCreate,
  VideoObjectTrackingAsyncRetrieve,
  VideoObjectTrackingAsyncRetrieve2,
  VideoPersonTrackingAsyncCreate,
  VideoPersonTrackingAsyncRetrieve,
  VideoPersonTrackingAsyncRetrieve2,
  VideoTextDetectionAsyncCreate,
  VideoTextDetectionAsyncRetrieve,
  VideoTextDetectionAsyncRetrieve2,
}
