/* tslint:disable */
/* eslint-disable */
/**
 * Eden AI
 * Your project description
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AiDetectionItem
 */
export interface AiDetectionItem {
    /**
     * 
     * @type {string}
     * @memberof AiDetectionItem
     */
    'text': string;
    /**
     * 
     * @type {string}
     * @memberof AiDetectionItem
     */
    'prediction': string;
    /**
     * 
     * @type {number}
     * @memberof AiDetectionItem
     */
    'ai_score': number;
}
/**
 * 
 * @export
 * @interface AnonymizationBoundingBox
 */
export interface AnonymizationBoundingBox {
    /**
     * 
     * @type {number}
     * @memberof AnonymizationBoundingBox
     */
    'x_min': number;
    /**
     * 
     * @type {number}
     * @memberof AnonymizationBoundingBox
     */
    'x_max': number;
    /**
     * 
     * @type {number}
     * @memberof AnonymizationBoundingBox
     */
    'y_min': number;
    /**
     * 
     * @type {number}
     * @memberof AnonymizationBoundingBox
     */
    'y_max': number;
}
/**
 * This model represents an entity extracted from the text.      Attributes:         offset (int): The offset of the entity in the text.         length (int): The lenght of the entity in the text.         category (CategoryType): The category of the entity.         subcategory (SubCategoryType): The subcategory of the entity.         original_label (str): The original label of the entity.         content (str): The content of the entity.     
 * @export
 * @interface AnonymizationEntity
 */
export interface AnonymizationEntity {
    /**
     * 
     * @type {number}
     * @memberof AnonymizationEntity
     */
    'offset': number;
    /**
     * 
     * @type {number}
     * @memberof AnonymizationEntity
     */
    'length': number;
    /**
     * 
     * @type {CategoryType}
     * @memberof AnonymizationEntity
     */
    'category': CategoryType;
    /**
     * 
     * @type {Subcategory}
     * @memberof AnonymizationEntity
     */
    'subcategory': Subcategory;
    /**
     * 
     * @type {string}
     * @memberof AnonymizationEntity
     */
    'original_label': string;
    /**
     * 
     * @type {string}
     * @memberof AnonymizationEntity
     */
    'content': string;
    /**
     * 
     * @type {number}
     * @memberof AnonymizationEntity
     */
    'confidence_score': number;
}


/**
 * 
 * @export
 * @interface AnonymizationItem
 */
export interface AnonymizationItem {
    /**
     * 
     * @type {string}
     * @memberof AnonymizationItem
     */
    'kind': string;
    /**
     * 
     * @type {number}
     * @memberof AnonymizationItem
     */
    'confidence': number;
    /**
     * 
     * @type {AnonymizationBoundingBox}
     * @memberof AnonymizationItem
     */
    'bounding_boxes': AnonymizationBoundingBox;
}
/**
 * 
 * @export
 * @interface AsyncJobList
 */
export interface AsyncJobList {
    /**
     * 
     * @type {string}
     * @memberof AsyncJobList
     */
    'providers': string;
    /**
     * 
     * @type {number}
     * @memberof AsyncJobList
     */
    'nb': number;
    /**
     * 
     * @type {number}
     * @memberof AsyncJobList
     */
    'nb_ok': number;
    /**
     * 
     * @type {string}
     * @memberof AsyncJobList
     */
    'public_id': string;
    /**
     * 
     * @type {StateEnum}
     * @memberof AsyncJobList
     */
    'state': StateEnum;
    /**
     * 
     * @type {string}
     * @memberof AsyncJobList
     */
    'created_at': string;
}


/**
 * 
 * @export
 * @interface AsyncOcrRequest
 */
export interface AsyncOcrRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof AsyncOcrRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof AsyncOcrRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof AsyncOcrRequest
     */
    'show_original_response'?: boolean;
    /**
     * Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
     * @type {string}
     * @memberof AsyncOcrRequest
     */
    'webhook_receiver'?: string;
    /**
     * Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client\'s data ID to link the result internally).             Will only be used when webhook_receiver is set.
     * @type {{ [key: string]: any; }}
     * @memberof AsyncOcrRequest
     */
    'users_webhook_parameters'?: { [key: string]: any; };
    /**
     * File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
     * @type {File}
     * @memberof AsyncOcrRequest
     */
    'file'?: File;
    /**
     * File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @type {string}
     * @memberof AsyncOcrRequest
     */
    'file_url'?: string | null;
}
/**
 * 
 * @export
 * @interface AsyncVideoAnalysisRequest
 */
export interface AsyncVideoAnalysisRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof AsyncVideoAnalysisRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof AsyncVideoAnalysisRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof AsyncVideoAnalysisRequest
     */
    'show_original_response'?: boolean;
    /**
     * Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
     * @type {string}
     * @memberof AsyncVideoAnalysisRequest
     */
    'webhook_receiver'?: string;
    /**
     * Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client\'s data ID to link the result internally).             Will only be used when webhook_receiver is set.
     * @type {{ [key: string]: any; }}
     * @memberof AsyncVideoAnalysisRequest
     */
    'users_webhook_parameters'?: { [key: string]: any; };
    /**
     * File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
     * @type {File}
     * @memberof AsyncVideoAnalysisRequest
     */
    'file'?: File;
    /**
     * File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @type {string}
     * @memberof AsyncVideoAnalysisRequest
     */
    'file_url'?: string | null;
}
/**
 * 
 * @export
 * @interface AsyncaudiospeechToTextAsyncResponseModel
 */
export interface AsyncaudiospeechToTextAsyncResponseModel {
    /**
     * 
     * @type {AudiospeechToTextAsyncModel}
     * @memberof AsyncaudiospeechToTextAsyncResponseModel
     */
    'results': AudiospeechToTextAsyncModel;
    /**
     * 
     * @type {string}
     * @memberof AsyncaudiospeechToTextAsyncResponseModel
     */
    'error': string;
    /**
     * 
     * @type {string}
     * @memberof AsyncaudiospeechToTextAsyncResponseModel
     */
    'public_id': string;
    /**
     * 
     * @type {string}
     * @memberof AsyncaudiospeechToTextAsyncResponseModel
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface AsyncaudiotextToSpeechAsyncResponseModel
 */
export interface AsyncaudiotextToSpeechAsyncResponseModel {
    /**
     * 
     * @type {AudiotextToSpeechAsyncModel}
     * @memberof AsyncaudiotextToSpeechAsyncResponseModel
     */
    'results': AudiotextToSpeechAsyncModel;
    /**
     * 
     * @type {string}
     * @memberof AsyncaudiotextToSpeechAsyncResponseModel
     */
    'error': string;
    /**
     * 
     * @type {string}
     * @memberof AsyncaudiotextToSpeechAsyncResponseModel
     */
    'public_id': string;
    /**
     * 
     * @type {string}
     * @memberof AsyncaudiotextToSpeechAsyncResponseModel
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface AsyncocrcustomDocumentParsingAsyncResponseModel
 */
export interface AsyncocrcustomDocumentParsingAsyncResponseModel {
    /**
     * 
     * @type {OcrcustomDocumentParsingAsyncModel}
     * @memberof AsyncocrcustomDocumentParsingAsyncResponseModel
     */
    'results': OcrcustomDocumentParsingAsyncModel;
    /**
     * 
     * @type {string}
     * @memberof AsyncocrcustomDocumentParsingAsyncResponseModel
     */
    'error': string;
    /**
     * 
     * @type {string}
     * @memberof AsyncocrcustomDocumentParsingAsyncResponseModel
     */
    'public_id': string;
    /**
     * 
     * @type {string}
     * @memberof AsyncocrcustomDocumentParsingAsyncResponseModel
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface AsyncocrocrAsyncResponseModel
 */
export interface AsyncocrocrAsyncResponseModel {
    /**
     * 
     * @type {OcrocrAsyncModel}
     * @memberof AsyncocrocrAsyncResponseModel
     */
    'results': OcrocrAsyncModel;
    /**
     * 
     * @type {string}
     * @memberof AsyncocrocrAsyncResponseModel
     */
    'error': string;
    /**
     * 
     * @type {string}
     * @memberof AsyncocrocrAsyncResponseModel
     */
    'public_id': string;
    /**
     * 
     * @type {string}
     * @memberof AsyncocrocrAsyncResponseModel
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface AsyncocrocrTablesAsyncResponseModel
 */
export interface AsyncocrocrTablesAsyncResponseModel {
    /**
     * 
     * @type {OcrocrTablesAsyncModel}
     * @memberof AsyncocrocrTablesAsyncResponseModel
     */
    'results': OcrocrTablesAsyncModel;
    /**
     * 
     * @type {string}
     * @memberof AsyncocrocrTablesAsyncResponseModel
     */
    'error': string;
    /**
     * 
     * @type {string}
     * @memberof AsyncocrocrTablesAsyncResponseModel
     */
    'public_id': string;
    /**
     * 
     * @type {string}
     * @memberof AsyncocrocrTablesAsyncResponseModel
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface AsyncvideoexplicitContentDetectionAsyncResponseModel
 */
export interface AsyncvideoexplicitContentDetectionAsyncResponseModel {
    /**
     * 
     * @type {VideoexplicitContentDetectionAsyncModel}
     * @memberof AsyncvideoexplicitContentDetectionAsyncResponseModel
     */
    'results': VideoexplicitContentDetectionAsyncModel;
    /**
     * 
     * @type {string}
     * @memberof AsyncvideoexplicitContentDetectionAsyncResponseModel
     */
    'error': string;
    /**
     * 
     * @type {string}
     * @memberof AsyncvideoexplicitContentDetectionAsyncResponseModel
     */
    'public_id': string;
    /**
     * 
     * @type {string}
     * @memberof AsyncvideoexplicitContentDetectionAsyncResponseModel
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface AsyncvideofaceDetectionAsyncResponseModel
 */
export interface AsyncvideofaceDetectionAsyncResponseModel {
    /**
     * 
     * @type {VideofaceDetectionAsyncModel}
     * @memberof AsyncvideofaceDetectionAsyncResponseModel
     */
    'results': VideofaceDetectionAsyncModel;
    /**
     * 
     * @type {string}
     * @memberof AsyncvideofaceDetectionAsyncResponseModel
     */
    'error': string;
    /**
     * 
     * @type {string}
     * @memberof AsyncvideofaceDetectionAsyncResponseModel
     */
    'public_id': string;
    /**
     * 
     * @type {string}
     * @memberof AsyncvideofaceDetectionAsyncResponseModel
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface AsyncvideolabelDetectionAsyncResponseModel
 */
export interface AsyncvideolabelDetectionAsyncResponseModel {
    /**
     * 
     * @type {VideolabelDetectionAsyncModel}
     * @memberof AsyncvideolabelDetectionAsyncResponseModel
     */
    'results': VideolabelDetectionAsyncModel;
    /**
     * 
     * @type {string}
     * @memberof AsyncvideolabelDetectionAsyncResponseModel
     */
    'error': string;
    /**
     * 
     * @type {string}
     * @memberof AsyncvideolabelDetectionAsyncResponseModel
     */
    'public_id': string;
    /**
     * 
     * @type {string}
     * @memberof AsyncvideolabelDetectionAsyncResponseModel
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface AsyncvideologoDetectionAsyncResponseModel
 */
export interface AsyncvideologoDetectionAsyncResponseModel {
    /**
     * 
     * @type {VideologoDetectionAsyncModel}
     * @memberof AsyncvideologoDetectionAsyncResponseModel
     */
    'results': VideologoDetectionAsyncModel;
    /**
     * 
     * @type {string}
     * @memberof AsyncvideologoDetectionAsyncResponseModel
     */
    'error': string;
    /**
     * 
     * @type {string}
     * @memberof AsyncvideologoDetectionAsyncResponseModel
     */
    'public_id': string;
    /**
     * 
     * @type {string}
     * @memberof AsyncvideologoDetectionAsyncResponseModel
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface AsyncvideoobjectTrackingAsyncResponseModel
 */
export interface AsyncvideoobjectTrackingAsyncResponseModel {
    /**
     * 
     * @type {VideoobjectTrackingAsyncModel}
     * @memberof AsyncvideoobjectTrackingAsyncResponseModel
     */
    'results': VideoobjectTrackingAsyncModel;
    /**
     * 
     * @type {string}
     * @memberof AsyncvideoobjectTrackingAsyncResponseModel
     */
    'error': string;
    /**
     * 
     * @type {string}
     * @memberof AsyncvideoobjectTrackingAsyncResponseModel
     */
    'public_id': string;
    /**
     * 
     * @type {string}
     * @memberof AsyncvideoobjectTrackingAsyncResponseModel
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface AsyncvideopersonTrackingAsyncResponseModel
 */
export interface AsyncvideopersonTrackingAsyncResponseModel {
    /**
     * 
     * @type {VideopersonTrackingAsyncModel}
     * @memberof AsyncvideopersonTrackingAsyncResponseModel
     */
    'results': VideopersonTrackingAsyncModel;
    /**
     * 
     * @type {string}
     * @memberof AsyncvideopersonTrackingAsyncResponseModel
     */
    'error': string;
    /**
     * 
     * @type {string}
     * @memberof AsyncvideopersonTrackingAsyncResponseModel
     */
    'public_id': string;
    /**
     * 
     * @type {string}
     * @memberof AsyncvideopersonTrackingAsyncResponseModel
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface AsyncvideotextDetectionAsyncResponseModel
 */
export interface AsyncvideotextDetectionAsyncResponseModel {
    /**
     * 
     * @type {VideotextDetectionAsyncModel}
     * @memberof AsyncvideotextDetectionAsyncResponseModel
     */
    'results': VideotextDetectionAsyncModel;
    /**
     * 
     * @type {string}
     * @memberof AsyncvideotextDetectionAsyncResponseModel
     */
    'error': string;
    /**
     * 
     * @type {string}
     * @memberof AsyncvideotextDetectionAsyncResponseModel
     */
    'public_id': string;
    /**
     * 
     * @type {string}
     * @memberof AsyncvideotextDetectionAsyncResponseModel
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface AudiospeechToTextAsyncModel
 */
export interface AudiospeechToTextAsyncModel {
    /**
     * 
     * @type {AudiospeechToTextAsyncModelGladia}
     * @memberof AudiospeechToTextAsyncModel
     */
    'gladia'?: AudiospeechToTextAsyncModelGladia;
    /**
     * 
     * @type {AudiospeechToTextAsyncModelRevai}
     * @memberof AudiospeechToTextAsyncModel
     */
    'revai'?: AudiospeechToTextAsyncModelRevai;
    /**
     * 
     * @type {AudiospeechToTextAsyncModelVoxist}
     * @memberof AudiospeechToTextAsyncModel
     */
    'voxist'?: AudiospeechToTextAsyncModelVoxist;
    /**
     * 
     * @type {AudiospeechToTextAsyncModelSymbl}
     * @memberof AudiospeechToTextAsyncModel
     */
    'symbl'?: AudiospeechToTextAsyncModelSymbl;
    /**
     * 
     * @type {AudiospeechToTextAsyncModelAssembly}
     * @memberof AudiospeechToTextAsyncModel
     */
    'assembly'?: AudiospeechToTextAsyncModelAssembly;
    /**
     * 
     * @type {AudiospeechToTextAsyncModelSpeechmatics}
     * @memberof AudiospeechToTextAsyncModel
     */
    'speechmatics'?: AudiospeechToTextAsyncModelSpeechmatics;
    /**
     * 
     * @type {AudiospeechToTextAsyncModelVoci}
     * @memberof AudiospeechToTextAsyncModel
     */
    'voci'?: AudiospeechToTextAsyncModelVoci;
    /**
     * 
     * @type {AudiospeechToTextAsyncModelDeepgram}
     * @memberof AudiospeechToTextAsyncModel
     */
    'deepgram'?: AudiospeechToTextAsyncModelDeepgram;
    /**
     * 
     * @type {AudiospeechToTextAsyncModelMicrosoft}
     * @memberof AudiospeechToTextAsyncModel
     */
    'microsoft'?: AudiospeechToTextAsyncModelMicrosoft;
    /**
     * 
     * @type {AudiospeechToTextAsyncModelOpenai}
     * @memberof AudiospeechToTextAsyncModel
     */
    'openai'?: AudiospeechToTextAsyncModelOpenai;
    /**
     * 
     * @type {AudiospeechToTextAsyncModelFaker}
     * @memberof AudiospeechToTextAsyncModel
     */
    'faker'?: AudiospeechToTextAsyncModelFaker;
    /**
     * 
     * @type {AudiospeechToTextAsyncModelIbm}
     * @memberof AudiospeechToTextAsyncModel
     */
    'ibm'?: AudiospeechToTextAsyncModelIbm;
    /**
     * 
     * @type {AudiospeechToTextAsyncModelOneai}
     * @memberof AudiospeechToTextAsyncModel
     */
    'oneai'?: AudiospeechToTextAsyncModelOneai;
    /**
     * 
     * @type {AudiospeechToTextAsyncModelGoogle}
     * @memberof AudiospeechToTextAsyncModel
     */
    'google'?: AudiospeechToTextAsyncModelGoogle;
    /**
     * 
     * @type {AudiospeechToTextAsyncModelNeuralspace}
     * @memberof AudiospeechToTextAsyncModel
     */
    'neuralspace'?: AudiospeechToTextAsyncModelNeuralspace;
    /**
     * 
     * @type {AudiospeechToTextAsyncModelAmazon}
     * @memberof AudiospeechToTextAsyncModel
     */
    'amazon'?: AudiospeechToTextAsyncModelAmazon;
}
/**
 * 
 * @export
 * @interface AudiospeechToTextAsyncModelAmazon
 */
export interface AudiospeechToTextAsyncModelAmazon {
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelAmazon
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof AudiospeechToTextAsyncModelAmazon
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof AudiospeechToTextAsyncModelAmazon
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelAmazon
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof AudiospeechToTextAsyncModelAmazon
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof AudiospeechToTextAsyncModelAmazon
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface AudiospeechToTextAsyncModelAssembly
 */
export interface AudiospeechToTextAsyncModelAssembly {
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelAssembly
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof AudiospeechToTextAsyncModelAssembly
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof AudiospeechToTextAsyncModelAssembly
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelAssembly
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof AudiospeechToTextAsyncModelAssembly
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof AudiospeechToTextAsyncModelAssembly
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface AudiospeechToTextAsyncModelDeepgram
 */
export interface AudiospeechToTextAsyncModelDeepgram {
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelDeepgram
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof AudiospeechToTextAsyncModelDeepgram
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof AudiospeechToTextAsyncModelDeepgram
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelDeepgram
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof AudiospeechToTextAsyncModelDeepgram
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof AudiospeechToTextAsyncModelDeepgram
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface AudiospeechToTextAsyncModelFaker
 */
export interface AudiospeechToTextAsyncModelFaker {
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelFaker
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof AudiospeechToTextAsyncModelFaker
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof AudiospeechToTextAsyncModelFaker
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelFaker
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof AudiospeechToTextAsyncModelFaker
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof AudiospeechToTextAsyncModelFaker
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface AudiospeechToTextAsyncModelGladia
 */
export interface AudiospeechToTextAsyncModelGladia {
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelGladia
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof AudiospeechToTextAsyncModelGladia
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof AudiospeechToTextAsyncModelGladia
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelGladia
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof AudiospeechToTextAsyncModelGladia
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof AudiospeechToTextAsyncModelGladia
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface AudiospeechToTextAsyncModelGoogle
 */
export interface AudiospeechToTextAsyncModelGoogle {
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelGoogle
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof AudiospeechToTextAsyncModelGoogle
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof AudiospeechToTextAsyncModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelGoogle
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof AudiospeechToTextAsyncModelGoogle
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof AudiospeechToTextAsyncModelGoogle
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface AudiospeechToTextAsyncModelIbm
 */
export interface AudiospeechToTextAsyncModelIbm {
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelIbm
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof AudiospeechToTextAsyncModelIbm
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof AudiospeechToTextAsyncModelIbm
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelIbm
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof AudiospeechToTextAsyncModelIbm
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof AudiospeechToTextAsyncModelIbm
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface AudiospeechToTextAsyncModelMicrosoft
 */
export interface AudiospeechToTextAsyncModelMicrosoft {
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelMicrosoft
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof AudiospeechToTextAsyncModelMicrosoft
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof AudiospeechToTextAsyncModelMicrosoft
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelMicrosoft
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof AudiospeechToTextAsyncModelMicrosoft
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof AudiospeechToTextAsyncModelMicrosoft
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface AudiospeechToTextAsyncModelNeuralspace
 */
export interface AudiospeechToTextAsyncModelNeuralspace {
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelNeuralspace
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof AudiospeechToTextAsyncModelNeuralspace
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof AudiospeechToTextAsyncModelNeuralspace
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelNeuralspace
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof AudiospeechToTextAsyncModelNeuralspace
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof AudiospeechToTextAsyncModelNeuralspace
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface AudiospeechToTextAsyncModelOneai
 */
export interface AudiospeechToTextAsyncModelOneai {
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelOneai
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof AudiospeechToTextAsyncModelOneai
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof AudiospeechToTextAsyncModelOneai
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelOneai
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof AudiospeechToTextAsyncModelOneai
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof AudiospeechToTextAsyncModelOneai
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface AudiospeechToTextAsyncModelOpenai
 */
export interface AudiospeechToTextAsyncModelOpenai {
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelOpenai
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof AudiospeechToTextAsyncModelOpenai
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof AudiospeechToTextAsyncModelOpenai
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelOpenai
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof AudiospeechToTextAsyncModelOpenai
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof AudiospeechToTextAsyncModelOpenai
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface AudiospeechToTextAsyncModelRevai
 */
export interface AudiospeechToTextAsyncModelRevai {
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelRevai
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof AudiospeechToTextAsyncModelRevai
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof AudiospeechToTextAsyncModelRevai
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelRevai
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof AudiospeechToTextAsyncModelRevai
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof AudiospeechToTextAsyncModelRevai
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface AudiospeechToTextAsyncModelSpeechmatics
 */
export interface AudiospeechToTextAsyncModelSpeechmatics {
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelSpeechmatics
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof AudiospeechToTextAsyncModelSpeechmatics
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof AudiospeechToTextAsyncModelSpeechmatics
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelSpeechmatics
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof AudiospeechToTextAsyncModelSpeechmatics
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof AudiospeechToTextAsyncModelSpeechmatics
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface AudiospeechToTextAsyncModelSymbl
 */
export interface AudiospeechToTextAsyncModelSymbl {
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelSymbl
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof AudiospeechToTextAsyncModelSymbl
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof AudiospeechToTextAsyncModelSymbl
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelSymbl
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof AudiospeechToTextAsyncModelSymbl
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof AudiospeechToTextAsyncModelSymbl
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface AudiospeechToTextAsyncModelVoci
 */
export interface AudiospeechToTextAsyncModelVoci {
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelVoci
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof AudiospeechToTextAsyncModelVoci
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof AudiospeechToTextAsyncModelVoci
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelVoci
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof AudiospeechToTextAsyncModelVoci
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof AudiospeechToTextAsyncModelVoci
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface AudiospeechToTextAsyncModelVoxist
 */
export interface AudiospeechToTextAsyncModelVoxist {
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelVoxist
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof AudiospeechToTextAsyncModelVoxist
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof AudiospeechToTextAsyncModelVoxist
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof AudiospeechToTextAsyncModelVoxist
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof AudiospeechToTextAsyncModelVoxist
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof AudiospeechToTextAsyncModelVoxist
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface AudiotextToSpeechAsyncModel
 */
export interface AudiotextToSpeechAsyncModel {
    /**
     * 
     * @type {AudiotextToSpeechAsyncModelLovoai}
     * @memberof AudiotextToSpeechAsyncModel
     */
    'lovoai'?: AudiotextToSpeechAsyncModelLovoai;
}
/**
 * 
 * @export
 * @interface AudiotextToSpeechAsyncModelLovoai
 */
export interface AudiotextToSpeechAsyncModelLovoai {
    /**
     * 
     * @type {string}
     * @memberof AudiotextToSpeechAsyncModelLovoai
     */
    'audio': string;
    /**
     * 
     * @type {number}
     * @memberof AudiotextToSpeechAsyncModelLovoai
     */
    'voice_type': number;
    /**
     * 
     * @type {string}
     * @memberof AudiotextToSpeechAsyncModelLovoai
     */
    'audio_resource_url': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof AudiotextToSpeechAsyncModelLovoai
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof AudiotextToSpeechAsyncModelLovoai
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof AudiotextToSpeechAsyncModelLovoai
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof AudiotextToSpeechAsyncModelLovoai
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface AudiotextToSpeechAsyncTextToSpeechAsyncDataClass
 */
export interface AudiotextToSpeechAsyncTextToSpeechAsyncDataClass {
    /**
     * 
     * @type {string}
     * @memberof AudiotextToSpeechAsyncTextToSpeechAsyncDataClass
     */
    'audio': string;
    /**
     * 
     * @type {number}
     * @memberof AudiotextToSpeechAsyncTextToSpeechAsyncDataClass
     */
    'voice_type': number;
    /**
     * 
     * @type {string}
     * @memberof AudiotextToSpeechAsyncTextToSpeechAsyncDataClass
     */
    'audio_resource_url': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof AudiotextToSpeechAsyncTextToSpeechAsyncDataClass
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof AudiotextToSpeechAsyncTextToSpeechAsyncDataClass
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof AudiotextToSpeechAsyncTextToSpeechAsyncDataClass
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof AudiotextToSpeechAsyncTextToSpeechAsyncDataClass
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface AudiotextToSpeechResponseModel
 */
export interface AudiotextToSpeechResponseModel {
    /**
     * 
     * @type {AudiotextToSpeechResponseModelLovoai}
     * @memberof AudiotextToSpeechResponseModel
     */
    'lovoai'?: AudiotextToSpeechResponseModelLovoai;
    /**
     * 
     * @type {AudiotextToSpeechResponseModelMicrosoft}
     * @memberof AudiotextToSpeechResponseModel
     */
    'microsoft'?: AudiotextToSpeechResponseModelMicrosoft;
    /**
     * 
     * @type {AudiotextToSpeechResponseModelIbm}
     * @memberof AudiotextToSpeechResponseModel
     */
    'ibm'?: AudiotextToSpeechResponseModelIbm;
    /**
     * 
     * @type {AudiotextToSpeechResponseModelGoogle}
     * @memberof AudiotextToSpeechResponseModel
     */
    'google'?: AudiotextToSpeechResponseModelGoogle;
    /**
     * 
     * @type {AudiotextToSpeechResponseModelAmazon}
     * @memberof AudiotextToSpeechResponseModel
     */
    'amazon'?: AudiotextToSpeechResponseModelAmazon;
}
/**
 * 
 * @export
 * @interface AudiotextToSpeechResponseModelAmazon
 */
export interface AudiotextToSpeechResponseModelAmazon {
    /**
     * 
     * @type {string}
     * @memberof AudiotextToSpeechResponseModelAmazon
     */
    'audio': string;
    /**
     * 
     * @type {number}
     * @memberof AudiotextToSpeechResponseModelAmazon
     */
    'voice_type': number;
    /**
     * 
     * @type {string}
     * @memberof AudiotextToSpeechResponseModelAmazon
     */
    'audio_resource_url': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof AudiotextToSpeechResponseModelAmazon
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof AudiotextToSpeechResponseModelAmazon
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface AudiotextToSpeechResponseModelGoogle
 */
export interface AudiotextToSpeechResponseModelGoogle {
    /**
     * 
     * @type {string}
     * @memberof AudiotextToSpeechResponseModelGoogle
     */
    'audio': string;
    /**
     * 
     * @type {number}
     * @memberof AudiotextToSpeechResponseModelGoogle
     */
    'voice_type': number;
    /**
     * 
     * @type {string}
     * @memberof AudiotextToSpeechResponseModelGoogle
     */
    'audio_resource_url': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof AudiotextToSpeechResponseModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof AudiotextToSpeechResponseModelGoogle
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface AudiotextToSpeechResponseModelIbm
 */
export interface AudiotextToSpeechResponseModelIbm {
    /**
     * 
     * @type {string}
     * @memberof AudiotextToSpeechResponseModelIbm
     */
    'audio': string;
    /**
     * 
     * @type {number}
     * @memberof AudiotextToSpeechResponseModelIbm
     */
    'voice_type': number;
    /**
     * 
     * @type {string}
     * @memberof AudiotextToSpeechResponseModelIbm
     */
    'audio_resource_url': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof AudiotextToSpeechResponseModelIbm
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof AudiotextToSpeechResponseModelIbm
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface AudiotextToSpeechResponseModelLovoai
 */
export interface AudiotextToSpeechResponseModelLovoai {
    /**
     * 
     * @type {string}
     * @memberof AudiotextToSpeechResponseModelLovoai
     */
    'audio': string;
    /**
     * 
     * @type {number}
     * @memberof AudiotextToSpeechResponseModelLovoai
     */
    'voice_type': number;
    /**
     * 
     * @type {string}
     * @memberof AudiotextToSpeechResponseModelLovoai
     */
    'audio_resource_url': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof AudiotextToSpeechResponseModelLovoai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof AudiotextToSpeechResponseModelLovoai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface AudiotextToSpeechResponseModelMicrosoft
 */
export interface AudiotextToSpeechResponseModelMicrosoft {
    /**
     * 
     * @type {string}
     * @memberof AudiotextToSpeechResponseModelMicrosoft
     */
    'audio': string;
    /**
     * 
     * @type {number}
     * @memberof AudiotextToSpeechResponseModelMicrosoft
     */
    'voice_type': number;
    /**
     * 
     * @type {string}
     * @memberof AudiotextToSpeechResponseModelMicrosoft
     */
    'audio_resource_url': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof AudiotextToSpeechResponseModelMicrosoft
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof AudiotextToSpeechResponseModelMicrosoft
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface AudiotextToSpeechTextToSpeechRequest
 */
export interface AudiotextToSpeechTextToSpeechRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof AudiotextToSpeechTextToSpeechRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof AudiotextToSpeechTextToSpeechRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof AudiotextToSpeechTextToSpeechRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof AudiotextToSpeechTextToSpeechRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof AudiotextToSpeechTextToSpeechRequest
     */
    'show_original_response'?: boolean;
    /**
     * A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\'google\' : \'google_model\', ibm\': \'ibm_model\'...}.                      **Caution**: setting models can be done only with `Content-Type` : `application/json`.                      
     * @type {{ [key: string]: string; }}
     * @memberof AudiotextToSpeechTextToSpeechRequest
     */
    'settings'?: { [key: string]: string; } | null;
    /**
     * Text to analyze
     * @type {string}
     * @memberof AudiotextToSpeechTextToSpeechRequest
     */
    'text': string;
    /**
     * Language code expected (ex: en, fr)
     * @type {string}
     * @memberof AudiotextToSpeechTextToSpeechRequest
     */
    'language'?: string | null;
    /**
     * 
     * @type {TextToSpeechAsyncRequestOption}
     * @memberof AudiotextToSpeechTextToSpeechRequest
     */
    'option'?: TextToSpeechAsyncRequestOption;
    /**
     * Increase or decrease the speaking rate by expressing a positif or negatif number ranging between             100 and -100 (a relative value as percentage varying from -100% to 100%)
     * @type {number}
     * @memberof AudiotextToSpeechTextToSpeechRequest
     */
    'rate'?: number | null;
    /**
     * Increase or decrease the speaking pitch by expressing a positif or negatif number ranging between             100 and -100 (a relative value as percentage varying from -100% to 100%)
     * @type {number}
     * @memberof AudiotextToSpeechTextToSpeechRequest
     */
    'pitch'?: number | null;
    /**
     * Increase or decrease the audio volume by expressing a positif or negatif number ranging between             100 and -100 (a relative value as percentage varying from -100% to 100%)
     * @type {number}
     * @memberof AudiotextToSpeechTextToSpeechRequest
     */
    'volume'?: number | null;
    /**
     * Optional parameter to specify the audio format in which the audio will be generated. By default,             audios are encoded in MP3, except for lovoai which use the wav container.
     * @type {string}
     * @memberof AudiotextToSpeechTextToSpeechRequest
     */
    'audio_format'?: string | null;
    /**
     * Optional. The synthesis sample rate (in hertz) for this audio. When this is specified, the audio will be converted             either to the right passed value, or to a the nearest value acceptable by the provider
     * @type {number}
     * @memberof AudiotextToSpeechTextToSpeechRequest
     */
    'sampling_rate'?: number | null;
}
/**
 * 
 * @export
 * @interface BadRequest
 */
export interface BadRequest {
    /**
     * 
     * @type {NestedBadRequest}
     * @memberof BadRequest
     */
    'error': NestedBadRequest;
}
/**
 * 
 * @export
 * @interface BankInvoice
 */
export interface BankInvoice {
    /**
     * 
     * @type {string}
     * @memberof BankInvoice
     */
    'account_number': string;
    /**
     * 
     * @type {string}
     * @memberof BankInvoice
     */
    'iban': string;
    /**
     * 
     * @type {string}
     * @memberof BankInvoice
     */
    'bsb': string;
    /**
     * 
     * @type {string}
     * @memberof BankInvoice
     */
    'sort_code': string;
    /**
     * 
     * @type {string}
     * @memberof BankInvoice
     */
    'vat_number': string;
    /**
     * 
     * @type {string}
     * @memberof BankInvoice
     */
    'rooting_number': string;
    /**
     * 
     * @type {string}
     * @memberof BankInvoice
     */
    'swift': string;
}
/**
 * 
 * @export
 * @interface BarCode
 */
export interface BarCode {
    /**
     * 
     * @type {string}
     * @memberof BarCode
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof BarCode
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface BatchLaunchFailedRequest
 */
export interface BatchLaunchFailedRequest {
    /**
     * Request name, if any were given
     * @type {string}
     * @memberof BatchLaunchFailedRequest
     */
    'name': string;
    /**
     * Request ID
     * @type {number}
     * @memberof BatchLaunchFailedRequest
     */
    'public_id': number;
    /**
     * Parameters passed to the request
     * @type {object}
     * @memberof BatchLaunchFailedRequest
     */
    'body': object;
    /**
     * Error received from the request validator
     * @type {object}
     * @memberof BatchLaunchFailedRequest
     */
    'errors': object;
}
/**
 * 
 * @export
 * @interface BatchLaunchResponse
 */
export interface BatchLaunchResponse {
    /**
     * Job ID/name
     * @type {string}
     * @memberof BatchLaunchResponse
     */
    'job_id': string;
    /**
     * Number of successfully launched requests
     * @type {number}
     * @memberof BatchLaunchResponse
     */
    'nb_launched': number;
    /**
     * Number of failed_requests
     * @type {number}
     * @memberof BatchLaunchResponse
     */
    'nb_failed': number;
    /**
     * Total number of requests sent
     * @type {number}
     * @memberof BatchLaunchResponse
     */
    'total': number;
    /**
     * if any requests failed, they will be shown in this list
     * @type {Array<BatchLaunchFailedRequest>}
     * @memberof BatchLaunchResponse
     */
    'failed_requests': Array<BatchLaunchFailedRequest>;
}
/**
 * 
 * @export
 * @interface BatchResponseRequest
 */
export interface BatchResponseRequest {
    /**
     * 
     * @type {number}
     * @memberof BatchResponseRequest
     */
    'public_id': number;
    /**
     * 
     * @type {StatusE80Enum}
     * @memberof BatchResponseRequest
     */
    'status'?: StatusE80Enum;
    /**
     * 
     * @type {string}
     * @memberof BatchResponseRequest
     */
    'name'?: string | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof BatchResponseRequest
     */
    'errors'?: { [key: string]: any; } | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof BatchResponseRequest
     */
    'response'?: { [key: string]: any; } | null;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const BlankEnum = {
    Empty: ''
} as const;

export type BlankEnum = typeof BlankEnum[keyof typeof BlankEnum];


/**
 * 
 * @export
 * @interface BoundingBox
 */
export interface BoundingBox {
    /**
     * 
     * @type {string}
     * @memberof BoundingBox
     */
    'text': string;
    /**
     * 
     * @type {number}
     * @memberof BoundingBox
     */
    'left': number;
    /**
     * 
     * @type {number}
     * @memberof BoundingBox
     */
    'top': number;
    /**
     * 
     * @type {number}
     * @memberof BoundingBox
     */
    'width': number;
    /**
     * 
     * @type {number}
     * @memberof BoundingBox
     */
    'height': number;
}
/**
 * 
 * @export
 * @interface BoundixBoxOCRTable
 */
export interface BoundixBoxOCRTable {
    /**
     * 
     * @type {number}
     * @memberof BoundixBoxOCRTable
     */
    'left': number;
    /**
     * 
     * @type {number}
     * @memberof BoundixBoxOCRTable
     */
    'top': number;
    /**
     * 
     * @type {number}
     * @memberof BoundixBoxOCRTable
     */
    'width': number;
    /**
     * 
     * @type {number}
     * @memberof BoundixBoxOCRTable
     */
    'height': number;
}
/**
 * This enum are used to categorize the entities extracted from the text.
 * @export
 * @enum {string}
 */

export const CategoryType = {
    PersonalInformation: 'PersonalInformation',
    FinancialInformation: 'FinancialInformation',
    IdentificationNumbers: 'IdentificationNumbers',
    Miscellaneous: 'Miscellaneous',
    OrganizationInformation: 'OrganizationInformation',
    DateAndTime: 'DateAndTime',
    LocationInformation: 'LocationInformation',
    Other: 'Other'
} as const;

export type CategoryType = typeof CategoryType[keyof typeof CategoryType];


/**
 * 
 * @export
 * @interface Cell
 */
export interface Cell {
    /**
     * 
     * @type {string}
     * @memberof Cell
     */
    'text': string;
    /**
     * 
     * @type {number}
     * @memberof Cell
     */
    'row_index': number;
    /**
     * 
     * @type {number}
     * @memberof Cell
     */
    'col_index': number;
    /**
     * 
     * @type {number}
     * @memberof Cell
     */
    'row_span': number;
    /**
     * 
     * @type {number}
     * @memberof Cell
     */
    'col_span': number;
    /**
     * 
     * @type {number}
     * @memberof Cell
     */
    'confidence': number;
    /**
     * 
     * @type {BoundixBoxOCRTable}
     * @memberof Cell
     */
    'bounding_box': BoundixBoxOCRTable;
    /**
     * 
     * @type {boolean}
     * @memberof Cell
     */
    'is_header'?: boolean;
}
/**
 * 
 * @export
 * @interface ChatMessageDataClass
 */
export interface ChatMessageDataClass {
    /**
     * 
     * @type {string}
     * @memberof ChatMessageDataClass
     */
    'role': string;
    /**
     * 
     * @type {string}
     * @memberof ChatMessageDataClass
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface ContentNSFW
 */
export interface ContentNSFW {
    /**
     * 
     * @type {number}
     * @memberof ContentNSFW
     */
    'timestamp': number;
    /**
     * 
     * @type {number}
     * @memberof ContentNSFW
     */
    'confidence': number;
    /**
     * 
     * @type {string}
     * @memberof ContentNSFW
     */
    'category': string;
}
/**
 * 
 * @export
 * @interface Country
 */
export interface Country {
    /**
     * 
     * @type {string}
     * @memberof Country
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Country
     */
    'alpha2': string;
    /**
     * 
     * @type {string}
     * @memberof Country
     */
    'alpha3': string;
    /**
     * 
     * @type {number}
     * @memberof Country
     */
    'confidence': number;
}
/**
 * 
 * @export
 * @interface CustomDocumentParsingAsyncBoundingBox
 */
export interface CustomDocumentParsingAsyncBoundingBox {
    /**
     * 
     * @type {number}
     * @memberof CustomDocumentParsingAsyncBoundingBox
     */
    'left': number;
    /**
     * 
     * @type {number}
     * @memberof CustomDocumentParsingAsyncBoundingBox
     */
    'top': number;
    /**
     * 
     * @type {number}
     * @memberof CustomDocumentParsingAsyncBoundingBox
     */
    'width': number;
    /**
     * 
     * @type {number}
     * @memberof CustomDocumentParsingAsyncBoundingBox
     */
    'height': number;
}
/**
 * 
 * @export
 * @interface CustomDocumentParsingAsyncItem
 */
export interface CustomDocumentParsingAsyncItem {
    /**
     * 
     * @type {number}
     * @memberof CustomDocumentParsingAsyncItem
     */
    'confidence': number;
    /**
     * 
     * @type {string}
     * @memberof CustomDocumentParsingAsyncItem
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof CustomDocumentParsingAsyncItem
     */
    'query': string;
    /**
     * 
     * @type {CustomDocumentParsingAsyncBoundingBox}
     * @memberof CustomDocumentParsingAsyncItem
     */
    'bounding_box': CustomDocumentParsingAsyncBoundingBox;
    /**
     * 
     * @type {number}
     * @memberof CustomDocumentParsingAsyncItem
     */
    'page': number;
}
/**
 * 
 * @export
 * @interface CustomDocumentParsingAsyncRequest
 */
export interface CustomDocumentParsingAsyncRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof CustomDocumentParsingAsyncRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof CustomDocumentParsingAsyncRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof CustomDocumentParsingAsyncRequest
     */
    'show_original_response'?: boolean;
    /**
     * Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
     * @type {string}
     * @memberof CustomDocumentParsingAsyncRequest
     */
    'webhook_receiver'?: string;
    /**
     * Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client\'s data ID to link the result internally).             Will only be used when webhook_receiver is set.
     * @type {{ [key: string]: any; }}
     * @memberof CustomDocumentParsingAsyncRequest
     */
    'users_webhook_parameters'?: { [key: string]: any; };
    /**
     * File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
     * @type {File}
     * @memberof CustomDocumentParsingAsyncRequest
     */
    'file'?: File;
    /**
     * File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @type {string}
     * @memberof CustomDocumentParsingAsyncRequest
     */
    'file_url'?: string | null;
    /**
     * Your queries need to be a list of dict containing the questions you want answered and the page to look for the information in :  \'[{\'query\':\'your query\',\'pages\':\'your pages\'},{\'query\':\'your query\',\'pages\':\'your pages\'}]\'
     * @type {string}
     * @memberof CustomDocumentParsingAsyncRequest
     */
    'queries': string;
}
/**
 * 
 * @export
 * @interface CustomerInformation
 */
export interface CustomerInformation {
    /**
     * 
     * @type {string}
     * @memberof CustomerInformation
     */
    'customer_name'?: string;
}
/**
 * 
 * @export
 * @interface CustomerInformationInvoice
 */
export interface CustomerInformationInvoice {
    /**
     * 
     * @type {string}
     * @memberof CustomerInformationInvoice
     */
    'customer_name': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerInformationInvoice
     */
    'customer_address': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerInformationInvoice
     */
    'customer_email': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerInformationInvoice
     */
    'customer_id': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerInformationInvoice
     */
    'customer_tax_id': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerInformationInvoice
     */
    'customer_mailing_address': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerInformationInvoice
     */
    'customer_billing_address': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerInformationInvoice
     */
    'customer_shipping_address': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerInformationInvoice
     */
    'customer_service_address': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerInformationInvoice
     */
    'customer_remittance_address': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerInformationInvoice
     */
    'abn_number': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerInformationInvoice
     */
    'gst_number': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerInformationInvoice
     */
    'pan_number': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerInformationInvoice
     */
    'vat_number': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const DateAndTimeSubCategoryType = {
    Date: 'Date',
    Time: 'Time',
    DateTime: 'DateTime',
    Duration: 'Duration'
} as const;

export type DateAndTimeSubCategoryType = typeof DateAndTimeSubCategoryType[keyof typeof DateAndTimeSubCategoryType];


/**
 * * `resolution` - Resolution
 * @export
 * @enum {string}
 */

export const DetailTypeEnum = {
    Resolution: 'resolution'
} as const;

export type DetailTypeEnum = typeof DetailTypeEnum[keyof typeof DetailTypeEnum];


/**
 * 
 * @export
 * @interface EmbeddingDataClass
 */
export interface EmbeddingDataClass {
    /**
     * 
     * @type {Array<number>}
     * @memberof EmbeddingDataClass
     */
    'embedding': Array<number>;
}
/**
 * 
 * @export
 * @interface Entity
 */
export interface Entity {
    /**
     * Recognized Entity type
     * @type {string}
     * @memberof Entity
     */
    'type': string;
    /**
     * Text corresponding to the entity
     * @type {string}
     * @memberof Entity
     */
    'text': string;
    /**
     * 
     * @type {EntitySentimentEnum}
     * @memberof Entity
     */
    'sentiment': EntitySentimentEnum;
    /**
     * 
     * @type {number}
     * @memberof Entity
     */
    'begin_offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof Entity
     */
    'end_offset'?: number;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const EntitySentimentEnum = {
    Positive: 'Positive',
    Negative: 'Negative',
    Neutral: 'Neutral',
    Mixed: 'Mixed'
} as const;

export type EntitySentimentEnum = typeof EntitySentimentEnum[keyof typeof EntitySentimentEnum];


/**
 * 
 * @export
 * @interface ExplicitItem
 */
export interface ExplicitItem {
    /**
     * 
     * @type {string}
     * @memberof ExplicitItem
     */
    'label': string;
    /**
     * 
     * @type {number}
     * @memberof ExplicitItem
     */
    'likelihood': number;
}
/**
 * 
 * @export
 * @interface ExtractedTopic
 */
export interface ExtractedTopic {
    /**
     * 
     * @type {string}
     * @memberof ExtractedTopic
     */
    'category': string;
    /**
     * 
     * @type {number}
     * @memberof ExtractedTopic
     */
    'importance': number;
}
/**
 * 
 * @export
 * @interface FaceAccessories
 */
export interface FaceAccessories {
    /**
     * 
     * @type {number}
     * @memberof FaceAccessories
     */
    'sunglasses': number;
    /**
     * 
     * @type {number}
     * @memberof FaceAccessories
     */
    'reading_glasses': number;
    /**
     * 
     * @type {number}
     * @memberof FaceAccessories
     */
    'swimming_goggles': number;
    /**
     * 
     * @type {number}
     * @memberof FaceAccessories
     */
    'face_mask': number;
    /**
     * 
     * @type {number}
     * @memberof FaceAccessories
     */
    'eyeglasses': number;
    /**
     * 
     * @type {number}
     * @memberof FaceAccessories
     */
    'headwear': number;
}
/**
 * 
 * @export
 * @interface FaceAttributes
 */
export interface FaceAttributes {
    /**
     * 
     * @type {number}
     * @memberof FaceAttributes
     */
    'headwear': number;
    /**
     * 
     * @type {number}
     * @memberof FaceAttributes
     */
    'frontal_gaze': number;
    /**
     * 
     * @type {number}
     * @memberof FaceAttributes
     */
    'eyes_visible': number;
    /**
     * 
     * @type {number}
     * @memberof FaceAttributes
     */
    'glasses': number;
    /**
     * 
     * @type {number}
     * @memberof FaceAttributes
     */
    'mouth_open': number;
    /**
     * 
     * @type {number}
     * @memberof FaceAttributes
     */
    'smiling': number;
    /**
     * 
     * @type {number}
     * @memberof FaceAttributes
     */
    'brightness': number;
    /**
     * 
     * @type {number}
     * @memberof FaceAttributes
     */
    'sharpness': number;
    /**
     * 
     * @type {VideoFacePoses}
     * @memberof FaceAttributes
     */
    'pose': VideoFacePoses;
}
/**
 * 
 * @export
 * @interface FaceBoundingBox
 */
export interface FaceBoundingBox {
    /**
     * 
     * @type {number}
     * @memberof FaceBoundingBox
     */
    'x_min': number;
    /**
     * 
     * @type {number}
     * @memberof FaceBoundingBox
     */
    'x_max': number;
    /**
     * 
     * @type {number}
     * @memberof FaceBoundingBox
     */
    'y_min': number;
    /**
     * 
     * @type {number}
     * @memberof FaceBoundingBox
     */
    'y_max': number;
}
/**
 * 
 * @export
 * @interface FaceCompareBoundingBox
 */
export interface FaceCompareBoundingBox {
    /**
     * 
     * @type {number}
     * @memberof FaceCompareBoundingBox
     */
    'top': number;
    /**
     * 
     * @type {number}
     * @memberof FaceCompareBoundingBox
     */
    'left': number;
    /**
     * 
     * @type {number}
     * @memberof FaceCompareBoundingBox
     */
    'height': number;
    /**
     * 
     * @type {number}
     * @memberof FaceCompareBoundingBox
     */
    'width': number;
}
/**
 * 
 * @export
 * @interface FaceEmotions
 */
export interface FaceEmotions {
    /**
     * 
     * @type {number}
     * @memberof FaceEmotions
     */
    'joy': number;
    /**
     * 
     * @type {number}
     * @memberof FaceEmotions
     */
    'sorrow': number;
    /**
     * 
     * @type {number}
     * @memberof FaceEmotions
     */
    'anger': number;
    /**
     * 
     * @type {number}
     * @memberof FaceEmotions
     */
    'surprise': number;
    /**
     * 
     * @type {number}
     * @memberof FaceEmotions
     */
    'disgust': number;
    /**
     * 
     * @type {number}
     * @memberof FaceEmotions
     */
    'fear': number;
    /**
     * 
     * @type {number}
     * @memberof FaceEmotions
     */
    'confusion': number;
    /**
     * 
     * @type {number}
     * @memberof FaceEmotions
     */
    'calm': number;
    /**
     * 
     * @type {number}
     * @memberof FaceEmotions
     */
    'unknown': number;
    /**
     * 
     * @type {number}
     * @memberof FaceEmotions
     */
    'neutral': number;
    /**
     * 
     * @type {number}
     * @memberof FaceEmotions
     */
    'contempt': number;
}
/**
 * 
 * @export
 * @interface FaceFacialHair
 */
export interface FaceFacialHair {
    /**
     * 
     * @type {number}
     * @memberof FaceFacialHair
     */
    'moustache': number;
    /**
     * 
     * @type {number}
     * @memberof FaceFacialHair
     */
    'beard': number;
    /**
     * 
     * @type {number}
     * @memberof FaceFacialHair
     */
    'sideburns': number;
}
/**
 * 
 * @export
 * @interface FaceFeatures
 */
export interface FaceFeatures {
    /**
     * 
     * @type {number}
     * @memberof FaceFeatures
     */
    'eyes_open': number;
    /**
     * 
     * @type {number}
     * @memberof FaceFeatures
     */
    'smile': number;
    /**
     * 
     * @type {number}
     * @memberof FaceFeatures
     */
    'mouth_open': number;
}
/**
 * 
 * @export
 * @interface FaceHair
 */
export interface FaceHair {
    /**
     * 
     * @type {Array<FaceHairColor>}
     * @memberof FaceHair
     */
    'hair_color'?: Array<FaceHairColor>;
    /**
     * 
     * @type {number}
     * @memberof FaceHair
     */
    'bald': number;
    /**
     * 
     * @type {boolean}
     * @memberof FaceHair
     */
    'invisible': boolean;
}
/**
 * 
 * @export
 * @interface FaceHairColor
 */
export interface FaceHairColor {
    /**
     * 
     * @type {string}
     * @memberof FaceHairColor
     */
    'color': string;
    /**
     * 
     * @type {number}
     * @memberof FaceHairColor
     */
    'confidence': number;
}
/**
 * 
 * @export
 * @interface FaceItem
 */
export interface FaceItem {
    /**
     * 
     * @type {number}
     * @memberof FaceItem
     */
    'confidence': number;
    /**
     * 
     * @type {FaceLandmarks}
     * @memberof FaceItem
     */
    'landmarks': FaceLandmarks;
    /**
     * 
     * @type {FaceEmotions}
     * @memberof FaceItem
     */
    'emotions': FaceEmotions;
    /**
     * 
     * @type {FacePoses}
     * @memberof FaceItem
     */
    'poses': FacePoses;
    /**
     * 
     * @type {number}
     * @memberof FaceItem
     */
    'age': number;
    /**
     * 
     * @type {string}
     * @memberof FaceItem
     */
    'gender': string;
    /**
     * 
     * @type {FaceBoundingBox}
     * @memberof FaceItem
     */
    'bounding_box': FaceBoundingBox;
    /**
     * 
     * @type {FaceHair}
     * @memberof FaceItem
     */
    'hair': FaceHair;
    /**
     * 
     * @type {FaceFacialHair}
     * @memberof FaceItem
     */
    'facial_hair': FaceFacialHair;
    /**
     * 
     * @type {FaceQuality}
     * @memberof FaceItem
     */
    'quality': FaceQuality;
    /**
     * 
     * @type {FaceMakeup}
     * @memberof FaceItem
     */
    'makeup': FaceMakeup;
    /**
     * 
     * @type {FaceAccessories}
     * @memberof FaceItem
     */
    'accessories': FaceAccessories;
    /**
     * 
     * @type {FaceOcclusions}
     * @memberof FaceItem
     */
    'occlusions': FaceOcclusions;
    /**
     * 
     * @type {FaceFeatures}
     * @memberof FaceItem
     */
    'features': FaceFeatures;
}
/**
 * 
 * @export
 * @interface FaceLandmarks
 */
export interface FaceLandmarks {
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'left_eye'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'left_eye_top'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'left_eye_right'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'left_eye_bottom'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'left_eye_left'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'right_eye'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'right_eye_top'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'right_eye_right'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'right_eye_bottom'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'right_eye_left'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'left_eyebrow_left'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'left_eyebrow_right'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'left_eyebrow_top'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'right_eyebrow_left'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'right_eyebrow_right'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'left_pupil'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'right_pupil'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'nose_tip'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'nose_bottom_right'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'nose_bottom_left'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'mouth_left'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'mouth_right'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'right_eyebrow_top'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'midpoint_between_eyes'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'nose_bottom_center'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'nose_left_alar_out_tip'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'nose_left_alar_top'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'nose_right_alar_out_tip'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'nose_right_alar_top'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'nose_root_left'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'nose_root_right'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'upper_lip'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'under_lip'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'under_lip_bottom'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'under_lip_top'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'upper_lip_bottom'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'upper_lip_top'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'mouth_center'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'mouth_top'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'mouth_bottom'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'left_ear_tragion'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'right_ear_tragion'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'forehead_glabella'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'chin_gnathion'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'chin_left_gonion'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'chin_right_gonion'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'upper_jawline_left'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'mid_jawline_left'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'mid_jawline_right'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'upper_jawline_right'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'left_cheek_center'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FaceLandmarks
     */
    'right_cheek_center'?: Array<number>;
}
/**
 * 
 * @export
 * @interface FaceMakeup
 */
export interface FaceMakeup {
    /**
     * 
     * @type {boolean}
     * @memberof FaceMakeup
     */
    'eye_make': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FaceMakeup
     */
    'lip_make': boolean;
}
/**
 * 
 * @export
 * @interface FaceMatch
 */
export interface FaceMatch {
    /**
     * 
     * @type {number}
     * @memberof FaceMatch
     */
    'confidence': number;
    /**
     * 
     * @type {FaceCompareBoundingBox}
     * @memberof FaceMatch
     */
    'bounding_box': FaceCompareBoundingBox;
}
/**
 * 
 * @export
 * @interface FaceOcclusions
 */
export interface FaceOcclusions {
    /**
     * 
     * @type {boolean}
     * @memberof FaceOcclusions
     */
    'eye_occluded': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FaceOcclusions
     */
    'forehead_occluded': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FaceOcclusions
     */
    'mouth_occluded': boolean;
}
/**
 * 
 * @export
 * @interface FacePoses
 */
export interface FacePoses {
    /**
     * 
     * @type {number}
     * @memberof FacePoses
     */
    'pitch': number;
    /**
     * 
     * @type {number}
     * @memberof FacePoses
     */
    'roll': number;
    /**
     * 
     * @type {number}
     * @memberof FacePoses
     */
    'yaw': number;
}
/**
 * 
 * @export
 * @interface FaceQuality
 */
export interface FaceQuality {
    /**
     * 
     * @type {number}
     * @memberof FaceQuality
     */
    'noise': number;
    /**
     * 
     * @type {number}
     * @memberof FaceQuality
     */
    'exposure': number;
    /**
     * 
     * @type {number}
     * @memberof FaceQuality
     */
    'blur': number;
    /**
     * 
     * @type {number}
     * @memberof FaceQuality
     */
    'brightness': number;
    /**
     * 
     * @type {number}
     * @memberof FaceQuality
     */
    'sharpness': number;
}
/**
 * 
 * @export
 * @interface Feature
 */
export interface Feature {
    /**
     * 
     * @type {string}
     * @memberof Feature
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Feature
     */
    'fullname'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Feature
     */
    'description'?: string | null;
}
/**
 * 
 * @export
 * @interface FieldError
 */
export interface FieldError {
    /**
     * 
     * @type {Array<string>}
     * @memberof FieldError
     */
    '&lt;parameter_name&gt;': Array<string>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const FinalStatusEnum = {
    Sucess: 'sucess',
    Fail: 'fail'
} as const;

export type FinalStatusEnum = typeof FinalStatusEnum[keyof typeof FinalStatusEnum];


/**
 * 
 * @export
 * @enum {string}
 */

export const FinancialInformationSubCategoryType = {
    CreditCard: 'CreditCard',
    CardExpiry: 'CardExpiry',
    BankAccountNumber: 'BankAccountNumber',
    BankRoutingNumber: 'BankRoutingNumber',
    SwiftCode: 'SwiftCode',
    TaxIdentificationNumber: 'TaxIdentificationNumber'
} as const;

export type FinancialInformationSubCategoryType = typeof FinancialInformationSubCategoryType[keyof typeof FinancialInformationSubCategoryType];


/**
 * 
 * @export
 * @enum {string}
 */

export const GeneralSentimentEnum = {
    Positive: 'Positive',
    Negative: 'Negative',
    Neutral: 'Neutral'
} as const;

export type GeneralSentimentEnum = typeof GeneralSentimentEnum[keyof typeof GeneralSentimentEnum];


/**
 * 
 * @export
 * @interface GeneratedImageDataClass
 */
export interface GeneratedImageDataClass {
    /**
     * 
     * @type {string}
     * @memberof GeneratedImageDataClass
     */
    'image': string;
    /**
     * 
     * @type {string}
     * @memberof GeneratedImageDataClass
     */
    'image_resource_url': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const IdentificationNumbersSubCategoryType = {
    SocialSecurityNumber: 'SocialSecurityNumber',
    NationalIdentificationNumber: 'NationalIdentificationNumber',
    NationalHealthService: 'NationalHealthService',
    ResidentRegistrationNumber: 'ResidentRegistrationNumber',
    DriverLicenseNumber: 'DriverLicenseNumber',
    PassportNumber: 'PassportNumber'
} as const;

export type IdentificationNumbersSubCategoryType = typeof IdentificationNumbersSubCategoryType[keyof typeof IdentificationNumbersSubCategoryType];


/**
 * 
 * @export
 * @interface ImageanonymizationAnonymizationDataClass
 */
export interface ImageanonymizationAnonymizationDataClass {
    /**
     * 
     * @type {string}
     * @memberof ImageanonymizationAnonymizationDataClass
     */
    'image': string;
    /**
     * 
     * @type {string}
     * @memberof ImageanonymizationAnonymizationDataClass
     */
    'image_resource_url': string;
    /**
     * 
     * @type {Array<AnonymizationItem>}
     * @memberof ImageanonymizationAnonymizationDataClass
     */
    'items'?: Array<AnonymizationItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImageanonymizationAnonymizationDataClass
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImageanonymizationAnonymizationDataClass
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImageanonymizationResponseModel
 */
export interface ImageanonymizationResponseModel {
    /**
     * 
     * @type {ImageanonymizationResponseModelApi4ai}
     * @memberof ImageanonymizationResponseModel
     */
    'api4ai'?: ImageanonymizationResponseModelApi4ai;
}
/**
 * 
 * @export
 * @interface ImageanonymizationResponseModelApi4ai
 */
export interface ImageanonymizationResponseModelApi4ai {
    /**
     * 
     * @type {string}
     * @memberof ImageanonymizationResponseModelApi4ai
     */
    'image': string;
    /**
     * 
     * @type {string}
     * @memberof ImageanonymizationResponseModelApi4ai
     */
    'image_resource_url': string;
    /**
     * 
     * @type {Array<AnonymizationItem>}
     * @memberof ImageanonymizationResponseModelApi4ai
     */
    'items'?: Array<AnonymizationItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImageanonymizationResponseModelApi4ai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImageanonymizationResponseModelApi4ai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest
 */
export interface ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest
     */
    'show_original_response'?: boolean;
    /**
     * File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
     * @type {File}
     * @memberof ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest
     */
    'file'?: File;
    /**
     * File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @type {string}
     * @memberof ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest
     */
    'file_url'?: string | null;
}
/**
 * 
 * @export
 * @interface ImageexplicitContentResponseModel
 */
export interface ImageexplicitContentResponseModel {
    /**
     * 
     * @type {ImageexplicitContentResponseModelClarifai}
     * @memberof ImageexplicitContentResponseModel
     */
    'clarifai'?: ImageexplicitContentResponseModelClarifai;
    /**
     * 
     * @type {ImageexplicitContentResponseModelPicpurify}
     * @memberof ImageexplicitContentResponseModel
     */
    'picpurify'?: ImageexplicitContentResponseModelPicpurify;
    /**
     * 
     * @type {ImageexplicitContentResponseModelMicrosoft}
     * @memberof ImageexplicitContentResponseModel
     */
    'microsoft'?: ImageexplicitContentResponseModelMicrosoft;
    /**
     * 
     * @type {ImageexplicitContentResponseModelApi4ai}
     * @memberof ImageexplicitContentResponseModel
     */
    'api4ai'?: ImageexplicitContentResponseModelApi4ai;
    /**
     * 
     * @type {ImageexplicitContentResponseModelGoogle}
     * @memberof ImageexplicitContentResponseModel
     */
    'google'?: ImageexplicitContentResponseModelGoogle;
    /**
     * 
     * @type {ImageexplicitContentResponseModelSentisight}
     * @memberof ImageexplicitContentResponseModel
     */
    'sentisight'?: ImageexplicitContentResponseModelSentisight;
    /**
     * 
     * @type {ImageexplicitContentResponseModelAmazon}
     * @memberof ImageexplicitContentResponseModel
     */
    'amazon'?: ImageexplicitContentResponseModelAmazon;
    /**
     * 
     * @type {ImageexplicitContentResponseModelEdenAi}
     * @memberof ImageexplicitContentResponseModel
     */
    'eden-ai'?: ImageexplicitContentResponseModelEdenAi;
}
/**
 * 
 * @export
 * @interface ImageexplicitContentResponseModelAmazon
 */
export interface ImageexplicitContentResponseModelAmazon {
    /**
     * 
     * @type {number}
     * @memberof ImageexplicitContentResponseModelAmazon
     */
    'nsfw_likelihood': number;
    /**
     * 
     * @type {Array<ExplicitItem>}
     * @memberof ImageexplicitContentResponseModelAmazon
     */
    'items'?: Array<ExplicitItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImageexplicitContentResponseModelAmazon
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImageexplicitContentResponseModelAmazon
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImageexplicitContentResponseModelApi4ai
 */
export interface ImageexplicitContentResponseModelApi4ai {
    /**
     * 
     * @type {number}
     * @memberof ImageexplicitContentResponseModelApi4ai
     */
    'nsfw_likelihood': number;
    /**
     * 
     * @type {Array<ExplicitItem>}
     * @memberof ImageexplicitContentResponseModelApi4ai
     */
    'items'?: Array<ExplicitItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImageexplicitContentResponseModelApi4ai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImageexplicitContentResponseModelApi4ai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImageexplicitContentResponseModelClarifai
 */
export interface ImageexplicitContentResponseModelClarifai {
    /**
     * 
     * @type {number}
     * @memberof ImageexplicitContentResponseModelClarifai
     */
    'nsfw_likelihood': number;
    /**
     * 
     * @type {Array<ExplicitItem>}
     * @memberof ImageexplicitContentResponseModelClarifai
     */
    'items'?: Array<ExplicitItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImageexplicitContentResponseModelClarifai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImageexplicitContentResponseModelClarifai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImageexplicitContentResponseModelEdenAi
 */
export interface ImageexplicitContentResponseModelEdenAi {
    /**
     * 
     * @type {number}
     * @memberof ImageexplicitContentResponseModelEdenAi
     */
    'nsfw_likelihood': number;
    /**
     * 
     * @type {Array<ExplicitItem>}
     * @memberof ImageexplicitContentResponseModelEdenAi
     */
    'items'?: Array<ExplicitItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImageexplicitContentResponseModelEdenAi
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImageexplicitContentResponseModelEdenAi
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImageexplicitContentResponseModelGoogle
 */
export interface ImageexplicitContentResponseModelGoogle {
    /**
     * 
     * @type {number}
     * @memberof ImageexplicitContentResponseModelGoogle
     */
    'nsfw_likelihood': number;
    /**
     * 
     * @type {Array<ExplicitItem>}
     * @memberof ImageexplicitContentResponseModelGoogle
     */
    'items'?: Array<ExplicitItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImageexplicitContentResponseModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImageexplicitContentResponseModelGoogle
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImageexplicitContentResponseModelMicrosoft
 */
export interface ImageexplicitContentResponseModelMicrosoft {
    /**
     * 
     * @type {number}
     * @memberof ImageexplicitContentResponseModelMicrosoft
     */
    'nsfw_likelihood': number;
    /**
     * 
     * @type {Array<ExplicitItem>}
     * @memberof ImageexplicitContentResponseModelMicrosoft
     */
    'items'?: Array<ExplicitItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImageexplicitContentResponseModelMicrosoft
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImageexplicitContentResponseModelMicrosoft
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImageexplicitContentResponseModelPicpurify
 */
export interface ImageexplicitContentResponseModelPicpurify {
    /**
     * 
     * @type {number}
     * @memberof ImageexplicitContentResponseModelPicpurify
     */
    'nsfw_likelihood': number;
    /**
     * 
     * @type {Array<ExplicitItem>}
     * @memberof ImageexplicitContentResponseModelPicpurify
     */
    'items'?: Array<ExplicitItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImageexplicitContentResponseModelPicpurify
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImageexplicitContentResponseModelPicpurify
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImageexplicitContentResponseModelSentisight
 */
export interface ImageexplicitContentResponseModelSentisight {
    /**
     * 
     * @type {number}
     * @memberof ImageexplicitContentResponseModelSentisight
     */
    'nsfw_likelihood': number;
    /**
     * 
     * @type {Array<ExplicitItem>}
     * @memberof ImageexplicitContentResponseModelSentisight
     */
    'items'?: Array<ExplicitItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImageexplicitContentResponseModelSentisight
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImageexplicitContentResponseModelSentisight
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImagefaceCompareFaceCompareRequest
 */
export interface ImagefaceCompareFaceCompareRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof ImagefaceCompareFaceCompareRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof ImagefaceCompareFaceCompareRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof ImagefaceCompareFaceCompareRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof ImagefaceCompareFaceCompareRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof ImagefaceCompareFaceCompareRequest
     */
    'show_original_response'?: boolean;
    /**
     * File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
     * @type {File}
     * @memberof ImagefaceCompareFaceCompareRequest
     */
    'file1'?: File;
    /**
     * File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @type {string}
     * @memberof ImagefaceCompareFaceCompareRequest
     */
    'file1_url'?: string | null;
    /**
     * File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
     * @type {File}
     * @memberof ImagefaceCompareFaceCompareRequest
     */
    'file2'?: File;
    /**
     * File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @type {string}
     * @memberof ImagefaceCompareFaceCompareRequest
     */
    'file2_url'?: string | null;
}
/**
 * 
 * @export
 * @interface ImagefaceCompareResponseModel
 */
export interface ImagefaceCompareResponseModel {
    /**
     * 
     * @type {ImagefaceCompareResponseModelFacepp}
     * @memberof ImagefaceCompareResponseModel
     */
    'facepp'?: ImagefaceCompareResponseModelFacepp;
    /**
     * 
     * @type {ImagefaceCompareResponseModelBase64}
     * @memberof ImagefaceCompareResponseModel
     */
    'base64'?: ImagefaceCompareResponseModelBase64;
    /**
     * 
     * @type {ImagefaceCompareResponseModelAmazon}
     * @memberof ImagefaceCompareResponseModel
     */
    'amazon'?: ImagefaceCompareResponseModelAmazon;
}
/**
 * 
 * @export
 * @interface ImagefaceCompareResponseModelAmazon
 */
export interface ImagefaceCompareResponseModelAmazon {
    /**
     * 
     * @type {Array<FaceMatch>}
     * @memberof ImagefaceCompareResponseModelAmazon
     */
    'items'?: Array<FaceMatch>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImagefaceCompareResponseModelAmazon
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImagefaceCompareResponseModelAmazon
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImagefaceCompareResponseModelBase64
 */
export interface ImagefaceCompareResponseModelBase64 {
    /**
     * 
     * @type {Array<FaceMatch>}
     * @memberof ImagefaceCompareResponseModelBase64
     */
    'items'?: Array<FaceMatch>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImagefaceCompareResponseModelBase64
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImagefaceCompareResponseModelBase64
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImagefaceCompareResponseModelFacepp
 */
export interface ImagefaceCompareResponseModelFacepp {
    /**
     * 
     * @type {Array<FaceMatch>}
     * @memberof ImagefaceCompareResponseModelFacepp
     */
    'items'?: Array<FaceMatch>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImagefaceCompareResponseModelFacepp
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImagefaceCompareResponseModelFacepp
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImagefaceDetectionFaceDetectionRequest
 */
export interface ImagefaceDetectionFaceDetectionRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof ImagefaceDetectionFaceDetectionRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof ImagefaceDetectionFaceDetectionRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof ImagefaceDetectionFaceDetectionRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof ImagefaceDetectionFaceDetectionRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof ImagefaceDetectionFaceDetectionRequest
     */
    'show_original_response'?: boolean;
    /**
     * File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
     * @type {File}
     * @memberof ImagefaceDetectionFaceDetectionRequest
     */
    'file'?: File;
    /**
     * File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @type {string}
     * @memberof ImagefaceDetectionFaceDetectionRequest
     */
    'file_url'?: string | null;
}
/**
 * 
 * @export
 * @interface ImagefaceDetectionResponseModel
 */
export interface ImagefaceDetectionResponseModel {
    /**
     * 
     * @type {ImagefaceDetectionResponseModelClarifai}
     * @memberof ImagefaceDetectionResponseModel
     */
    'clarifai'?: ImagefaceDetectionResponseModelClarifai;
    /**
     * 
     * @type {ImagefaceDetectionResponseModelPicpurify}
     * @memberof ImagefaceDetectionResponseModel
     */
    'picpurify'?: ImagefaceDetectionResponseModelPicpurify;
    /**
     * 
     * @type {ImagefaceDetectionResponseModelMicrosoft}
     * @memberof ImagefaceDetectionResponseModel
     */
    'microsoft'?: ImagefaceDetectionResponseModelMicrosoft;
    /**
     * 
     * @type {ImagefaceDetectionResponseModelApi4ai}
     * @memberof ImagefaceDetectionResponseModel
     */
    'api4ai'?: ImagefaceDetectionResponseModelApi4ai;
    /**
     * 
     * @type {ImagefaceDetectionResponseModelGoogle}
     * @memberof ImagefaceDetectionResponseModel
     */
    'google'?: ImagefaceDetectionResponseModelGoogle;
    /**
     * 
     * @type {ImagefaceDetectionResponseModelSkybiometry}
     * @memberof ImagefaceDetectionResponseModel
     */
    'skybiometry'?: ImagefaceDetectionResponseModelSkybiometry;
    /**
     * 
     * @type {ImagefaceDetectionResponseModelAmazon}
     * @memberof ImagefaceDetectionResponseModel
     */
    'amazon'?: ImagefaceDetectionResponseModelAmazon;
    /**
     * 
     * @type {ImagefaceDetectionResponseModelEdenAi}
     * @memberof ImagefaceDetectionResponseModel
     */
    'eden-ai'?: ImagefaceDetectionResponseModelEdenAi;
}
/**
 * 
 * @export
 * @interface ImagefaceDetectionResponseModelAmazon
 */
export interface ImagefaceDetectionResponseModelAmazon {
    /**
     * 
     * @type {Array<FaceItem>}
     * @memberof ImagefaceDetectionResponseModelAmazon
     */
    'items'?: Array<FaceItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImagefaceDetectionResponseModelAmazon
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImagefaceDetectionResponseModelAmazon
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImagefaceDetectionResponseModelApi4ai
 */
export interface ImagefaceDetectionResponseModelApi4ai {
    /**
     * 
     * @type {Array<FaceItem>}
     * @memberof ImagefaceDetectionResponseModelApi4ai
     */
    'items'?: Array<FaceItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImagefaceDetectionResponseModelApi4ai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImagefaceDetectionResponseModelApi4ai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImagefaceDetectionResponseModelClarifai
 */
export interface ImagefaceDetectionResponseModelClarifai {
    /**
     * 
     * @type {Array<FaceItem>}
     * @memberof ImagefaceDetectionResponseModelClarifai
     */
    'items'?: Array<FaceItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImagefaceDetectionResponseModelClarifai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImagefaceDetectionResponseModelClarifai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImagefaceDetectionResponseModelEdenAi
 */
export interface ImagefaceDetectionResponseModelEdenAi {
    /**
     * 
     * @type {Array<FaceItem>}
     * @memberof ImagefaceDetectionResponseModelEdenAi
     */
    'items'?: Array<FaceItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImagefaceDetectionResponseModelEdenAi
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImagefaceDetectionResponseModelEdenAi
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImagefaceDetectionResponseModelGoogle
 */
export interface ImagefaceDetectionResponseModelGoogle {
    /**
     * 
     * @type {Array<FaceItem>}
     * @memberof ImagefaceDetectionResponseModelGoogle
     */
    'items'?: Array<FaceItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImagefaceDetectionResponseModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImagefaceDetectionResponseModelGoogle
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImagefaceDetectionResponseModelMicrosoft
 */
export interface ImagefaceDetectionResponseModelMicrosoft {
    /**
     * 
     * @type {Array<FaceItem>}
     * @memberof ImagefaceDetectionResponseModelMicrosoft
     */
    'items'?: Array<FaceItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImagefaceDetectionResponseModelMicrosoft
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImagefaceDetectionResponseModelMicrosoft
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImagefaceDetectionResponseModelPicpurify
 */
export interface ImagefaceDetectionResponseModelPicpurify {
    /**
     * 
     * @type {Array<FaceItem>}
     * @memberof ImagefaceDetectionResponseModelPicpurify
     */
    'items'?: Array<FaceItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImagefaceDetectionResponseModelPicpurify
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImagefaceDetectionResponseModelPicpurify
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImagefaceDetectionResponseModelSkybiometry
 */
export interface ImagefaceDetectionResponseModelSkybiometry {
    /**
     * 
     * @type {Array<FaceItem>}
     * @memberof ImagefaceDetectionResponseModelSkybiometry
     */
    'items'?: Array<FaceItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImagefaceDetectionResponseModelSkybiometry
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImagefaceDetectionResponseModelSkybiometry
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImagefaceRecognitionResponseModel
 */
export interface ImagefaceRecognitionResponseModel {
    /**
     * 
     * @type {ImagefaceRecognitionResponseModelFacepp}
     * @memberof ImagefaceRecognitionResponseModel
     */
    'facepp'?: ImagefaceRecognitionResponseModelFacepp;
    /**
     * 
     * @type {ImagefaceRecognitionResponseModelMicrosoft}
     * @memberof ImagefaceRecognitionResponseModel
     */
    'microsoft'?: ImagefaceRecognitionResponseModelMicrosoft;
    /**
     * 
     * @type {ImagefaceRecognitionResponseModelAmazon}
     * @memberof ImagefaceRecognitionResponseModel
     */
    'amazon'?: ImagefaceRecognitionResponseModelAmazon;
}
/**
 * 
 * @export
 * @interface ImagefaceRecognitionResponseModelAmazon
 */
export interface ImagefaceRecognitionResponseModelAmazon {
    /**
     * 
     * @type {Array<string>}
     * @memberof ImagefaceRecognitionResponseModelAmazon
     */
    'face_ids': Array<string>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImagefaceRecognitionResponseModelAmazon
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImagefaceRecognitionResponseModelAmazon
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImagefaceRecognitionResponseModelFacepp
 */
export interface ImagefaceRecognitionResponseModelFacepp {
    /**
     * 
     * @type {Array<string>}
     * @memberof ImagefaceRecognitionResponseModelFacepp
     */
    'face_ids': Array<string>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImagefaceRecognitionResponseModelFacepp
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImagefaceRecognitionResponseModelFacepp
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImagefaceRecognitionResponseModelMicrosoft
 */
export interface ImagefaceRecognitionResponseModelMicrosoft {
    /**
     * 
     * @type {Array<string>}
     * @memberof ImagefaceRecognitionResponseModelMicrosoft
     */
    'face_ids': Array<string>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImagefaceRecognitionResponseModelMicrosoft
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImagefaceRecognitionResponseModelMicrosoft
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest
 */
export interface ImagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof ImagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof ImagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof ImagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof ImagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof ImagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest
     */
    'show_original_response'?: boolean;
    /**
     * ID of face to delete
     * @type {string}
     * @memberof ImagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest
     */
    'face_id': string;
}
/**
 * 
 * @export
 * @interface ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest
 */
export interface ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest
     */
    'show_original_response'?: boolean;
    /**
     * File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
     * @type {File}
     * @memberof ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest
     */
    'file'?: File;
    /**
     * File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @type {string}
     * @memberof ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest
     */
    'file_url'?: string | null;
}
/**
 * 
 * @export
 * @interface ImagegenerationGenerationRequest
 */
export interface ImagegenerationGenerationRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof ImagegenerationGenerationRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof ImagegenerationGenerationRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof ImagegenerationGenerationRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof ImagegenerationGenerationRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof ImagegenerationGenerationRequest
     */
    'show_original_response'?: boolean;
    /**
     * Description of the desired image(s). The maximum length is 1000 characters
     * @type {string}
     * @memberof ImagegenerationGenerationRequest
     */
    'text': string;
    /**
     * 
     * @type {ResolutionEnum}
     * @memberof ImagegenerationGenerationRequest
     */
    'resolution': ResolutionEnum;
    /**
     * The number of images to generate. Must be between 1 and 10.
     * @type {number}
     * @memberof ImagegenerationGenerationRequest
     */
    'num_images'?: number;
}


/**
 * 
 * @export
 * @interface ImagegenerationResponseModel
 */
export interface ImagegenerationResponseModel {
    /**
     * 
     * @type {ImagegenerationResponseModelStabilityai}
     * @memberof ImagegenerationResponseModel
     */
    'stabilityai'?: ImagegenerationResponseModelStabilityai;
    /**
     * 
     * @type {ImagegenerationResponseModelDeepai}
     * @memberof ImagegenerationResponseModel
     */
    'deepai'?: ImagegenerationResponseModelDeepai;
    /**
     * 
     * @type {ImagegenerationResponseModelOpenai}
     * @memberof ImagegenerationResponseModel
     */
    'openai'?: ImagegenerationResponseModelOpenai;
}
/**
 * 
 * @export
 * @interface ImagegenerationResponseModelDeepai
 */
export interface ImagegenerationResponseModelDeepai {
    /**
     * 
     * @type {Array<GeneratedImageDataClass>}
     * @memberof ImagegenerationResponseModelDeepai
     */
    'items'?: Array<GeneratedImageDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImagegenerationResponseModelDeepai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImagegenerationResponseModelDeepai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImagegenerationResponseModelOpenai
 */
export interface ImagegenerationResponseModelOpenai {
    /**
     * 
     * @type {Array<GeneratedImageDataClass>}
     * @memberof ImagegenerationResponseModelOpenai
     */
    'items'?: Array<GeneratedImageDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImagegenerationResponseModelOpenai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImagegenerationResponseModelOpenai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImagegenerationResponseModelStabilityai
 */
export interface ImagegenerationResponseModelStabilityai {
    /**
     * 
     * @type {Array<GeneratedImageDataClass>}
     * @memberof ImagegenerationResponseModelStabilityai
     */
    'items'?: Array<GeneratedImageDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImagegenerationResponseModelStabilityai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImagegenerationResponseModelStabilityai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImagelandmarkDetectionResponseModel
 */
export interface ImagelandmarkDetectionResponseModel {
    /**
     * 
     * @type {ImagelandmarkDetectionResponseModelGoogle}
     * @memberof ImagelandmarkDetectionResponseModel
     */
    'google'?: ImagelandmarkDetectionResponseModelGoogle;
    /**
     * 
     * @type {ImagelandmarkDetectionResponseModelMicrosoft}
     * @memberof ImagelandmarkDetectionResponseModel
     */
    'microsoft'?: ImagelandmarkDetectionResponseModelMicrosoft;
}
/**
 * 
 * @export
 * @interface ImagelandmarkDetectionResponseModelGoogle
 */
export interface ImagelandmarkDetectionResponseModelGoogle {
    /**
     * 
     * @type {Array<LandmarkItem>}
     * @memberof ImagelandmarkDetectionResponseModelGoogle
     */
    'items'?: Array<LandmarkItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImagelandmarkDetectionResponseModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImagelandmarkDetectionResponseModelGoogle
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImagelandmarkDetectionResponseModelMicrosoft
 */
export interface ImagelandmarkDetectionResponseModelMicrosoft {
    /**
     * 
     * @type {Array<LandmarkItem>}
     * @memberof ImagelandmarkDetectionResponseModelMicrosoft
     */
    'items'?: Array<LandmarkItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImagelandmarkDetectionResponseModelMicrosoft
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImagelandmarkDetectionResponseModelMicrosoft
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImagelogoDetectionResponseModel
 */
export interface ImagelogoDetectionResponseModel {
    /**
     * 
     * @type {ImagelogoDetectionResponseModelClarifai}
     * @memberof ImagelogoDetectionResponseModel
     */
    'clarifai'?: ImagelogoDetectionResponseModelClarifai;
    /**
     * 
     * @type {ImagelogoDetectionResponseModelSmartclick}
     * @memberof ImagelogoDetectionResponseModel
     */
    'smartclick'?: ImagelogoDetectionResponseModelSmartclick;
    /**
     * 
     * @type {ImagelogoDetectionResponseModelMicrosoft}
     * @memberof ImagelogoDetectionResponseModel
     */
    'microsoft'?: ImagelogoDetectionResponseModelMicrosoft;
    /**
     * 
     * @type {ImagelogoDetectionResponseModelApi4ai}
     * @memberof ImagelogoDetectionResponseModel
     */
    'api4ai'?: ImagelogoDetectionResponseModelApi4ai;
    /**
     * 
     * @type {ImagelogoDetectionResponseModelGoogle}
     * @memberof ImagelogoDetectionResponseModel
     */
    'google'?: ImagelogoDetectionResponseModelGoogle;
}
/**
 * 
 * @export
 * @interface ImagelogoDetectionResponseModelApi4ai
 */
export interface ImagelogoDetectionResponseModelApi4ai {
    /**
     * 
     * @type {Array<LogoItem>}
     * @memberof ImagelogoDetectionResponseModelApi4ai
     */
    'items'?: Array<LogoItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImagelogoDetectionResponseModelApi4ai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImagelogoDetectionResponseModelApi4ai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImagelogoDetectionResponseModelClarifai
 */
export interface ImagelogoDetectionResponseModelClarifai {
    /**
     * 
     * @type {Array<LogoItem>}
     * @memberof ImagelogoDetectionResponseModelClarifai
     */
    'items'?: Array<LogoItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImagelogoDetectionResponseModelClarifai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImagelogoDetectionResponseModelClarifai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImagelogoDetectionResponseModelGoogle
 */
export interface ImagelogoDetectionResponseModelGoogle {
    /**
     * 
     * @type {Array<LogoItem>}
     * @memberof ImagelogoDetectionResponseModelGoogle
     */
    'items'?: Array<LogoItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImagelogoDetectionResponseModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImagelogoDetectionResponseModelGoogle
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImagelogoDetectionResponseModelMicrosoft
 */
export interface ImagelogoDetectionResponseModelMicrosoft {
    /**
     * 
     * @type {Array<LogoItem>}
     * @memberof ImagelogoDetectionResponseModelMicrosoft
     */
    'items'?: Array<LogoItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImagelogoDetectionResponseModelMicrosoft
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImagelogoDetectionResponseModelMicrosoft
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImagelogoDetectionResponseModelSmartclick
 */
export interface ImagelogoDetectionResponseModelSmartclick {
    /**
     * 
     * @type {Array<LogoItem>}
     * @memberof ImagelogoDetectionResponseModelSmartclick
     */
    'items'?: Array<LogoItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImagelogoDetectionResponseModelSmartclick
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImagelogoDetectionResponseModelSmartclick
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImageobjectDetectionObjectDetectionRequest
 */
export interface ImageobjectDetectionObjectDetectionRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof ImageobjectDetectionObjectDetectionRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof ImageobjectDetectionObjectDetectionRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof ImageobjectDetectionObjectDetectionRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof ImageobjectDetectionObjectDetectionRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof ImageobjectDetectionObjectDetectionRequest
     */
    'show_original_response'?: boolean;
    /**
     * A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\'google\' : \'google_model\', ibm\': \'ibm_model\'...}.                      **Caution**: setting models can be done only with `Content-Type` : `application/json`.                      
     * @type {{ [key: string]: string; }}
     * @memberof ImageobjectDetectionObjectDetectionRequest
     */
    'settings'?: { [key: string]: string; } | null;
    /**
     * File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
     * @type {File}
     * @memberof ImageobjectDetectionObjectDetectionRequest
     */
    'file'?: File;
    /**
     * File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @type {string}
     * @memberof ImageobjectDetectionObjectDetectionRequest
     */
    'file_url'?: string | null;
}
/**
 * 
 * @export
 * @interface ImageobjectDetectionResponseModel
 */
export interface ImageobjectDetectionResponseModel {
    /**
     * 
     * @type {ImageobjectDetectionResponseModelClarifai}
     * @memberof ImageobjectDetectionResponseModel
     */
    'clarifai'?: ImageobjectDetectionResponseModelClarifai;
    /**
     * 
     * @type {ImageobjectDetectionResponseModelMicrosoft}
     * @memberof ImageobjectDetectionResponseModel
     */
    'microsoft'?: ImageobjectDetectionResponseModelMicrosoft;
    /**
     * 
     * @type {ImageobjectDetectionResponseModelApi4ai}
     * @memberof ImageobjectDetectionResponseModel
     */
    'api4ai'?: ImageobjectDetectionResponseModelApi4ai;
    /**
     * 
     * @type {ImageobjectDetectionResponseModelGoogle}
     * @memberof ImageobjectDetectionResponseModel
     */
    'google'?: ImageobjectDetectionResponseModelGoogle;
    /**
     * 
     * @type {ImageobjectDetectionResponseModelSentisight}
     * @memberof ImageobjectDetectionResponseModel
     */
    'sentisight'?: ImageobjectDetectionResponseModelSentisight;
    /**
     * 
     * @type {ImageobjectDetectionResponseModelAmazon}
     * @memberof ImageobjectDetectionResponseModel
     */
    'amazon'?: ImageobjectDetectionResponseModelAmazon;
    /**
     * 
     * @type {ImageobjectDetectionResponseModelEdenAi}
     * @memberof ImageobjectDetectionResponseModel
     */
    'eden-ai'?: ImageobjectDetectionResponseModelEdenAi;
}
/**
 * 
 * @export
 * @interface ImageobjectDetectionResponseModelAmazon
 */
export interface ImageobjectDetectionResponseModelAmazon {
    /**
     * 
     * @type {Array<ObjectItem>}
     * @memberof ImageobjectDetectionResponseModelAmazon
     */
    'items'?: Array<ObjectItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImageobjectDetectionResponseModelAmazon
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImageobjectDetectionResponseModelAmazon
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImageobjectDetectionResponseModelApi4ai
 */
export interface ImageobjectDetectionResponseModelApi4ai {
    /**
     * 
     * @type {Array<ObjectItem>}
     * @memberof ImageobjectDetectionResponseModelApi4ai
     */
    'items'?: Array<ObjectItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImageobjectDetectionResponseModelApi4ai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImageobjectDetectionResponseModelApi4ai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImageobjectDetectionResponseModelClarifai
 */
export interface ImageobjectDetectionResponseModelClarifai {
    /**
     * 
     * @type {Array<ObjectItem>}
     * @memberof ImageobjectDetectionResponseModelClarifai
     */
    'items'?: Array<ObjectItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImageobjectDetectionResponseModelClarifai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImageobjectDetectionResponseModelClarifai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImageobjectDetectionResponseModelEdenAi
 */
export interface ImageobjectDetectionResponseModelEdenAi {
    /**
     * 
     * @type {Array<ObjectItem>}
     * @memberof ImageobjectDetectionResponseModelEdenAi
     */
    'items'?: Array<ObjectItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImageobjectDetectionResponseModelEdenAi
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImageobjectDetectionResponseModelEdenAi
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImageobjectDetectionResponseModelGoogle
 */
export interface ImageobjectDetectionResponseModelGoogle {
    /**
     * 
     * @type {Array<ObjectItem>}
     * @memberof ImageobjectDetectionResponseModelGoogle
     */
    'items'?: Array<ObjectItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImageobjectDetectionResponseModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImageobjectDetectionResponseModelGoogle
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImageobjectDetectionResponseModelMicrosoft
 */
export interface ImageobjectDetectionResponseModelMicrosoft {
    /**
     * 
     * @type {Array<ObjectItem>}
     * @memberof ImageobjectDetectionResponseModelMicrosoft
     */
    'items'?: Array<ObjectItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImageobjectDetectionResponseModelMicrosoft
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImageobjectDetectionResponseModelMicrosoft
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImageobjectDetectionResponseModelSentisight
 */
export interface ImageobjectDetectionResponseModelSentisight {
    /**
     * 
     * @type {Array<ObjectItem>}
     * @memberof ImageobjectDetectionResponseModelSentisight
     */
    'items'?: Array<ObjectItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImageobjectDetectionResponseModelSentisight
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImageobjectDetectionResponseModelSentisight
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface ImagesearchResponseModel
 */
export interface ImagesearchResponseModel {
    /**
     * 
     * @type {ImagesearchResponseModelSentisight}
     * @memberof ImagesearchResponseModel
     */
    'sentisight'?: ImagesearchResponseModelSentisight;
}
/**
 * 
 * @export
 * @interface ImagesearchResponseModelSentisight
 */
export interface ImagesearchResponseModelSentisight {
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImagesearchResponseModelSentisight
     */
    'status': StatusF43Enum;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImagesearchResponseModelSentisight
     */
    'original_response'?: any;
}


/**
 * 
 * @export
 * @interface ImagesearchSearchDeleteImageDataClass
 */
export interface ImagesearchSearchDeleteImageDataClass {
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof ImagesearchSearchDeleteImageDataClass
     */
    'status': StatusF43Enum;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof ImagesearchSearchDeleteImageDataClass
     */
    'original_response'?: any;
}


/**
 * 
 * @export
 * @interface ImagesearchdeleteImageDeleteImageRequest
 */
export interface ImagesearchdeleteImageDeleteImageRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof ImagesearchdeleteImageDeleteImageRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof ImagesearchdeleteImageDeleteImageRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof ImagesearchdeleteImageDeleteImageRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof ImagesearchdeleteImageDeleteImageRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof ImagesearchdeleteImageDeleteImageRequest
     */
    'show_original_response'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ImagesearchdeleteImageDeleteImageRequest
     */
    'image_name': string;
}
/**
 * 
 * @export
 * @interface ImagesearchlaunchSimilaritySearchImageRequest
 */
export interface ImagesearchlaunchSimilaritySearchImageRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof ImagesearchlaunchSimilaritySearchImageRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof ImagesearchlaunchSimilaritySearchImageRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof ImagesearchlaunchSimilaritySearchImageRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof ImagesearchlaunchSimilaritySearchImageRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof ImagesearchlaunchSimilaritySearchImageRequest
     */
    'show_original_response'?: boolean;
    /**
     * File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
     * @type {File}
     * @memberof ImagesearchlaunchSimilaritySearchImageRequest
     */
    'file'?: File;
    /**
     * File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @type {string}
     * @memberof ImagesearchlaunchSimilaritySearchImageRequest
     */
    'file_url'?: string | null;
}
/**
 * 
 * @export
 * @interface ImagesearchuploadImageUploadImageRequest
 */
export interface ImagesearchuploadImageUploadImageRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof ImagesearchuploadImageUploadImageRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof ImagesearchuploadImageUploadImageRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof ImagesearchuploadImageUploadImageRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof ImagesearchuploadImageUploadImageRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof ImagesearchuploadImageUploadImageRequest
     */
    'show_original_response'?: boolean;
    /**
     * File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
     * @type {File}
     * @memberof ImagesearchuploadImageUploadImageRequest
     */
    'file'?: File;
    /**
     * File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @type {string}
     * @memberof ImagesearchuploadImageUploadImageRequest
     */
    'file_url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImagesearchuploadImageUploadImageRequest
     */
    'image_name': string;
}
/**
 * 
 * @export
 * @interface InfosCustomNamedEntityRecognitionDataClass
 */
export interface InfosCustomNamedEntityRecognitionDataClass {
    /**
     * 
     * @type {string}
     * @memberof InfosCustomNamedEntityRecognitionDataClass
     */
    'entity': string;
    /**
     * 
     * @type {string}
     * @memberof InfosCustomNamedEntityRecognitionDataClass
     */
    'category': string;
}
/**
 * 
 * @export
 * @interface InfosIdentityParserDataClass
 */
export interface InfosIdentityParserDataClass {
    /**
     * 
     * @type {ItemIdentityParserDataClass}
     * @memberof InfosIdentityParserDataClass
     */
    'last_name': ItemIdentityParserDataClass;
    /**
     * 
     * @type {Array<ItemIdentityParserDataClass>}
     * @memberof InfosIdentityParserDataClass
     */
    'given_names'?: Array<ItemIdentityParserDataClass>;
    /**
     * 
     * @type {ItemIdentityParserDataClass}
     * @memberof InfosIdentityParserDataClass
     */
    'birth_place': ItemIdentityParserDataClass;
    /**
     * 
     * @type {ItemIdentityParserDataClass}
     * @memberof InfosIdentityParserDataClass
     */
    'birth_date': ItemIdentityParserDataClass;
    /**
     * 
     * @type {ItemIdentityParserDataClass}
     * @memberof InfosIdentityParserDataClass
     */
    'issuance_date': ItemIdentityParserDataClass;
    /**
     * 
     * @type {ItemIdentityParserDataClass}
     * @memberof InfosIdentityParserDataClass
     */
    'expire_date': ItemIdentityParserDataClass;
    /**
     * 
     * @type {ItemIdentityParserDataClass}
     * @memberof InfosIdentityParserDataClass
     */
    'document_id': ItemIdentityParserDataClass;
    /**
     * 
     * @type {ItemIdentityParserDataClass}
     * @memberof InfosIdentityParserDataClass
     */
    'issuing_state': ItemIdentityParserDataClass;
    /**
     * 
     * @type {ItemIdentityParserDataClass}
     * @memberof InfosIdentityParserDataClass
     */
    'address': ItemIdentityParserDataClass;
    /**
     * 
     * @type {ItemIdentityParserDataClass}
     * @memberof InfosIdentityParserDataClass
     */
    'age': ItemIdentityParserDataClass;
    /**
     * 
     * @type {Country}
     * @memberof InfosIdentityParserDataClass
     */
    'country': Country;
    /**
     * 
     * @type {ItemIdentityParserDataClass}
     * @memberof InfosIdentityParserDataClass
     */
    'document_type': ItemIdentityParserDataClass;
    /**
     * 
     * @type {ItemIdentityParserDataClass}
     * @memberof InfosIdentityParserDataClass
     */
    'gender': ItemIdentityParserDataClass;
    /**
     * 
     * @type {Array<ItemIdentityParserDataClass>}
     * @memberof InfosIdentityParserDataClass
     */
    'image_id'?: Array<ItemIdentityParserDataClass>;
    /**
     * 
     * @type {Array<ItemIdentityParserDataClass>}
     * @memberof InfosIdentityParserDataClass
     */
    'image_signature'?: Array<ItemIdentityParserDataClass>;
    /**
     * 
     * @type {ItemIdentityParserDataClass}
     * @memberof InfosIdentityParserDataClass
     */
    'mrz': ItemIdentityParserDataClass;
    /**
     * 
     * @type {ItemIdentityParserDataClass}
     * @memberof InfosIdentityParserDataClass
     */
    'nationality': ItemIdentityParserDataClass;
}
/**
 * 
 * @export
 * @interface InfosInvoiceParserDataClass
 */
export interface InfosInvoiceParserDataClass {
    /**
     * 
     * @type {InfosInvoiceParserDataClassCustomerInformation}
     * @memberof InfosInvoiceParserDataClass
     */
    'customer_information'?: InfosInvoiceParserDataClassCustomerInformation;
    /**
     * 
     * @type {InfosInvoiceParserDataClassMerchantInformation}
     * @memberof InfosInvoiceParserDataClass
     */
    'merchant_information'?: InfosInvoiceParserDataClassMerchantInformation;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClass
     */
    'invoice_number'?: string;
    /**
     * 
     * @type {number}
     * @memberof InfosInvoiceParserDataClass
     */
    'invoice_total'?: number;
    /**
     * 
     * @type {number}
     * @memberof InfosInvoiceParserDataClass
     */
    'invoice_subtotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof InfosInvoiceParserDataClass
     */
    'gratuity'?: number;
    /**
     * 
     * @type {number}
     * @memberof InfosInvoiceParserDataClass
     */
    'amount_due'?: number;
    /**
     * 
     * @type {number}
     * @memberof InfosInvoiceParserDataClass
     */
    'previous_unpaid_balance'?: number;
    /**
     * 
     * @type {number}
     * @memberof InfosInvoiceParserDataClass
     */
    'discount'?: number;
    /**
     * 
     * @type {Array<TaxesInvoice>}
     * @memberof InfosInvoiceParserDataClass
     */
    'taxes'?: Array<TaxesInvoice>;
    /**
     * 
     * @type {number}
     * @memberof InfosInvoiceParserDataClass
     */
    'service_charge'?: number;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClass
     */
    'payment_term'?: string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClass
     */
    'purchase_order'?: string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClass
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClass
     */
    'due_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClass
     */
    'service_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClass
     */
    'service_due_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClass
     */
    'po_number'?: string;
    /**
     * 
     * @type {InfosInvoiceParserDataClassLocale}
     * @memberof InfosInvoiceParserDataClass
     */
    'locale'?: InfosInvoiceParserDataClassLocale;
    /**
     * 
     * @type {InfosInvoiceParserDataClassBankInformations}
     * @memberof InfosInvoiceParserDataClass
     */
    'bank_informations'?: InfosInvoiceParserDataClassBankInformations;
    /**
     * 
     * @type {Array<ItemLinesInvoice>}
     * @memberof InfosInvoiceParserDataClass
     */
    'item_lines'?: Array<ItemLinesInvoice>;
}
/**
 * 
 * @export
 * @interface InfosInvoiceParserDataClassBankInformations
 */
export interface InfosInvoiceParserDataClassBankInformations {
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassBankInformations
     */
    'account_number': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassBankInformations
     */
    'iban': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassBankInformations
     */
    'bsb': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassBankInformations
     */
    'sort_code': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassBankInformations
     */
    'vat_number': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassBankInformations
     */
    'rooting_number': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassBankInformations
     */
    'swift': string;
}
/**
 * 
 * @export
 * @interface InfosInvoiceParserDataClassCustomerInformation
 */
export interface InfosInvoiceParserDataClassCustomerInformation {
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassCustomerInformation
     */
    'customer_name': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassCustomerInformation
     */
    'customer_address': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassCustomerInformation
     */
    'customer_email': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassCustomerInformation
     */
    'customer_id': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassCustomerInformation
     */
    'customer_tax_id': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassCustomerInformation
     */
    'customer_mailing_address': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassCustomerInformation
     */
    'customer_billing_address': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassCustomerInformation
     */
    'customer_shipping_address': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassCustomerInformation
     */
    'customer_service_address': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassCustomerInformation
     */
    'customer_remittance_address': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassCustomerInformation
     */
    'abn_number': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassCustomerInformation
     */
    'gst_number': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassCustomerInformation
     */
    'pan_number': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassCustomerInformation
     */
    'vat_number': string;
}
/**
 * 
 * @export
 * @interface InfosInvoiceParserDataClassLocale
 */
export interface InfosInvoiceParserDataClassLocale {
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassLocale
     */
    'currency': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassLocale
     */
    'language': string;
}
/**
 * 
 * @export
 * @interface InfosInvoiceParserDataClassMerchantInformation
 */
export interface InfosInvoiceParserDataClassMerchantInformation {
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassMerchantInformation
     */
    'merchant_name': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassMerchantInformation
     */
    'merchant_address': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassMerchantInformation
     */
    'merchant_phone': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassMerchantInformation
     */
    'merchant_email': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassMerchantInformation
     */
    'merchant_fax': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassMerchantInformation
     */
    'merchant_website': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassMerchantInformation
     */
    'merchant_tax_id': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassMerchantInformation
     */
    'merchant_siret': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassMerchantInformation
     */
    'merchant_siren': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassMerchantInformation
     */
    'abn_number': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassMerchantInformation
     */
    'gst_number': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassMerchantInformation
     */
    'pan_number': string;
    /**
     * 
     * @type {string}
     * @memberof InfosInvoiceParserDataClassMerchantInformation
     */
    'vat_number': string;
}
/**
 * 
 * @export
 * @interface InfosKeywordExtractionDataClass
 */
export interface InfosKeywordExtractionDataClass {
    /**
     * 
     * @type {string}
     * @memberof InfosKeywordExtractionDataClass
     */
    'keyword': string;
    /**
     * 
     * @type {number}
     * @memberof InfosKeywordExtractionDataClass
     */
    'importance': number;
}
/**
 * 
 * @export
 * @interface InfosLanguageDetectionDataClass
 */
export interface InfosLanguageDetectionDataClass {
    /**
     * 
     * @type {string}
     * @memberof InfosLanguageDetectionDataClass
     */
    'language': string;
    /**
     * 
     * @type {string}
     * @memberof InfosLanguageDetectionDataClass
     */
    'display_name': string;
    /**
     * 
     * @type {number}
     * @memberof InfosLanguageDetectionDataClass
     */
    'confidence': number;
}
/**
 * 
 * @export
 * @interface InfosNamedEntityRecognitionDataClass
 */
export interface InfosNamedEntityRecognitionDataClass {
    /**
     * 
     * @type {string}
     * @memberof InfosNamedEntityRecognitionDataClass
     */
    'entity': string;
    /**
     * 
     * @type {string}
     * @memberof InfosNamedEntityRecognitionDataClass
     */
    'category': string;
    /**
     * 
     * @type {number}
     * @memberof InfosNamedEntityRecognitionDataClass
     */
    'importance': number;
}
/**
 * 
 * @export
 * @interface InfosReceiptParserDataClass
 */
export interface InfosReceiptParserDataClass {
    /**
     * 
     * @type {string}
     * @memberof InfosReceiptParserDataClass
     */
    'invoice_number'?: string;
    /**
     * 
     * @type {number}
     * @memberof InfosReceiptParserDataClass
     */
    'invoice_total'?: number;
    /**
     * 
     * @type {number}
     * @memberof InfosReceiptParserDataClass
     */
    'invoice_subtotal'?: number;
    /**
     * 
     * @type {Array<BarCode>}
     * @memberof InfosReceiptParserDataClass
     */
    'barcodes'?: Array<BarCode>;
    /**
     * 
     * @type {string}
     * @memberof InfosReceiptParserDataClass
     */
    'category'?: string;
    /**
     * 
     * @type {string}
     * @memberof InfosReceiptParserDataClass
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof InfosReceiptParserDataClass
     */
    'due_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof InfosReceiptParserDataClass
     */
    'time'?: string;
    /**
     * 
     * @type {InfosReceiptParserDataClassCustomerInformation}
     * @memberof InfosReceiptParserDataClass
     */
    'customer_information'?: InfosReceiptParserDataClassCustomerInformation;
    /**
     * 
     * @type {InfosReceiptParserDataClassMerchantInformation}
     * @memberof InfosReceiptParserDataClass
     */
    'merchant_information'?: InfosReceiptParserDataClassMerchantInformation;
    /**
     * 
     * @type {InfosReceiptParserDataClassPaymentInformation}
     * @memberof InfosReceiptParserDataClass
     */
    'payment_information'?: InfosReceiptParserDataClassPaymentInformation;
    /**
     * 
     * @type {InfosReceiptParserDataClassLocale}
     * @memberof InfosReceiptParserDataClass
     */
    'locale'?: InfosReceiptParserDataClassLocale;
    /**
     * 
     * @type {Array<Taxes>}
     * @memberof InfosReceiptParserDataClass
     */
    'taxes'?: Array<Taxes>;
    /**
     * 
     * @type {object}
     * @memberof InfosReceiptParserDataClass
     */
    'receipt_infos'?: object;
    /**
     * 
     * @type {Array<ItemLines>}
     * @memberof InfosReceiptParserDataClass
     */
    'item_lines'?: Array<ItemLines>;
}
/**
 * 
 * @export
 * @interface InfosReceiptParserDataClassCustomerInformation
 */
export interface InfosReceiptParserDataClassCustomerInformation {
    /**
     * 
     * @type {string}
     * @memberof InfosReceiptParserDataClassCustomerInformation
     */
    'customer_name'?: string;
}
/**
 * 
 * @export
 * @interface InfosReceiptParserDataClassLocale
 */
export interface InfosReceiptParserDataClassLocale {
    /**
     * 
     * @type {string}
     * @memberof InfosReceiptParserDataClassLocale
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof InfosReceiptParserDataClassLocale
     */
    'language'?: string;
    /**
     * 
     * @type {string}
     * @memberof InfosReceiptParserDataClassLocale
     */
    'country'?: string;
}
/**
 * 
 * @export
 * @interface InfosReceiptParserDataClassMerchantInformation
 */
export interface InfosReceiptParserDataClassMerchantInformation {
    /**
     * 
     * @type {string}
     * @memberof InfosReceiptParserDataClassMerchantInformation
     */
    'merchant_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof InfosReceiptParserDataClassMerchantInformation
     */
    'merchant_address'?: string;
    /**
     * 
     * @type {string}
     * @memberof InfosReceiptParserDataClassMerchantInformation
     */
    'merchant_phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof InfosReceiptParserDataClassMerchantInformation
     */
    'merchant_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof InfosReceiptParserDataClassMerchantInformation
     */
    'merchant_siret'?: string;
    /**
     * 
     * @type {string}
     * @memberof InfosReceiptParserDataClassMerchantInformation
     */
    'merchant_siren'?: string;
}
/**
 * 
 * @export
 * @interface InfosReceiptParserDataClassPaymentInformation
 */
export interface InfosReceiptParserDataClassPaymentInformation {
    /**
     * 
     * @type {string}
     * @memberof InfosReceiptParserDataClassPaymentInformation
     */
    'card_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof InfosReceiptParserDataClassPaymentInformation
     */
    'card_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof InfosReceiptParserDataClassPaymentInformation
     */
    'cash'?: string;
    /**
     * 
     * @type {string}
     * @memberof InfosReceiptParserDataClassPaymentInformation
     */
    'tip'?: string;
    /**
     * 
     * @type {string}
     * @memberof InfosReceiptParserDataClassPaymentInformation
     */
    'discount'?: string;
    /**
     * 
     * @type {string}
     * @memberof InfosReceiptParserDataClassPaymentInformation
     */
    'change'?: string;
}
/**
 * 
 * @export
 * @interface InfosSearchDataClass
 */
export interface InfosSearchDataClass {
    /**
     * 
     * @type {string}
     * @memberof InfosSearchDataClass
     */
    'object': string;
    /**
     * 
     * @type {number}
     * @memberof InfosSearchDataClass
     */
    'document': number;
    /**
     * 
     * @type {number}
     * @memberof InfosSearchDataClass
     */
    'score': number;
}
/**
 * 
 * @export
 * @interface InfosSyntaxAnalysisDataClass
 */
export interface InfosSyntaxAnalysisDataClass {
    /**
     * 
     * @type {string}
     * @memberof InfosSyntaxAnalysisDataClass
     */
    'word': string;
    /**
     * 
     * @type {number}
     * @memberof InfosSyntaxAnalysisDataClass
     */
    'importance': number;
    /**
     * 
     * @type {string}
     * @memberof InfosSyntaxAnalysisDataClass
     */
    'tag': string;
    /**
     * 
     * @type {string}
     * @memberof InfosSyntaxAnalysisDataClass
     */
    'lemma': string;
    /**
     * 
     * @type {object}
     * @memberof InfosSyntaxAnalysisDataClass
     */
    'others'?: object;
}
/**
 * 
 * @export
 * @interface ItemBankCheckParsingDataClass
 */
export interface ItemBankCheckParsingDataClass {
    /**
     * 
     * @type {number}
     * @memberof ItemBankCheckParsingDataClass
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof ItemBankCheckParsingDataClass
     */
    'amount_text': string;
    /**
     * 
     * @type {string}
     * @memberof ItemBankCheckParsingDataClass
     */
    'bank_address': string;
    /**
     * 
     * @type {string}
     * @memberof ItemBankCheckParsingDataClass
     */
    'bank_name': string;
    /**
     * 
     * @type {string}
     * @memberof ItemBankCheckParsingDataClass
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof ItemBankCheckParsingDataClass
     */
    'memo': string;
    /**
     * 
     * @type {string}
     * @memberof ItemBankCheckParsingDataClass
     */
    'payer_address': string;
    /**
     * 
     * @type {string}
     * @memberof ItemBankCheckParsingDataClass
     */
    'payer_name': string;
    /**
     * 
     * @type {string}
     * @memberof ItemBankCheckParsingDataClass
     */
    'receiver_address': string;
    /**
     * 
     * @type {string}
     * @memberof ItemBankCheckParsingDataClass
     */
    'receiver_name': string;
    /**
     * 
     * @type {string}
     * @memberof ItemBankCheckParsingDataClass
     */
    'currency': string;
    /**
     * 
     * @type {MicrModel}
     * @memberof ItemBankCheckParsingDataClass
     */
    'micr': MicrModel;
}
/**
 * 
 * @export
 * @interface ItemCustomClassificationDataClass
 */
export interface ItemCustomClassificationDataClass {
    /**
     * 
     * @type {string}
     * @memberof ItemCustomClassificationDataClass
     */
    'input': string;
    /**
     * 
     * @type {string}
     * @memberof ItemCustomClassificationDataClass
     */
    'label': string;
    /**
     * 
     * @type {number}
     * @memberof ItemCustomClassificationDataClass
     */
    'confidence': number;
}
/**
 * 
 * @export
 * @interface ItemDataExtraction
 */
export interface ItemDataExtraction {
    /**
     * 
     * @type {string}
     * @memberof ItemDataExtraction
     */
    'key': string;
    /**
     * 
     * @type {any}
     * @memberof ItemDataExtraction
     */
    'value': any;
    /**
     * 
     * @type {BoundingBox}
     * @memberof ItemDataExtraction
     */
    'bounding_box': BoundingBox;
    /**
     * 
     * @type {number}
     * @memberof ItemDataExtraction
     */
    'confidence_score': number;
}
/**
 * 
 * @export
 * @interface ItemIdentityParserDataClass
 */
export interface ItemIdentityParserDataClass {
    /**
     * 
     * @type {string}
     * @memberof ItemIdentityParserDataClass
     */
    'value'?: string;
    /**
     * 
     * @type {number}
     * @memberof ItemIdentityParserDataClass
     */
    'confidence'?: number;
}
/**
 * 
 * @export
 * @interface ItemLines
 */
export interface ItemLines {
    /**
     * 
     * @type {string}
     * @memberof ItemLines
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof ItemLines
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof ItemLines
     */
    'amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof ItemLines
     */
    'unit_price'?: number;
}
/**
 * 
 * @export
 * @interface ItemLinesInvoice
 */
export interface ItemLinesInvoice {
    /**
     * 
     * @type {string}
     * @memberof ItemLinesInvoice
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof ItemLinesInvoice
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof ItemLinesInvoice
     */
    'amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof ItemLinesInvoice
     */
    'unit_price'?: number;
    /**
     * 
     * @type {number}
     * @memberof ItemLinesInvoice
     */
    'discount'?: number;
    /**
     * 
     * @type {string}
     * @memberof ItemLinesInvoice
     */
    'product_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemLinesInvoice
     */
    'date_item'?: string;
    /**
     * 
     * @type {number}
     * @memberof ItemLinesInvoice
     */
    'tax_item'?: number;
    /**
     * 
     * @type {number}
     * @memberof ItemLinesInvoice
     */
    'tax_rate'?: number;
}
/**
 * 
 * @export
 * @interface LandmarkItem
 */
export interface LandmarkItem {
    /**
     * 
     * @type {string}
     * @memberof LandmarkItem
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof LandmarkItem
     */
    'confidence': number;
    /**
     * 
     * @type {Array<LandmarkVertice>}
     * @memberof LandmarkItem
     */
    'bounding_box'?: Array<LandmarkVertice>;
    /**
     * 
     * @type {Array<LandmarkLocation>}
     * @memberof LandmarkItem
     */
    'locations'?: Array<LandmarkLocation>;
}
/**
 * 
 * @export
 * @interface LandmarkLatLng
 */
export interface LandmarkLatLng {
    /**
     * 
     * @type {number}
     * @memberof LandmarkLatLng
     */
    'latitude': number;
    /**
     * 
     * @type {number}
     * @memberof LandmarkLatLng
     */
    'longitude': number;
}
/**
 * 
 * @export
 * @interface LandmarkLocation
 */
export interface LandmarkLocation {
    /**
     * 
     * @type {LandmarkLatLng}
     * @memberof LandmarkLocation
     */
    'lat_lng': LandmarkLatLng;
}
/**
 * 
 * @export
 * @interface LandmarkVertice
 */
export interface LandmarkVertice {
    /**
     * 
     * @type {number}
     * @memberof LandmarkVertice
     */
    'x': number;
    /**
     * 
     * @type {number}
     * @memberof LandmarkVertice
     */
    'y': number;
}
/**
 * 
 * @export
 * @interface LandmarksVideo
 */
export interface LandmarksVideo {
    /**
     * 
     * @type {Array<number>}
     * @memberof LandmarksVideo
     */
    'eye_left'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof LandmarksVideo
     */
    'eye_right'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof LandmarksVideo
     */
    'nose'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof LandmarksVideo
     */
    'mouth_left'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof LandmarksVideo
     */
    'mouth_right'?: Array<number>;
}
/**
 * 
 * @export
 * @interface LaunchAsyncJobResponse
 */
export interface LaunchAsyncJobResponse {
    /**
     * 
     * @type {string}
     * @memberof LaunchAsyncJobResponse
     */
    'public_id': string;
}
/**
 * Line of a document      Attributes:         text (str): Text detected in the line         bounding_boxes (Sequence[BoundingBox]): Bounding boxes of the words in the line         words (Sequence[Word]): List of words of the line         confidence (float): Confidence of the line     
 * @export
 * @interface Line
 */
export interface Line {
    /**
     * Text detected in the line
     * @type {string}
     * @memberof Line
     */
    'text': string;
    /**
     * List of words
     * @type {Array<Word>}
     * @memberof Line
     */
    'words'?: Array<Word>;
    /**
     * 
     * @type {LineBoundingBox}
     * @memberof Line
     */
    'bounding_box': LineBoundingBox;
    /**
     * Confidence of the line
     * @type {number}
     * @memberof Line
     */
    'confidence': number;
}
/**
 * Bounding boxes of the words in the line
 * @export
 * @interface LineBoundingBox
 */
export interface LineBoundingBox {
    /**
     * Left coordinate of the bounding box
     * @type {number}
     * @memberof LineBoundingBox
     */
    'left': number;
    /**
     * Top coordinate of the bounding box
     * @type {number}
     * @memberof LineBoundingBox
     */
    'top': number;
    /**
     * Width of the bounding box
     * @type {number}
     * @memberof LineBoundingBox
     */
    'width': number;
    /**
     * Height of the bounding box
     * @type {number}
     * @memberof LineBoundingBox
     */
    'height': number;
}
/**
 * 
 * @export
 * @interface ListAsyncJobResponse
 */
export interface ListAsyncJobResponse {
    /**
     * 
     * @type {Array<AsyncJobList>}
     * @memberof ListAsyncJobResponse
     */
    'jobs': Array<AsyncJobList>;
}
/**
 * 
 * @export
 * @interface Locale
 */
export interface Locale {
    /**
     * 
     * @type {string}
     * @memberof Locale
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof Locale
     */
    'language'?: string;
    /**
     * 
     * @type {string}
     * @memberof Locale
     */
    'country'?: string;
}
/**
 * 
 * @export
 * @interface LocaleInvoice
 */
export interface LocaleInvoice {
    /**
     * 
     * @type {string}
     * @memberof LocaleInvoice
     */
    'currency': string;
    /**
     * 
     * @type {string}
     * @memberof LocaleInvoice
     */
    'language': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const LocationInformationSubCategoryType = {
    Address: 'Address',
    Location: 'Location'
} as const;

export type LocationInformationSubCategoryType = typeof LocationInformationSubCategoryType[keyof typeof LocationInformationSubCategoryType];


/**
 * 
 * @export
 * @interface LogoBoundingPoly
 */
export interface LogoBoundingPoly {
    /**
     * 
     * @type {Array<LogoVertice>}
     * @memberof LogoBoundingPoly
     */
    'vertices': Array<LogoVertice>;
}
/**
 * 
 * @export
 * @interface LogoItem
 */
export interface LogoItem {
    /**
     * 
     * @type {LogoBoundingPoly}
     * @memberof LogoItem
     */
    'bounding_poly': LogoBoundingPoly;
    /**
     * 
     * @type {string}
     * @memberof LogoItem
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof LogoItem
     */
    'score': number;
}
/**
 * 
 * @export
 * @interface LogoTrack
 */
export interface LogoTrack {
    /**
     * 
     * @type {string}
     * @memberof LogoTrack
     */
    'description': string;
    /**
     * 
     * @type {Array<VideoLogo>}
     * @memberof LogoTrack
     */
    'tracking'?: Array<VideoLogo>;
}
/**
 * 
 * @export
 * @interface LogoVertice
 */
export interface LogoVertice {
    /**
     * 
     * @type {number}
     * @memberof LogoVertice
     */
    'x': number;
    /**
     * 
     * @type {number}
     * @memberof LogoVertice
     */
    'y': number;
}
/**
 * 
 * @export
 * @interface LowerCloth
 */
export interface LowerCloth {
    /**
     * 
     * @type {string}
     * @memberof LowerCloth
     */
    'value': string;
    /**
     * 
     * @type {number}
     * @memberof LowerCloth
     */
    'confidence': number;
}
/**
 * 
 * @export
 * @interface MerchantInformation
 */
export interface MerchantInformation {
    /**
     * 
     * @type {string}
     * @memberof MerchantInformation
     */
    'merchant_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantInformation
     */
    'merchant_address'?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantInformation
     */
    'merchant_phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantInformation
     */
    'merchant_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantInformation
     */
    'merchant_siret'?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantInformation
     */
    'merchant_siren'?: string;
}
/**
 * 
 * @export
 * @interface MerchantInformationInvoice
 */
export interface MerchantInformationInvoice {
    /**
     * 
     * @type {string}
     * @memberof MerchantInformationInvoice
     */
    'merchant_name': string;
    /**
     * 
     * @type {string}
     * @memberof MerchantInformationInvoice
     */
    'merchant_address': string;
    /**
     * 
     * @type {string}
     * @memberof MerchantInformationInvoice
     */
    'merchant_phone': string;
    /**
     * 
     * @type {string}
     * @memberof MerchantInformationInvoice
     */
    'merchant_email': string;
    /**
     * 
     * @type {string}
     * @memberof MerchantInformationInvoice
     */
    'merchant_fax': string;
    /**
     * 
     * @type {string}
     * @memberof MerchantInformationInvoice
     */
    'merchant_website': string;
    /**
     * 
     * @type {string}
     * @memberof MerchantInformationInvoice
     */
    'merchant_tax_id': string;
    /**
     * 
     * @type {string}
     * @memberof MerchantInformationInvoice
     */
    'merchant_siret': string;
    /**
     * 
     * @type {string}
     * @memberof MerchantInformationInvoice
     */
    'merchant_siren': string;
    /**
     * 
     * @type {string}
     * @memberof MerchantInformationInvoice
     */
    'abn_number': string;
    /**
     * 
     * @type {string}
     * @memberof MerchantInformationInvoice
     */
    'gst_number': string;
    /**
     * 
     * @type {string}
     * @memberof MerchantInformationInvoice
     */
    'pan_number': string;
    /**
     * 
     * @type {string}
     * @memberof MerchantInformationInvoice
     */
    'vat_number': string;
}
/**
 * 
 * @export
 * @interface MicrModel
 */
export interface MicrModel {
    /**
     * 
     * @type {string}
     * @memberof MicrModel
     */
    'raw': string;
    /**
     * 
     * @type {string}
     * @memberof MicrModel
     */
    'account_number': string;
    /**
     * 
     * @type {string}
     * @memberof MicrModel
     */
    'routing_number': string;
    /**
     * 
     * @type {string}
     * @memberof MicrModel
     */
    'serial_number': string;
    /**
     * 
     * @type {string}
     * @memberof MicrModel
     */
    'check_number': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const MiscellaneousSubCategoryType = {
    Url: 'URL',
    Ip: 'IP',
    Mac: 'MAC',
    VehicleIdentificationNumber: 'VehicleIdentificationNumber',
    LicensePlate: 'LicensePlate',
    VoterNumber: 'VoterNumber',
    AwsKeys: 'AWSKeys',
    AzureKeys: 'AzureKeys',
    Password: 'Password'
} as const;

export type MiscellaneousSubCategoryType = typeof MiscellaneousSubCategoryType[keyof typeof MiscellaneousSubCategoryType];


/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {NestedError}
     * @memberof ModelError
     */
    'error': NestedError;
}
/**
 * 
 * @export
 * @interface NestedBadRequest
 */
export interface NestedBadRequest {
    /**
     * 
     * @type {string}
     * @memberof NestedBadRequest
     */
    'type': string;
    /**
     * 
     * @type {FieldError}
     * @memberof NestedBadRequest
     */
    'message': FieldError;
}
/**
 * 
 * @export
 * @interface NestedError
 */
export interface NestedError {
    /**
     * 
     * @type {string}
     * @memberof NestedError
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof NestedError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface NotFoundResponse
 */
export interface NotFoundResponse {
    /**
     * 
     * @type {string}
     * @memberof NotFoundResponse
     */
    'details'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const NullEnum = {
    Null: 'null'
} as const;

export type NullEnum = typeof NullEnum[keyof typeof NullEnum];


/**
 * 
 * @export
 * @interface ObjectFrame
 */
export interface ObjectFrame {
    /**
     * 
     * @type {number}
     * @memberof ObjectFrame
     */
    'timestamp': number;
    /**
     * 
     * @type {VideoObjectBoundingBox}
     * @memberof ObjectFrame
     */
    'bounding_box': VideoObjectBoundingBox;
}
/**
 * 
 * @export
 * @interface ObjectItem
 */
export interface ObjectItem {
    /**
     * 
     * @type {string}
     * @memberof ObjectItem
     */
    'label': string;
    /**
     * 
     * @type {number}
     * @memberof ObjectItem
     */
    'confidence': number;
    /**
     * 
     * @type {number}
     * @memberof ObjectItem
     */
    'x_min': number;
    /**
     * 
     * @type {number}
     * @memberof ObjectItem
     */
    'x_max': number;
    /**
     * 
     * @type {number}
     * @memberof ObjectItem
     */
    'y_min': number;
    /**
     * 
     * @type {number}
     * @memberof ObjectItem
     */
    'y_max': number;
}
/**
 * 
 * @export
 * @interface ObjectTrack
 */
export interface ObjectTrack {
    /**
     * 
     * @type {string}
     * @memberof ObjectTrack
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof ObjectTrack
     */
    'confidence': number;
    /**
     * 
     * @type {Array<ObjectFrame>}
     * @memberof ObjectTrack
     */
    'frames'?: Array<ObjectFrame>;
}
/**
 * 
 * @export
 * @interface OcrTablesAsyncRequest
 */
export interface OcrTablesAsyncRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof OcrTablesAsyncRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof OcrTablesAsyncRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof OcrTablesAsyncRequest
     */
    'show_original_response'?: boolean;
    /**
     * Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
     * @type {string}
     * @memberof OcrTablesAsyncRequest
     */
    'webhook_receiver'?: string;
    /**
     * Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client\'s data ID to link the result internally).             Will only be used when webhook_receiver is set.
     * @type {{ [key: string]: any; }}
     * @memberof OcrTablesAsyncRequest
     */
    'users_webhook_parameters'?: { [key: string]: any; };
    /**
     * File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
     * @type {File}
     * @memberof OcrTablesAsyncRequest
     */
    'file'?: File;
    /**
     * File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @type {string}
     * @memberof OcrTablesAsyncRequest
     */
    'file_url'?: string | null;
    /**
     * Language code of the language the document is written in (ex: fr (French), en (English), es (Spanish))
     * @type {string}
     * @memberof OcrTablesAsyncRequest
     */
    'language'?: string | null;
}
/**
 * 
 * @export
 * @interface OcrbankCheckParsingBankCheckParsingRequest
 */
export interface OcrbankCheckParsingBankCheckParsingRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof OcrbankCheckParsingBankCheckParsingRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof OcrbankCheckParsingBankCheckParsingRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof OcrbankCheckParsingBankCheckParsingRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof OcrbankCheckParsingBankCheckParsingRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof OcrbankCheckParsingBankCheckParsingRequest
     */
    'show_original_response'?: boolean;
    /**
     * File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
     * @type {File}
     * @memberof OcrbankCheckParsingBankCheckParsingRequest
     */
    'file'?: File;
    /**
     * File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @type {string}
     * @memberof OcrbankCheckParsingBankCheckParsingRequest
     */
    'file_url'?: string | null;
}
/**
 * 
 * @export
 * @interface OcrbankCheckParsingResponseModel
 */
export interface OcrbankCheckParsingResponseModel {
    /**
     * 
     * @type {OcrbankCheckParsingResponseModelVeryfi}
     * @memberof OcrbankCheckParsingResponseModel
     */
    'veryfi'?: OcrbankCheckParsingResponseModelVeryfi;
    /**
     * 
     * @type {OcrbankCheckParsingResponseModelBase64}
     * @memberof OcrbankCheckParsingResponseModel
     */
    'base64'?: OcrbankCheckParsingResponseModelBase64;
    /**
     * 
     * @type {OcrbankCheckParsingResponseModelEdenAi}
     * @memberof OcrbankCheckParsingResponseModel
     */
    'eden-ai'?: OcrbankCheckParsingResponseModelEdenAi;
}
/**
 * 
 * @export
 * @interface OcrbankCheckParsingResponseModelBase64
 */
export interface OcrbankCheckParsingResponseModelBase64 {
    /**
     * 
     * @type {Array<ItemBankCheckParsingDataClass>}
     * @memberof OcrbankCheckParsingResponseModelBase64
     */
    'extracted_data'?: Array<ItemBankCheckParsingDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrbankCheckParsingResponseModelBase64
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrbankCheckParsingResponseModelBase64
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrbankCheckParsingResponseModelEdenAi
 */
export interface OcrbankCheckParsingResponseModelEdenAi {
    /**
     * 
     * @type {Array<ItemBankCheckParsingDataClass>}
     * @memberof OcrbankCheckParsingResponseModelEdenAi
     */
    'extracted_data'?: Array<ItemBankCheckParsingDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrbankCheckParsingResponseModelEdenAi
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrbankCheckParsingResponseModelEdenAi
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrbankCheckParsingResponseModelVeryfi
 */
export interface OcrbankCheckParsingResponseModelVeryfi {
    /**
     * 
     * @type {Array<ItemBankCheckParsingDataClass>}
     * @memberof OcrbankCheckParsingResponseModelVeryfi
     */
    'extracted_data'?: Array<ItemBankCheckParsingDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrbankCheckParsingResponseModelVeryfi
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrbankCheckParsingResponseModelVeryfi
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrcustomDocumentParsingAsyncCustomDocumentParsingAsyncDataClass
 */
export interface OcrcustomDocumentParsingAsyncCustomDocumentParsingAsyncDataClass {
    /**
     * 
     * @type {Array<CustomDocumentParsingAsyncItem>}
     * @memberof OcrcustomDocumentParsingAsyncCustomDocumentParsingAsyncDataClass
     */
    'items'?: Array<CustomDocumentParsingAsyncItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrcustomDocumentParsingAsyncCustomDocumentParsingAsyncDataClass
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof OcrcustomDocumentParsingAsyncCustomDocumentParsingAsyncDataClass
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof OcrcustomDocumentParsingAsyncCustomDocumentParsingAsyncDataClass
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof OcrcustomDocumentParsingAsyncCustomDocumentParsingAsyncDataClass
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface OcrcustomDocumentParsingAsyncModel
 */
export interface OcrcustomDocumentParsingAsyncModel {
    /**
     * 
     * @type {OcrcustomDocumentParsingAsyncModelAmazon}
     * @memberof OcrcustomDocumentParsingAsyncModel
     */
    'amazon'?: OcrcustomDocumentParsingAsyncModelAmazon;
}
/**
 * 
 * @export
 * @interface OcrcustomDocumentParsingAsyncModelAmazon
 */
export interface OcrcustomDocumentParsingAsyncModelAmazon {
    /**
     * 
     * @type {Array<CustomDocumentParsingAsyncItem>}
     * @memberof OcrcustomDocumentParsingAsyncModelAmazon
     */
    'items'?: Array<CustomDocumentParsingAsyncItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrcustomDocumentParsingAsyncModelAmazon
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof OcrcustomDocumentParsingAsyncModelAmazon
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof OcrcustomDocumentParsingAsyncModelAmazon
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof OcrcustomDocumentParsingAsyncModelAmazon
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface OcrdataExtractionDataExtractionRequest
 */
export interface OcrdataExtractionDataExtractionRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof OcrdataExtractionDataExtractionRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof OcrdataExtractionDataExtractionRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof OcrdataExtractionDataExtractionRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof OcrdataExtractionDataExtractionRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof OcrdataExtractionDataExtractionRequest
     */
    'show_original_response'?: boolean;
    /**
     * File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
     * @type {File}
     * @memberof OcrdataExtractionDataExtractionRequest
     */
    'file'?: File;
    /**
     * File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @type {string}
     * @memberof OcrdataExtractionDataExtractionRequest
     */
    'file_url'?: string | null;
}
/**
 * 
 * @export
 * @interface OcrdataExtractionResponseModel
 */
export interface OcrdataExtractionResponseModel {
    /**
     * 
     * @type {OcrdataExtractionResponseModelBase64}
     * @memberof OcrdataExtractionResponseModel
     */
    'base64'?: OcrdataExtractionResponseModelBase64;
    /**
     * 
     * @type {OcrdataExtractionResponseModelAmazon}
     * @memberof OcrdataExtractionResponseModel
     */
    'amazon'?: OcrdataExtractionResponseModelAmazon;
}
/**
 * 
 * @export
 * @interface OcrdataExtractionResponseModelAmazon
 */
export interface OcrdataExtractionResponseModelAmazon {
    /**
     * 
     * @type {Array<ItemDataExtraction>}
     * @memberof OcrdataExtractionResponseModelAmazon
     */
    'fields'?: Array<ItemDataExtraction>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrdataExtractionResponseModelAmazon
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrdataExtractionResponseModelAmazon
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrdataExtractionResponseModelBase64
 */
export interface OcrdataExtractionResponseModelBase64 {
    /**
     * 
     * @type {Array<ItemDataExtraction>}
     * @memberof OcrdataExtractionResponseModelBase64
     */
    'fields'?: Array<ItemDataExtraction>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrdataExtractionResponseModelBase64
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrdataExtractionResponseModelBase64
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcridentityParserIdentityParserRequest
 */
export interface OcridentityParserIdentityParserRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof OcridentityParserIdentityParserRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof OcridentityParserIdentityParserRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof OcridentityParserIdentityParserRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof OcridentityParserIdentityParserRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof OcridentityParserIdentityParserRequest
     */
    'show_original_response'?: boolean;
    /**
     * File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
     * @type {File}
     * @memberof OcridentityParserIdentityParserRequest
     */
    'file'?: File;
    /**
     * File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @type {string}
     * @memberof OcridentityParserIdentityParserRequest
     */
    'file_url'?: string | null;
}
/**
 * 
 * @export
 * @interface OcridentityParserResponseModel
 */
export interface OcridentityParserResponseModel {
    /**
     * 
     * @type {OcridentityParserResponseModelMindee}
     * @memberof OcridentityParserResponseModel
     */
    'mindee'?: OcridentityParserResponseModelMindee;
    /**
     * 
     * @type {OcridentityParserResponseModelBase64}
     * @memberof OcridentityParserResponseModel
     */
    'base64'?: OcridentityParserResponseModelBase64;
    /**
     * 
     * @type {OcridentityParserResponseModelMicrosoft}
     * @memberof OcridentityParserResponseModel
     */
    'microsoft'?: OcridentityParserResponseModelMicrosoft;
    /**
     * 
     * @type {OcridentityParserResponseModelKlippa}
     * @memberof OcridentityParserResponseModel
     */
    'klippa'?: OcridentityParserResponseModelKlippa;
    /**
     * 
     * @type {OcridentityParserResponseModelAmazon}
     * @memberof OcridentityParserResponseModel
     */
    'amazon'?: OcridentityParserResponseModelAmazon;
    /**
     * 
     * @type {OcridentityParserResponseModelEdenAi}
     * @memberof OcridentityParserResponseModel
     */
    'eden-ai'?: OcridentityParserResponseModelEdenAi;
}
/**
 * 
 * @export
 * @interface OcridentityParserResponseModelAmazon
 */
export interface OcridentityParserResponseModelAmazon {
    /**
     * 
     * @type {Array<InfosIdentityParserDataClass>}
     * @memberof OcridentityParserResponseModelAmazon
     */
    'extracted_data'?: Array<InfosIdentityParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcridentityParserResponseModelAmazon
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcridentityParserResponseModelAmazon
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcridentityParserResponseModelBase64
 */
export interface OcridentityParserResponseModelBase64 {
    /**
     * 
     * @type {Array<InfosIdentityParserDataClass>}
     * @memberof OcridentityParserResponseModelBase64
     */
    'extracted_data'?: Array<InfosIdentityParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcridentityParserResponseModelBase64
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcridentityParserResponseModelBase64
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcridentityParserResponseModelEdenAi
 */
export interface OcridentityParserResponseModelEdenAi {
    /**
     * 
     * @type {Array<InfosIdentityParserDataClass>}
     * @memberof OcridentityParserResponseModelEdenAi
     */
    'extracted_data'?: Array<InfosIdentityParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcridentityParserResponseModelEdenAi
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcridentityParserResponseModelEdenAi
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcridentityParserResponseModelKlippa
 */
export interface OcridentityParserResponseModelKlippa {
    /**
     * 
     * @type {Array<InfosIdentityParserDataClass>}
     * @memberof OcridentityParserResponseModelKlippa
     */
    'extracted_data'?: Array<InfosIdentityParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcridentityParserResponseModelKlippa
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcridentityParserResponseModelKlippa
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcridentityParserResponseModelMicrosoft
 */
export interface OcridentityParserResponseModelMicrosoft {
    /**
     * 
     * @type {Array<InfosIdentityParserDataClass>}
     * @memberof OcridentityParserResponseModelMicrosoft
     */
    'extracted_data'?: Array<InfosIdentityParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcridentityParserResponseModelMicrosoft
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcridentityParserResponseModelMicrosoft
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcridentityParserResponseModelMindee
 */
export interface OcridentityParserResponseModelMindee {
    /**
     * 
     * @type {Array<InfosIdentityParserDataClass>}
     * @memberof OcridentityParserResponseModelMindee
     */
    'extracted_data'?: Array<InfosIdentityParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcridentityParserResponseModelMindee
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcridentityParserResponseModelMindee
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrinvoiceParserInvoiceParserRequest
 */
export interface OcrinvoiceParserInvoiceParserRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof OcrinvoiceParserInvoiceParserRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof OcrinvoiceParserInvoiceParserRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof OcrinvoiceParserInvoiceParserRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof OcrinvoiceParserInvoiceParserRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof OcrinvoiceParserInvoiceParserRequest
     */
    'show_original_response'?: boolean;
    /**
     * File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
     * @type {File}
     * @memberof OcrinvoiceParserInvoiceParserRequest
     */
    'file'?: File;
    /**
     * File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @type {string}
     * @memberof OcrinvoiceParserInvoiceParserRequest
     */
    'file_url'?: string | null;
    /**
     * Language code of the language the document is written in (ex: fr (French), en (English), es (Spanish))
     * @type {string}
     * @memberof OcrinvoiceParserInvoiceParserRequest
     */
    'language'?: string | null;
}
/**
 * 
 * @export
 * @interface OcrinvoiceParserResponseModel
 */
export interface OcrinvoiceParserResponseModel {
    /**
     * 
     * @type {OcrinvoiceParserResponseModelAffinda}
     * @memberof OcrinvoiceParserResponseModel
     */
    'affinda'?: OcrinvoiceParserResponseModelAffinda;
    /**
     * 
     * @type {OcrinvoiceParserResponseModelVeryfi}
     * @memberof OcrinvoiceParserResponseModel
     */
    'veryfi'?: OcrinvoiceParserResponseModelVeryfi;
    /**
     * 
     * @type {OcrinvoiceParserResponseModelBase64}
     * @memberof OcrinvoiceParserResponseModel
     */
    'base64'?: OcrinvoiceParserResponseModelBase64;
    /**
     * 
     * @type {OcrinvoiceParserResponseModelMindee}
     * @memberof OcrinvoiceParserResponseModel
     */
    'mindee'?: OcrinvoiceParserResponseModelMindee;
    /**
     * 
     * @type {OcrinvoiceParserResponseModelRossum}
     * @memberof OcrinvoiceParserResponseModel
     */
    'rossum'?: OcrinvoiceParserResponseModelRossum;
    /**
     * 
     * @type {OcrinvoiceParserResponseModelMicrosoft}
     * @memberof OcrinvoiceParserResponseModel
     */
    'microsoft'?: OcrinvoiceParserResponseModelMicrosoft;
    /**
     * 
     * @type {OcrinvoiceParserResponseModelDataleon}
     * @memberof OcrinvoiceParserResponseModel
     */
    'dataleon'?: OcrinvoiceParserResponseModelDataleon;
    /**
     * 
     * @type {OcrinvoiceParserResponseModelGoogle}
     * @memberof OcrinvoiceParserResponseModel
     */
    'google'?: OcrinvoiceParserResponseModelGoogle;
    /**
     * 
     * @type {OcrinvoiceParserResponseModelKlippa}
     * @memberof OcrinvoiceParserResponseModel
     */
    'klippa'?: OcrinvoiceParserResponseModelKlippa;
    /**
     * 
     * @type {OcrinvoiceParserResponseModelAmazon}
     * @memberof OcrinvoiceParserResponseModel
     */
    'amazon'?: OcrinvoiceParserResponseModelAmazon;
    /**
     * 
     * @type {OcrinvoiceParserResponseModelEdenAi}
     * @memberof OcrinvoiceParserResponseModel
     */
    'eden-ai'?: OcrinvoiceParserResponseModelEdenAi;
}
/**
 * 
 * @export
 * @interface OcrinvoiceParserResponseModelAffinda
 */
export interface OcrinvoiceParserResponseModelAffinda {
    /**
     * 
     * @type {Array<InfosInvoiceParserDataClass>}
     * @memberof OcrinvoiceParserResponseModelAffinda
     */
    'extracted_data'?: Array<InfosInvoiceParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrinvoiceParserResponseModelAffinda
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrinvoiceParserResponseModelAffinda
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrinvoiceParserResponseModelAmazon
 */
export interface OcrinvoiceParserResponseModelAmazon {
    /**
     * 
     * @type {Array<InfosInvoiceParserDataClass>}
     * @memberof OcrinvoiceParserResponseModelAmazon
     */
    'extracted_data'?: Array<InfosInvoiceParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrinvoiceParserResponseModelAmazon
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrinvoiceParserResponseModelAmazon
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrinvoiceParserResponseModelBase64
 */
export interface OcrinvoiceParserResponseModelBase64 {
    /**
     * 
     * @type {Array<InfosInvoiceParserDataClass>}
     * @memberof OcrinvoiceParserResponseModelBase64
     */
    'extracted_data'?: Array<InfosInvoiceParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrinvoiceParserResponseModelBase64
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrinvoiceParserResponseModelBase64
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrinvoiceParserResponseModelDataleon
 */
export interface OcrinvoiceParserResponseModelDataleon {
    /**
     * 
     * @type {Array<InfosInvoiceParserDataClass>}
     * @memberof OcrinvoiceParserResponseModelDataleon
     */
    'extracted_data'?: Array<InfosInvoiceParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrinvoiceParserResponseModelDataleon
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrinvoiceParserResponseModelDataleon
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrinvoiceParserResponseModelEdenAi
 */
export interface OcrinvoiceParserResponseModelEdenAi {
    /**
     * 
     * @type {Array<InfosInvoiceParserDataClass>}
     * @memberof OcrinvoiceParserResponseModelEdenAi
     */
    'extracted_data'?: Array<InfosInvoiceParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrinvoiceParserResponseModelEdenAi
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrinvoiceParserResponseModelEdenAi
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrinvoiceParserResponseModelGoogle
 */
export interface OcrinvoiceParserResponseModelGoogle {
    /**
     * 
     * @type {Array<InfosInvoiceParserDataClass>}
     * @memberof OcrinvoiceParserResponseModelGoogle
     */
    'extracted_data'?: Array<InfosInvoiceParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrinvoiceParserResponseModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrinvoiceParserResponseModelGoogle
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrinvoiceParserResponseModelKlippa
 */
export interface OcrinvoiceParserResponseModelKlippa {
    /**
     * 
     * @type {Array<InfosInvoiceParserDataClass>}
     * @memberof OcrinvoiceParserResponseModelKlippa
     */
    'extracted_data'?: Array<InfosInvoiceParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrinvoiceParserResponseModelKlippa
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrinvoiceParserResponseModelKlippa
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrinvoiceParserResponseModelMicrosoft
 */
export interface OcrinvoiceParserResponseModelMicrosoft {
    /**
     * 
     * @type {Array<InfosInvoiceParserDataClass>}
     * @memberof OcrinvoiceParserResponseModelMicrosoft
     */
    'extracted_data'?: Array<InfosInvoiceParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrinvoiceParserResponseModelMicrosoft
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrinvoiceParserResponseModelMicrosoft
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrinvoiceParserResponseModelMindee
 */
export interface OcrinvoiceParserResponseModelMindee {
    /**
     * 
     * @type {Array<InfosInvoiceParserDataClass>}
     * @memberof OcrinvoiceParserResponseModelMindee
     */
    'extracted_data'?: Array<InfosInvoiceParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrinvoiceParserResponseModelMindee
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrinvoiceParserResponseModelMindee
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrinvoiceParserResponseModelRossum
 */
export interface OcrinvoiceParserResponseModelRossum {
    /**
     * 
     * @type {Array<InfosInvoiceParserDataClass>}
     * @memberof OcrinvoiceParserResponseModelRossum
     */
    'extracted_data'?: Array<InfosInvoiceParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrinvoiceParserResponseModelRossum
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrinvoiceParserResponseModelRossum
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrinvoiceParserResponseModelVeryfi
 */
export interface OcrinvoiceParserResponseModelVeryfi {
    /**
     * 
     * @type {Array<InfosInvoiceParserDataClass>}
     * @memberof OcrinvoiceParserResponseModelVeryfi
     */
    'extracted_data'?: Array<InfosInvoiceParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrinvoiceParserResponseModelVeryfi
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrinvoiceParserResponseModelVeryfi
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrocrAsyncModel
 */
export interface OcrocrAsyncModel {
    /**
     * 
     * @type {OcrocrAsyncModelOneai}
     * @memberof OcrocrAsyncModel
     */
    'oneai'?: OcrocrAsyncModelOneai;
    /**
     * 
     * @type {OcrocrAsyncModelGoogle}
     * @memberof OcrocrAsyncModel
     */
    'google'?: OcrocrAsyncModelGoogle;
    /**
     * 
     * @type {OcrocrAsyncModelAmazon}
     * @memberof OcrocrAsyncModel
     */
    'amazon'?: OcrocrAsyncModelAmazon;
}
/**
 * 
 * @export
 * @interface OcrocrAsyncModelAmazon
 */
export interface OcrocrAsyncModelAmazon {
    /**
     * 
     * @type {string}
     * @memberof OcrocrAsyncModelAmazon
     */
    'raw_text': string;
    /**
     * List of pages
     * @type {Array<Page>}
     * @memberof OcrocrAsyncModelAmazon
     */
    'pages'?: Array<Page>;
    /**
     * Number of pages in the document
     * @type {number}
     * @memberof OcrocrAsyncModelAmazon
     */
    'number_of_pages': number;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrocrAsyncModelAmazon
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof OcrocrAsyncModelAmazon
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof OcrocrAsyncModelAmazon
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof OcrocrAsyncModelAmazon
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface OcrocrAsyncModelGoogle
 */
export interface OcrocrAsyncModelGoogle {
    /**
     * 
     * @type {string}
     * @memberof OcrocrAsyncModelGoogle
     */
    'raw_text': string;
    /**
     * List of pages
     * @type {Array<Page>}
     * @memberof OcrocrAsyncModelGoogle
     */
    'pages'?: Array<Page>;
    /**
     * Number of pages in the document
     * @type {number}
     * @memberof OcrocrAsyncModelGoogle
     */
    'number_of_pages': number;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrocrAsyncModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof OcrocrAsyncModelGoogle
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof OcrocrAsyncModelGoogle
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof OcrocrAsyncModelGoogle
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface OcrocrAsyncModelOneai
 */
export interface OcrocrAsyncModelOneai {
    /**
     * 
     * @type {string}
     * @memberof OcrocrAsyncModelOneai
     */
    'raw_text': string;
    /**
     * List of pages
     * @type {Array<Page>}
     * @memberof OcrocrAsyncModelOneai
     */
    'pages'?: Array<Page>;
    /**
     * Number of pages in the document
     * @type {number}
     * @memberof OcrocrAsyncModelOneai
     */
    'number_of_pages': number;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrocrAsyncModelOneai
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof OcrocrAsyncModelOneai
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof OcrocrAsyncModelOneai
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof OcrocrAsyncModelOneai
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface OcrocrOcrRequest
 */
export interface OcrocrOcrRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof OcrocrOcrRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof OcrocrOcrRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof OcrocrOcrRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof OcrocrOcrRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof OcrocrOcrRequest
     */
    'show_original_response'?: boolean;
    /**
     * File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
     * @type {File}
     * @memberof OcrocrOcrRequest
     */
    'file'?: File;
    /**
     * File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @type {string}
     * @memberof OcrocrOcrRequest
     */
    'file_url'?: string | null;
    /**
     * Language code of the language the document is written in (ex: fr (French), en (English), es (Spanish))
     * @type {string}
     * @memberof OcrocrOcrRequest
     */
    'language'?: string | null;
}
/**
 * 
 * @export
 * @interface OcrocrResponseModel
 */
export interface OcrocrResponseModel {
    /**
     * 
     * @type {OcrocrResponseModelClarifai}
     * @memberof OcrocrResponseModel
     */
    'clarifai'?: OcrocrResponseModelClarifai;
    /**
     * 
     * @type {OcrocrResponseModelBase64}
     * @memberof OcrocrResponseModel
     */
    'base64'?: OcrocrResponseModelBase64;
    /**
     * 
     * @type {OcrocrResponseModelMicrosoft}
     * @memberof OcrocrResponseModel
     */
    'microsoft'?: OcrocrResponseModelMicrosoft;
    /**
     * 
     * @type {OcrocrResponseModelApi4ai}
     * @memberof OcrocrResponseModel
     */
    'api4ai'?: OcrocrResponseModelApi4ai;
    /**
     * 
     * @type {OcrocrResponseModelGoogle}
     * @memberof OcrocrResponseModel
     */
    'google'?: OcrocrResponseModelGoogle;
    /**
     * 
     * @type {OcrocrResponseModelSentisight}
     * @memberof OcrocrResponseModel
     */
    'sentisight'?: OcrocrResponseModelSentisight;
    /**
     * 
     * @type {OcrocrResponseModelAmazon}
     * @memberof OcrocrResponseModel
     */
    'amazon'?: OcrocrResponseModelAmazon;
}
/**
 * 
 * @export
 * @interface OcrocrResponseModelAmazon
 */
export interface OcrocrResponseModelAmazon {
    /**
     * 
     * @type {string}
     * @memberof OcrocrResponseModelAmazon
     */
    'text': string;
    /**
     * 
     * @type {Array<BoundingBox>}
     * @memberof OcrocrResponseModelAmazon
     */
    'bounding_boxes'?: Array<BoundingBox>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrocrResponseModelAmazon
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrocrResponseModelAmazon
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrocrResponseModelApi4ai
 */
export interface OcrocrResponseModelApi4ai {
    /**
     * 
     * @type {string}
     * @memberof OcrocrResponseModelApi4ai
     */
    'text': string;
    /**
     * 
     * @type {Array<BoundingBox>}
     * @memberof OcrocrResponseModelApi4ai
     */
    'bounding_boxes'?: Array<BoundingBox>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrocrResponseModelApi4ai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrocrResponseModelApi4ai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrocrResponseModelBase64
 */
export interface OcrocrResponseModelBase64 {
    /**
     * 
     * @type {string}
     * @memberof OcrocrResponseModelBase64
     */
    'text': string;
    /**
     * 
     * @type {Array<BoundingBox>}
     * @memberof OcrocrResponseModelBase64
     */
    'bounding_boxes'?: Array<BoundingBox>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrocrResponseModelBase64
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrocrResponseModelBase64
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrocrResponseModelClarifai
 */
export interface OcrocrResponseModelClarifai {
    /**
     * 
     * @type {string}
     * @memberof OcrocrResponseModelClarifai
     */
    'text': string;
    /**
     * 
     * @type {Array<BoundingBox>}
     * @memberof OcrocrResponseModelClarifai
     */
    'bounding_boxes'?: Array<BoundingBox>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrocrResponseModelClarifai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrocrResponseModelClarifai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrocrResponseModelGoogle
 */
export interface OcrocrResponseModelGoogle {
    /**
     * 
     * @type {string}
     * @memberof OcrocrResponseModelGoogle
     */
    'text': string;
    /**
     * 
     * @type {Array<BoundingBox>}
     * @memberof OcrocrResponseModelGoogle
     */
    'bounding_boxes'?: Array<BoundingBox>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrocrResponseModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrocrResponseModelGoogle
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrocrResponseModelMicrosoft
 */
export interface OcrocrResponseModelMicrosoft {
    /**
     * 
     * @type {string}
     * @memberof OcrocrResponseModelMicrosoft
     */
    'text': string;
    /**
     * 
     * @type {Array<BoundingBox>}
     * @memberof OcrocrResponseModelMicrosoft
     */
    'bounding_boxes'?: Array<BoundingBox>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrocrResponseModelMicrosoft
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrocrResponseModelMicrosoft
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrocrResponseModelSentisight
 */
export interface OcrocrResponseModelSentisight {
    /**
     * 
     * @type {string}
     * @memberof OcrocrResponseModelSentisight
     */
    'text': string;
    /**
     * 
     * @type {Array<BoundingBox>}
     * @memberof OcrocrResponseModelSentisight
     */
    'bounding_boxes'?: Array<BoundingBox>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrocrResponseModelSentisight
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrocrResponseModelSentisight
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrocrTablesAsyncModel
 */
export interface OcrocrTablesAsyncModel {
    /**
     * 
     * @type {OcrocrTablesAsyncModelGoogle}
     * @memberof OcrocrTablesAsyncModel
     */
    'google'?: OcrocrTablesAsyncModelGoogle;
    /**
     * 
     * @type {OcrocrTablesAsyncModelMicrosoft}
     * @memberof OcrocrTablesAsyncModel
     */
    'microsoft'?: OcrocrTablesAsyncModelMicrosoft;
    /**
     * 
     * @type {OcrocrTablesAsyncModelAmazon}
     * @memberof OcrocrTablesAsyncModel
     */
    'amazon'?: OcrocrTablesAsyncModelAmazon;
}
/**
 * 
 * @export
 * @interface OcrocrTablesAsyncModelAmazon
 */
export interface OcrocrTablesAsyncModelAmazon {
    /**
     * 
     * @type {Array<Page>}
     * @memberof OcrocrTablesAsyncModelAmazon
     */
    'pages'?: Array<Page>;
    /**
     * 
     * @type {number}
     * @memberof OcrocrTablesAsyncModelAmazon
     */
    'num_pages': number;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrocrTablesAsyncModelAmazon
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof OcrocrTablesAsyncModelAmazon
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof OcrocrTablesAsyncModelAmazon
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof OcrocrTablesAsyncModelAmazon
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface OcrocrTablesAsyncModelGoogle
 */
export interface OcrocrTablesAsyncModelGoogle {
    /**
     * 
     * @type {Array<Page>}
     * @memberof OcrocrTablesAsyncModelGoogle
     */
    'pages'?: Array<Page>;
    /**
     * 
     * @type {number}
     * @memberof OcrocrTablesAsyncModelGoogle
     */
    'num_pages': number;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrocrTablesAsyncModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof OcrocrTablesAsyncModelGoogle
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof OcrocrTablesAsyncModelGoogle
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof OcrocrTablesAsyncModelGoogle
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface OcrocrTablesAsyncModelMicrosoft
 */
export interface OcrocrTablesAsyncModelMicrosoft {
    /**
     * 
     * @type {Array<Page>}
     * @memberof OcrocrTablesAsyncModelMicrosoft
     */
    'pages'?: Array<Page>;
    /**
     * 
     * @type {number}
     * @memberof OcrocrTablesAsyncModelMicrosoft
     */
    'num_pages': number;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrocrTablesAsyncModelMicrosoft
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof OcrocrTablesAsyncModelMicrosoft
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof OcrocrTablesAsyncModelMicrosoft
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof OcrocrTablesAsyncModelMicrosoft
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface OcrreceiptParserReceiptParserRequest
 */
export interface OcrreceiptParserReceiptParserRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof OcrreceiptParserReceiptParserRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof OcrreceiptParserReceiptParserRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof OcrreceiptParserReceiptParserRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof OcrreceiptParserReceiptParserRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof OcrreceiptParserReceiptParserRequest
     */
    'show_original_response'?: boolean;
    /**
     * File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
     * @type {File}
     * @memberof OcrreceiptParserReceiptParserRequest
     */
    'file'?: File;
    /**
     * File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @type {string}
     * @memberof OcrreceiptParserReceiptParserRequest
     */
    'file_url'?: string | null;
    /**
     * Language code of the language the document is written in (ex: fr (French), en (English), es (Spanish))
     * @type {string}
     * @memberof OcrreceiptParserReceiptParserRequest
     */
    'language'?: string | null;
}
/**
 * 
 * @export
 * @interface OcrreceiptParserResponseModel
 */
export interface OcrreceiptParserResponseModel {
    /**
     * 
     * @type {OcrreceiptParserResponseModelVeryfi}
     * @memberof OcrreceiptParserResponseModel
     */
    'veryfi'?: OcrreceiptParserResponseModelVeryfi;
    /**
     * 
     * @type {OcrreceiptParserResponseModelBase64}
     * @memberof OcrreceiptParserResponseModel
     */
    'base64'?: OcrreceiptParserResponseModelBase64;
    /**
     * 
     * @type {OcrreceiptParserResponseModelMindee}
     * @memberof OcrreceiptParserResponseModel
     */
    'mindee'?: OcrreceiptParserResponseModelMindee;
    /**
     * 
     * @type {OcrreceiptParserResponseModelMicrosoft}
     * @memberof OcrreceiptParserResponseModel
     */
    'microsoft'?: OcrreceiptParserResponseModelMicrosoft;
    /**
     * 
     * @type {OcrreceiptParserResponseModelTabscanner}
     * @memberof OcrreceiptParserResponseModel
     */
    'tabscanner'?: OcrreceiptParserResponseModelTabscanner;
    /**
     * 
     * @type {OcrreceiptParserResponseModelDataleon}
     * @memberof OcrreceiptParserResponseModel
     */
    'dataleon'?: OcrreceiptParserResponseModelDataleon;
    /**
     * 
     * @type {OcrreceiptParserResponseModelGoogle}
     * @memberof OcrreceiptParserResponseModel
     */
    'google'?: OcrreceiptParserResponseModelGoogle;
    /**
     * 
     * @type {OcrreceiptParserResponseModelKlippa}
     * @memberof OcrreceiptParserResponseModel
     */
    'klippa'?: OcrreceiptParserResponseModelKlippa;
    /**
     * 
     * @type {OcrreceiptParserResponseModelAmazon}
     * @memberof OcrreceiptParserResponseModel
     */
    'amazon'?: OcrreceiptParserResponseModelAmazon;
    /**
     * 
     * @type {OcrreceiptParserResponseModelEdenAi}
     * @memberof OcrreceiptParserResponseModel
     */
    'eden-ai'?: OcrreceiptParserResponseModelEdenAi;
}
/**
 * 
 * @export
 * @interface OcrreceiptParserResponseModelAmazon
 */
export interface OcrreceiptParserResponseModelAmazon {
    /**
     * 
     * @type {Array<InfosReceiptParserDataClass>}
     * @memberof OcrreceiptParserResponseModelAmazon
     */
    'extracted_data'?: Array<InfosReceiptParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrreceiptParserResponseModelAmazon
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrreceiptParserResponseModelAmazon
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrreceiptParserResponseModelBase64
 */
export interface OcrreceiptParserResponseModelBase64 {
    /**
     * 
     * @type {Array<InfosReceiptParserDataClass>}
     * @memberof OcrreceiptParserResponseModelBase64
     */
    'extracted_data'?: Array<InfosReceiptParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrreceiptParserResponseModelBase64
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrreceiptParserResponseModelBase64
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrreceiptParserResponseModelDataleon
 */
export interface OcrreceiptParserResponseModelDataleon {
    /**
     * 
     * @type {Array<InfosReceiptParserDataClass>}
     * @memberof OcrreceiptParserResponseModelDataleon
     */
    'extracted_data'?: Array<InfosReceiptParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrreceiptParserResponseModelDataleon
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrreceiptParserResponseModelDataleon
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrreceiptParserResponseModelEdenAi
 */
export interface OcrreceiptParserResponseModelEdenAi {
    /**
     * 
     * @type {Array<InfosReceiptParserDataClass>}
     * @memberof OcrreceiptParserResponseModelEdenAi
     */
    'extracted_data'?: Array<InfosReceiptParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrreceiptParserResponseModelEdenAi
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrreceiptParserResponseModelEdenAi
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrreceiptParserResponseModelGoogle
 */
export interface OcrreceiptParserResponseModelGoogle {
    /**
     * 
     * @type {Array<InfosReceiptParserDataClass>}
     * @memberof OcrreceiptParserResponseModelGoogle
     */
    'extracted_data'?: Array<InfosReceiptParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrreceiptParserResponseModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrreceiptParserResponseModelGoogle
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrreceiptParserResponseModelKlippa
 */
export interface OcrreceiptParserResponseModelKlippa {
    /**
     * 
     * @type {Array<InfosReceiptParserDataClass>}
     * @memberof OcrreceiptParserResponseModelKlippa
     */
    'extracted_data'?: Array<InfosReceiptParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrreceiptParserResponseModelKlippa
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrreceiptParserResponseModelKlippa
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrreceiptParserResponseModelMicrosoft
 */
export interface OcrreceiptParserResponseModelMicrosoft {
    /**
     * 
     * @type {Array<InfosReceiptParserDataClass>}
     * @memberof OcrreceiptParserResponseModelMicrosoft
     */
    'extracted_data'?: Array<InfosReceiptParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrreceiptParserResponseModelMicrosoft
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrreceiptParserResponseModelMicrosoft
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrreceiptParserResponseModelMindee
 */
export interface OcrreceiptParserResponseModelMindee {
    /**
     * 
     * @type {Array<InfosReceiptParserDataClass>}
     * @memberof OcrreceiptParserResponseModelMindee
     */
    'extracted_data'?: Array<InfosReceiptParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrreceiptParserResponseModelMindee
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrreceiptParserResponseModelMindee
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrreceiptParserResponseModelTabscanner
 */
export interface OcrreceiptParserResponseModelTabscanner {
    /**
     * 
     * @type {Array<InfosReceiptParserDataClass>}
     * @memberof OcrreceiptParserResponseModelTabscanner
     */
    'extracted_data'?: Array<InfosReceiptParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrreceiptParserResponseModelTabscanner
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrreceiptParserResponseModelTabscanner
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrreceiptParserResponseModelVeryfi
 */
export interface OcrreceiptParserResponseModelVeryfi {
    /**
     * 
     * @type {Array<InfosReceiptParserDataClass>}
     * @memberof OcrreceiptParserResponseModelVeryfi
     */
    'extracted_data'?: Array<InfosReceiptParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrreceiptParserResponseModelVeryfi
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrreceiptParserResponseModelVeryfi
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrresumeParserResponseModel
 */
export interface OcrresumeParserResponseModel {
    /**
     * 
     * @type {OcrresumeParserResponseModelAffinda}
     * @memberof OcrresumeParserResponseModel
     */
    'affinda'?: OcrresumeParserResponseModelAffinda;
    /**
     * 
     * @type {OcrresumeParserResponseModelHireability}
     * @memberof OcrresumeParserResponseModel
     */
    'hireability'?: OcrresumeParserResponseModelHireability;
    /**
     * 
     * @type {OcrresumeParserResponseModelEdenAi}
     * @memberof OcrresumeParserResponseModel
     */
    'eden-ai'?: OcrresumeParserResponseModelEdenAi;
}
/**
 * 
 * @export
 * @interface OcrresumeParserResponseModelAffinda
 */
export interface OcrresumeParserResponseModelAffinda {
    /**
     * 
     * @type {ResumeExtractedData}
     * @memberof OcrresumeParserResponseModelAffinda
     */
    'extracted_data': ResumeExtractedData;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrresumeParserResponseModelAffinda
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrresumeParserResponseModelAffinda
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrresumeParserResponseModelEdenAi
 */
export interface OcrresumeParserResponseModelEdenAi {
    /**
     * 
     * @type {ResumeExtractedData}
     * @memberof OcrresumeParserResponseModelEdenAi
     */
    'extracted_data': ResumeExtractedData;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrresumeParserResponseModelEdenAi
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrresumeParserResponseModelEdenAi
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrresumeParserResponseModelHireability
 */
export interface OcrresumeParserResponseModelHireability {
    /**
     * 
     * @type {ResumeExtractedData}
     * @memberof OcrresumeParserResponseModelHireability
     */
    'extracted_data': ResumeExtractedData;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof OcrresumeParserResponseModelHireability
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof OcrresumeParserResponseModelHireability
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface OcrresumeParserResumeParserRequest
 */
export interface OcrresumeParserResumeParserRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof OcrresumeParserResumeParserRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof OcrresumeParserResumeParserRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof OcrresumeParserResumeParserRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof OcrresumeParserResumeParserRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof OcrresumeParserResumeParserRequest
     */
    'show_original_response'?: boolean;
    /**
     * File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
     * @type {File}
     * @memberof OcrresumeParserResumeParserRequest
     */
    'file'?: File;
    /**
     * File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @type {string}
     * @memberof OcrresumeParserResumeParserRequest
     */
    'file_url'?: string | null;
}
/**
 * * `FEMALE` - Female * `MALE` - Male
 * @export
 * @enum {string}
 */

export const OptionEnum = {
    Female: 'FEMALE',
    Male: 'MALE'
} as const;

export type OptionEnum = typeof OptionEnum[keyof typeof OptionEnum];


/**
 * 
 * @export
 * @enum {string}
 */

export const OrganizationSubCategoryType = {
    CompanyName: 'CompanyName',
    CompanyNumber: 'CompanyNumber',
    BuisnessNumber: 'BuisnessNumber'
} as const;

export type OrganizationSubCategoryType = typeof OrganizationSubCategoryType[keyof typeof OrganizationSubCategoryType];


/**
 * 
 * @export
 * @enum {string}
 */

export const OtherSubCategoryType = {
    Other: 'Other',
    Anonymized: 'Anonymized',
    Nerd: 'Nerd',
    Wsd: 'Wsd',
    Unknown: 'Unknown'
} as const;

export type OtherSubCategoryType = typeof OtherSubCategoryType[keyof typeof OtherSubCategoryType];


/**
 * Page of a document      Attributes:         lines (Sequence[Line]): List of lines of the page     
 * @export
 * @interface Page
 */
export interface Page {
    /**
     * List of lines
     * @type {Array<Line>}
     * @memberof Page
     */
    'lines'?: Array<Line>;
}
/**
 * 
 * @export
 * @interface PaginatedBatchResponse
 */
export interface PaginatedBatchResponse {
    /**
     * Total requests made
     * @type {number}
     * @memberof PaginatedBatchResponse
     */
    'total': number;
    /**
     * Current page number
     * @type {number}
     * @memberof PaginatedBatchResponse
     */
    'current_page': number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedBatchResponse
     */
    'last_page': number;
    /**
     * Number of requests per page
     * @type {number}
     * @memberof PaginatedBatchResponse
     */
    'per_page': number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedBatchResponse
     */
    'From': number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedBatchResponse
     */
    'to': number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedBatchResponse
     */
    'prev_page_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedBatchResponse
     */
    'next_page_url'?: string;
    /**
     * 
     * @type {Array<BatchResponseRequest>}
     * @memberof PaginatedBatchResponse
     */
    'requests': Array<BatchResponseRequest>;
    /**
     * 
     * @type {StatusE80Enum}
     * @memberof PaginatedBatchResponse
     */
    'status'?: StatusE80Enum;
    /**
     * 
     * @type {string}
     * @memberof PaginatedBatchResponse
     */
    'created': string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedBatchResponse
     */
    'updated': string;
}


/**
 * 
 * @export
 * @interface PaymentInformation
 */
export interface PaymentInformation {
    /**
     * 
     * @type {string}
     * @memberof PaymentInformation
     */
    'card_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentInformation
     */
    'card_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentInformation
     */
    'cash'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentInformation
     */
    'tip'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentInformation
     */
    'discount'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentInformation
     */
    'change'?: string;
}
/**
 * 
 * @export
 * @interface PersonAttributes
 */
export interface PersonAttributes {
    /**
     * 
     * @type {Array<UpperCloth>}
     * @memberof PersonAttributes
     */
    'upper_cloths'?: Array<UpperCloth>;
    /**
     * 
     * @type {Array<LowerCloth>}
     * @memberof PersonAttributes
     */
    'lower_cloths'?: Array<LowerCloth>;
}
/**
 * 
 * @export
 * @interface PersonLandmarks
 */
export interface PersonLandmarks {
    /**
     * 
     * @type {Array<number>}
     * @memberof PersonLandmarks
     */
    'eye_left'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PersonLandmarks
     */
    'eye_right'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PersonLandmarks
     */
    'nose'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PersonLandmarks
     */
    'ear_left'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PersonLandmarks
     */
    'ear_right'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PersonLandmarks
     */
    'shoulder_left'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PersonLandmarks
     */
    'shoulder_right'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PersonLandmarks
     */
    'elbow_left'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PersonLandmarks
     */
    'elbow_right'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PersonLandmarks
     */
    'wrist_left'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PersonLandmarks
     */
    'wrist_right'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PersonLandmarks
     */
    'hip_left'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PersonLandmarks
     */
    'hip_right'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PersonLandmarks
     */
    'knee_left'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PersonLandmarks
     */
    'knee_right'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PersonLandmarks
     */
    'ankle_left'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PersonLandmarks
     */
    'ankle_right'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PersonLandmarks
     */
    'mouth_left'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PersonLandmarks
     */
    'mouth_right'?: Array<number>;
}
/**
 * 
 * @export
 * @interface PersonTracking
 */
export interface PersonTracking {
    /**
     * 
     * @type {number}
     * @memberof PersonTracking
     */
    'offset': number;
    /**
     * 
     * @type {PersonAttributes}
     * @memberof PersonTracking
     */
    'attributes'?: PersonAttributes;
    /**
     * 
     * @type {PersonLandmarks}
     * @memberof PersonTracking
     */
    'landmarks'?: PersonLandmarks;
    /**
     * 
     * @type {VideoPersonPoses}
     * @memberof PersonTracking
     */
    'poses'?: VideoPersonPoses;
    /**
     * 
     * @type {VideoPersonQuality}
     * @memberof PersonTracking
     */
    'quality'?: VideoPersonQuality;
    /**
     * 
     * @type {VideoTrackingBoundingBox}
     * @memberof PersonTracking
     */
    'bounding_box': VideoTrackingBoundingBox;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const PersonalInformationSubCategoryType = {
    Name: 'Name',
    Age: 'Age',
    Email: 'Email',
    Phone: 'Phone',
    PersonType: 'PersonType'
} as const;

export type PersonalInformationSubCategoryType = typeof PersonalInformationSubCategoryType[keyof typeof PersonalInformationSubCategoryType];


/**
 * 
 * @export
 * @interface PlagiaDetectionCandidate
 */
export interface PlagiaDetectionCandidate {
    /**
     * 
     * @type {string}
     * @memberof PlagiaDetectionCandidate
     */
    'url': string;
    /**
     * 
     * @type {number}
     * @memberof PlagiaDetectionCandidate
     */
    'plagia_score': number;
    /**
     * 
     * @type {string}
     * @memberof PlagiaDetectionCandidate
     */
    'prediction': string;
    /**
     * 
     * @type {string}
     * @memberof PlagiaDetectionCandidate
     */
    'plagiarized_text': string;
}
/**
 * 
 * @export
 * @interface PlagiaDetectionItem
 */
export interface PlagiaDetectionItem {
    /**
     * 
     * @type {string}
     * @memberof PlagiaDetectionItem
     */
    'text': string;
    /**
     * 
     * @type {Array<PlagiaDetectionCandidate>}
     * @memberof PlagiaDetectionItem
     */
    'candidates'?: Array<PlagiaDetectionCandidate>;
}
/**
 * * `file` - File * `image` - Image * `page` - Page * `size` - Size * `request` - Request * `seconde` - Second * `minute` - Minute * `free` - Free * `hour` - Hour * `char` - Characters * `token` - Token * `exec_time` - Execution Time * `unknown` - Unknown
 * @export
 * @enum {string}
 */

export const PriceUnitTypeEnum = {
    File: 'file',
    Image: 'image',
    Page: 'page',
    Size: 'size',
    Request: 'request',
    Seconde: 'seconde',
    Minute: 'minute',
    Free: 'free',
    Hour: 'hour',
    Char: 'char',
    Token: 'token',
    ExecTime: 'exec_time',
    Unknown: 'unknown'
} as const;

export type PriceUnitTypeEnum = typeof PriceUnitTypeEnum[keyof typeof PriceUnitTypeEnum];


/**
 * 
 * @export
 * @interface PricingSerialzier
 */
export interface PricingSerialzier {
    /**
     * Model name, default to \'default\' if no models to chose from
     * @type {string}
     * @memberof PricingSerialzier
     */
    'model_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PricingSerialzier
     */
    'price'?: string;
    /**
     * 
     * @type {number}
     * @memberof PricingSerialzier
     */
    'price_unit_quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof PricingSerialzier
     */
    'min_price_quantity'?: number | null;
    /**
     * 
     * @type {PriceUnitTypeEnum}
     * @memberof PricingSerialzier
     */
    'price_unit_type'?: PriceUnitTypeEnum;
    /**
     * 
     * @type {PricingSerialzierDetailType}
     * @memberof PricingSerialzier
     */
    'detail_type'?: PricingSerialzierDetailType | null;
    /**
     * (Optional) extra value for detailed pricing, eg: 250x250 for resolution
     * @type {string}
     * @memberof PricingSerialzier
     */
    'detail_value'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PricingSerialzier
     */
    'get_detail_type_display': string;
    /**
     * 
     * @type {boolean}
     * @memberof PricingSerialzier
     */
    'is_post_call'?: boolean;
}


/**
 * @type PricingSerialzierDetailType
 * (Optional) type of extra value, MUST be the same name as the feature parameter name. eg: resolution  * `resolution` - Resolution
 * @export
 */
export type PricingSerialzierDetailType = BlankEnum | DetailTypeEnum | NullEnum;

/**
 * 
 * @export
 * @interface PromptDataClass
 */
export interface PromptDataClass {
    /**
     * 
     * @type {string}
     * @memberof PromptDataClass
     */
    'text': string;
}
/**
 * 
 * @export
 * @interface Provider
 */
export interface Provider {
    /**
     * 
     * @type {string}
     * @memberof Provider
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Provider
     */
    'fullname'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Provider
     */
    'description'?: string | null;
}
/**
 * 
 * @export
 * @interface ProviderSubfeature
 */
export interface ProviderSubfeature {
    /**
     * 
     * @type {string}
     * @memberof ProviderSubfeature
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ProviderSubfeature
     */
    'version': string;
    /**
     * 
     * @type {Array<PricingSerialzier>}
     * @memberof ProviderSubfeature
     */
    'pricings': Array<PricingSerialzier>;
    /**
     * 
     * @type {boolean}
     * @memberof ProviderSubfeature
     */
    'is_working'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProviderSubfeature
     */
    'description_title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProviderSubfeature
     */
    'description_content'?: string | null;
    /**
     * 
     * @type {Provider}
     * @memberof ProviderSubfeature
     */
    'provider': Provider;
    /**
     * 
     * @type {Feature}
     * @memberof ProviderSubfeature
     */
    'feature': Feature;
    /**
     * 
     * @type {Subfeature}
     * @memberof ProviderSubfeature
     */
    'subfeature': Subfeature;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ProviderSubfeature
     */
    'constraints': { [key: string]: any; };
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ProviderSubfeature
     */
    'models': { [key: string]: any; };
    /**
     * 
     * @type {Array<ProviderSubfeatureLanguagesInner>}
     * @memberof ProviderSubfeature
     */
    'languages': Array<ProviderSubfeatureLanguagesInner>;
    /**
     * 
     * @type {string}
     * @memberof ProviderSubfeature
     */
    'phase': string;
}
/**
 * 
 * @export
 * @interface ProviderSubfeatureLanguagesInner
 */
export interface ProviderSubfeatureLanguagesInner {
    /**
     * 
     * @type {string}
     * @memberof ProviderSubfeatureLanguagesInner
     */
    'language_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProviderSubfeatureLanguagesInner
     */
    'language_code'?: string;
}
/**
 * 
 * @export
 * @interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166307616
 */
export interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166307616 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166307616
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166307616
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166307616
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166307616
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166307616
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166307616
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166312112
 */
export interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166312112 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166312112
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166312112
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166312112
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166312112
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166312112
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166312112
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166389664
 */
export interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166389664 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166389664
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166389664
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166389664
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166389664
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166389664
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166389664
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166393008
 */
export interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166393008 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166393008
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166393008
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166393008
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166393008
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166393008
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166393008
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166623680
 */
export interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166623680 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166623680
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166623680
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166623680
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166623680
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166623680
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166623680
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166705376
 */
export interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166705376 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166705376
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166705376
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166705376
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166705376
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166705376
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166705376
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166766464
 */
export interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166766464 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166766464
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166766464
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166766464
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166766464
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166766464
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166766464
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166813296
 */
export interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166813296 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166813296
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166813296
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166813296
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166813296
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166813296
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166813296
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166818048
 */
export interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166818048 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166818048
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166818048
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166818048
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166818048
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166818048
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166818048
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166821392
 */
export interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166821392 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166821392
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166821392
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166821392
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166821392
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166821392
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166821392
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166876496
 */
export interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166876496 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166876496
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166876496
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166876496
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166876496
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166876496
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166876496
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166892832
 */
export interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166892832 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166892832
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166892832
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166892832
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166892832
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166892832
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166892832
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166896320
 */
export interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166896320 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166896320
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166896320
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166896320
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166896320
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166896320
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166896320
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166901920
 */
export interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166901920 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166901920
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166901920
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166901920
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166901920
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166901920
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166901920
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166905264
 */
export interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166905264 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166905264
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166905264
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166905264
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166905264
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166905264
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166905264
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166915056
 */
export interface PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166915056 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166915056
     */
    'text': string;
    /**
     * 
     * @type {SpeechDiarization}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166915056
     */
    'diarization': SpeechDiarization;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166915056
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166915056
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166915056
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94356166915056
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161203712
 */
export interface PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161203712 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161203712
     */
    'audio': string;
    /**
     * 
     * @type {number}
     * @memberof PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161203712
     */
    'voice_type': number;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161203712
     */
    'audio_resource_url': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161203712
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161203712
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161204752
 */
export interface PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161204752 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161204752
     */
    'audio': string;
    /**
     * 
     * @type {number}
     * @memberof PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161204752
     */
    'voice_type': number;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161204752
     */
    'audio_resource_url': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161204752
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161204752
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161205792
 */
export interface PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161205792 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161205792
     */
    'audio': string;
    /**
     * 
     * @type {number}
     * @memberof PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161205792
     */
    'voice_type': number;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161205792
     */
    'audio_resource_url': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161205792
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161205792
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161218048
 */
export interface PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161218048 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161218048
     */
    'audio': string;
    /**
     * 
     * @type {number}
     * @memberof PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161218048
     */
    'voice_type': number;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161218048
     */
    'audio_resource_url': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161218048
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161218048
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161219088
 */
export interface PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161219088 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161219088
     */
    'audio': string;
    /**
     * 
     * @type {number}
     * @memberof PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161219088
     */
    'voice_type': number;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161219088
     */
    'audio_resource_url': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161219088
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainAudiotextToSpeechTextToSpeechDataClass94356161219088
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImageexplicitContentExplicitContentDataClass94356133187984
 */
export interface PydanticMainImageexplicitContentExplicitContentDataClass94356133187984 {
    /**
     * 
     * @type {number}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356133187984
     */
    'nsfw_likelihood': number;
    /**
     * 
     * @type {Array<ExplicitItem>}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356133187984
     */
    'items'?: Array<ExplicitItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356133187984
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356133187984
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImageexplicitContentExplicitContentDataClass94356133188928
 */
export interface PydanticMainImageexplicitContentExplicitContentDataClass94356133188928 {
    /**
     * 
     * @type {number}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356133188928
     */
    'nsfw_likelihood': number;
    /**
     * 
     * @type {Array<ExplicitItem>}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356133188928
     */
    'items'?: Array<ExplicitItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356133188928
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356133188928
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImageexplicitContentExplicitContentDataClass94356164740864
 */
export interface PydanticMainImageexplicitContentExplicitContentDataClass94356164740864 {
    /**
     * 
     * @type {number}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356164740864
     */
    'nsfw_likelihood': number;
    /**
     * 
     * @type {Array<ExplicitItem>}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356164740864
     */
    'items'?: Array<ExplicitItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356164740864
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356164740864
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImageexplicitContentExplicitContentDataClass94356164741808
 */
export interface PydanticMainImageexplicitContentExplicitContentDataClass94356164741808 {
    /**
     * 
     * @type {number}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356164741808
     */
    'nsfw_likelihood': number;
    /**
     * 
     * @type {Array<ExplicitItem>}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356164741808
     */
    'items'?: Array<ExplicitItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356164741808
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356164741808
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImageexplicitContentExplicitContentDataClass94356164749168
 */
export interface PydanticMainImageexplicitContentExplicitContentDataClass94356164749168 {
    /**
     * 
     * @type {number}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356164749168
     */
    'nsfw_likelihood': number;
    /**
     * 
     * @type {Array<ExplicitItem>}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356164749168
     */
    'items'?: Array<ExplicitItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356164749168
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356164749168
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImageexplicitContentExplicitContentDataClass94356166352592
 */
export interface PydanticMainImageexplicitContentExplicitContentDataClass94356166352592 {
    /**
     * 
     * @type {number}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356166352592
     */
    'nsfw_likelihood': number;
    /**
     * 
     * @type {Array<ExplicitItem>}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356166352592
     */
    'items'?: Array<ExplicitItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356166352592
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356166352592
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImageexplicitContentExplicitContentDataClass94356166565264
 */
export interface PydanticMainImageexplicitContentExplicitContentDataClass94356166565264 {
    /**
     * 
     * @type {number}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356166565264
     */
    'nsfw_likelihood': number;
    /**
     * 
     * @type {Array<ExplicitItem>}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356166565264
     */
    'items'?: Array<ExplicitItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356166565264
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356166565264
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImageexplicitContentExplicitContentDataClass94356166965856
 */
export interface PydanticMainImageexplicitContentExplicitContentDataClass94356166965856 {
    /**
     * 
     * @type {number}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356166965856
     */
    'nsfw_likelihood': number;
    /**
     * 
     * @type {Array<ExplicitItem>}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356166965856
     */
    'items'?: Array<ExplicitItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356166965856
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImageexplicitContentExplicitContentDataClass94356166965856
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImagefaceCompareFaceCompareDataClass94356165052832
 */
export interface PydanticMainImagefaceCompareFaceCompareDataClass94356165052832 {
    /**
     * 
     * @type {Array<FaceMatch>}
     * @memberof PydanticMainImagefaceCompareFaceCompareDataClass94356165052832
     */
    'items'?: Array<FaceMatch>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImagefaceCompareFaceCompareDataClass94356165052832
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImagefaceCompareFaceCompareDataClass94356165052832
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImagefaceCompareFaceCompareDataClass94356165054400
 */
export interface PydanticMainImagefaceCompareFaceCompareDataClass94356165054400 {
    /**
     * 
     * @type {Array<FaceMatch>}
     * @memberof PydanticMainImagefaceCompareFaceCompareDataClass94356165054400
     */
    'items'?: Array<FaceMatch>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImagefaceCompareFaceCompareDataClass94356165054400
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImagefaceCompareFaceCompareDataClass94356165054400
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImagefaceCompareFaceCompareDataClass94356165057568
 */
export interface PydanticMainImagefaceCompareFaceCompareDataClass94356165057568 {
    /**
     * 
     * @type {Array<FaceMatch>}
     * @memberof PydanticMainImagefaceCompareFaceCompareDataClass94356165057568
     */
    'items'?: Array<FaceMatch>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImagefaceCompareFaceCompareDataClass94356165057568
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImagefaceCompareFaceCompareDataClass94356165057568
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImagefaceDetectionFaceDetectionDataClass94356166424272
 */
export interface PydanticMainImagefaceDetectionFaceDetectionDataClass94356166424272 {
    /**
     * 
     * @type {Array<FaceItem>}
     * @memberof PydanticMainImagefaceDetectionFaceDetectionDataClass94356166424272
     */
    'items'?: Array<FaceItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImagefaceDetectionFaceDetectionDataClass94356166424272
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImagefaceDetectionFaceDetectionDataClass94356166424272
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImagefaceDetectionFaceDetectionDataClass94356166523424
 */
export interface PydanticMainImagefaceDetectionFaceDetectionDataClass94356166523424 {
    /**
     * 
     * @type {Array<FaceItem>}
     * @memberof PydanticMainImagefaceDetectionFaceDetectionDataClass94356166523424
     */
    'items'?: Array<FaceItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImagefaceDetectionFaceDetectionDataClass94356166523424
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImagefaceDetectionFaceDetectionDataClass94356166523424
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImagefaceDetectionFaceDetectionDataClass94356166587664
 */
export interface PydanticMainImagefaceDetectionFaceDetectionDataClass94356166587664 {
    /**
     * 
     * @type {Array<FaceItem>}
     * @memberof PydanticMainImagefaceDetectionFaceDetectionDataClass94356166587664
     */
    'items'?: Array<FaceItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImagefaceDetectionFaceDetectionDataClass94356166587664
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImagefaceDetectionFaceDetectionDataClass94356166587664
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImagefaceDetectionFaceDetectionDataClass94356166690080
 */
export interface PydanticMainImagefaceDetectionFaceDetectionDataClass94356166690080 {
    /**
     * 
     * @type {Array<FaceItem>}
     * @memberof PydanticMainImagefaceDetectionFaceDetectionDataClass94356166690080
     */
    'items'?: Array<FaceItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImagefaceDetectionFaceDetectionDataClass94356166690080
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImagefaceDetectionFaceDetectionDataClass94356166690080
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImagefaceDetectionFaceDetectionDataClass94356166744864
 */
export interface PydanticMainImagefaceDetectionFaceDetectionDataClass94356166744864 {
    /**
     * 
     * @type {Array<FaceItem>}
     * @memberof PydanticMainImagefaceDetectionFaceDetectionDataClass94356166744864
     */
    'items'?: Array<FaceItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImagefaceDetectionFaceDetectionDataClass94356166744864
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImagefaceDetectionFaceDetectionDataClass94356166744864
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImagefaceDetectionFaceDetectionDataClass94356166957152
 */
export interface PydanticMainImagefaceDetectionFaceDetectionDataClass94356166957152 {
    /**
     * 
     * @type {Array<FaceItem>}
     * @memberof PydanticMainImagefaceDetectionFaceDetectionDataClass94356166957152
     */
    'items'?: Array<FaceItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImagefaceDetectionFaceDetectionDataClass94356166957152
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImagefaceDetectionFaceDetectionDataClass94356166957152
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImagefaceDetectionFaceDetectionDataClass94356166959904
 */
export interface PydanticMainImagefaceDetectionFaceDetectionDataClass94356166959904 {
    /**
     * 
     * @type {Array<FaceItem>}
     * @memberof PydanticMainImagefaceDetectionFaceDetectionDataClass94356166959904
     */
    'items'?: Array<FaceItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImagefaceDetectionFaceDetectionDataClass94356166959904
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImagefaceDetectionFaceDetectionDataClass94356166959904
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImagefaceDetectionFaceDetectionDataClass94356167017216
 */
export interface PydanticMainImagefaceDetectionFaceDetectionDataClass94356167017216 {
    /**
     * 
     * @type {Array<FaceItem>}
     * @memberof PydanticMainImagefaceDetectionFaceDetectionDataClass94356167017216
     */
    'items'?: Array<FaceItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImagefaceDetectionFaceDetectionDataClass94356167017216
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImagefaceDetectionFaceDetectionDataClass94356167017216
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImagefaceRecognitionFaceRecognitionAddFaceDataClass94356164951424
 */
export interface PydanticMainImagefaceRecognitionFaceRecognitionAddFaceDataClass94356164951424 {
    /**
     * 
     * @type {Array<string>}
     * @memberof PydanticMainImagefaceRecognitionFaceRecognitionAddFaceDataClass94356164951424
     */
    'face_ids': Array<string>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImagefaceRecognitionFaceRecognitionAddFaceDataClass94356164951424
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImagefaceRecognitionFaceRecognitionAddFaceDataClass94356164951424
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImagefaceRecognitionFaceRecognitionAddFaceDataClass94356164952368
 */
export interface PydanticMainImagefaceRecognitionFaceRecognitionAddFaceDataClass94356164952368 {
    /**
     * 
     * @type {Array<string>}
     * @memberof PydanticMainImagefaceRecognitionFaceRecognitionAddFaceDataClass94356164952368
     */
    'face_ids': Array<string>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImagefaceRecognitionFaceRecognitionAddFaceDataClass94356164952368
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImagefaceRecognitionFaceRecognitionAddFaceDataClass94356164952368
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImagefaceRecognitionFaceRecognitionAddFaceDataClass94356164954368
 */
export interface PydanticMainImagefaceRecognitionFaceRecognitionAddFaceDataClass94356164954368 {
    /**
     * 
     * @type {Array<string>}
     * @memberof PydanticMainImagefaceRecognitionFaceRecognitionAddFaceDataClass94356164954368
     */
    'face_ids': Array<string>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImagefaceRecognitionFaceRecognitionAddFaceDataClass94356164954368
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImagefaceRecognitionFaceRecognitionAddFaceDataClass94356164954368
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImagegenerationGenerationDataClass94356164957744
 */
export interface PydanticMainImagegenerationGenerationDataClass94356164957744 {
    /**
     * 
     * @type {Array<GeneratedImageDataClass>}
     * @memberof PydanticMainImagegenerationGenerationDataClass94356164957744
     */
    'items'?: Array<GeneratedImageDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImagegenerationGenerationDataClass94356164957744
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImagegenerationGenerationDataClass94356164957744
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImagegenerationGenerationDataClass94356164969504
 */
export interface PydanticMainImagegenerationGenerationDataClass94356164969504 {
    /**
     * 
     * @type {Array<GeneratedImageDataClass>}
     * @memberof PydanticMainImagegenerationGenerationDataClass94356164969504
     */
    'items'?: Array<GeneratedImageDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImagegenerationGenerationDataClass94356164969504
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImagegenerationGenerationDataClass94356164969504
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImagegenerationGenerationDataClass94356165035184
 */
export interface PydanticMainImagegenerationGenerationDataClass94356165035184 {
    /**
     * 
     * @type {Array<GeneratedImageDataClass>}
     * @memberof PydanticMainImagegenerationGenerationDataClass94356165035184
     */
    'items'?: Array<GeneratedImageDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImagegenerationGenerationDataClass94356165035184
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImagegenerationGenerationDataClass94356165035184
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImagelandmarkDetectionLandmarkDetectionDataClass94356164777680
 */
export interface PydanticMainImagelandmarkDetectionLandmarkDetectionDataClass94356164777680 {
    /**
     * 
     * @type {Array<LandmarkItem>}
     * @memberof PydanticMainImagelandmarkDetectionLandmarkDetectionDataClass94356164777680
     */
    'items'?: Array<LandmarkItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImagelandmarkDetectionLandmarkDetectionDataClass94356164777680
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImagelandmarkDetectionLandmarkDetectionDataClass94356164777680
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImagelandmarkDetectionLandmarkDetectionDataClass94356164783648
 */
export interface PydanticMainImagelandmarkDetectionLandmarkDetectionDataClass94356164783648 {
    /**
     * 
     * @type {Array<LandmarkItem>}
     * @memberof PydanticMainImagelandmarkDetectionLandmarkDetectionDataClass94356164783648
     */
    'items'?: Array<LandmarkItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImagelandmarkDetectionLandmarkDetectionDataClass94356164783648
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImagelandmarkDetectionLandmarkDetectionDataClass94356164783648
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImagelogoDetectionLogoDetectionDataClass94356164734288
 */
export interface PydanticMainImagelogoDetectionLogoDetectionDataClass94356164734288 {
    /**
     * 
     * @type {Array<LogoItem>}
     * @memberof PydanticMainImagelogoDetectionLogoDetectionDataClass94356164734288
     */
    'items'?: Array<LogoItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImagelogoDetectionLogoDetectionDataClass94356164734288
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImagelogoDetectionLogoDetectionDataClass94356164734288
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImagelogoDetectionLogoDetectionDataClass94356164745680
 */
export interface PydanticMainImagelogoDetectionLogoDetectionDataClass94356164745680 {
    /**
     * 
     * @type {Array<LogoItem>}
     * @memberof PydanticMainImagelogoDetectionLogoDetectionDataClass94356164745680
     */
    'items'?: Array<LogoItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImagelogoDetectionLogoDetectionDataClass94356164745680
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImagelogoDetectionLogoDetectionDataClass94356164745680
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImagelogoDetectionLogoDetectionDataClass94356164796560
 */
export interface PydanticMainImagelogoDetectionLogoDetectionDataClass94356164796560 {
    /**
     * 
     * @type {Array<LogoItem>}
     * @memberof PydanticMainImagelogoDetectionLogoDetectionDataClass94356164796560
     */
    'items'?: Array<LogoItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImagelogoDetectionLogoDetectionDataClass94356164796560
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImagelogoDetectionLogoDetectionDataClass94356164796560
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImagelogoDetectionLogoDetectionDataClass94356164804768
 */
export interface PydanticMainImagelogoDetectionLogoDetectionDataClass94356164804768 {
    /**
     * 
     * @type {Array<LogoItem>}
     * @memberof PydanticMainImagelogoDetectionLogoDetectionDataClass94356164804768
     */
    'items'?: Array<LogoItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImagelogoDetectionLogoDetectionDataClass94356164804768
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImagelogoDetectionLogoDetectionDataClass94356164804768
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImagelogoDetectionLogoDetectionDataClass94356164817824
 */
export interface PydanticMainImagelogoDetectionLogoDetectionDataClass94356164817824 {
    /**
     * 
     * @type {Array<LogoItem>}
     * @memberof PydanticMainImagelogoDetectionLogoDetectionDataClass94356164817824
     */
    'items'?: Array<LogoItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImagelogoDetectionLogoDetectionDataClass94356164817824
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImagelogoDetectionLogoDetectionDataClass94356164817824
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImageobjectDetectionObjectDetectionDataClass94356161162944
 */
export interface PydanticMainImageobjectDetectionObjectDetectionDataClass94356161162944 {
    /**
     * 
     * @type {Array<ObjectItem>}
     * @memberof PydanticMainImageobjectDetectionObjectDetectionDataClass94356161162944
     */
    'items'?: Array<ObjectItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImageobjectDetectionObjectDetectionDataClass94356161162944
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImageobjectDetectionObjectDetectionDataClass94356161162944
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImageobjectDetectionObjectDetectionDataClass94356161163888
 */
export interface PydanticMainImageobjectDetectionObjectDetectionDataClass94356161163888 {
    /**
     * 
     * @type {Array<ObjectItem>}
     * @memberof PydanticMainImageobjectDetectionObjectDetectionDataClass94356161163888
     */
    'items'?: Array<ObjectItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImageobjectDetectionObjectDetectionDataClass94356161163888
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImageobjectDetectionObjectDetectionDataClass94356161163888
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImageobjectDetectionObjectDetectionDataClass94356161168768
 */
export interface PydanticMainImageobjectDetectionObjectDetectionDataClass94356161168768 {
    /**
     * 
     * @type {Array<ObjectItem>}
     * @memberof PydanticMainImageobjectDetectionObjectDetectionDataClass94356161168768
     */
    'items'?: Array<ObjectItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImageobjectDetectionObjectDetectionDataClass94356161168768
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImageobjectDetectionObjectDetectionDataClass94356161168768
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImageobjectDetectionObjectDetectionDataClass94356161236032
 */
export interface PydanticMainImageobjectDetectionObjectDetectionDataClass94356161236032 {
    /**
     * 
     * @type {Array<ObjectItem>}
     * @memberof PydanticMainImageobjectDetectionObjectDetectionDataClass94356161236032
     */
    'items'?: Array<ObjectItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImageobjectDetectionObjectDetectionDataClass94356161236032
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImageobjectDetectionObjectDetectionDataClass94356161236032
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImageobjectDetectionObjectDetectionDataClass94356166590064
 */
export interface PydanticMainImageobjectDetectionObjectDetectionDataClass94356166590064 {
    /**
     * 
     * @type {Array<ObjectItem>}
     * @memberof PydanticMainImageobjectDetectionObjectDetectionDataClass94356166590064
     */
    'items'?: Array<ObjectItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImageobjectDetectionObjectDetectionDataClass94356166590064
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImageobjectDetectionObjectDetectionDataClass94356166590064
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImageobjectDetectionObjectDetectionDataClass94356166594368
 */
export interface PydanticMainImageobjectDetectionObjectDetectionDataClass94356166594368 {
    /**
     * 
     * @type {Array<ObjectItem>}
     * @memberof PydanticMainImageobjectDetectionObjectDetectionDataClass94356166594368
     */
    'items'?: Array<ObjectItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImageobjectDetectionObjectDetectionDataClass94356166594368
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImageobjectDetectionObjectDetectionDataClass94356166594368
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainImageobjectDetectionObjectDetectionDataClass94356166599232
 */
export interface PydanticMainImageobjectDetectionObjectDetectionDataClass94356166599232 {
    /**
     * 
     * @type {Array<ObjectItem>}
     * @memberof PydanticMainImageobjectDetectionObjectDetectionDataClass94356166599232
     */
    'items'?: Array<ObjectItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainImageobjectDetectionObjectDetectionDataClass94356166599232
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainImageobjectDetectionObjectDetectionDataClass94356166599232
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrbankCheckParsingBankCheckParsingDataClass94356165874352
 */
export interface PydanticMainOcrbankCheckParsingBankCheckParsingDataClass94356165874352 {
    /**
     * 
     * @type {Array<ItemBankCheckParsingDataClass>}
     * @memberof PydanticMainOcrbankCheckParsingBankCheckParsingDataClass94356165874352
     */
    'extracted_data'?: Array<ItemBankCheckParsingDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrbankCheckParsingBankCheckParsingDataClass94356165874352
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrbankCheckParsingBankCheckParsingDataClass94356165874352
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrbankCheckParsingBankCheckParsingDataClass94356165884960
 */
export interface PydanticMainOcrbankCheckParsingBankCheckParsingDataClass94356165884960 {
    /**
     * 
     * @type {Array<ItemBankCheckParsingDataClass>}
     * @memberof PydanticMainOcrbankCheckParsingBankCheckParsingDataClass94356165884960
     */
    'extracted_data'?: Array<ItemBankCheckParsingDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrbankCheckParsingBankCheckParsingDataClass94356165884960
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrbankCheckParsingBankCheckParsingDataClass94356165884960
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrbankCheckParsingBankCheckParsingDataClass94356165908848
 */
export interface PydanticMainOcrbankCheckParsingBankCheckParsingDataClass94356165908848 {
    /**
     * 
     * @type {Array<ItemBankCheckParsingDataClass>}
     * @memberof PydanticMainOcrbankCheckParsingBankCheckParsingDataClass94356165908848
     */
    'extracted_data'?: Array<ItemBankCheckParsingDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrbankCheckParsingBankCheckParsingDataClass94356165908848
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrbankCheckParsingBankCheckParsingDataClass94356165908848
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrdataExtractionDataExtractionDataClass94356166235024
 */
export interface PydanticMainOcrdataExtractionDataExtractionDataClass94356166235024 {
    /**
     * 
     * @type {Array<ItemDataExtraction>}
     * @memberof PydanticMainOcrdataExtractionDataExtractionDataClass94356166235024
     */
    'fields'?: Array<ItemDataExtraction>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrdataExtractionDataExtractionDataClass94356166235024
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrdataExtractionDataExtractionDataClass94356166235024
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrdataExtractionDataExtractionDataClass94356166235968
 */
export interface PydanticMainOcrdataExtractionDataExtractionDataClass94356166235968 {
    /**
     * 
     * @type {Array<ItemDataExtraction>}
     * @memberof PydanticMainOcrdataExtractionDataExtractionDataClass94356166235968
     */
    'fields'?: Array<ItemDataExtraction>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrdataExtractionDataExtractionDataClass94356166235968
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrdataExtractionDataExtractionDataClass94356166235968
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcridentityParserIdentityParserDataClass94356164995536
 */
export interface PydanticMainOcridentityParserIdentityParserDataClass94356164995536 {
    /**
     * 
     * @type {Array<InfosIdentityParserDataClass>}
     * @memberof PydanticMainOcridentityParserIdentityParserDataClass94356164995536
     */
    'extracted_data'?: Array<InfosIdentityParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcridentityParserIdentityParserDataClass94356164995536
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcridentityParserIdentityParserDataClass94356164995536
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcridentityParserIdentityParserDataClass94356166088592
 */
export interface PydanticMainOcridentityParserIdentityParserDataClass94356166088592 {
    /**
     * 
     * @type {Array<InfosIdentityParserDataClass>}
     * @memberof PydanticMainOcridentityParserIdentityParserDataClass94356166088592
     */
    'extracted_data'?: Array<InfosIdentityParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcridentityParserIdentityParserDataClass94356166088592
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcridentityParserIdentityParserDataClass94356166088592
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcridentityParserIdentityParserDataClass94356166104480
 */
export interface PydanticMainOcridentityParserIdentityParserDataClass94356166104480 {
    /**
     * 
     * @type {Array<InfosIdentityParserDataClass>}
     * @memberof PydanticMainOcridentityParserIdentityParserDataClass94356166104480
     */
    'extracted_data'?: Array<InfosIdentityParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcridentityParserIdentityParserDataClass94356166104480
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcridentityParserIdentityParserDataClass94356166104480
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcridentityParserIdentityParserDataClass94356166109424
 */
export interface PydanticMainOcridentityParserIdentityParserDataClass94356166109424 {
    /**
     * 
     * @type {Array<InfosIdentityParserDataClass>}
     * @memberof PydanticMainOcridentityParserIdentityParserDataClass94356166109424
     */
    'extracted_data'?: Array<InfosIdentityParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcridentityParserIdentityParserDataClass94356166109424
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcridentityParserIdentityParserDataClass94356166109424
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcridentityParserIdentityParserDataClass94356166116144
 */
export interface PydanticMainOcridentityParserIdentityParserDataClass94356166116144 {
    /**
     * 
     * @type {Array<InfosIdentityParserDataClass>}
     * @memberof PydanticMainOcridentityParserIdentityParserDataClass94356166116144
     */
    'extracted_data'?: Array<InfosIdentityParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcridentityParserIdentityParserDataClass94356166116144
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcridentityParserIdentityParserDataClass94356166116144
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcridentityParserIdentityParserDataClass94356166124416
 */
export interface PydanticMainOcridentityParserIdentityParserDataClass94356166124416 {
    /**
     * 
     * @type {Array<InfosIdentityParserDataClass>}
     * @memberof PydanticMainOcridentityParserIdentityParserDataClass94356166124416
     */
    'extracted_data'?: Array<InfosIdentityParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcridentityParserIdentityParserDataClass94356166124416
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcridentityParserIdentityParserDataClass94356166124416
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165745456
 */
export interface PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165745456 {
    /**
     * 
     * @type {Array<InfosInvoiceParserDataClass>}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165745456
     */
    'extracted_data'?: Array<InfosInvoiceParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165745456
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165745456
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165746432
 */
export interface PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165746432 {
    /**
     * 
     * @type {Array<InfosInvoiceParserDataClass>}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165746432
     */
    'extracted_data'?: Array<InfosInvoiceParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165746432
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165746432
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165775520
 */
export interface PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165775520 {
    /**
     * 
     * @type {Array<InfosInvoiceParserDataClass>}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165775520
     */
    'extracted_data'?: Array<InfosInvoiceParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165775520
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165775520
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165777296
 */
export interface PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165777296 {
    /**
     * 
     * @type {Array<InfosInvoiceParserDataClass>}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165777296
     */
    'extracted_data'?: Array<InfosInvoiceParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165777296
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165777296
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165795808
 */
export interface PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165795808 {
    /**
     * 
     * @type {Array<InfosInvoiceParserDataClass>}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165795808
     */
    'extracted_data'?: Array<InfosInvoiceParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165795808
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165795808
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165801344
 */
export interface PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165801344 {
    /**
     * 
     * @type {Array<InfosInvoiceParserDataClass>}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165801344
     */
    'extracted_data'?: Array<InfosInvoiceParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165801344
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165801344
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165819744
 */
export interface PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165819744 {
    /**
     * 
     * @type {Array<InfosInvoiceParserDataClass>}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165819744
     */
    'extracted_data'?: Array<InfosInvoiceParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165819744
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165819744
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165826128
 */
export interface PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165826128 {
    /**
     * 
     * @type {Array<InfosInvoiceParserDataClass>}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165826128
     */
    'extracted_data'?: Array<InfosInvoiceParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165826128
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165826128
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165837920
 */
export interface PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165837920 {
    /**
     * 
     * @type {Array<InfosInvoiceParserDataClass>}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165837920
     */
    'extracted_data'?: Array<InfosInvoiceParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165837920
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165837920
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165867632
 */
export interface PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165867632 {
    /**
     * 
     * @type {Array<InfosInvoiceParserDataClass>}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165867632
     */
    'extracted_data'?: Array<InfosInvoiceParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165867632
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356165867632
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrinvoiceParserInvoiceParserDataClass94356166360256
 */
export interface PydanticMainOcrinvoiceParserInvoiceParserDataClass94356166360256 {
    /**
     * 
     * @type {Array<InfosInvoiceParserDataClass>}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356166360256
     */
    'extracted_data'?: Array<InfosInvoiceParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356166360256
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrinvoiceParserInvoiceParserDataClass94356166360256
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrocrAsyncOcrAsyncDataClass94356166186512
 */
export interface PydanticMainOcrocrAsyncOcrAsyncDataClass94356166186512 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainOcrocrAsyncOcrAsyncDataClass94356166186512
     */
    'raw_text': string;
    /**
     * List of pages
     * @type {Array<Page>}
     * @memberof PydanticMainOcrocrAsyncOcrAsyncDataClass94356166186512
     */
    'pages'?: Array<Page>;
    /**
     * Number of pages in the document
     * @type {number}
     * @memberof PydanticMainOcrocrAsyncOcrAsyncDataClass94356166186512
     */
    'number_of_pages': number;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrocrAsyncOcrAsyncDataClass94356166186512
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainOcrocrAsyncOcrAsyncDataClass94356166186512
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainOcrocrAsyncOcrAsyncDataClass94356166186512
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainOcrocrAsyncOcrAsyncDataClass94356166186512
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrocrAsyncOcrAsyncDataClass94356166195184
 */
export interface PydanticMainOcrocrAsyncOcrAsyncDataClass94356166195184 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainOcrocrAsyncOcrAsyncDataClass94356166195184
     */
    'raw_text': string;
    /**
     * List of pages
     * @type {Array<Page>}
     * @memberof PydanticMainOcrocrAsyncOcrAsyncDataClass94356166195184
     */
    'pages'?: Array<Page>;
    /**
     * Number of pages in the document
     * @type {number}
     * @memberof PydanticMainOcrocrAsyncOcrAsyncDataClass94356166195184
     */
    'number_of_pages': number;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrocrAsyncOcrAsyncDataClass94356166195184
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainOcrocrAsyncOcrAsyncDataClass94356166195184
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainOcrocrAsyncOcrAsyncDataClass94356166195184
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainOcrocrAsyncOcrAsyncDataClass94356166195184
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrocrAsyncOcrAsyncDataClass94356166206272
 */
export interface PydanticMainOcrocrAsyncOcrAsyncDataClass94356166206272 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainOcrocrAsyncOcrAsyncDataClass94356166206272
     */
    'raw_text': string;
    /**
     * List of pages
     * @type {Array<Page>}
     * @memberof PydanticMainOcrocrAsyncOcrAsyncDataClass94356166206272
     */
    'pages'?: Array<Page>;
    /**
     * Number of pages in the document
     * @type {number}
     * @memberof PydanticMainOcrocrAsyncOcrAsyncDataClass94356166206272
     */
    'number_of_pages': number;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrocrAsyncOcrAsyncDataClass94356166206272
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainOcrocrAsyncOcrAsyncDataClass94356166206272
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainOcrocrAsyncOcrAsyncDataClass94356166206272
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainOcrocrAsyncOcrAsyncDataClass94356166206272
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrocrOcrDataClass94356164880288
 */
export interface PydanticMainOcrocrOcrDataClass94356164880288 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainOcrocrOcrDataClass94356164880288
     */
    'text': string;
    /**
     * 
     * @type {Array<BoundingBox>}
     * @memberof PydanticMainOcrocrOcrDataClass94356164880288
     */
    'bounding_boxes'?: Array<BoundingBox>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrocrOcrDataClass94356164880288
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrocrOcrDataClass94356164880288
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrocrOcrDataClass94356164939216
 */
export interface PydanticMainOcrocrOcrDataClass94356164939216 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainOcrocrOcrDataClass94356164939216
     */
    'text': string;
    /**
     * 
     * @type {Array<BoundingBox>}
     * @memberof PydanticMainOcrocrOcrDataClass94356164939216
     */
    'bounding_boxes'?: Array<BoundingBox>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrocrOcrDataClass94356164939216
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrocrOcrDataClass94356164939216
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrocrOcrDataClass94356165680688
 */
export interface PydanticMainOcrocrOcrDataClass94356165680688 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainOcrocrOcrDataClass94356165680688
     */
    'text': string;
    /**
     * 
     * @type {Array<BoundingBox>}
     * @memberof PydanticMainOcrocrOcrDataClass94356165680688
     */
    'bounding_boxes'?: Array<BoundingBox>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrocrOcrDataClass94356165680688
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrocrOcrDataClass94356165680688
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrocrOcrDataClass94356165691600
 */
export interface PydanticMainOcrocrOcrDataClass94356165691600 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainOcrocrOcrDataClass94356165691600
     */
    'text': string;
    /**
     * 
     * @type {Array<BoundingBox>}
     * @memberof PydanticMainOcrocrOcrDataClass94356165691600
     */
    'bounding_boxes'?: Array<BoundingBox>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrocrOcrDataClass94356165691600
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrocrOcrDataClass94356165691600
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrocrOcrDataClass94356165694768
 */
export interface PydanticMainOcrocrOcrDataClass94356165694768 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainOcrocrOcrDataClass94356165694768
     */
    'text': string;
    /**
     * 
     * @type {Array<BoundingBox>}
     * @memberof PydanticMainOcrocrOcrDataClass94356165694768
     */
    'bounding_boxes'?: Array<BoundingBox>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrocrOcrDataClass94356165694768
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrocrOcrDataClass94356165694768
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrocrOcrDataClass94356165697936
 */
export interface PydanticMainOcrocrOcrDataClass94356165697936 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainOcrocrOcrDataClass94356165697936
     */
    'text': string;
    /**
     * 
     * @type {Array<BoundingBox>}
     * @memberof PydanticMainOcrocrOcrDataClass94356165697936
     */
    'bounding_boxes'?: Array<BoundingBox>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrocrOcrDataClass94356165697936
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrocrOcrDataClass94356165697936
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrocrOcrDataClass94356165701104
 */
export interface PydanticMainOcrocrOcrDataClass94356165701104 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainOcrocrOcrDataClass94356165701104
     */
    'text': string;
    /**
     * 
     * @type {Array<BoundingBox>}
     * @memberof PydanticMainOcrocrOcrDataClass94356165701104
     */
    'bounding_boxes'?: Array<BoundingBox>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrocrOcrDataClass94356165701104
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrocrOcrDataClass94356165701104
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrocrTablesAsyncOcrTablesAsyncDataClass94356165928544
 */
export interface PydanticMainOcrocrTablesAsyncOcrTablesAsyncDataClass94356165928544 {
    /**
     * 
     * @type {Array<Page>}
     * @memberof PydanticMainOcrocrTablesAsyncOcrTablesAsyncDataClass94356165928544
     */
    'pages'?: Array<Page>;
    /**
     * 
     * @type {number}
     * @memberof PydanticMainOcrocrTablesAsyncOcrTablesAsyncDataClass94356165928544
     */
    'num_pages': number;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrocrTablesAsyncOcrTablesAsyncDataClass94356165928544
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainOcrocrTablesAsyncOcrTablesAsyncDataClass94356165928544
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainOcrocrTablesAsyncOcrTablesAsyncDataClass94356165928544
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainOcrocrTablesAsyncOcrTablesAsyncDataClass94356165928544
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrocrTablesAsyncOcrTablesAsyncDataClass94356165931520
 */
export interface PydanticMainOcrocrTablesAsyncOcrTablesAsyncDataClass94356165931520 {
    /**
     * 
     * @type {Array<Page>}
     * @memberof PydanticMainOcrocrTablesAsyncOcrTablesAsyncDataClass94356165931520
     */
    'pages'?: Array<Page>;
    /**
     * 
     * @type {number}
     * @memberof PydanticMainOcrocrTablesAsyncOcrTablesAsyncDataClass94356165931520
     */
    'num_pages': number;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrocrTablesAsyncOcrTablesAsyncDataClass94356165931520
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainOcrocrTablesAsyncOcrTablesAsyncDataClass94356165931520
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainOcrocrTablesAsyncOcrTablesAsyncDataClass94356165931520
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainOcrocrTablesAsyncOcrTablesAsyncDataClass94356165931520
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrocrTablesAsyncOcrTablesAsyncDataClass94356166357536
 */
export interface PydanticMainOcrocrTablesAsyncOcrTablesAsyncDataClass94356166357536 {
    /**
     * 
     * @type {Array<Page>}
     * @memberof PydanticMainOcrocrTablesAsyncOcrTablesAsyncDataClass94356166357536
     */
    'pages'?: Array<Page>;
    /**
     * 
     * @type {number}
     * @memberof PydanticMainOcrocrTablesAsyncOcrTablesAsyncDataClass94356166357536
     */
    'num_pages': number;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrocrTablesAsyncOcrTablesAsyncDataClass94356166357536
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainOcrocrTablesAsyncOcrTablesAsyncDataClass94356166357536
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainOcrocrTablesAsyncOcrTablesAsyncDataClass94356166357536
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainOcrocrTablesAsyncOcrTablesAsyncDataClass94356166357536
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrreceiptParserReceiptParserDataClass94356165989056
 */
export interface PydanticMainOcrreceiptParserReceiptParserDataClass94356165989056 {
    /**
     * 
     * @type {Array<InfosReceiptParserDataClass>}
     * @memberof PydanticMainOcrreceiptParserReceiptParserDataClass94356165989056
     */
    'extracted_data'?: Array<InfosReceiptParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrreceiptParserReceiptParserDataClass94356165989056
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrreceiptParserReceiptParserDataClass94356165989056
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrreceiptParserReceiptParserDataClass94356166005952
 */
export interface PydanticMainOcrreceiptParserReceiptParserDataClass94356166005952 {
    /**
     * 
     * @type {Array<InfosReceiptParserDataClass>}
     * @memberof PydanticMainOcrreceiptParserReceiptParserDataClass94356166005952
     */
    'extracted_data'?: Array<InfosReceiptParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrreceiptParserReceiptParserDataClass94356166005952
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrreceiptParserReceiptParserDataClass94356166005952
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrreceiptParserReceiptParserDataClass94356166008512
 */
export interface PydanticMainOcrreceiptParserReceiptParserDataClass94356166008512 {
    /**
     * 
     * @type {Array<InfosReceiptParserDataClass>}
     * @memberof PydanticMainOcrreceiptParserReceiptParserDataClass94356166008512
     */
    'extracted_data'?: Array<InfosReceiptParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrreceiptParserReceiptParserDataClass94356166008512
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrreceiptParserReceiptParserDataClass94356166008512
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrreceiptParserReceiptParserDataClass94356166025472
 */
export interface PydanticMainOcrreceiptParserReceiptParserDataClass94356166025472 {
    /**
     * 
     * @type {Array<InfosReceiptParserDataClass>}
     * @memberof PydanticMainOcrreceiptParserReceiptParserDataClass94356166025472
     */
    'extracted_data'?: Array<InfosReceiptParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrreceiptParserReceiptParserDataClass94356166025472
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrreceiptParserReceiptParserDataClass94356166025472
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrreceiptParserReceiptParserDataClass94356166031424
 */
export interface PydanticMainOcrreceiptParserReceiptParserDataClass94356166031424 {
    /**
     * 
     * @type {Array<InfosReceiptParserDataClass>}
     * @memberof PydanticMainOcrreceiptParserReceiptParserDataClass94356166031424
     */
    'extracted_data'?: Array<InfosReceiptParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrreceiptParserReceiptParserDataClass94356166031424
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrreceiptParserReceiptParserDataClass94356166031424
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrreceiptParserReceiptParserDataClass94356166035184
 */
export interface PydanticMainOcrreceiptParserReceiptParserDataClass94356166035184 {
    /**
     * 
     * @type {Array<InfosReceiptParserDataClass>}
     * @memberof PydanticMainOcrreceiptParserReceiptParserDataClass94356166035184
     */
    'extracted_data'?: Array<InfosReceiptParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrreceiptParserReceiptParserDataClass94356166035184
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrreceiptParserReceiptParserDataClass94356166035184
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrreceiptParserReceiptParserDataClass94356166041456
 */
export interface PydanticMainOcrreceiptParserReceiptParserDataClass94356166041456 {
    /**
     * 
     * @type {Array<InfosReceiptParserDataClass>}
     * @memberof PydanticMainOcrreceiptParserReceiptParserDataClass94356166041456
     */
    'extracted_data'?: Array<InfosReceiptParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrreceiptParserReceiptParserDataClass94356166041456
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrreceiptParserReceiptParserDataClass94356166041456
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrreceiptParserReceiptParserDataClass94356166048720
 */
export interface PydanticMainOcrreceiptParserReceiptParserDataClass94356166048720 {
    /**
     * 
     * @type {Array<InfosReceiptParserDataClass>}
     * @memberof PydanticMainOcrreceiptParserReceiptParserDataClass94356166048720
     */
    'extracted_data'?: Array<InfosReceiptParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrreceiptParserReceiptParserDataClass94356166048720
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrreceiptParserReceiptParserDataClass94356166048720
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrreceiptParserReceiptParserDataClass94356166055984
 */
export interface PydanticMainOcrreceiptParserReceiptParserDataClass94356166055984 {
    /**
     * 
     * @type {Array<InfosReceiptParserDataClass>}
     * @memberof PydanticMainOcrreceiptParserReceiptParserDataClass94356166055984
     */
    'extracted_data'?: Array<InfosReceiptParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrreceiptParserReceiptParserDataClass94356166055984
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrreceiptParserReceiptParserDataClass94356166055984
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrreceiptParserReceiptParserDataClass94356166059744
 */
export interface PydanticMainOcrreceiptParserReceiptParserDataClass94356166059744 {
    /**
     * 
     * @type {Array<InfosReceiptParserDataClass>}
     * @memberof PydanticMainOcrreceiptParserReceiptParserDataClass94356166059744
     */
    'extracted_data'?: Array<InfosReceiptParserDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrreceiptParserReceiptParserDataClass94356166059744
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrreceiptParserReceiptParserDataClass94356166059744
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrresumeParserResumeParserDataClass94356165961056
 */
export interface PydanticMainOcrresumeParserResumeParserDataClass94356165961056 {
    /**
     * 
     * @type {ResumeExtractedData}
     * @memberof PydanticMainOcrresumeParserResumeParserDataClass94356165961056
     */
    'extracted_data': ResumeExtractedData;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrresumeParserResumeParserDataClass94356165961056
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrresumeParserResumeParserDataClass94356165961056
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrresumeParserResumeParserDataClass94356165984816
 */
export interface PydanticMainOcrresumeParserResumeParserDataClass94356165984816 {
    /**
     * 
     * @type {ResumeExtractedData}
     * @memberof PydanticMainOcrresumeParserResumeParserDataClass94356165984816
     */
    'extracted_data': ResumeExtractedData;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrresumeParserResumeParserDataClass94356165984816
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrresumeParserResumeParserDataClass94356165984816
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainOcrresumeParserResumeParserDataClass94356165993200
 */
export interface PydanticMainOcrresumeParserResumeParserDataClass94356165993200 {
    /**
     * 
     * @type {ResumeExtractedData}
     * @memberof PydanticMainOcrresumeParserResumeParserDataClass94356165993200
     */
    'extracted_data': ResumeExtractedData;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainOcrresumeParserResumeParserDataClass94356165993200
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainOcrresumeParserResumeParserDataClass94356165993200
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextaiDetectionAiDetectionDataClass94356170195008
 */
export interface PydanticMainTextaiDetectionAiDetectionDataClass94356170195008 {
    /**
     * 
     * @type {number}
     * @memberof PydanticMainTextaiDetectionAiDetectionDataClass94356170195008
     */
    'ai_score': number;
    /**
     * 
     * @type {Array<AiDetectionItem>}
     * @memberof PydanticMainTextaiDetectionAiDetectionDataClass94356170195008
     */
    'items'?: Array<AiDetectionItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextaiDetectionAiDetectionDataClass94356170195008
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextaiDetectionAiDetectionDataClass94356170195008
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextaiDetectionAiDetectionDataClass94356170206464
 */
export interface PydanticMainTextaiDetectionAiDetectionDataClass94356170206464 {
    /**
     * 
     * @type {number}
     * @memberof PydanticMainTextaiDetectionAiDetectionDataClass94356170206464
     */
    'ai_score': number;
    /**
     * 
     * @type {Array<AiDetectionItem>}
     * @memberof PydanticMainTextaiDetectionAiDetectionDataClass94356170206464
     */
    'items'?: Array<AiDetectionItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextaiDetectionAiDetectionDataClass94356170206464
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextaiDetectionAiDetectionDataClass94356170206464
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextanonymizationAnonymizationDataClass94356170023328
 */
export interface PydanticMainTextanonymizationAnonymizationDataClass94356170023328 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTextanonymizationAnonymizationDataClass94356170023328
     */
    'result': string;
    /**
     * 
     * @type {Array<AnonymizationEntity>}
     * @memberof PydanticMainTextanonymizationAnonymizationDataClass94356170023328
     */
    'entities'?: Array<AnonymizationEntity>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextanonymizationAnonymizationDataClass94356170023328
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextanonymizationAnonymizationDataClass94356170023328
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextanonymizationAnonymizationDataClass94356170028224
 */
export interface PydanticMainTextanonymizationAnonymizationDataClass94356170028224 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTextanonymizationAnonymizationDataClass94356170028224
     */
    'result': string;
    /**
     * 
     * @type {Array<AnonymizationEntity>}
     * @memberof PydanticMainTextanonymizationAnonymizationDataClass94356170028224
     */
    'entities'?: Array<AnonymizationEntity>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextanonymizationAnonymizationDataClass94356170028224
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextanonymizationAnonymizationDataClass94356170028224
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextanonymizationAnonymizationDataClass94356170036816
 */
export interface PydanticMainTextanonymizationAnonymizationDataClass94356170036816 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTextanonymizationAnonymizationDataClass94356170036816
     */
    'result': string;
    /**
     * 
     * @type {Array<AnonymizationEntity>}
     * @memberof PydanticMainTextanonymizationAnonymizationDataClass94356170036816
     */
    'entities'?: Array<AnonymizationEntity>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextanonymizationAnonymizationDataClass94356170036816
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextanonymizationAnonymizationDataClass94356170036816
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextanonymizationAnonymizationDataClass94356170042416
 */
export interface PydanticMainTextanonymizationAnonymizationDataClass94356170042416 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTextanonymizationAnonymizationDataClass94356170042416
     */
    'result': string;
    /**
     * 
     * @type {Array<AnonymizationEntity>}
     * @memberof PydanticMainTextanonymizationAnonymizationDataClass94356170042416
     */
    'entities'?: Array<AnonymizationEntity>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextanonymizationAnonymizationDataClass94356170042416
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextanonymizationAnonymizationDataClass94356170042416
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextanonymizationAnonymizationDataClass94356170044544
 */
export interface PydanticMainTextanonymizationAnonymizationDataClass94356170044544 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTextanonymizationAnonymizationDataClass94356170044544
     */
    'result': string;
    /**
     * 
     * @type {Array<AnonymizationEntity>}
     * @memberof PydanticMainTextanonymizationAnonymizationDataClass94356170044544
     */
    'entities'?: Array<AnonymizationEntity>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextanonymizationAnonymizationDataClass94356170044544
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextanonymizationAnonymizationDataClass94356170044544
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextchatChatDataClass94356170163904
 */
export interface PydanticMainTextchatChatDataClass94356170163904 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTextchatChatDataClass94356170163904
     */
    'generated_text': string;
    /**
     * 
     * @type {Array<ChatMessageDataClass>}
     * @memberof PydanticMainTextchatChatDataClass94356170163904
     */
    'message'?: Array<ChatMessageDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextchatChatDataClass94356170163904
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextchatChatDataClass94356170163904
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextchatChatDataClass94356170182880
 */
export interface PydanticMainTextchatChatDataClass94356170182880 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTextchatChatDataClass94356170182880
     */
    'generated_text': string;
    /**
     * 
     * @type {Array<ChatMessageDataClass>}
     * @memberof PydanticMainTextchatChatDataClass94356170182880
     */
    'message'?: Array<ChatMessageDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextchatChatDataClass94356170182880
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextchatChatDataClass94356170182880
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextcodeGenerationCodeGenerationDataClass94356170110944
 */
export interface PydanticMainTextcodeGenerationCodeGenerationDataClass94356170110944 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTextcodeGenerationCodeGenerationDataClass94356170110944
     */
    'generated_text': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextcodeGenerationCodeGenerationDataClass94356170110944
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextcodeGenerationCodeGenerationDataClass94356170110944
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextcodeGenerationCodeGenerationDataClass94356170111888
 */
export interface PydanticMainTextcodeGenerationCodeGenerationDataClass94356170111888 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTextcodeGenerationCodeGenerationDataClass94356170111888
     */
    'generated_text': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextcodeGenerationCodeGenerationDataClass94356170111888
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextcodeGenerationCodeGenerationDataClass94356170111888
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextcustomClassificationCustomClassificationDataClass94356164953312
 */
export interface PydanticMainTextcustomClassificationCustomClassificationDataClass94356164953312 {
    /**
     * 
     * @type {Array<ItemCustomClassificationDataClass>}
     * @memberof PydanticMainTextcustomClassificationCustomClassificationDataClass94356164953312
     */
    'classifications'?: Array<ItemCustomClassificationDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextcustomClassificationCustomClassificationDataClass94356164953312
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextcustomClassificationCustomClassificationDataClass94356164953312
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextcustomClassificationCustomClassificationDataClass94356166670576
 */
export interface PydanticMainTextcustomClassificationCustomClassificationDataClass94356166670576 {
    /**
     * 
     * @type {Array<ItemCustomClassificationDataClass>}
     * @memberof PydanticMainTextcustomClassificationCustomClassificationDataClass94356166670576
     */
    'classifications'?: Array<ItemCustomClassificationDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextcustomClassificationCustomClassificationDataClass94356166670576
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextcustomClassificationCustomClassificationDataClass94356166670576
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextcustomNamedEntityRecognitionCustomNamedEntityRecognitionDataClass94356170134368
 */
export interface PydanticMainTextcustomNamedEntityRecognitionCustomNamedEntityRecognitionDataClass94356170134368 {
    /**
     * 
     * @type {Array<InfosCustomNamedEntityRecognitionDataClass>}
     * @memberof PydanticMainTextcustomNamedEntityRecognitionCustomNamedEntityRecognitionDataClass94356170134368
     */
    'items'?: Array<InfosCustomNamedEntityRecognitionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextcustomNamedEntityRecognitionCustomNamedEntityRecognitionDataClass94356170134368
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextcustomNamedEntityRecognitionCustomNamedEntityRecognitionDataClass94356170134368
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextcustomNamedEntityRecognitionCustomNamedEntityRecognitionDataClass94356170135312
 */
export interface PydanticMainTextcustomNamedEntityRecognitionCustomNamedEntityRecognitionDataClass94356170135312 {
    /**
     * 
     * @type {Array<InfosCustomNamedEntityRecognitionDataClass>}
     * @memberof PydanticMainTextcustomNamedEntityRecognitionCustomNamedEntityRecognitionDataClass94356170135312
     */
    'items'?: Array<InfosCustomNamedEntityRecognitionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextcustomNamedEntityRecognitionCustomNamedEntityRecognitionDataClass94356170135312
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextcustomNamedEntityRecognitionCustomNamedEntityRecognitionDataClass94356170135312
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextcustomNamedEntityRecognitionCustomNamedEntityRecognitionDataClass94356170138000
 */
export interface PydanticMainTextcustomNamedEntityRecognitionCustomNamedEntityRecognitionDataClass94356170138000 {
    /**
     * 
     * @type {Array<InfosCustomNamedEntityRecognitionDataClass>}
     * @memberof PydanticMainTextcustomNamedEntityRecognitionCustomNamedEntityRecognitionDataClass94356170138000
     */
    'items'?: Array<InfosCustomNamedEntityRecognitionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextcustomNamedEntityRecognitionCustomNamedEntityRecognitionDataClass94356170138000
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextcustomNamedEntityRecognitionCustomNamedEntityRecognitionDataClass94356170138000
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextembeddingsEmbeddingsDataClass94356170115424
 */
export interface PydanticMainTextembeddingsEmbeddingsDataClass94356170115424 {
    /**
     * 
     * @type {Array<EmbeddingDataClass>}
     * @memberof PydanticMainTextembeddingsEmbeddingsDataClass94356170115424
     */
    'items'?: Array<EmbeddingDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextembeddingsEmbeddingsDataClass94356170115424
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextembeddingsEmbeddingsDataClass94356170115424
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextembeddingsEmbeddingsDataClass94356170156400
 */
export interface PydanticMainTextembeddingsEmbeddingsDataClass94356170156400 {
    /**
     * 
     * @type {Array<EmbeddingDataClass>}
     * @memberof PydanticMainTextembeddingsEmbeddingsDataClass94356170156400
     */
    'items'?: Array<EmbeddingDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextembeddingsEmbeddingsDataClass94356170156400
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextembeddingsEmbeddingsDataClass94356170156400
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextembeddingsEmbeddingsDataClass94356170166224
 */
export interface PydanticMainTextembeddingsEmbeddingsDataClass94356170166224 {
    /**
     * 
     * @type {Array<EmbeddingDataClass>}
     * @memberof PydanticMainTextembeddingsEmbeddingsDataClass94356170166224
     */
    'items'?: Array<EmbeddingDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextembeddingsEmbeddingsDataClass94356170166224
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextembeddingsEmbeddingsDataClass94356170166224
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextentitySentimentEntitySentimentDataClass94356170080672
 */
export interface PydanticMainTextentitySentimentEntitySentimentDataClass94356170080672 {
    /**
     * 
     * @type {Array<Entity>}
     * @memberof PydanticMainTextentitySentimentEntitySentimentDataClass94356170080672
     */
    'items': Array<Entity>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextentitySentimentEntitySentimentDataClass94356170080672
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextentitySentimentEntitySentimentDataClass94356170080672
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextentitySentimentEntitySentimentDataClass94356170230480
 */
export interface PydanticMainTextentitySentimentEntitySentimentDataClass94356170230480 {
    /**
     * 
     * @type {Array<Entity>}
     * @memberof PydanticMainTextentitySentimentEntitySentimentDataClass94356170230480
     */
    'items': Array<Entity>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextentitySentimentEntitySentimentDataClass94356170230480
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextentitySentimentEntitySentimentDataClass94356170230480
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextgenerationGenerationDataClass94356170040464
 */
export interface PydanticMainTextgenerationGenerationDataClass94356170040464 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTextgenerationGenerationDataClass94356170040464
     */
    'generated_text': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextgenerationGenerationDataClass94356170040464
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextgenerationGenerationDataClass94356170040464
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextgenerationGenerationDataClass94356170041408
 */
export interface PydanticMainTextgenerationGenerationDataClass94356170041408 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTextgenerationGenerationDataClass94356170041408
     */
    'generated_text': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextgenerationGenerationDataClass94356170041408
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextgenerationGenerationDataClass94356170041408
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextgenerationGenerationDataClass94356170075952
 */
export interface PydanticMainTextgenerationGenerationDataClass94356170075952 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTextgenerationGenerationDataClass94356170075952
     */
    'generated_text': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextgenerationGenerationDataClass94356170075952
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextgenerationGenerationDataClass94356170075952
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356166205104
 */
export interface PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356166205104 {
    /**
     * 
     * @type {Array<InfosKeywordExtractionDataClass>}
     * @memberof PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356166205104
     */
    'items'?: Array<InfosKeywordExtractionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356166205104
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356166205104
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356166232496
 */
export interface PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356166232496 {
    /**
     * 
     * @type {Array<InfosKeywordExtractionDataClass>}
     * @memberof PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356166232496
     */
    'items'?: Array<InfosKeywordExtractionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356166232496
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356166232496
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356169742288
 */
export interface PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356169742288 {
    /**
     * 
     * @type {Array<InfosKeywordExtractionDataClass>}
     * @memberof PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356169742288
     */
    'items'?: Array<InfosKeywordExtractionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356169742288
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356169742288
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356169746432
 */
export interface PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356169746432 {
    /**
     * 
     * @type {Array<InfosKeywordExtractionDataClass>}
     * @memberof PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356169746432
     */
    'items'?: Array<InfosKeywordExtractionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356169746432
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356169746432
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356169778208
 */
export interface PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356169778208 {
    /**
     * 
     * @type {Array<InfosKeywordExtractionDataClass>}
     * @memberof PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356169778208
     */
    'items'?: Array<InfosKeywordExtractionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356169778208
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356169778208
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356169779152
 */
export interface PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356169779152 {
    /**
     * 
     * @type {Array<InfosKeywordExtractionDataClass>}
     * @memberof PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356169779152
     */
    'items'?: Array<InfosKeywordExtractionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356169779152
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356169779152
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356169809584
 */
export interface PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356169809584 {
    /**
     * 
     * @type {Array<InfosKeywordExtractionDataClass>}
     * @memberof PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356169809584
     */
    'items'?: Array<InfosKeywordExtractionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356169809584
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356169809584
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356169812752
 */
export interface PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356169812752 {
    /**
     * 
     * @type {Array<InfosKeywordExtractionDataClass>}
     * @memberof PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356169812752
     */
    'items'?: Array<InfosKeywordExtractionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356169812752
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextkeywordExtractionKeywordExtractionDataClass94356169812752
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextmoderationModerationDataClass94356169813696
 */
export interface PydanticMainTextmoderationModerationDataClass94356169813696 {
    /**
     * 
     * @type {number}
     * @memberof PydanticMainTextmoderationModerationDataClass94356169813696
     */
    'nsfw_likelihood': number;
    /**
     * 
     * @type {Array<TextModerationItem>}
     * @memberof PydanticMainTextmoderationModerationDataClass94356169813696
     */
    'items'?: Array<TextModerationItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextmoderationModerationDataClass94356169813696
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextmoderationModerationDataClass94356169813696
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextmoderationModerationDataClass94356169843824
 */
export interface PydanticMainTextmoderationModerationDataClass94356169843824 {
    /**
     * 
     * @type {number}
     * @memberof PydanticMainTextmoderationModerationDataClass94356169843824
     */
    'nsfw_likelihood': number;
    /**
     * 
     * @type {Array<TextModerationItem>}
     * @memberof PydanticMainTextmoderationModerationDataClass94356169843824
     */
    'items'?: Array<TextModerationItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextmoderationModerationDataClass94356169843824
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextmoderationModerationDataClass94356169843824
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextmoderationModerationDataClass94356169890528
 */
export interface PydanticMainTextmoderationModerationDataClass94356169890528 {
    /**
     * 
     * @type {number}
     * @memberof PydanticMainTextmoderationModerationDataClass94356169890528
     */
    'nsfw_likelihood': number;
    /**
     * 
     * @type {Array<TextModerationItem>}
     * @memberof PydanticMainTextmoderationModerationDataClass94356169890528
     */
    'items'?: Array<TextModerationItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextmoderationModerationDataClass94356169890528
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextmoderationModerationDataClass94356169890528
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextmoderationModerationDataClass94356169914352
 */
export interface PydanticMainTextmoderationModerationDataClass94356169914352 {
    /**
     * 
     * @type {number}
     * @memberof PydanticMainTextmoderationModerationDataClass94356169914352
     */
    'nsfw_likelihood': number;
    /**
     * 
     * @type {Array<TextModerationItem>}
     * @memberof PydanticMainTextmoderationModerationDataClass94356169914352
     */
    'items'?: Array<TextModerationItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextmoderationModerationDataClass94356169914352
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextmoderationModerationDataClass94356169914352
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356164947088
 */
export interface PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356164947088 {
    /**
     * 
     * @type {Array<InfosNamedEntityRecognitionDataClass>}
     * @memberof PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356164947088
     */
    'items'?: Array<InfosNamedEntityRecognitionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356164947088
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356164947088
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169837088
 */
export interface PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169837088 {
    /**
     * 
     * @type {Array<InfosNamedEntityRecognitionDataClass>}
     * @memberof PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169837088
     */
    'items'?: Array<InfosNamedEntityRecognitionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169837088
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169837088
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169842288
 */
export interface PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169842288 {
    /**
     * 
     * @type {Array<InfosNamedEntityRecognitionDataClass>}
     * @memberof PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169842288
     */
    'items'?: Array<InfosNamedEntityRecognitionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169842288
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169842288
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169845600
 */
export interface PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169845600 {
    /**
     * 
     * @type {Array<InfosNamedEntityRecognitionDataClass>}
     * @memberof PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169845600
     */
    'items'?: Array<InfosNamedEntityRecognitionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169845600
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169845600
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169859488
 */
export interface PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169859488 {
    /**
     * 
     * @type {Array<InfosNamedEntityRecognitionDataClass>}
     * @memberof PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169859488
     */
    'items'?: Array<InfosNamedEntityRecognitionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169859488
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169859488
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169863792
 */
export interface PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169863792 {
    /**
     * 
     * @type {Array<InfosNamedEntityRecognitionDataClass>}
     * @memberof PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169863792
     */
    'items'?: Array<InfosNamedEntityRecognitionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169863792
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169863792
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169868096
 */
export interface PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169868096 {
    /**
     * 
     * @type {Array<InfosNamedEntityRecognitionDataClass>}
     * @memberof PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169868096
     */
    'items'?: Array<InfosNamedEntityRecognitionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169868096
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169868096
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169874912
 */
export interface PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169874912 {
    /**
     * 
     * @type {Array<InfosNamedEntityRecognitionDataClass>}
     * @memberof PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169874912
     */
    'items'?: Array<InfosNamedEntityRecognitionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169874912
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169874912
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169878080
 */
export interface PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169878080 {
    /**
     * 
     * @type {Array<InfosNamedEntityRecognitionDataClass>}
     * @memberof PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169878080
     */
    'items'?: Array<InfosNamedEntityRecognitionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169878080
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169878080
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169881248
 */
export interface PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169881248 {
    /**
     * 
     * @type {Array<InfosNamedEntityRecognitionDataClass>}
     * @memberof PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169881248
     */
    'items'?: Array<InfosNamedEntityRecognitionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169881248
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextnamedEntityRecognitionNamedEntityRecognitionDataClass94356169881248
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextquestionAnswerQuestionAnswerDataClass94356164885936
 */
export interface PydanticMainTextquestionAnswerQuestionAnswerDataClass94356164885936 {
    /**
     * 
     * @type {Array<string>}
     * @memberof PydanticMainTextquestionAnswerQuestionAnswerDataClass94356164885936
     */
    'answers'?: Array<string>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextquestionAnswerQuestionAnswerDataClass94356164885936
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextquestionAnswerQuestionAnswerDataClass94356164885936
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextquestionAnswerQuestionAnswerDataClass94356164891920
 */
export interface PydanticMainTextquestionAnswerQuestionAnswerDataClass94356164891920 {
    /**
     * 
     * @type {Array<string>}
     * @memberof PydanticMainTextquestionAnswerQuestionAnswerDataClass94356164891920
     */
    'answers'?: Array<string>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextquestionAnswerQuestionAnswerDataClass94356164891920
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextquestionAnswerQuestionAnswerDataClass94356164891920
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextquestionAnswerQuestionAnswerDataClass94356169942272
 */
export interface PydanticMainTextquestionAnswerQuestionAnswerDataClass94356169942272 {
    /**
     * 
     * @type {Array<string>}
     * @memberof PydanticMainTextquestionAnswerQuestionAnswerDataClass94356169942272
     */
    'answers'?: Array<string>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextquestionAnswerQuestionAnswerDataClass94356169942272
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextquestionAnswerQuestionAnswerDataClass94356169942272
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextquestionAnswerQuestionAnswerDataClass94356169947424
 */
export interface PydanticMainTextquestionAnswerQuestionAnswerDataClass94356169947424 {
    /**
     * 
     * @type {Array<string>}
     * @memberof PydanticMainTextquestionAnswerQuestionAnswerDataClass94356169947424
     */
    'answers'?: Array<string>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextquestionAnswerQuestionAnswerDataClass94356169947424
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextquestionAnswerQuestionAnswerDataClass94356169947424
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356164851776
 */
export interface PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356164851776 {
    /**
     * 
     * @type {GeneralSentimentEnum}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356164851776
     */
    'general_sentiment': GeneralSentimentEnum;
    /**
     * 
     * @type {number}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356164851776
     */
    'general_sentiment_rate': number;
    /**
     * 
     * @type {Array<SegmentSentimentAnalysisDataClass>}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356164851776
     */
    'items'?: Array<SegmentSentimentAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356164851776
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356164851776
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356166209472
 */
export interface PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356166209472 {
    /**
     * 
     * @type {GeneralSentimentEnum}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356166209472
     */
    'general_sentiment': GeneralSentimentEnum;
    /**
     * 
     * @type {number}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356166209472
     */
    'general_sentiment_rate': number;
    /**
     * 
     * @type {Array<SegmentSentimentAnalysisDataClass>}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356166209472
     */
    'items'?: Array<SegmentSentimentAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356166209472
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356166209472
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169698768
 */
export interface PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169698768 {
    /**
     * 
     * @type {GeneralSentimentEnum}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169698768
     */
    'general_sentiment': GeneralSentimentEnum;
    /**
     * 
     * @type {number}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169698768
     */
    'general_sentiment_rate': number;
    /**
     * 
     * @type {Array<SegmentSentimentAnalysisDataClass>}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169698768
     */
    'items'?: Array<SegmentSentimentAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169698768
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169698768
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169702368
 */
export interface PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169702368 {
    /**
     * 
     * @type {GeneralSentimentEnum}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169702368
     */
    'general_sentiment': GeneralSentimentEnum;
    /**
     * 
     * @type {number}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169702368
     */
    'general_sentiment_rate': number;
    /**
     * 
     * @type {Array<SegmentSentimentAnalysisDataClass>}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169702368
     */
    'items'?: Array<SegmentSentimentAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169702368
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169702368
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169706464
 */
export interface PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169706464 {
    /**
     * 
     * @type {GeneralSentimentEnum}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169706464
     */
    'general_sentiment': GeneralSentimentEnum;
    /**
     * 
     * @type {number}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169706464
     */
    'general_sentiment_rate': number;
    /**
     * 
     * @type {Array<SegmentSentimentAnalysisDataClass>}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169706464
     */
    'items'?: Array<SegmentSentimentAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169706464
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169706464
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169709632
 */
export interface PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169709632 {
    /**
     * 
     * @type {GeneralSentimentEnum}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169709632
     */
    'general_sentiment': GeneralSentimentEnum;
    /**
     * 
     * @type {number}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169709632
     */
    'general_sentiment_rate': number;
    /**
     * 
     * @type {Array<SegmentSentimentAnalysisDataClass>}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169709632
     */
    'items'?: Array<SegmentSentimentAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169709632
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169709632
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169712800
 */
export interface PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169712800 {
    /**
     * 
     * @type {GeneralSentimentEnum}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169712800
     */
    'general_sentiment': GeneralSentimentEnum;
    /**
     * 
     * @type {number}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169712800
     */
    'general_sentiment_rate': number;
    /**
     * 
     * @type {Array<SegmentSentimentAnalysisDataClass>}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169712800
     */
    'items'?: Array<SegmentSentimentAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169712800
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169712800
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169715968
 */
export interface PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169715968 {
    /**
     * 
     * @type {GeneralSentimentEnum}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169715968
     */
    'general_sentiment': GeneralSentimentEnum;
    /**
     * 
     * @type {number}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169715968
     */
    'general_sentiment_rate': number;
    /**
     * 
     * @type {Array<SegmentSentimentAnalysisDataClass>}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169715968
     */
    'items'?: Array<SegmentSentimentAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169715968
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169715968
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169719136
 */
export interface PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169719136 {
    /**
     * 
     * @type {GeneralSentimentEnum}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169719136
     */
    'general_sentiment': GeneralSentimentEnum;
    /**
     * 
     * @type {number}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169719136
     */
    'general_sentiment_rate': number;
    /**
     * 
     * @type {Array<SegmentSentimentAnalysisDataClass>}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169719136
     */
    'items'?: Array<SegmentSentimentAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169719136
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169719136
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169723456
 */
export interface PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169723456 {
    /**
     * 
     * @type {GeneralSentimentEnum}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169723456
     */
    'general_sentiment': GeneralSentimentEnum;
    /**
     * 
     * @type {number}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169723456
     */
    'general_sentiment_rate': number;
    /**
     * 
     * @type {Array<SegmentSentimentAnalysisDataClass>}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169723456
     */
    'items'?: Array<SegmentSentimentAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169723456
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169723456
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169727168
 */
export interface PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169727168 {
    /**
     * 
     * @type {GeneralSentimentEnum}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169727168
     */
    'general_sentiment': GeneralSentimentEnum;
    /**
     * 
     * @type {number}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169727168
     */
    'general_sentiment_rate': number;
    /**
     * 
     * @type {Array<SegmentSentimentAnalysisDataClass>}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169727168
     */
    'items'?: Array<SegmentSentimentAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169727168
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextsentimentAnalysisSentimentAnalysisDataClass94356169727168
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextspellCheckSpellCheckDataClass94356164718240
 */
export interface PydanticMainTextspellCheckSpellCheckDataClass94356164718240 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTextspellCheckSpellCheckDataClass94356164718240
     */
    'text': string;
    /**
     * 
     * @type {Array<SpellCheckItem>}
     * @memberof PydanticMainTextspellCheckSpellCheckDataClass94356164718240
     */
    'items'?: Array<SpellCheckItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextspellCheckSpellCheckDataClass94356164718240
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextspellCheckSpellCheckDataClass94356164718240
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextspellCheckSpellCheckDataClass94356164949488
 */
export interface PydanticMainTextspellCheckSpellCheckDataClass94356164949488 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTextspellCheckSpellCheckDataClass94356164949488
     */
    'text': string;
    /**
     * 
     * @type {Array<SpellCheckItem>}
     * @memberof PydanticMainTextspellCheckSpellCheckDataClass94356164949488
     */
    'items'?: Array<SpellCheckItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextspellCheckSpellCheckDataClass94356164949488
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextspellCheckSpellCheckDataClass94356164949488
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextspellCheckSpellCheckDataClass94356166072672
 */
export interface PydanticMainTextspellCheckSpellCheckDataClass94356166072672 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTextspellCheckSpellCheckDataClass94356166072672
     */
    'text': string;
    /**
     * 
     * @type {Array<SpellCheckItem>}
     * @memberof PydanticMainTextspellCheckSpellCheckDataClass94356166072672
     */
    'items'?: Array<SpellCheckItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextspellCheckSpellCheckDataClass94356166072672
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextspellCheckSpellCheckDataClass94356166072672
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextspellCheckSpellCheckDataClass94356166978288
 */
export interface PydanticMainTextspellCheckSpellCheckDataClass94356166978288 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTextspellCheckSpellCheckDataClass94356166978288
     */
    'text': string;
    /**
     * 
     * @type {Array<SpellCheckItem>}
     * @memberof PydanticMainTextspellCheckSpellCheckDataClass94356166978288
     */
    'items'?: Array<SpellCheckItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextspellCheckSpellCheckDataClass94356166978288
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextspellCheckSpellCheckDataClass94356166978288
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextspellCheckSpellCheckDataClass94356170145328
 */
export interface PydanticMainTextspellCheckSpellCheckDataClass94356170145328 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTextspellCheckSpellCheckDataClass94356170145328
     */
    'text': string;
    /**
     * 
     * @type {Array<SpellCheckItem>}
     * @memberof PydanticMainTextspellCheckSpellCheckDataClass94356170145328
     */
    'items'?: Array<SpellCheckItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextspellCheckSpellCheckDataClass94356170145328
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextspellCheckSpellCheckDataClass94356170145328
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextsummarizeSummarizeDataClass94356169972912
 */
export interface PydanticMainTextsummarizeSummarizeDataClass94356169972912 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTextsummarizeSummarizeDataClass94356169972912
     */
    'result': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextsummarizeSummarizeDataClass94356169972912
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextsummarizeSummarizeDataClass94356169972912
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextsummarizeSummarizeDataClass94356169988768
 */
export interface PydanticMainTextsummarizeSummarizeDataClass94356169988768 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTextsummarizeSummarizeDataClass94356169988768
     */
    'result': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextsummarizeSummarizeDataClass94356169988768
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextsummarizeSummarizeDataClass94356169988768
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextsummarizeSummarizeDataClass94356169989712
 */
export interface PydanticMainTextsummarizeSummarizeDataClass94356169989712 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTextsummarizeSummarizeDataClass94356169989712
     */
    'result': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextsummarizeSummarizeDataClass94356169989712
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextsummarizeSummarizeDataClass94356169989712
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextsummarizeSummarizeDataClass94356169990656
 */
export interface PydanticMainTextsummarizeSummarizeDataClass94356169990656 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTextsummarizeSummarizeDataClass94356169990656
     */
    'result': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextsummarizeSummarizeDataClass94356169990656
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextsummarizeSummarizeDataClass94356169990656
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextsummarizeSummarizeDataClass94356169991600
 */
export interface PydanticMainTextsummarizeSummarizeDataClass94356169991600 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTextsummarizeSummarizeDataClass94356169991600
     */
    'result': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextsummarizeSummarizeDataClass94356169991600
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextsummarizeSummarizeDataClass94356169991600
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextsummarizeSummarizeDataClass94356169992544
 */
export interface PydanticMainTextsummarizeSummarizeDataClass94356169992544 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTextsummarizeSummarizeDataClass94356169992544
     */
    'result': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextsummarizeSummarizeDataClass94356169992544
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextsummarizeSummarizeDataClass94356169992544
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextsummarizeSummarizeDataClass94356169994416
 */
export interface PydanticMainTextsummarizeSummarizeDataClass94356169994416 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTextsummarizeSummarizeDataClass94356169994416
     */
    'result': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextsummarizeSummarizeDataClass94356169994416
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextsummarizeSummarizeDataClass94356169994416
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextsummarizeSummarizeDataClass94356169997776
 */
export interface PydanticMainTextsummarizeSummarizeDataClass94356169997776 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTextsummarizeSummarizeDataClass94356169997776
     */
    'result': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextsummarizeSummarizeDataClass94356169997776
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextsummarizeSummarizeDataClass94356169997776
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextsummarizeSummarizeDataClass94356170002144
 */
export interface PydanticMainTextsummarizeSummarizeDataClass94356170002144 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTextsummarizeSummarizeDataClass94356170002144
     */
    'result': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextsummarizeSummarizeDataClass94356170002144
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextsummarizeSummarizeDataClass94356170002144
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextsyntaxAnalysisSyntaxAnalysisDataClass94356166143600
 */
export interface PydanticMainTextsyntaxAnalysisSyntaxAnalysisDataClass94356166143600 {
    /**
     * 
     * @type {Array<InfosSyntaxAnalysisDataClass>}
     * @memberof PydanticMainTextsyntaxAnalysisSyntaxAnalysisDataClass94356166143600
     */
    'items'?: Array<InfosSyntaxAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextsyntaxAnalysisSyntaxAnalysisDataClass94356166143600
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextsyntaxAnalysisSyntaxAnalysisDataClass94356166143600
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextsyntaxAnalysisSyntaxAnalysisDataClass94356166162272
 */
export interface PydanticMainTextsyntaxAnalysisSyntaxAnalysisDataClass94356166162272 {
    /**
     * 
     * @type {Array<InfosSyntaxAnalysisDataClass>}
     * @memberof PydanticMainTextsyntaxAnalysisSyntaxAnalysisDataClass94356166162272
     */
    'items'?: Array<InfosSyntaxAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextsyntaxAnalysisSyntaxAnalysisDataClass94356166162272
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextsyntaxAnalysisSyntaxAnalysisDataClass94356166162272
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextsyntaxAnalysisSyntaxAnalysisDataClass94356169755088
 */
export interface PydanticMainTextsyntaxAnalysisSyntaxAnalysisDataClass94356169755088 {
    /**
     * 
     * @type {Array<InfosSyntaxAnalysisDataClass>}
     * @memberof PydanticMainTextsyntaxAnalysisSyntaxAnalysisDataClass94356169755088
     */
    'items'?: Array<InfosSyntaxAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextsyntaxAnalysisSyntaxAnalysisDataClass94356169755088
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextsyntaxAnalysisSyntaxAnalysisDataClass94356169755088
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextsyntaxAnalysisSyntaxAnalysisDataClass94356169776320
 */
export interface PydanticMainTextsyntaxAnalysisSyntaxAnalysisDataClass94356169776320 {
    /**
     * 
     * @type {Array<InfosSyntaxAnalysisDataClass>}
     * @memberof PydanticMainTextsyntaxAnalysisSyntaxAnalysisDataClass94356169776320
     */
    'items'?: Array<InfosSyntaxAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextsyntaxAnalysisSyntaxAnalysisDataClass94356169776320
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextsyntaxAnalysisSyntaxAnalysisDataClass94356169776320
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextsyntaxAnalysisSyntaxAnalysisDataClass94356169777264
 */
export interface PydanticMainTextsyntaxAnalysisSyntaxAnalysisDataClass94356169777264 {
    /**
     * 
     * @type {Array<InfosSyntaxAnalysisDataClass>}
     * @memberof PydanticMainTextsyntaxAnalysisSyntaxAnalysisDataClass94356169777264
     */
    'items'?: Array<InfosSyntaxAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextsyntaxAnalysisSyntaxAnalysisDataClass94356169777264
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextsyntaxAnalysisSyntaxAnalysisDataClass94356169777264
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTextsyntaxAnalysisSyntaxAnalysisDataClass94356169780208
 */
export interface PydanticMainTextsyntaxAnalysisSyntaxAnalysisDataClass94356169780208 {
    /**
     * 
     * @type {Array<InfosSyntaxAnalysisDataClass>}
     * @memberof PydanticMainTextsyntaxAnalysisSyntaxAnalysisDataClass94356169780208
     */
    'items'?: Array<InfosSyntaxAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTextsyntaxAnalysisSyntaxAnalysisDataClass94356169780208
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTextsyntaxAnalysisSyntaxAnalysisDataClass94356169780208
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTexttopicExtractionTopicExtractionDataClass94356169944560
 */
export interface PydanticMainTexttopicExtractionTopicExtractionDataClass94356169944560 {
    /**
     * 
     * @type {Array<ExtractedTopic>}
     * @memberof PydanticMainTexttopicExtractionTopicExtractionDataClass94356169944560
     */
    'items'?: Array<ExtractedTopic>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTexttopicExtractionTopicExtractionDataClass94356169944560
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTexttopicExtractionTopicExtractionDataClass94356169944560
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTexttopicExtractionTopicExtractionDataClass94356170064240
 */
export interface PydanticMainTexttopicExtractionTopicExtractionDataClass94356170064240 {
    /**
     * 
     * @type {Array<ExtractedTopic>}
     * @memberof PydanticMainTexttopicExtractionTopicExtractionDataClass94356170064240
     */
    'items'?: Array<ExtractedTopic>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTexttopicExtractionTopicExtractionDataClass94356170064240
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTexttopicExtractionTopicExtractionDataClass94356170064240
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTexttopicExtractionTopicExtractionDataClass94356170067408
 */
export interface PydanticMainTexttopicExtractionTopicExtractionDataClass94356170067408 {
    /**
     * 
     * @type {Array<ExtractedTopic>}
     * @memberof PydanticMainTexttopicExtractionTopicExtractionDataClass94356170067408
     */
    'items'?: Array<ExtractedTopic>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTexttopicExtractionTopicExtractionDataClass94356170067408
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTexttopicExtractionTopicExtractionDataClass94356170067408
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTexttopicExtractionTopicExtractionDataClass94356170085648
 */
export interface PydanticMainTexttopicExtractionTopicExtractionDataClass94356170085648 {
    /**
     * 
     * @type {Array<ExtractedTopic>}
     * @memberof PydanticMainTexttopicExtractionTopicExtractionDataClass94356170085648
     */
    'items'?: Array<ExtractedTopic>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTexttopicExtractionTopicExtractionDataClass94356170085648
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTexttopicExtractionTopicExtractionDataClass94356170085648
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTexttopicExtractionTopicExtractionDataClass94356170086592
 */
export interface PydanticMainTexttopicExtractionTopicExtractionDataClass94356170086592 {
    /**
     * 
     * @type {Array<ExtractedTopic>}
     * @memberof PydanticMainTexttopicExtractionTopicExtractionDataClass94356170086592
     */
    'items'?: Array<ExtractedTopic>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTexttopicExtractionTopicExtractionDataClass94356170086592
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTexttopicExtractionTopicExtractionDataClass94356170086592
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170270288
 */
export interface PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170270288 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170270288
     */
    'text': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170270288
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170270288
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170292256
 */
export interface PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170292256 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170292256
     */
    'text': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170292256
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170292256
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170293200
 */
export interface PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170293200 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170293200
     */
    'text': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170293200
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170293200
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170301984
 */
export interface PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170301984 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170301984
     */
    'text': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170301984
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170301984
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170302928
 */
export interface PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170302928 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170302928
     */
    'text': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170302928
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170302928
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170303872
 */
export interface PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170303872 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170303872
     */
    'text': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170303872
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170303872
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170306688
 */
export interface PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170306688 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170306688
     */
    'text': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170306688
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170306688
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170307632
 */
export interface PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170307632 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170307632
     */
    'text': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170307632
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170307632
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170308576
 */
export interface PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170308576 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170308576
     */
    'text': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170308576
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170308576
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170311392
 */
export interface PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170311392 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170311392
     */
    'text': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170311392
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94356170311392
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTranslationdocumentTranslationDocumentTranslationDataClass94356170262144
 */
export interface PydanticMainTranslationdocumentTranslationDocumentTranslationDataClass94356170262144 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTranslationdocumentTranslationDocumentTranslationDataClass94356170262144
     */
    'file': string;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTranslationdocumentTranslationDocumentTranslationDataClass94356170262144
     */
    'document_resource_url': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTranslationdocumentTranslationDocumentTranslationDataClass94356170262144
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTranslationdocumentTranslationDocumentTranslationDataClass94356170262144
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTranslationdocumentTranslationDocumentTranslationDataClass94356170384880
 */
export interface PydanticMainTranslationdocumentTranslationDocumentTranslationDataClass94356170384880 {
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTranslationdocumentTranslationDocumentTranslationDataClass94356170384880
     */
    'file': string;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainTranslationdocumentTranslationDocumentTranslationDataClass94356170384880
     */
    'document_resource_url': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTranslationdocumentTranslationDocumentTranslationDataClass94356170384880
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTranslationdocumentTranslationDocumentTranslationDataClass94356170384880
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356166616560
 */
export interface PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356166616560 {
    /**
     * 
     * @type {Array<InfosLanguageDetectionDataClass>}
     * @memberof PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356166616560
     */
    'items'?: Array<InfosLanguageDetectionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356166616560
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356166616560
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170189664
 */
export interface PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170189664 {
    /**
     * 
     * @type {Array<InfosLanguageDetectionDataClass>}
     * @memberof PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170189664
     */
    'items'?: Array<InfosLanguageDetectionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170189664
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170189664
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170235968
 */
export interface PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170235968 {
    /**
     * 
     * @type {Array<InfosLanguageDetectionDataClass>}
     * @memberof PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170235968
     */
    'items'?: Array<InfosLanguageDetectionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170235968
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170235968
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170236912
 */
export interface PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170236912 {
    /**
     * 
     * @type {Array<InfosLanguageDetectionDataClass>}
     * @memberof PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170236912
     */
    'items'?: Array<InfosLanguageDetectionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170236912
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170236912
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170243744
 */
export interface PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170243744 {
    /**
     * 
     * @type {Array<InfosLanguageDetectionDataClass>}
     * @memberof PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170243744
     */
    'items'?: Array<InfosLanguageDetectionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170243744
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170243744
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170333792
 */
export interface PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170333792 {
    /**
     * 
     * @type {Array<InfosLanguageDetectionDataClass>}
     * @memberof PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170333792
     */
    'items'?: Array<InfosLanguageDetectionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170333792
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170333792
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170340800
 */
export interface PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170340800 {
    /**
     * 
     * @type {Array<InfosLanguageDetectionDataClass>}
     * @memberof PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170340800
     */
    'items'?: Array<InfosLanguageDetectionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170340800
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170340800
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170365296
 */
export interface PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170365296 {
    /**
     * 
     * @type {Array<InfosLanguageDetectionDataClass>}
     * @memberof PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170365296
     */
    'items'?: Array<InfosLanguageDetectionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170365296
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170365296
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170373920
 */
export interface PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170373920 {
    /**
     * 
     * @type {Array<InfosLanguageDetectionDataClass>}
     * @memberof PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170373920
     */
    'items'?: Array<InfosLanguageDetectionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170373920
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof PydanticMainTranslationlanguageDetectionLanguageDetectionDataClass94356170373920
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface PydanticMainVideoexplicitContentDetectionAsyncExplicitContentDetectionAsyncDataClass94356170450400
 */
export interface PydanticMainVideoexplicitContentDetectionAsyncExplicitContentDetectionAsyncDataClass94356170450400 {
    /**
     * 
     * @type {Array<ContentNSFW>}
     * @memberof PydanticMainVideoexplicitContentDetectionAsyncExplicitContentDetectionAsyncDataClass94356170450400
     */
    'moderation'?: Array<ContentNSFW>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainVideoexplicitContentDetectionAsyncExplicitContentDetectionAsyncDataClass94356170450400
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainVideoexplicitContentDetectionAsyncExplicitContentDetectionAsyncDataClass94356170450400
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainVideoexplicitContentDetectionAsyncExplicitContentDetectionAsyncDataClass94356170450400
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainVideoexplicitContentDetectionAsyncExplicitContentDetectionAsyncDataClass94356170450400
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainVideoexplicitContentDetectionAsyncExplicitContentDetectionAsyncDataClass94356170833312
 */
export interface PydanticMainVideoexplicitContentDetectionAsyncExplicitContentDetectionAsyncDataClass94356170833312 {
    /**
     * 
     * @type {Array<ContentNSFW>}
     * @memberof PydanticMainVideoexplicitContentDetectionAsyncExplicitContentDetectionAsyncDataClass94356170833312
     */
    'moderation'?: Array<ContentNSFW>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainVideoexplicitContentDetectionAsyncExplicitContentDetectionAsyncDataClass94356170833312
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainVideoexplicitContentDetectionAsyncExplicitContentDetectionAsyncDataClass94356170833312
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainVideoexplicitContentDetectionAsyncExplicitContentDetectionAsyncDataClass94356170833312
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainVideoexplicitContentDetectionAsyncExplicitContentDetectionAsyncDataClass94356170833312
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainVideofaceDetectionAsyncFaceDetectionAsyncDataClass94356170459200
 */
export interface PydanticMainVideofaceDetectionAsyncFaceDetectionAsyncDataClass94356170459200 {
    /**
     * 
     * @type {Array<VideoFace>}
     * @memberof PydanticMainVideofaceDetectionAsyncFaceDetectionAsyncDataClass94356170459200
     */
    'faces'?: Array<VideoFace>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainVideofaceDetectionAsyncFaceDetectionAsyncDataClass94356170459200
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainVideofaceDetectionAsyncFaceDetectionAsyncDataClass94356170459200
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainVideofaceDetectionAsyncFaceDetectionAsyncDataClass94356170459200
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainVideofaceDetectionAsyncFaceDetectionAsyncDataClass94356170459200
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainVideofaceDetectionAsyncFaceDetectionAsyncDataClass94356170460144
 */
export interface PydanticMainVideofaceDetectionAsyncFaceDetectionAsyncDataClass94356170460144 {
    /**
     * 
     * @type {Array<VideoFace>}
     * @memberof PydanticMainVideofaceDetectionAsyncFaceDetectionAsyncDataClass94356170460144
     */
    'faces'?: Array<VideoFace>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainVideofaceDetectionAsyncFaceDetectionAsyncDataClass94356170460144
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainVideofaceDetectionAsyncFaceDetectionAsyncDataClass94356170460144
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainVideofaceDetectionAsyncFaceDetectionAsyncDataClass94356170460144
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainVideofaceDetectionAsyncFaceDetectionAsyncDataClass94356170460144
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainVideolabelDetectionAsyncLabelDetectionAsyncDataClass94356165935808
 */
export interface PydanticMainVideolabelDetectionAsyncLabelDetectionAsyncDataClass94356165935808 {
    /**
     * 
     * @type {Array<VideoLabel>}
     * @memberof PydanticMainVideolabelDetectionAsyncLabelDetectionAsyncDataClass94356165935808
     */
    'labels'?: Array<VideoLabel>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainVideolabelDetectionAsyncLabelDetectionAsyncDataClass94356165935808
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainVideolabelDetectionAsyncLabelDetectionAsyncDataClass94356165935808
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainVideolabelDetectionAsyncLabelDetectionAsyncDataClass94356165935808
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainVideolabelDetectionAsyncLabelDetectionAsyncDataClass94356165935808
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainVideolabelDetectionAsyncLabelDetectionAsyncDataClass94356170278128
 */
export interface PydanticMainVideolabelDetectionAsyncLabelDetectionAsyncDataClass94356170278128 {
    /**
     * 
     * @type {Array<VideoLabel>}
     * @memberof PydanticMainVideolabelDetectionAsyncLabelDetectionAsyncDataClass94356170278128
     */
    'labels'?: Array<VideoLabel>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainVideolabelDetectionAsyncLabelDetectionAsyncDataClass94356170278128
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainVideolabelDetectionAsyncLabelDetectionAsyncDataClass94356170278128
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainVideolabelDetectionAsyncLabelDetectionAsyncDataClass94356170278128
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainVideolabelDetectionAsyncLabelDetectionAsyncDataClass94356170278128
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainVideopersonTrackingAsyncPersonTrackingAsyncDataClass94356170769536
 */
export interface PydanticMainVideopersonTrackingAsyncPersonTrackingAsyncDataClass94356170769536 {
    /**
     * 
     * @type {Array<VideoTrackingPerson>}
     * @memberof PydanticMainVideopersonTrackingAsyncPersonTrackingAsyncDataClass94356170769536
     */
    'persons'?: Array<VideoTrackingPerson>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainVideopersonTrackingAsyncPersonTrackingAsyncDataClass94356170769536
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainVideopersonTrackingAsyncPersonTrackingAsyncDataClass94356170769536
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainVideopersonTrackingAsyncPersonTrackingAsyncDataClass94356170769536
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainVideopersonTrackingAsyncPersonTrackingAsyncDataClass94356170769536
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainVideopersonTrackingAsyncPersonTrackingAsyncDataClass94356170776224
 */
export interface PydanticMainVideopersonTrackingAsyncPersonTrackingAsyncDataClass94356170776224 {
    /**
     * 
     * @type {Array<VideoTrackingPerson>}
     * @memberof PydanticMainVideopersonTrackingAsyncPersonTrackingAsyncDataClass94356170776224
     */
    'persons'?: Array<VideoTrackingPerson>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainVideopersonTrackingAsyncPersonTrackingAsyncDataClass94356170776224
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainVideopersonTrackingAsyncPersonTrackingAsyncDataClass94356170776224
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainVideopersonTrackingAsyncPersonTrackingAsyncDataClass94356170776224
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainVideopersonTrackingAsyncPersonTrackingAsyncDataClass94356170776224
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainVideotextDetectionAsyncTextDetectionAsyncDataClass94356170228320
 */
export interface PydanticMainVideotextDetectionAsyncTextDetectionAsyncDataClass94356170228320 {
    /**
     * 
     * @type {Array<VideoText>}
     * @memberof PydanticMainVideotextDetectionAsyncTextDetectionAsyncDataClass94356170228320
     */
    'texts'?: Array<VideoText>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainVideotextDetectionAsyncTextDetectionAsyncDataClass94356170228320
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainVideotextDetectionAsyncTextDetectionAsyncDataClass94356170228320
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainVideotextDetectionAsyncTextDetectionAsyncDataClass94356170228320
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainVideotextDetectionAsyncTextDetectionAsyncDataClass94356170228320
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface PydanticMainVideotextDetectionAsyncTextDetectionAsyncDataClass94356170409472
 */
export interface PydanticMainVideotextDetectionAsyncTextDetectionAsyncDataClass94356170409472 {
    /**
     * 
     * @type {Array<VideoText>}
     * @memberof PydanticMainVideotextDetectionAsyncTextDetectionAsyncDataClass94356170409472
     */
    'texts'?: Array<VideoText>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof PydanticMainVideotextDetectionAsyncTextDetectionAsyncDataClass94356170409472
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof PydanticMainVideotextDetectionAsyncTextDetectionAsyncDataClass94356170409472
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof PydanticMainVideotextDetectionAsyncTextDetectionAsyncDataClass94356170409472
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof PydanticMainVideotextDetectionAsyncTextDetectionAsyncDataClass94356170409472
     */
    'error'?: object;
}


/**
 * * `256x256` - 256x256 * `512x512` - 512x512 * `1024x1024` - 1024x1024
 * @export
 * @enum {string}
 */

export const ResolutionEnum = {
    _256x256: '256x256',
    _512x512: '512x512',
    _1024x1024: '1024x1024'
} as const;

export type ResolutionEnum = typeof ResolutionEnum[keyof typeof ResolutionEnum];


/**
 * 
 * @export
 * @interface ResumeEducation
 */
export interface ResumeEducation {
    /**
     * 
     * @type {number}
     * @memberof ResumeEducation
     */
    'total_years_education': number;
    /**
     * 
     * @type {Array<ResumeEducationEntry>}
     * @memberof ResumeEducation
     */
    'entries'?: Array<ResumeEducationEntry>;
}
/**
 * 
 * @export
 * @interface ResumeEducationEntry
 */
export interface ResumeEducationEntry {
    /**
     * 
     * @type {string}
     * @memberof ResumeEducationEntry
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ResumeEducationEntry
     */
    'start_date': string;
    /**
     * 
     * @type {string}
     * @memberof ResumeEducationEntry
     */
    'end_date': string;
    /**
     * 
     * @type {ResumeLocation}
     * @memberof ResumeEducationEntry
     */
    'location': ResumeLocation;
    /**
     * 
     * @type {string}
     * @memberof ResumeEducationEntry
     */
    'establishment': string;
    /**
     * 
     * @type {string}
     * @memberof ResumeEducationEntry
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ResumeEducationEntry
     */
    'gpa': string;
    /**
     * 
     * @type {string}
     * @memberof ResumeEducationEntry
     */
    'accreditation': string;
}
/**
 * 
 * @export
 * @interface ResumeExtractedData
 */
export interface ResumeExtractedData {
    /**
     * 
     * @type {ResumePersonalInfo}
     * @memberof ResumeExtractedData
     */
    'personal_infos': ResumePersonalInfo;
    /**
     * 
     * @type {ResumeEducation}
     * @memberof ResumeExtractedData
     */
    'education': ResumeEducation;
    /**
     * 
     * @type {ResumeWorkExp}
     * @memberof ResumeExtractedData
     */
    'work_experience': ResumeWorkExp;
    /**
     * 
     * @type {Array<ResumeLang>}
     * @memberof ResumeExtractedData
     */
    'languages'?: Array<ResumeLang>;
    /**
     * 
     * @type {Array<ResumeSkill>}
     * @memberof ResumeExtractedData
     */
    'skills'?: Array<ResumeSkill>;
    /**
     * 
     * @type {Array<ResumeSkill>}
     * @memberof ResumeExtractedData
     */
    'certifications'?: Array<ResumeSkill>;
    /**
     * 
     * @type {Array<ResumeSkill>}
     * @memberof ResumeExtractedData
     */
    'courses'?: Array<ResumeSkill>;
    /**
     * 
     * @type {Array<ResumeSkill>}
     * @memberof ResumeExtractedData
     */
    'publications'?: Array<ResumeSkill>;
    /**
     * 
     * @type {Array<ResumeSkill>}
     * @memberof ResumeExtractedData
     */
    'interests'?: Array<ResumeSkill>;
}
/**
 * 
 * @export
 * @interface ResumeLang
 */
export interface ResumeLang {
    /**
     * 
     * @type {string}
     * @memberof ResumeLang
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ResumeLang
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface ResumeLocation
 */
export interface ResumeLocation {
    /**
     * 
     * @type {string}
     * @memberof ResumeLocation
     */
    'formatted_location': string;
    /**
     * 
     * @type {string}
     * @memberof ResumeLocation
     */
    'postal_code': string;
    /**
     * 
     * @type {string}
     * @memberof ResumeLocation
     */
    'region': string;
    /**
     * 
     * @type {string}
     * @memberof ResumeLocation
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof ResumeLocation
     */
    'country_code': string;
    /**
     * 
     * @type {string}
     * @memberof ResumeLocation
     */
    'raw_input_location': string;
    /**
     * 
     * @type {string}
     * @memberof ResumeLocation
     */
    'street': string;
    /**
     * 
     * @type {string}
     * @memberof ResumeLocation
     */
    'street_number': string;
    /**
     * 
     * @type {string}
     * @memberof ResumeLocation
     */
    'appartment_number': string;
    /**
     * 
     * @type {string}
     * @memberof ResumeLocation
     */
    'city': string;
}
/**
 * 
 * @export
 * @interface ResumePersonalInfo
 */
export interface ResumePersonalInfo {
    /**
     * 
     * @type {ResumePersonalName}
     * @memberof ResumePersonalInfo
     */
    'name': ResumePersonalName;
    /**
     * 
     * @type {ResumeLocation}
     * @memberof ResumePersonalInfo
     */
    'address': ResumeLocation;
    /**
     * 
     * @type {string}
     * @memberof ResumePersonalInfo
     */
    'self_summary': string;
    /**
     * 
     * @type {string}
     * @memberof ResumePersonalInfo
     */
    'objective': string;
    /**
     * 
     * @type {string}
     * @memberof ResumePersonalInfo
     */
    'date_of_birth': string;
    /**
     * 
     * @type {string}
     * @memberof ResumePersonalInfo
     */
    'place_of_birth': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResumePersonalInfo
     */
    'phones'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResumePersonalInfo
     */
    'mails'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResumePersonalInfo
     */
    'urls'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResumePersonalInfo
     */
    'fax'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ResumePersonalInfo
     */
    'current_profession': string;
    /**
     * 
     * @type {string}
     * @memberof ResumePersonalInfo
     */
    'gender': string;
    /**
     * 
     * @type {string}
     * @memberof ResumePersonalInfo
     */
    'nationality': string;
    /**
     * 
     * @type {string}
     * @memberof ResumePersonalInfo
     */
    'martial_status': string;
    /**
     * 
     * @type {string}
     * @memberof ResumePersonalInfo
     */
    'current_salary': string;
}
/**
 * 
 * @export
 * @interface ResumePersonalName
 */
export interface ResumePersonalName {
    /**
     * 
     * @type {string}
     * @memberof ResumePersonalName
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof ResumePersonalName
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof ResumePersonalName
     */
    'raw_name': string;
    /**
     * 
     * @type {string}
     * @memberof ResumePersonalName
     */
    'middle': string;
    /**
     * 
     * @type {string}
     * @memberof ResumePersonalName
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ResumePersonalName
     */
    'prefix': string;
    /**
     * 
     * @type {string}
     * @memberof ResumePersonalName
     */
    'sufix': string;
}
/**
 * 
 * @export
 * @interface ResumeSkill
 */
export interface ResumeSkill {
    /**
     * 
     * @type {string}
     * @memberof ResumeSkill
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ResumeSkill
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ResumeWorkExp
 */
export interface ResumeWorkExp {
    /**
     * 
     * @type {string}
     * @memberof ResumeWorkExp
     */
    'total_years_experience': string;
    /**
     * 
     * @type {Array<ResumeWorkExpEntry>}
     * @memberof ResumeWorkExp
     */
    'entries'?: Array<ResumeWorkExpEntry>;
}
/**
 * 
 * @export
 * @interface ResumeWorkExpEntry
 */
export interface ResumeWorkExpEntry {
    /**
     * 
     * @type {string}
     * @memberof ResumeWorkExpEntry
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ResumeWorkExpEntry
     */
    'start_date': string;
    /**
     * 
     * @type {string}
     * @memberof ResumeWorkExpEntry
     */
    'end_date': string;
    /**
     * 
     * @type {string}
     * @memberof ResumeWorkExpEntry
     */
    'company': string;
    /**
     * 
     * @type {ResumeLocation}
     * @memberof ResumeWorkExpEntry
     */
    'location': ResumeLocation;
    /**
     * 
     * @type {string}
     * @memberof ResumeWorkExpEntry
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ResumeWorkExpEntry
     */
    'industry': string;
}
/**
 * 
 * @export
 * @interface Row
 */
export interface Row {
    /**
     * 
     * @type {Array<Cell>}
     * @memberof Row
     */
    'cells'?: Array<Cell>;
}
/**
 * This class is used in SentimentAnalysisDataClass to describe each segment analyzed.      Args:         - segment (str): The segment analyzed         - sentiment (Literal[\'Positve\', \'Negative\', \'Neutral\']) (Case is ignore): Sentiment of segment         - sentiment_rate (float between 0 and 1): Rate of sentiment     
 * @export
 * @interface SegmentSentimentAnalysisDataClass
 */
export interface SegmentSentimentAnalysisDataClass {
    /**
     * 
     * @type {string}
     * @memberof SegmentSentimentAnalysisDataClass
     */
    'segment': string;
    /**
     * 
     * @type {SentimentB6eEnum}
     * @memberof SegmentSentimentAnalysisDataClass
     */
    'sentiment': SentimentB6eEnum;
    /**
     * 
     * @type {number}
     * @memberof SegmentSentimentAnalysisDataClass
     */
    'sentiment_rate': number;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const SentimentB6eEnum = {
    Positive: 'Positive',
    Negative: 'Negative',
    Neutral: 'Neutral'
} as const;

export type SentimentB6eEnum = typeof SentimentB6eEnum[keyof typeof SentimentB6eEnum];


/**
 * 
 * @export
 * @interface SpeechDiarization
 */
export interface SpeechDiarization {
    /**
     * 
     * @type {number}
     * @memberof SpeechDiarization
     */
    'total_speakers': number;
    /**
     * 
     * @type {Array<SpeechDiarizationEntry>}
     * @memberof SpeechDiarization
     */
    'entries'?: Array<SpeechDiarizationEntry>;
    /**
     * 
     * @type {string}
     * @memberof SpeechDiarization
     */
    'error_message'?: string;
}
/**
 * 
 * @export
 * @interface SpeechDiarizationEntry
 */
export interface SpeechDiarizationEntry {
    /**
     * 
     * @type {string}
     * @memberof SpeechDiarizationEntry
     */
    'segment': string;
    /**
     * 
     * @type {string}
     * @memberof SpeechDiarizationEntry
     */
    'start_time': string;
    /**
     * 
     * @type {string}
     * @memberof SpeechDiarizationEntry
     */
    'end_time': string;
    /**
     * 
     * @type {number}
     * @memberof SpeechDiarizationEntry
     */
    'speaker': number;
    /**
     * 
     * @type {number}
     * @memberof SpeechDiarizationEntry
     */
    'confidence': number;
}
/**
 * 
 * @export
 * @interface SpeechToTextAsyncRequest
 */
export interface SpeechToTextAsyncRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof SpeechToTextAsyncRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof SpeechToTextAsyncRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof SpeechToTextAsyncRequest
     */
    'show_original_response'?: boolean;
    /**
     * Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
     * @type {string}
     * @memberof SpeechToTextAsyncRequest
     */
    'webhook_receiver'?: string;
    /**
     * Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client\'s data ID to link the result internally).             Will only be used when webhook_receiver is set.
     * @type {{ [key: string]: any; }}
     * @memberof SpeechToTextAsyncRequest
     */
    'users_webhook_parameters'?: { [key: string]: any; };
    /**
     * A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\'google\' : \'google_model\', ibm\': \'ibm_model\'...}.                      **Caution**: setting models can be done only with `Content-Type` : `application/json`.                      
     * @type {{ [key: string]: string; }}
     * @memberof SpeechToTextAsyncRequest
     */
    'settings'?: { [key: string]: string; } | null;
    /**
     * File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
     * @type {File}
     * @memberof SpeechToTextAsyncRequest
     */
    'file'?: File;
    /**
     * File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @type {string}
     * @memberof SpeechToTextAsyncRequest
     */
    'file_url'?: string | null;
    /**
     * Language code expected (ex: en, fr)
     * @type {string}
     * @memberof SpeechToTextAsyncRequest
     */
    'language'?: string | null;
    /**
     * Number of speakers in the file audio
     * @type {number}
     * @memberof SpeechToTextAsyncRequest
     */
    'speakers'?: number | null;
    /**
     * Boolean value to specify weather or not the service will filter profanity and replace inappropriate words with a series of asterisks
     * @type {boolean}
     * @memberof SpeechToTextAsyncRequest
     */
    'profanity_filter'?: boolean | null;
    /**
     * List of words or composed words to be detected by the speech to text engine. (Ex: Word, Mike, Draw, Los Angeles,...)
     * @type {string}
     * @memberof SpeechToTextAsyncRequest
     */
    'custom_vocabulary'?: string;
    /**
     * Boolean value to specify weather to convert the audio/video file to wav format to be accepted by a majority of the providers
     * @type {boolean}
     * @memberof SpeechToTextAsyncRequest
     */
    'convert_to_wav'?: boolean | null;
}
/**
 *      Represents a spell check item with suggestions.      Args:         text (str): The text to spell check.         type (str, optional): The type of the text.         offset (int): The offset of the text.         length (int): The length of the text.         suggestions (Sequence[SuggestionItem], optional): The list of suggestions for the misspelled text.      Raises:         ValueError: If the offset or length is not positive.      Returns:         SpellCheckItem: An instance of the SpellCheckItem class.     
 * @export
 * @interface SpellCheckItem
 */
export interface SpellCheckItem {
    /**
     * 
     * @type {string}
     * @memberof SpellCheckItem
     */
    'text': string;
    /**
     * 
     * @type {string}
     * @memberof SpellCheckItem
     */
    'type': string;
    /**
     * 
     * @type {number}
     * @memberof SpellCheckItem
     */
    'offset': number;
    /**
     * 
     * @type {number}
     * @memberof SpellCheckItem
     */
    'length': number;
    /**
     * 
     * @type {Array<SuggestionItem>}
     * @memberof SpellCheckItem
     */
    'suggestions'?: Array<SuggestionItem>;
}
/**
 * * `finished` - finished * `failed` - failed * `Timeout error` - Timeout error * `processing` - processing
 * @export
 * @enum {string}
 */

export const StateEnum = {
    Finished: 'finished',
    Failed: 'failed',
    TimeoutError: 'Timeout error',
    Processing: 'processing'
} as const;

export type StateEnum = typeof StateEnum[keyof typeof StateEnum];


/**
 * * `succeeded` - Status Succeeded * `failed` - Status Failed * `finished` - Status Finished * `processing` - Status Processing
 * @export
 * @enum {string}
 */

export const StatusE80Enum = {
    Succeeded: 'succeeded',
    Failed: 'failed',
    Finished: 'finished',
    Processing: 'processing'
} as const;

export type StatusE80Enum = typeof StatusE80Enum[keyof typeof StatusE80Enum];


/**
 * 
 * @export
 * @enum {string}
 */

export const StatusF43Enum = {
    Sucess: 'sucess',
    Fail: 'fail'
} as const;

export type StatusF43Enum = typeof StatusF43Enum[keyof typeof StatusF43Enum];


/**
 * 
 * @export
 * @interface Subcategory
 */
export interface Subcategory {
}
/**
 * 
 * @export
 * @interface Subfeature
 */
export interface Subfeature {
    /**
     * 
     * @type {string}
     * @memberof Subfeature
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Subfeature
     */
    'fullname'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Subfeature
     */
    'description'?: string | null;
}
/**
 *      Represents a suggestion for a misspelled word.      Args:         suggestion (str): The suggested text.         score (float, optional): The score of the suggested text (between 0 and 1).      Raises:         ValueError: If the score is not between 0 and 1.      Returns:         SuggestionItem: An instance of the SuggestionItem class.     
 * @export
 * @interface SuggestionItem
 */
export interface SuggestionItem {
    /**
     * 
     * @type {string}
     * @memberof SuggestionItem
     */
    'suggestion': string;
    /**
     * 
     * @type {number}
     * @memberof SuggestionItem
     */
    'score': number;
}
/**
 * 
 * @export
 * @interface Table
 */
export interface Table {
    /**
     * 
     * @type {Array<Row>}
     * @memberof Table
     */
    'rows'?: Array<Row>;
    /**
     * 
     * @type {number}
     * @memberof Table
     */
    'num_rows': number;
    /**
     * 
     * @type {number}
     * @memberof Table
     */
    'num_cols': number;
}
/**
 * * `google` - google * `openai` - openai * `cohere` - cohere
 * @export
 * @enum {string}
 */

export const TargetProviderEnum = {
    Google: 'google',
    Openai: 'openai',
    Cohere: 'cohere'
} as const;

export type TargetProviderEnum = typeof TargetProviderEnum[keyof typeof TargetProviderEnum];


/**
 * 
 * @export
 * @interface Taxes
 */
export interface Taxes {
    /**
     * 
     * @type {number}
     * @memberof Taxes
     */
    'taxes'?: number;
    /**
     * 
     * @type {number}
     * @memberof Taxes
     */
    'rate'?: number;
}
/**
 * 
 * @export
 * @interface TaxesInvoice
 */
export interface TaxesInvoice {
    /**
     * 
     * @type {number}
     * @memberof TaxesInvoice
     */
    'value': number;
    /**
     * 
     * @type {number}
     * @memberof TaxesInvoice
     */
    'rate': number;
}
/**
 * 
 * @export
 * @interface TextModerationItem
 */
export interface TextModerationItem {
    /**
     * 
     * @type {string}
     * @memberof TextModerationItem
     */
    'label': string;
    /**
     * 
     * @type {number}
     * @memberof TextModerationItem
     */
    'likelihood': number;
}
/**
 * 
 * @export
 * @interface TextToSpeechAsyncRequest
 */
export interface TextToSpeechAsyncRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof TextToSpeechAsyncRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof TextToSpeechAsyncRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof TextToSpeechAsyncRequest
     */
    'show_original_response'?: boolean;
    /**
     * Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
     * @type {string}
     * @memberof TextToSpeechAsyncRequest
     */
    'webhook_receiver'?: string;
    /**
     * Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client\'s data ID to link the result internally).             Will only be used when webhook_receiver is set.
     * @type {{ [key: string]: any; }}
     * @memberof TextToSpeechAsyncRequest
     */
    'users_webhook_parameters'?: { [key: string]: any; };
    /**
     * A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\'google\' : \'google_model\', ibm\': \'ibm_model\'...}.                      **Caution**: setting models can be done only with `Content-Type` : `application/json`.                      
     * @type {{ [key: string]: string; }}
     * @memberof TextToSpeechAsyncRequest
     */
    'settings'?: { [key: string]: string; } | null;
    /**
     * Text to analyze
     * @type {string}
     * @memberof TextToSpeechAsyncRequest
     */
    'text': string;
    /**
     * Language code expected (ex: en, fr)
     * @type {string}
     * @memberof TextToSpeechAsyncRequest
     */
    'language'?: string | null;
    /**
     * 
     * @type {TextToSpeechAsyncRequestOption}
     * @memberof TextToSpeechAsyncRequest
     */
    'option'?: TextToSpeechAsyncRequestOption;
    /**
     * Increase or decrease the speaking rate by expressing a positif or negatif number ranging between             100 and -100 (a relative value as percentage varying from -100% to 100%)
     * @type {number}
     * @memberof TextToSpeechAsyncRequest
     */
    'rate'?: number | null;
    /**
     * Increase or decrease the speaking pitch by expressing a positif or negatif number ranging between             100 and -100 (a relative value as percentage varying from -100% to 100%)
     * @type {number}
     * @memberof TextToSpeechAsyncRequest
     */
    'pitch'?: number | null;
    /**
     * Increase or decrease the audio volume by expressing a positif or negatif number ranging between             100 and -100 (a relative value as percentage varying from -100% to 100%)
     * @type {number}
     * @memberof TextToSpeechAsyncRequest
     */
    'volume'?: number | null;
    /**
     * Optional parameter to specify the audio format in which the audio will be generated. By default,             audios are encoded in MP3, except for lovoai which use the wav container.
     * @type {string}
     * @memberof TextToSpeechAsyncRequest
     */
    'audio_format'?: string | null;
    /**
     * Optional. The synthesis sample rate (in hertz) for this audio. When this is specified, the audio will be converted             either to the right passed value, or to a the nearest value acceptable by the provider
     * @type {number}
     * @memberof TextToSpeechAsyncRequest
     */
    'sampling_rate'?: number | null;
}
/**
 * @type TextToSpeechAsyncRequestOption
 * @export
 */
export type TextToSpeechAsyncRequestOption = BlankEnum | OptionEnum;

/**
 * 
 * @export
 * @interface TextaiDetectionAiDetectionRequest
 */
export interface TextaiDetectionAiDetectionRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof TextaiDetectionAiDetectionRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof TextaiDetectionAiDetectionRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof TextaiDetectionAiDetectionRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof TextaiDetectionAiDetectionRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof TextaiDetectionAiDetectionRequest
     */
    'show_original_response'?: boolean;
    /**
     * Text to analyze
     * @type {string}
     * @memberof TextaiDetectionAiDetectionRequest
     */
    'text': string;
    /**
     * Language code for the language the input text is written in (eg: en, fr).
     * @type {string}
     * @memberof TextaiDetectionAiDetectionRequest
     */
    'language'?: string | null;
}
/**
 * 
 * @export
 * @interface TextaiDetectionResponseModel
 */
export interface TextaiDetectionResponseModel {
    /**
     * 
     * @type {TextaiDetectionResponseModelSapling}
     * @memberof TextaiDetectionResponseModel
     */
    'sapling'?: TextaiDetectionResponseModelSapling;
    /**
     * 
     * @type {TextaiDetectionResponseModelOriginalityai}
     * @memberof TextaiDetectionResponseModel
     */
    'originalityai'?: TextaiDetectionResponseModelOriginalityai;
}
/**
 * 
 * @export
 * @interface TextaiDetectionResponseModelOriginalityai
 */
export interface TextaiDetectionResponseModelOriginalityai {
    /**
     * 
     * @type {number}
     * @memberof TextaiDetectionResponseModelOriginalityai
     */
    'ai_score': number;
    /**
     * 
     * @type {Array<AiDetectionItem>}
     * @memberof TextaiDetectionResponseModelOriginalityai
     */
    'items'?: Array<AiDetectionItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextaiDetectionResponseModelOriginalityai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextaiDetectionResponseModelOriginalityai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextaiDetectionResponseModelSapling
 */
export interface TextaiDetectionResponseModelSapling {
    /**
     * 
     * @type {number}
     * @memberof TextaiDetectionResponseModelSapling
     */
    'ai_score': number;
    /**
     * 
     * @type {Array<AiDetectionItem>}
     * @memberof TextaiDetectionResponseModelSapling
     */
    'items'?: Array<AiDetectionItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextaiDetectionResponseModelSapling
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextaiDetectionResponseModelSapling
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextanonymizationResponseModel
 */
export interface TextanonymizationResponseModel {
    /**
     * 
     * @type {TextanonymizationResponseModelEmvista}
     * @memberof TextanonymizationResponseModel
     */
    'emvista'?: TextanonymizationResponseModelEmvista;
    /**
     * 
     * @type {TextanonymizationResponseModelMicrosoft}
     * @memberof TextanonymizationResponseModel
     */
    'microsoft'?: TextanonymizationResponseModelMicrosoft;
    /**
     * 
     * @type {TextanonymizationResponseModelOneai}
     * @memberof TextanonymizationResponseModel
     */
    'oneai'?: TextanonymizationResponseModelOneai;
    /**
     * 
     * @type {TextanonymizationResponseModelOpenai}
     * @memberof TextanonymizationResponseModel
     */
    'openai'?: TextanonymizationResponseModelOpenai;
    /**
     * 
     * @type {TextanonymizationResponseModelAmazon}
     * @memberof TextanonymizationResponseModel
     */
    'amazon'?: TextanonymizationResponseModelAmazon;
}
/**
 * 
 * @export
 * @interface TextanonymizationResponseModelAmazon
 */
export interface TextanonymizationResponseModelAmazon {
    /**
     * 
     * @type {string}
     * @memberof TextanonymizationResponseModelAmazon
     */
    'result': string;
    /**
     * 
     * @type {Array<AnonymizationEntity>}
     * @memberof TextanonymizationResponseModelAmazon
     */
    'entities'?: Array<AnonymizationEntity>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextanonymizationResponseModelAmazon
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextanonymizationResponseModelAmazon
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextanonymizationResponseModelEmvista
 */
export interface TextanonymizationResponseModelEmvista {
    /**
     * 
     * @type {string}
     * @memberof TextanonymizationResponseModelEmvista
     */
    'result': string;
    /**
     * 
     * @type {Array<AnonymizationEntity>}
     * @memberof TextanonymizationResponseModelEmvista
     */
    'entities'?: Array<AnonymizationEntity>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextanonymizationResponseModelEmvista
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextanonymizationResponseModelEmvista
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextanonymizationResponseModelMicrosoft
 */
export interface TextanonymizationResponseModelMicrosoft {
    /**
     * 
     * @type {string}
     * @memberof TextanonymizationResponseModelMicrosoft
     */
    'result': string;
    /**
     * 
     * @type {Array<AnonymizationEntity>}
     * @memberof TextanonymizationResponseModelMicrosoft
     */
    'entities'?: Array<AnonymizationEntity>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextanonymizationResponseModelMicrosoft
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextanonymizationResponseModelMicrosoft
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextanonymizationResponseModelOneai
 */
export interface TextanonymizationResponseModelOneai {
    /**
     * 
     * @type {string}
     * @memberof TextanonymizationResponseModelOneai
     */
    'result': string;
    /**
     * 
     * @type {Array<AnonymizationEntity>}
     * @memberof TextanonymizationResponseModelOneai
     */
    'entities'?: Array<AnonymizationEntity>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextanonymizationResponseModelOneai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextanonymizationResponseModelOneai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextanonymizationResponseModelOpenai
 */
export interface TextanonymizationResponseModelOpenai {
    /**
     * 
     * @type {string}
     * @memberof TextanonymizationResponseModelOpenai
     */
    'result': string;
    /**
     * 
     * @type {Array<AnonymizationEntity>}
     * @memberof TextanonymizationResponseModelOpenai
     */
    'entities'?: Array<AnonymizationEntity>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextanonymizationResponseModelOpenai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextanonymizationResponseModelOpenai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextchatChatRequest
 */
export interface TextchatChatRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof TextchatChatRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof TextchatChatRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof TextchatChatRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof TextchatChatRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof TextchatChatRequest
     */
    'show_original_response'?: boolean;
    /**
     * A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\'google\' : \'google_model\', ibm\': \'ibm_model\'...}.                      **Caution**: setting models can be done only with `Content-Type` : `application/json`.                      
     * @type {{ [key: string]: string; }}
     * @memberof TextchatChatRequest
     */
    'settings'?: { [key: string]: string; } | null;
    /**
     * Start your conversation here...
     * @type {string}
     * @memberof TextchatChatRequest
     */
    'text'?: string | null;
    /**
     * A system message that helps set the behavior of the assistant. For example, \'You are a helpful assistant\'.
     * @type {string}
     * @memberof TextchatChatRequest
     */
    'chatbot_global_action'?: string | null;
    /**
     * A list containing all the previous conversations between the user and the chatbot AI. Each item in the list should be a dictionary with two keys: \'role\' and \'message\'. The \'role\' key specifies the role of the speaker and can have the values \'user\' or \'assistant\'. The \'message\' key contains the text of the conversation from the respective role. For example: [{\'role\': \'user\', \'message\': \'Hello\'}, {\'role\': \'assistant\', \'message\': \'Hi, how can I help you?\'}, ...]. This format allows easy identification of the speaker\'s role and their corresponding message.
     * @type {Array<{ [key: string]: any; }>}
     * @memberof TextchatChatRequest
     */
    'previous_history'?: Array<{ [key: string]: any; }>;
    /**
     * Higher values mean the model will take more risks and value 0 (argmax sampling) works better for scenarios with a well-defined answer.
     * @type {number}
     * @memberof TextchatChatRequest
     */
    'temperature'?: number;
    /**
     * The maximum number of tokens to generate in the completion. The token count of your prompt plus max_tokens cannot exceed the model\'s context length.
     * @type {number}
     * @memberof TextchatChatRequest
     */
    'max_tokens'?: number;
}
/**
 * 
 * @export
 * @interface TextchatResponseModel
 */
export interface TextchatResponseModel {
    /**
     * 
     * @type {TextchatResponseModelOpenai}
     * @memberof TextchatResponseModel
     */
    'openai'?: TextchatResponseModelOpenai;
    /**
     * 
     * @type {TextchatResponseModelGoogle}
     * @memberof TextchatResponseModel
     */
    'google'?: TextchatResponseModelGoogle;
}
/**
 * 
 * @export
 * @interface TextchatResponseModelGoogle
 */
export interface TextchatResponseModelGoogle {
    /**
     * 
     * @type {string}
     * @memberof TextchatResponseModelGoogle
     */
    'generated_text': string;
    /**
     * 
     * @type {Array<ChatMessageDataClass>}
     * @memberof TextchatResponseModelGoogle
     */
    'message'?: Array<ChatMessageDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextchatResponseModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextchatResponseModelGoogle
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextchatResponseModelOpenai
 */
export interface TextchatResponseModelOpenai {
    /**
     * 
     * @type {string}
     * @memberof TextchatResponseModelOpenai
     */
    'generated_text': string;
    /**
     * 
     * @type {Array<ChatMessageDataClass>}
     * @memberof TextchatResponseModelOpenai
     */
    'message'?: Array<ChatMessageDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextchatResponseModelOpenai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextchatResponseModelOpenai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextcodeGenerationCodeGenerationRequest
 */
export interface TextcodeGenerationCodeGenerationRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof TextcodeGenerationCodeGenerationRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof TextcodeGenerationCodeGenerationRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof TextcodeGenerationCodeGenerationRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof TextcodeGenerationCodeGenerationRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof TextcodeGenerationCodeGenerationRequest
     */
    'show_original_response'?: boolean;
    /**
     * Entrer the source code that will be used as a context.
     * @type {string}
     * @memberof TextcodeGenerationCodeGenerationRequest
     */
    'prompt'?: string | null;
    /**
     * Entrer the instruction you want to be followed.
     * @type {string}
     * @memberof TextcodeGenerationCodeGenerationRequest
     */
    'instruction': string;
    /**
     * Higher values mean the model will take more risks and value 0 (argmax sampling) works better for scenarios with a well-defined answer.
     * @type {number}
     * @memberof TextcodeGenerationCodeGenerationRequest
     */
    'temperature'?: number;
    /**
     * The maximum number of tokens to generate in the completion. The token count of your prompt plus max_tokens cannot exceed the model\'s context length.
     * @type {number}
     * @memberof TextcodeGenerationCodeGenerationRequest
     */
    'max_tokens'?: number;
}
/**
 * 
 * @export
 * @interface TextcodeGenerationResponseModel
 */
export interface TextcodeGenerationResponseModel {
    /**
     * 
     * @type {TextcodeGenerationResponseModelOpenai}
     * @memberof TextcodeGenerationResponseModel
     */
    'openai'?: TextcodeGenerationResponseModelOpenai;
    /**
     * 
     * @type {TextcodeGenerationResponseModelGoogle}
     * @memberof TextcodeGenerationResponseModel
     */
    'google'?: TextcodeGenerationResponseModelGoogle;
}
/**
 * 
 * @export
 * @interface TextcodeGenerationResponseModelGoogle
 */
export interface TextcodeGenerationResponseModelGoogle {
    /**
     * 
     * @type {string}
     * @memberof TextcodeGenerationResponseModelGoogle
     */
    'generated_text': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextcodeGenerationResponseModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextcodeGenerationResponseModelGoogle
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextcodeGenerationResponseModelOpenai
 */
export interface TextcodeGenerationResponseModelOpenai {
    /**
     * 
     * @type {string}
     * @memberof TextcodeGenerationResponseModelOpenai
     */
    'generated_text': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextcodeGenerationResponseModelOpenai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextcodeGenerationResponseModelOpenai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextcustomClassificationCustomClassificationRequest
 */
export interface TextcustomClassificationCustomClassificationRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof TextcustomClassificationCustomClassificationRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof TextcustomClassificationCustomClassificationRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof TextcustomClassificationCustomClassificationRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof TextcustomClassificationCustomClassificationRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof TextcustomClassificationCustomClassificationRequest
     */
    'show_original_response'?: boolean;
    /**
     * List of texts to classify
     * @type {Array<string>}
     * @memberof TextcustomClassificationCustomClassificationRequest
     */
    'texts': Array<string>;
    /**
     * List of the labels (classes) you want the texts to be classified as.
     * @type {Array<string>}
     * @memberof TextcustomClassificationCustomClassificationRequest
     */
    'labels': Array<string>;
    /**
     * List of text/label pairs (eg: [[\'I need help please wire me $1000 right now\', \'spam\'],]
     * @type {Array<Array<string>>}
     * @memberof TextcustomClassificationCustomClassificationRequest
     */
    'examples': Array<Array<string>>;
}
/**
 * 
 * @export
 * @interface TextcustomClassificationResponseModel
 */
export interface TextcustomClassificationResponseModel {
    /**
     * 
     * @type {TextcustomClassificationResponseModelOpenai}
     * @memberof TextcustomClassificationResponseModel
     */
    'openai'?: TextcustomClassificationResponseModelOpenai;
    /**
     * 
     * @type {TextcustomClassificationResponseModelCohere}
     * @memberof TextcustomClassificationResponseModel
     */
    'cohere'?: TextcustomClassificationResponseModelCohere;
}
/**
 * 
 * @export
 * @interface TextcustomClassificationResponseModelCohere
 */
export interface TextcustomClassificationResponseModelCohere {
    /**
     * 
     * @type {Array<ItemCustomClassificationDataClass>}
     * @memberof TextcustomClassificationResponseModelCohere
     */
    'classifications'?: Array<ItemCustomClassificationDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextcustomClassificationResponseModelCohere
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextcustomClassificationResponseModelCohere
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextcustomClassificationResponseModelOpenai
 */
export interface TextcustomClassificationResponseModelOpenai {
    /**
     * 
     * @type {Array<ItemCustomClassificationDataClass>}
     * @memberof TextcustomClassificationResponseModelOpenai
     */
    'classifications'?: Array<ItemCustomClassificationDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextcustomClassificationResponseModelOpenai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextcustomClassificationResponseModelOpenai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest
 */
export interface TextcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof TextcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof TextcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof TextcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof TextcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof TextcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest
     */
    'show_original_response'?: boolean;
    /**
     * Enter your input text.
     * @type {string}
     * @memberof TextcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest
     */
    'text': string;
    /**
     * List of entities (at least two) to extract from your text eg : [\'job\', \'country\'].
     * @type {Array<string>}
     * @memberof TextcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest
     */
    'entities': Array<string>;
    /**
     * List of examples eg : [{\'text\': \'an input text\', \'entities\' : [{\'entity\':\'entity_1\', \'category\':\'category_1\'}, ...]}, ...]
     * @type {Array<{ [key: string]: any; }>}
     * @memberof TextcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest
     */
    'examples'?: Array<{ [key: string]: any; }>;
}
/**
 * 
 * @export
 * @interface TextcustomNamedEntityRecognitionResponseModel
 */
export interface TextcustomNamedEntityRecognitionResponseModel {
    /**
     * 
     * @type {TextcustomNamedEntityRecognitionResponseModelOpenai}
     * @memberof TextcustomNamedEntityRecognitionResponseModel
     */
    'openai'?: TextcustomNamedEntityRecognitionResponseModelOpenai;
    /**
     * 
     * @type {TextcustomNamedEntityRecognitionResponseModelCohere}
     * @memberof TextcustomNamedEntityRecognitionResponseModel
     */
    'cohere'?: TextcustomNamedEntityRecognitionResponseModelCohere;
    /**
     * 
     * @type {TextcustomNamedEntityRecognitionResponseModelEdenAi}
     * @memberof TextcustomNamedEntityRecognitionResponseModel
     */
    'eden-ai'?: TextcustomNamedEntityRecognitionResponseModelEdenAi;
}
/**
 * 
 * @export
 * @interface TextcustomNamedEntityRecognitionResponseModelCohere
 */
export interface TextcustomNamedEntityRecognitionResponseModelCohere {
    /**
     * 
     * @type {Array<InfosCustomNamedEntityRecognitionDataClass>}
     * @memberof TextcustomNamedEntityRecognitionResponseModelCohere
     */
    'items'?: Array<InfosCustomNamedEntityRecognitionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextcustomNamedEntityRecognitionResponseModelCohere
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextcustomNamedEntityRecognitionResponseModelCohere
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextcustomNamedEntityRecognitionResponseModelEdenAi
 */
export interface TextcustomNamedEntityRecognitionResponseModelEdenAi {
    /**
     * 
     * @type {Array<InfosCustomNamedEntityRecognitionDataClass>}
     * @memberof TextcustomNamedEntityRecognitionResponseModelEdenAi
     */
    'items'?: Array<InfosCustomNamedEntityRecognitionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextcustomNamedEntityRecognitionResponseModelEdenAi
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextcustomNamedEntityRecognitionResponseModelEdenAi
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextcustomNamedEntityRecognitionResponseModelOpenai
 */
export interface TextcustomNamedEntityRecognitionResponseModelOpenai {
    /**
     * 
     * @type {Array<InfosCustomNamedEntityRecognitionDataClass>}
     * @memberof TextcustomNamedEntityRecognitionResponseModelOpenai
     */
    'items'?: Array<InfosCustomNamedEntityRecognitionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextcustomNamedEntityRecognitionResponseModelOpenai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextcustomNamedEntityRecognitionResponseModelOpenai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextembeddingsEmbeddingsRequest
 */
export interface TextembeddingsEmbeddingsRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof TextembeddingsEmbeddingsRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof TextembeddingsEmbeddingsRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof TextembeddingsEmbeddingsRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof TextembeddingsEmbeddingsRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof TextembeddingsEmbeddingsRequest
     */
    'show_original_response'?: boolean;
    /**
     * List of texts to transform into embeddings.
     * @type {Array<string>}
     * @memberof TextembeddingsEmbeddingsRequest
     */
    'texts': Array<string>;
}
/**
 * 
 * @export
 * @interface TextembeddingsResponseModel
 */
export interface TextembeddingsResponseModel {
    /**
     * 
     * @type {TextembeddingsResponseModelOpenai}
     * @memberof TextembeddingsResponseModel
     */
    'openai'?: TextembeddingsResponseModelOpenai;
    /**
     * 
     * @type {TextembeddingsResponseModelGoogle}
     * @memberof TextembeddingsResponseModel
     */
    'google'?: TextembeddingsResponseModelGoogle;
    /**
     * 
     * @type {TextembeddingsResponseModelCohere}
     * @memberof TextembeddingsResponseModel
     */
    'cohere'?: TextembeddingsResponseModelCohere;
}
/**
 * 
 * @export
 * @interface TextembeddingsResponseModelCohere
 */
export interface TextembeddingsResponseModelCohere {
    /**
     * 
     * @type {Array<EmbeddingDataClass>}
     * @memberof TextembeddingsResponseModelCohere
     */
    'items'?: Array<EmbeddingDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextembeddingsResponseModelCohere
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextembeddingsResponseModelCohere
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextembeddingsResponseModelGoogle
 */
export interface TextembeddingsResponseModelGoogle {
    /**
     * 
     * @type {Array<EmbeddingDataClass>}
     * @memberof TextembeddingsResponseModelGoogle
     */
    'items'?: Array<EmbeddingDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextembeddingsResponseModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextembeddingsResponseModelGoogle
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextembeddingsResponseModelOpenai
 */
export interface TextembeddingsResponseModelOpenai {
    /**
     * 
     * @type {Array<EmbeddingDataClass>}
     * @memberof TextembeddingsResponseModelOpenai
     */
    'items'?: Array<EmbeddingDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextembeddingsResponseModelOpenai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextembeddingsResponseModelOpenai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextentitySentimentEntitySentimentRequest
 */
export interface TextentitySentimentEntitySentimentRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof TextentitySentimentEntitySentimentRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof TextentitySentimentEntitySentimentRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof TextentitySentimentEntitySentimentRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof TextentitySentimentEntitySentimentRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof TextentitySentimentEntitySentimentRequest
     */
    'show_original_response'?: boolean;
    /**
     * Text to analyze
     * @type {string}
     * @memberof TextentitySentimentEntitySentimentRequest
     */
    'text': string;
    /**
     * Language code for the language the input text is written in (eg: en, fr).
     * @type {string}
     * @memberof TextentitySentimentEntitySentimentRequest
     */
    'language'?: string | null;
}
/**
 * 
 * @export
 * @interface TextentitySentimentResponseModel
 */
export interface TextentitySentimentResponseModel {
    /**
     * 
     * @type {TextentitySentimentResponseModelGoogle}
     * @memberof TextentitySentimentResponseModel
     */
    'google'?: TextentitySentimentResponseModelGoogle;
    /**
     * 
     * @type {TextentitySentimentResponseModelAmazon}
     * @memberof TextentitySentimentResponseModel
     */
    'amazon'?: TextentitySentimentResponseModelAmazon;
}
/**
 * 
 * @export
 * @interface TextentitySentimentResponseModelAmazon
 */
export interface TextentitySentimentResponseModelAmazon {
    /**
     * 
     * @type {Array<Entity>}
     * @memberof TextentitySentimentResponseModelAmazon
     */
    'items': Array<Entity>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextentitySentimentResponseModelAmazon
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextentitySentimentResponseModelAmazon
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextentitySentimentResponseModelGoogle
 */
export interface TextentitySentimentResponseModelGoogle {
    /**
     * 
     * @type {Array<Entity>}
     * @memberof TextentitySentimentResponseModelGoogle
     */
    'items': Array<Entity>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextentitySentimentResponseModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextentitySentimentResponseModelGoogle
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextgenerationGenerationRequest
 */
export interface TextgenerationGenerationRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof TextgenerationGenerationRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof TextgenerationGenerationRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof TextgenerationGenerationRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof TextgenerationGenerationRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof TextgenerationGenerationRequest
     */
    'show_original_response'?: boolean;
    /**
     * A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\'google\' : \'google_model\', ibm\': \'ibm_model\'...}.                      **Caution**: setting models can be done only with `Content-Type` : `application/json`.                      
     * @type {{ [key: string]: string; }}
     * @memberof TextgenerationGenerationRequest
     */
    'settings'?: { [key: string]: string; } | null;
    /**
     * Enter your prompt
     * @type {string}
     * @memberof TextgenerationGenerationRequest
     */
    'text': string;
    /**
     * Higher values mean the model will take more risks and value 0 (argmax sampling) works better for scenarios with a well-defined answer.
     * @type {number}
     * @memberof TextgenerationGenerationRequest
     */
    'temperature'?: number;
    /**
     * The maximum number of tokens to generate in the completion. The token count of your prompt plus max_tokens cannot exceed the model\'s context length.
     * @type {number}
     * @memberof TextgenerationGenerationRequest
     */
    'max_tokens'?: number;
}
/**
 * 
 * @export
 * @interface TextgenerationResponseModel
 */
export interface TextgenerationResponseModel {
    /**
     * 
     * @type {TextgenerationResponseModelOpenai}
     * @memberof TextgenerationResponseModel
     */
    'openai'?: TextgenerationResponseModelOpenai;
    /**
     * 
     * @type {TextgenerationResponseModelGoogle}
     * @memberof TextgenerationResponseModel
     */
    'google'?: TextgenerationResponseModelGoogle;
    /**
     * 
     * @type {TextgenerationResponseModelCohere}
     * @memberof TextgenerationResponseModel
     */
    'cohere'?: TextgenerationResponseModelCohere;
}
/**
 * 
 * @export
 * @interface TextgenerationResponseModelCohere
 */
export interface TextgenerationResponseModelCohere {
    /**
     * 
     * @type {string}
     * @memberof TextgenerationResponseModelCohere
     */
    'generated_text': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextgenerationResponseModelCohere
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextgenerationResponseModelCohere
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextgenerationResponseModelGoogle
 */
export interface TextgenerationResponseModelGoogle {
    /**
     * 
     * @type {string}
     * @memberof TextgenerationResponseModelGoogle
     */
    'generated_text': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextgenerationResponseModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextgenerationResponseModelGoogle
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextgenerationResponseModelOpenai
 */
export interface TextgenerationResponseModelOpenai {
    /**
     * 
     * @type {string}
     * @memberof TextgenerationResponseModelOpenai
     */
    'generated_text': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextgenerationResponseModelOpenai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextgenerationResponseModelOpenai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextkeywordExtractionResponseModel
 */
export interface TextkeywordExtractionResponseModel {
    /**
     * 
     * @type {TextkeywordExtractionResponseModelEmvista}
     * @memberof TextkeywordExtractionResponseModel
     */
    'emvista'?: TextkeywordExtractionResponseModelEmvista;
    /**
     * 
     * @type {TextkeywordExtractionResponseModelTenstorrent}
     * @memberof TextkeywordExtractionResponseModel
     */
    'tenstorrent'?: TextkeywordExtractionResponseModelTenstorrent;
    /**
     * 
     * @type {TextkeywordExtractionResponseModelMicrosoft}
     * @memberof TextkeywordExtractionResponseModel
     */
    'microsoft'?: TextkeywordExtractionResponseModelMicrosoft;
    /**
     * 
     * @type {TextkeywordExtractionResponseModelIbm}
     * @memberof TextkeywordExtractionResponseModel
     */
    'ibm'?: TextkeywordExtractionResponseModelIbm;
    /**
     * 
     * @type {TextkeywordExtractionResponseModelOneai}
     * @memberof TextkeywordExtractionResponseModel
     */
    'oneai'?: TextkeywordExtractionResponseModelOneai;
    /**
     * 
     * @type {TextkeywordExtractionResponseModelOpenai}
     * @memberof TextkeywordExtractionResponseModel
     */
    'openai'?: TextkeywordExtractionResponseModelOpenai;
    /**
     * 
     * @type {TextkeywordExtractionResponseModelAmazon}
     * @memberof TextkeywordExtractionResponseModel
     */
    'amazon'?: TextkeywordExtractionResponseModelAmazon;
    /**
     * 
     * @type {TextkeywordExtractionResponseModelEdenAi}
     * @memberof TextkeywordExtractionResponseModel
     */
    'eden-ai'?: TextkeywordExtractionResponseModelEdenAi;
}
/**
 * 
 * @export
 * @interface TextkeywordExtractionResponseModelAmazon
 */
export interface TextkeywordExtractionResponseModelAmazon {
    /**
     * 
     * @type {Array<InfosKeywordExtractionDataClass>}
     * @memberof TextkeywordExtractionResponseModelAmazon
     */
    'items'?: Array<InfosKeywordExtractionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextkeywordExtractionResponseModelAmazon
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextkeywordExtractionResponseModelAmazon
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextkeywordExtractionResponseModelEdenAi
 */
export interface TextkeywordExtractionResponseModelEdenAi {
    /**
     * 
     * @type {Array<InfosKeywordExtractionDataClass>}
     * @memberof TextkeywordExtractionResponseModelEdenAi
     */
    'items'?: Array<InfosKeywordExtractionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextkeywordExtractionResponseModelEdenAi
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextkeywordExtractionResponseModelEdenAi
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextkeywordExtractionResponseModelEmvista
 */
export interface TextkeywordExtractionResponseModelEmvista {
    /**
     * 
     * @type {Array<InfosKeywordExtractionDataClass>}
     * @memberof TextkeywordExtractionResponseModelEmvista
     */
    'items'?: Array<InfosKeywordExtractionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextkeywordExtractionResponseModelEmvista
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextkeywordExtractionResponseModelEmvista
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextkeywordExtractionResponseModelIbm
 */
export interface TextkeywordExtractionResponseModelIbm {
    /**
     * 
     * @type {Array<InfosKeywordExtractionDataClass>}
     * @memberof TextkeywordExtractionResponseModelIbm
     */
    'items'?: Array<InfosKeywordExtractionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextkeywordExtractionResponseModelIbm
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextkeywordExtractionResponseModelIbm
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextkeywordExtractionResponseModelMicrosoft
 */
export interface TextkeywordExtractionResponseModelMicrosoft {
    /**
     * 
     * @type {Array<InfosKeywordExtractionDataClass>}
     * @memberof TextkeywordExtractionResponseModelMicrosoft
     */
    'items'?: Array<InfosKeywordExtractionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextkeywordExtractionResponseModelMicrosoft
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextkeywordExtractionResponseModelMicrosoft
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextkeywordExtractionResponseModelOneai
 */
export interface TextkeywordExtractionResponseModelOneai {
    /**
     * 
     * @type {Array<InfosKeywordExtractionDataClass>}
     * @memberof TextkeywordExtractionResponseModelOneai
     */
    'items'?: Array<InfosKeywordExtractionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextkeywordExtractionResponseModelOneai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextkeywordExtractionResponseModelOneai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextkeywordExtractionResponseModelOpenai
 */
export interface TextkeywordExtractionResponseModelOpenai {
    /**
     * 
     * @type {Array<InfosKeywordExtractionDataClass>}
     * @memberof TextkeywordExtractionResponseModelOpenai
     */
    'items'?: Array<InfosKeywordExtractionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextkeywordExtractionResponseModelOpenai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextkeywordExtractionResponseModelOpenai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextkeywordExtractionResponseModelTenstorrent
 */
export interface TextkeywordExtractionResponseModelTenstorrent {
    /**
     * 
     * @type {Array<InfosKeywordExtractionDataClass>}
     * @memberof TextkeywordExtractionResponseModelTenstorrent
     */
    'items'?: Array<InfosKeywordExtractionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextkeywordExtractionResponseModelTenstorrent
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextkeywordExtractionResponseModelTenstorrent
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextmoderationResponseModel
 */
export interface TextmoderationResponseModel {
    /**
     * 
     * @type {TextmoderationResponseModelClarifai}
     * @memberof TextmoderationResponseModel
     */
    'clarifai'?: TextmoderationResponseModelClarifai;
    /**
     * 
     * @type {TextmoderationResponseModelOpenai}
     * @memberof TextmoderationResponseModel
     */
    'openai'?: TextmoderationResponseModelOpenai;
    /**
     * 
     * @type {TextmoderationResponseModelGoogle}
     * @memberof TextmoderationResponseModel
     */
    'google'?: TextmoderationResponseModelGoogle;
    /**
     * 
     * @type {TextmoderationResponseModelMicrosoft}
     * @memberof TextmoderationResponseModel
     */
    'microsoft'?: TextmoderationResponseModelMicrosoft;
}
/**
 * 
 * @export
 * @interface TextmoderationResponseModelClarifai
 */
export interface TextmoderationResponseModelClarifai {
    /**
     * 
     * @type {number}
     * @memberof TextmoderationResponseModelClarifai
     */
    'nsfw_likelihood': number;
    /**
     * 
     * @type {Array<TextModerationItem>}
     * @memberof TextmoderationResponseModelClarifai
     */
    'items'?: Array<TextModerationItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextmoderationResponseModelClarifai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextmoderationResponseModelClarifai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextmoderationResponseModelGoogle
 */
export interface TextmoderationResponseModelGoogle {
    /**
     * 
     * @type {number}
     * @memberof TextmoderationResponseModelGoogle
     */
    'nsfw_likelihood': number;
    /**
     * 
     * @type {Array<TextModerationItem>}
     * @memberof TextmoderationResponseModelGoogle
     */
    'items'?: Array<TextModerationItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextmoderationResponseModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextmoderationResponseModelGoogle
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextmoderationResponseModelMicrosoft
 */
export interface TextmoderationResponseModelMicrosoft {
    /**
     * 
     * @type {number}
     * @memberof TextmoderationResponseModelMicrosoft
     */
    'nsfw_likelihood': number;
    /**
     * 
     * @type {Array<TextModerationItem>}
     * @memberof TextmoderationResponseModelMicrosoft
     */
    'items'?: Array<TextModerationItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextmoderationResponseModelMicrosoft
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextmoderationResponseModelMicrosoft
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextmoderationResponseModelOpenai
 */
export interface TextmoderationResponseModelOpenai {
    /**
     * 
     * @type {number}
     * @memberof TextmoderationResponseModelOpenai
     */
    'nsfw_likelihood': number;
    /**
     * 
     * @type {Array<TextModerationItem>}
     * @memberof TextmoderationResponseModelOpenai
     */
    'items'?: Array<TextModerationItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextmoderationResponseModelOpenai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextmoderationResponseModelOpenai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextnamedEntityRecognitionResponseModel
 */
export interface TextnamedEntityRecognitionResponseModel {
    /**
     * 
     * @type {TextnamedEntityRecognitionResponseModelLettria}
     * @memberof TextnamedEntityRecognitionResponseModel
     */
    'lettria'?: TextnamedEntityRecognitionResponseModelLettria;
    /**
     * 
     * @type {TextnamedEntityRecognitionResponseModelTenstorrent}
     * @memberof TextnamedEntityRecognitionResponseModel
     */
    'tenstorrent'?: TextnamedEntityRecognitionResponseModelTenstorrent;
    /**
     * 
     * @type {TextnamedEntityRecognitionResponseModelMicrosoft}
     * @memberof TextnamedEntityRecognitionResponseModel
     */
    'microsoft'?: TextnamedEntityRecognitionResponseModelMicrosoft;
    /**
     * 
     * @type {TextnamedEntityRecognitionResponseModelOpenai}
     * @memberof TextnamedEntityRecognitionResponseModel
     */
    'openai'?: TextnamedEntityRecognitionResponseModelOpenai;
    /**
     * 
     * @type {TextnamedEntityRecognitionResponseModelIbm}
     * @memberof TextnamedEntityRecognitionResponseModel
     */
    'ibm'?: TextnamedEntityRecognitionResponseModelIbm;
    /**
     * 
     * @type {TextnamedEntityRecognitionResponseModelOneai}
     * @memberof TextnamedEntityRecognitionResponseModel
     */
    'oneai'?: TextnamedEntityRecognitionResponseModelOneai;
    /**
     * 
     * @type {TextnamedEntityRecognitionResponseModelGoogle}
     * @memberof TextnamedEntityRecognitionResponseModel
     */
    'google'?: TextnamedEntityRecognitionResponseModelGoogle;
    /**
     * 
     * @type {TextnamedEntityRecognitionResponseModelNeuralspace}
     * @memberof TextnamedEntityRecognitionResponseModel
     */
    'neuralspace'?: TextnamedEntityRecognitionResponseModelNeuralspace;
    /**
     * 
     * @type {TextnamedEntityRecognitionResponseModelAmazon}
     * @memberof TextnamedEntityRecognitionResponseModel
     */
    'amazon'?: TextnamedEntityRecognitionResponseModelAmazon;
    /**
     * 
     * @type {TextnamedEntityRecognitionResponseModelEdenAi}
     * @memberof TextnamedEntityRecognitionResponseModel
     */
    'eden-ai'?: TextnamedEntityRecognitionResponseModelEdenAi;
}
/**
 * 
 * @export
 * @interface TextnamedEntityRecognitionResponseModelAmazon
 */
export interface TextnamedEntityRecognitionResponseModelAmazon {
    /**
     * 
     * @type {Array<InfosNamedEntityRecognitionDataClass>}
     * @memberof TextnamedEntityRecognitionResponseModelAmazon
     */
    'items'?: Array<InfosNamedEntityRecognitionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextnamedEntityRecognitionResponseModelAmazon
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextnamedEntityRecognitionResponseModelAmazon
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextnamedEntityRecognitionResponseModelEdenAi
 */
export interface TextnamedEntityRecognitionResponseModelEdenAi {
    /**
     * 
     * @type {Array<InfosNamedEntityRecognitionDataClass>}
     * @memberof TextnamedEntityRecognitionResponseModelEdenAi
     */
    'items'?: Array<InfosNamedEntityRecognitionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextnamedEntityRecognitionResponseModelEdenAi
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextnamedEntityRecognitionResponseModelEdenAi
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextnamedEntityRecognitionResponseModelGoogle
 */
export interface TextnamedEntityRecognitionResponseModelGoogle {
    /**
     * 
     * @type {Array<InfosNamedEntityRecognitionDataClass>}
     * @memberof TextnamedEntityRecognitionResponseModelGoogle
     */
    'items'?: Array<InfosNamedEntityRecognitionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextnamedEntityRecognitionResponseModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextnamedEntityRecognitionResponseModelGoogle
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextnamedEntityRecognitionResponseModelIbm
 */
export interface TextnamedEntityRecognitionResponseModelIbm {
    /**
     * 
     * @type {Array<InfosNamedEntityRecognitionDataClass>}
     * @memberof TextnamedEntityRecognitionResponseModelIbm
     */
    'items'?: Array<InfosNamedEntityRecognitionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextnamedEntityRecognitionResponseModelIbm
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextnamedEntityRecognitionResponseModelIbm
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextnamedEntityRecognitionResponseModelLettria
 */
export interface TextnamedEntityRecognitionResponseModelLettria {
    /**
     * 
     * @type {Array<InfosNamedEntityRecognitionDataClass>}
     * @memberof TextnamedEntityRecognitionResponseModelLettria
     */
    'items'?: Array<InfosNamedEntityRecognitionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextnamedEntityRecognitionResponseModelLettria
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextnamedEntityRecognitionResponseModelLettria
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextnamedEntityRecognitionResponseModelMicrosoft
 */
export interface TextnamedEntityRecognitionResponseModelMicrosoft {
    /**
     * 
     * @type {Array<InfosNamedEntityRecognitionDataClass>}
     * @memberof TextnamedEntityRecognitionResponseModelMicrosoft
     */
    'items'?: Array<InfosNamedEntityRecognitionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextnamedEntityRecognitionResponseModelMicrosoft
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextnamedEntityRecognitionResponseModelMicrosoft
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextnamedEntityRecognitionResponseModelNeuralspace
 */
export interface TextnamedEntityRecognitionResponseModelNeuralspace {
    /**
     * 
     * @type {Array<InfosNamedEntityRecognitionDataClass>}
     * @memberof TextnamedEntityRecognitionResponseModelNeuralspace
     */
    'items'?: Array<InfosNamedEntityRecognitionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextnamedEntityRecognitionResponseModelNeuralspace
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextnamedEntityRecognitionResponseModelNeuralspace
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextnamedEntityRecognitionResponseModelOneai
 */
export interface TextnamedEntityRecognitionResponseModelOneai {
    /**
     * 
     * @type {Array<InfosNamedEntityRecognitionDataClass>}
     * @memberof TextnamedEntityRecognitionResponseModelOneai
     */
    'items'?: Array<InfosNamedEntityRecognitionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextnamedEntityRecognitionResponseModelOneai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextnamedEntityRecognitionResponseModelOneai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextnamedEntityRecognitionResponseModelOpenai
 */
export interface TextnamedEntityRecognitionResponseModelOpenai {
    /**
     * 
     * @type {Array<InfosNamedEntityRecognitionDataClass>}
     * @memberof TextnamedEntityRecognitionResponseModelOpenai
     */
    'items'?: Array<InfosNamedEntityRecognitionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextnamedEntityRecognitionResponseModelOpenai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextnamedEntityRecognitionResponseModelOpenai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextnamedEntityRecognitionResponseModelTenstorrent
 */
export interface TextnamedEntityRecognitionResponseModelTenstorrent {
    /**
     * 
     * @type {Array<InfosNamedEntityRecognitionDataClass>}
     * @memberof TextnamedEntityRecognitionResponseModelTenstorrent
     */
    'items'?: Array<InfosNamedEntityRecognitionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextnamedEntityRecognitionResponseModelTenstorrent
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextnamedEntityRecognitionResponseModelTenstorrent
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextplagiaDetectionPlagiaDetectionDataClass
 */
export interface TextplagiaDetectionPlagiaDetectionDataClass {
    /**
     * 
     * @type {number}
     * @memberof TextplagiaDetectionPlagiaDetectionDataClass
     */
    'plagia_score': number;
    /**
     * 
     * @type {Array<PlagiaDetectionItem>}
     * @memberof TextplagiaDetectionPlagiaDetectionDataClass
     */
    'items'?: Array<PlagiaDetectionItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextplagiaDetectionPlagiaDetectionDataClass
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextplagiaDetectionPlagiaDetectionDataClass
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextplagiaDetectionPlagiaDetectionRequest
 */
export interface TextplagiaDetectionPlagiaDetectionRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof TextplagiaDetectionPlagiaDetectionRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof TextplagiaDetectionPlagiaDetectionRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof TextplagiaDetectionPlagiaDetectionRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof TextplagiaDetectionPlagiaDetectionRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof TextplagiaDetectionPlagiaDetectionRequest
     */
    'show_original_response'?: boolean;
    /**
     * A text content on which a plagiarism detection analysis will be run
     * @type {string}
     * @memberof TextplagiaDetectionPlagiaDetectionRequest
     */
    'text': string;
    /**
     * Content title
     * @type {string}
     * @memberof TextplagiaDetectionPlagiaDetectionRequest
     */
    'title'?: string | null;
}
/**
 * 
 * @export
 * @interface TextplagiaDetectionResponseModel
 */
export interface TextplagiaDetectionResponseModel {
    /**
     * 
     * @type {TextplagiaDetectionResponseModelOriginalityai}
     * @memberof TextplagiaDetectionResponseModel
     */
    'originalityai'?: TextplagiaDetectionResponseModelOriginalityai;
}
/**
 * 
 * @export
 * @interface TextplagiaDetectionResponseModelOriginalityai
 */
export interface TextplagiaDetectionResponseModelOriginalityai {
    /**
     * 
     * @type {number}
     * @memberof TextplagiaDetectionResponseModelOriginalityai
     */
    'plagia_score': number;
    /**
     * 
     * @type {Array<PlagiaDetectionItem>}
     * @memberof TextplagiaDetectionResponseModelOriginalityai
     */
    'items'?: Array<PlagiaDetectionItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextplagiaDetectionResponseModelOriginalityai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextplagiaDetectionResponseModelOriginalityai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextpromptOptimizationPromptOptimizationDataClass
 */
export interface TextpromptOptimizationPromptOptimizationDataClass {
    /**
     * 
     * @type {string}
     * @memberof TextpromptOptimizationPromptOptimizationDataClass
     */
    'missing_information': string;
    /**
     * 
     * @type {Array<PromptDataClass>}
     * @memberof TextpromptOptimizationPromptOptimizationDataClass
     */
    'items'?: Array<PromptDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextpromptOptimizationPromptOptimizationDataClass
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextpromptOptimizationPromptOptimizationDataClass
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextpromptOptimizationPromptOptimizationRequest
 */
export interface TextpromptOptimizationPromptOptimizationRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof TextpromptOptimizationPromptOptimizationRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof TextpromptOptimizationPromptOptimizationRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof TextpromptOptimizationPromptOptimizationRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof TextpromptOptimizationPromptOptimizationRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof TextpromptOptimizationPromptOptimizationRequest
     */
    'show_original_response'?: boolean;
    /**
     * Description of the desired prompt.
     * @type {string}
     * @memberof TextpromptOptimizationPromptOptimizationRequest
     */
    'text': string;
    /**
     * 
     * @type {TargetProviderEnum}
     * @memberof TextpromptOptimizationPromptOptimizationRequest
     */
    'target_provider': TargetProviderEnum;
}


/**
 * 
 * @export
 * @interface TextpromptOptimizationResponseModel
 */
export interface TextpromptOptimizationResponseModel {
    /**
     * 
     * @type {TextpromptOptimizationResponseModelOpenai}
     * @memberof TextpromptOptimizationResponseModel
     */
    'openai'?: TextpromptOptimizationResponseModelOpenai;
}
/**
 * 
 * @export
 * @interface TextpromptOptimizationResponseModelOpenai
 */
export interface TextpromptOptimizationResponseModelOpenai {
    /**
     * 
     * @type {string}
     * @memberof TextpromptOptimizationResponseModelOpenai
     */
    'missing_information': string;
    /**
     * 
     * @type {Array<PromptDataClass>}
     * @memberof TextpromptOptimizationResponseModelOpenai
     */
    'items'?: Array<PromptDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextpromptOptimizationResponseModelOpenai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextpromptOptimizationResponseModelOpenai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextquestionAnswerQuestionAnswerRequest
 */
export interface TextquestionAnswerQuestionAnswerRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof TextquestionAnswerQuestionAnswerRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof TextquestionAnswerQuestionAnswerRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof TextquestionAnswerQuestionAnswerRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof TextquestionAnswerQuestionAnswerRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof TextquestionAnswerQuestionAnswerRequest
     */
    'show_original_response'?: boolean;
    /**
     * List of texts to analyze
     * @type {Array<string>}
     * @memberof TextquestionAnswerQuestionAnswerRequest
     */
    'texts': Array<string>;
    /**
     * Question about the text content
     * @type {string}
     * @memberof TextquestionAnswerQuestionAnswerRequest
     */
    'question': string;
    /**
     * Higher values mean the model will take more risks and value 0 (argmax sampling) works better for scenarios with a well-defined answer.
     * @type {number}
     * @memberof TextquestionAnswerQuestionAnswerRequest
     */
    'temperature'?: number;
    /**
     * example text serving as context
     * @type {string}
     * @memberof TextquestionAnswerQuestionAnswerRequest
     */
    'examples_context': string;
    /**
     * List of question/answer pairs (eg: [[\'When was Barack Obama elected president?\', \'in 2009.\'],]
     * @type {Array<Array<string>>}
     * @memberof TextquestionAnswerQuestionAnswerRequest
     */
    'examples': Array<Array<string>>;
}
/**
 * 
 * @export
 * @interface TextquestionAnswerResponseModel
 */
export interface TextquestionAnswerResponseModel {
    /**
     * 
     * @type {TextquestionAnswerResponseModelTenstorrent}
     * @memberof TextquestionAnswerResponseModel
     */
    'tenstorrent'?: TextquestionAnswerResponseModelTenstorrent;
    /**
     * 
     * @type {TextquestionAnswerResponseModelOpenai}
     * @memberof TextquestionAnswerResponseModel
     */
    'openai'?: TextquestionAnswerResponseModelOpenai;
    /**
     * 
     * @type {TextquestionAnswerResponseModelHuggingface}
     * @memberof TextquestionAnswerResponseModel
     */
    'huggingface'?: TextquestionAnswerResponseModelHuggingface;
    /**
     * 
     * @type {TextquestionAnswerResponseModelEdenAi}
     * @memberof TextquestionAnswerResponseModel
     */
    'eden-ai'?: TextquestionAnswerResponseModelEdenAi;
}
/**
 * 
 * @export
 * @interface TextquestionAnswerResponseModelEdenAi
 */
export interface TextquestionAnswerResponseModelEdenAi {
    /**
     * 
     * @type {Array<string>}
     * @memberof TextquestionAnswerResponseModelEdenAi
     */
    'answers'?: Array<string>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextquestionAnswerResponseModelEdenAi
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextquestionAnswerResponseModelEdenAi
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextquestionAnswerResponseModelHuggingface
 */
export interface TextquestionAnswerResponseModelHuggingface {
    /**
     * 
     * @type {Array<string>}
     * @memberof TextquestionAnswerResponseModelHuggingface
     */
    'answers'?: Array<string>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextquestionAnswerResponseModelHuggingface
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextquestionAnswerResponseModelHuggingface
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextquestionAnswerResponseModelOpenai
 */
export interface TextquestionAnswerResponseModelOpenai {
    /**
     * 
     * @type {Array<string>}
     * @memberof TextquestionAnswerResponseModelOpenai
     */
    'answers'?: Array<string>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextquestionAnswerResponseModelOpenai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextquestionAnswerResponseModelOpenai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextquestionAnswerResponseModelTenstorrent
 */
export interface TextquestionAnswerResponseModelTenstorrent {
    /**
     * 
     * @type {Array<string>}
     * @memberof TextquestionAnswerResponseModelTenstorrent
     */
    'answers'?: Array<string>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextquestionAnswerResponseModelTenstorrent
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextquestionAnswerResponseModelTenstorrent
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextsearchResponseModel
 */
export interface TextsearchResponseModel {
    /**
     * 
     * @type {TextsearchResponseModelOpenai}
     * @memberof TextsearchResponseModel
     */
    'openai'?: TextsearchResponseModelOpenai;
}
/**
 * 
 * @export
 * @interface TextsearchResponseModelOpenai
 */
export interface TextsearchResponseModelOpenai {
    /**
     * 
     * @type {Array<InfosSearchDataClass>}
     * @memberof TextsearchResponseModelOpenai
     */
    'items'?: Array<InfosSearchDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextsearchResponseModelOpenai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextsearchResponseModelOpenai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextsearchSearchDataClass
 */
export interface TextsearchSearchDataClass {
    /**
     * 
     * @type {Array<InfosSearchDataClass>}
     * @memberof TextsearchSearchDataClass
     */
    'items'?: Array<InfosSearchDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextsearchSearchDataClass
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextsearchSearchDataClass
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextsearchSearchRequest
 */
export interface TextsearchSearchRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof TextsearchSearchRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof TextsearchSearchRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof TextsearchSearchRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof TextsearchSearchRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof TextsearchSearchRequest
     */
    'show_original_response'?: boolean;
    /**
     * A list of texts to search in.
     * @type {Array<string>}
     * @memberof TextsearchSearchRequest
     */
    'texts': Array<string>;
    /**
     * Your text query.
     * @type {string}
     * @memberof TextsearchSearchRequest
     */
    'query': string;
}
/**
 * 
 * @export
 * @interface TextsentimentAnalysisResponseModel
 */
export interface TextsentimentAnalysisResponseModel {
    /**
     * 
     * @type {TextsentimentAnalysisResponseModelEmvista}
     * @memberof TextsentimentAnalysisResponseModel
     */
    'emvista'?: TextsentimentAnalysisResponseModelEmvista;
    /**
     * 
     * @type {TextsentimentAnalysisResponseModelLettria}
     * @memberof TextsentimentAnalysisResponseModel
     */
    'lettria'?: TextsentimentAnalysisResponseModelLettria;
    /**
     * 
     * @type {TextsentimentAnalysisResponseModelSapling}
     * @memberof TextsentimentAnalysisResponseModel
     */
    'sapling'?: TextsentimentAnalysisResponseModelSapling;
    /**
     * 
     * @type {TextsentimentAnalysisResponseModelTenstorrent}
     * @memberof TextsentimentAnalysisResponseModel
     */
    'tenstorrent'?: TextsentimentAnalysisResponseModelTenstorrent;
    /**
     * 
     * @type {TextsentimentAnalysisResponseModelMicrosoft}
     * @memberof TextsentimentAnalysisResponseModel
     */
    'microsoft'?: TextsentimentAnalysisResponseModelMicrosoft;
    /**
     * 
     * @type {TextsentimentAnalysisResponseModelConnexun}
     * @memberof TextsentimentAnalysisResponseModel
     */
    'connexun'?: TextsentimentAnalysisResponseModelConnexun;
    /**
     * 
     * @type {TextsentimentAnalysisResponseModelOpenai}
     * @memberof TextsentimentAnalysisResponseModel
     */
    'openai'?: TextsentimentAnalysisResponseModelOpenai;
    /**
     * 
     * @type {TextsentimentAnalysisResponseModelIbm}
     * @memberof TextsentimentAnalysisResponseModel
     */
    'ibm'?: TextsentimentAnalysisResponseModelIbm;
    /**
     * 
     * @type {TextsentimentAnalysisResponseModelOneai}
     * @memberof TextsentimentAnalysisResponseModel
     */
    'oneai'?: TextsentimentAnalysisResponseModelOneai;
    /**
     * 
     * @type {TextsentimentAnalysisResponseModelGoogle}
     * @memberof TextsentimentAnalysisResponseModel
     */
    'google'?: TextsentimentAnalysisResponseModelGoogle;
    /**
     * 
     * @type {TextsentimentAnalysisResponseModelAmazon}
     * @memberof TextsentimentAnalysisResponseModel
     */
    'amazon'?: TextsentimentAnalysisResponseModelAmazon;
}
/**
 * 
 * @export
 * @interface TextsentimentAnalysisResponseModelAmazon
 */
export interface TextsentimentAnalysisResponseModelAmazon {
    /**
     * 
     * @type {GeneralSentimentEnum}
     * @memberof TextsentimentAnalysisResponseModelAmazon
     */
    'general_sentiment': GeneralSentimentEnum;
    /**
     * 
     * @type {number}
     * @memberof TextsentimentAnalysisResponseModelAmazon
     */
    'general_sentiment_rate': number;
    /**
     * 
     * @type {Array<SegmentSentimentAnalysisDataClass>}
     * @memberof TextsentimentAnalysisResponseModelAmazon
     */
    'items'?: Array<SegmentSentimentAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextsentimentAnalysisResponseModelAmazon
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextsentimentAnalysisResponseModelAmazon
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextsentimentAnalysisResponseModelConnexun
 */
export interface TextsentimentAnalysisResponseModelConnexun {
    /**
     * 
     * @type {GeneralSentimentEnum}
     * @memberof TextsentimentAnalysisResponseModelConnexun
     */
    'general_sentiment': GeneralSentimentEnum;
    /**
     * 
     * @type {number}
     * @memberof TextsentimentAnalysisResponseModelConnexun
     */
    'general_sentiment_rate': number;
    /**
     * 
     * @type {Array<SegmentSentimentAnalysisDataClass>}
     * @memberof TextsentimentAnalysisResponseModelConnexun
     */
    'items'?: Array<SegmentSentimentAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextsentimentAnalysisResponseModelConnexun
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextsentimentAnalysisResponseModelConnexun
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextsentimentAnalysisResponseModelEmvista
 */
export interface TextsentimentAnalysisResponseModelEmvista {
    /**
     * 
     * @type {GeneralSentimentEnum}
     * @memberof TextsentimentAnalysisResponseModelEmvista
     */
    'general_sentiment': GeneralSentimentEnum;
    /**
     * 
     * @type {number}
     * @memberof TextsentimentAnalysisResponseModelEmvista
     */
    'general_sentiment_rate': number;
    /**
     * 
     * @type {Array<SegmentSentimentAnalysisDataClass>}
     * @memberof TextsentimentAnalysisResponseModelEmvista
     */
    'items'?: Array<SegmentSentimentAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextsentimentAnalysisResponseModelEmvista
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextsentimentAnalysisResponseModelEmvista
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextsentimentAnalysisResponseModelGoogle
 */
export interface TextsentimentAnalysisResponseModelGoogle {
    /**
     * 
     * @type {GeneralSentimentEnum}
     * @memberof TextsentimentAnalysisResponseModelGoogle
     */
    'general_sentiment': GeneralSentimentEnum;
    /**
     * 
     * @type {number}
     * @memberof TextsentimentAnalysisResponseModelGoogle
     */
    'general_sentiment_rate': number;
    /**
     * 
     * @type {Array<SegmentSentimentAnalysisDataClass>}
     * @memberof TextsentimentAnalysisResponseModelGoogle
     */
    'items'?: Array<SegmentSentimentAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextsentimentAnalysisResponseModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextsentimentAnalysisResponseModelGoogle
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextsentimentAnalysisResponseModelIbm
 */
export interface TextsentimentAnalysisResponseModelIbm {
    /**
     * 
     * @type {GeneralSentimentEnum}
     * @memberof TextsentimentAnalysisResponseModelIbm
     */
    'general_sentiment': GeneralSentimentEnum;
    /**
     * 
     * @type {number}
     * @memberof TextsentimentAnalysisResponseModelIbm
     */
    'general_sentiment_rate': number;
    /**
     * 
     * @type {Array<SegmentSentimentAnalysisDataClass>}
     * @memberof TextsentimentAnalysisResponseModelIbm
     */
    'items'?: Array<SegmentSentimentAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextsentimentAnalysisResponseModelIbm
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextsentimentAnalysisResponseModelIbm
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextsentimentAnalysisResponseModelLettria
 */
export interface TextsentimentAnalysisResponseModelLettria {
    /**
     * 
     * @type {GeneralSentimentEnum}
     * @memberof TextsentimentAnalysisResponseModelLettria
     */
    'general_sentiment': GeneralSentimentEnum;
    /**
     * 
     * @type {number}
     * @memberof TextsentimentAnalysisResponseModelLettria
     */
    'general_sentiment_rate': number;
    /**
     * 
     * @type {Array<SegmentSentimentAnalysisDataClass>}
     * @memberof TextsentimentAnalysisResponseModelLettria
     */
    'items'?: Array<SegmentSentimentAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextsentimentAnalysisResponseModelLettria
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextsentimentAnalysisResponseModelLettria
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextsentimentAnalysisResponseModelMicrosoft
 */
export interface TextsentimentAnalysisResponseModelMicrosoft {
    /**
     * 
     * @type {GeneralSentimentEnum}
     * @memberof TextsentimentAnalysisResponseModelMicrosoft
     */
    'general_sentiment': GeneralSentimentEnum;
    /**
     * 
     * @type {number}
     * @memberof TextsentimentAnalysisResponseModelMicrosoft
     */
    'general_sentiment_rate': number;
    /**
     * 
     * @type {Array<SegmentSentimentAnalysisDataClass>}
     * @memberof TextsentimentAnalysisResponseModelMicrosoft
     */
    'items'?: Array<SegmentSentimentAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextsentimentAnalysisResponseModelMicrosoft
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextsentimentAnalysisResponseModelMicrosoft
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextsentimentAnalysisResponseModelOneai
 */
export interface TextsentimentAnalysisResponseModelOneai {
    /**
     * 
     * @type {GeneralSentimentEnum}
     * @memberof TextsentimentAnalysisResponseModelOneai
     */
    'general_sentiment': GeneralSentimentEnum;
    /**
     * 
     * @type {number}
     * @memberof TextsentimentAnalysisResponseModelOneai
     */
    'general_sentiment_rate': number;
    /**
     * 
     * @type {Array<SegmentSentimentAnalysisDataClass>}
     * @memberof TextsentimentAnalysisResponseModelOneai
     */
    'items'?: Array<SegmentSentimentAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextsentimentAnalysisResponseModelOneai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextsentimentAnalysisResponseModelOneai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextsentimentAnalysisResponseModelOpenai
 */
export interface TextsentimentAnalysisResponseModelOpenai {
    /**
     * 
     * @type {GeneralSentimentEnum}
     * @memberof TextsentimentAnalysisResponseModelOpenai
     */
    'general_sentiment': GeneralSentimentEnum;
    /**
     * 
     * @type {number}
     * @memberof TextsentimentAnalysisResponseModelOpenai
     */
    'general_sentiment_rate': number;
    /**
     * 
     * @type {Array<SegmentSentimentAnalysisDataClass>}
     * @memberof TextsentimentAnalysisResponseModelOpenai
     */
    'items'?: Array<SegmentSentimentAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextsentimentAnalysisResponseModelOpenai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextsentimentAnalysisResponseModelOpenai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextsentimentAnalysisResponseModelSapling
 */
export interface TextsentimentAnalysisResponseModelSapling {
    /**
     * 
     * @type {GeneralSentimentEnum}
     * @memberof TextsentimentAnalysisResponseModelSapling
     */
    'general_sentiment': GeneralSentimentEnum;
    /**
     * 
     * @type {number}
     * @memberof TextsentimentAnalysisResponseModelSapling
     */
    'general_sentiment_rate': number;
    /**
     * 
     * @type {Array<SegmentSentimentAnalysisDataClass>}
     * @memberof TextsentimentAnalysisResponseModelSapling
     */
    'items'?: Array<SegmentSentimentAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextsentimentAnalysisResponseModelSapling
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextsentimentAnalysisResponseModelSapling
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextsentimentAnalysisResponseModelTenstorrent
 */
export interface TextsentimentAnalysisResponseModelTenstorrent {
    /**
     * 
     * @type {GeneralSentimentEnum}
     * @memberof TextsentimentAnalysisResponseModelTenstorrent
     */
    'general_sentiment': GeneralSentimentEnum;
    /**
     * 
     * @type {number}
     * @memberof TextsentimentAnalysisResponseModelTenstorrent
     */
    'general_sentiment_rate': number;
    /**
     * 
     * @type {Array<SegmentSentimentAnalysisDataClass>}
     * @memberof TextsentimentAnalysisResponseModelTenstorrent
     */
    'items'?: Array<SegmentSentimentAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextsentimentAnalysisResponseModelTenstorrent
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextsentimentAnalysisResponseModelTenstorrent
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextspellCheckResponseModel
 */
export interface TextspellCheckResponseModel {
    /**
     * 
     * @type {TextspellCheckResponseModelProwritingaid}
     * @memberof TextspellCheckResponseModel
     */
    'prowritingaid'?: TextspellCheckResponseModelProwritingaid;
    /**
     * 
     * @type {TextspellCheckResponseModelSapling}
     * @memberof TextspellCheckResponseModel
     */
    'sapling'?: TextspellCheckResponseModelSapling;
    /**
     * 
     * @type {TextspellCheckResponseModelMicrosoft}
     * @memberof TextspellCheckResponseModel
     */
    'microsoft'?: TextspellCheckResponseModelMicrosoft;
    /**
     * 
     * @type {TextspellCheckResponseModelCohere}
     * @memberof TextspellCheckResponseModel
     */
    'cohere'?: TextspellCheckResponseModelCohere;
    /**
     * 
     * @type {TextspellCheckResponseModelOpenai}
     * @memberof TextspellCheckResponseModel
     */
    'openai'?: TextspellCheckResponseModelOpenai;
}
/**
 * 
 * @export
 * @interface TextspellCheckResponseModelCohere
 */
export interface TextspellCheckResponseModelCohere {
    /**
     * 
     * @type {string}
     * @memberof TextspellCheckResponseModelCohere
     */
    'text': string;
    /**
     * 
     * @type {Array<SpellCheckItem>}
     * @memberof TextspellCheckResponseModelCohere
     */
    'items'?: Array<SpellCheckItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextspellCheckResponseModelCohere
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextspellCheckResponseModelCohere
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextspellCheckResponseModelMicrosoft
 */
export interface TextspellCheckResponseModelMicrosoft {
    /**
     * 
     * @type {string}
     * @memberof TextspellCheckResponseModelMicrosoft
     */
    'text': string;
    /**
     * 
     * @type {Array<SpellCheckItem>}
     * @memberof TextspellCheckResponseModelMicrosoft
     */
    'items'?: Array<SpellCheckItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextspellCheckResponseModelMicrosoft
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextspellCheckResponseModelMicrosoft
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextspellCheckResponseModelOpenai
 */
export interface TextspellCheckResponseModelOpenai {
    /**
     * 
     * @type {string}
     * @memberof TextspellCheckResponseModelOpenai
     */
    'text': string;
    /**
     * 
     * @type {Array<SpellCheckItem>}
     * @memberof TextspellCheckResponseModelOpenai
     */
    'items'?: Array<SpellCheckItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextspellCheckResponseModelOpenai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextspellCheckResponseModelOpenai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextspellCheckResponseModelProwritingaid
 */
export interface TextspellCheckResponseModelProwritingaid {
    /**
     * 
     * @type {string}
     * @memberof TextspellCheckResponseModelProwritingaid
     */
    'text': string;
    /**
     * 
     * @type {Array<SpellCheckItem>}
     * @memberof TextspellCheckResponseModelProwritingaid
     */
    'items'?: Array<SpellCheckItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextspellCheckResponseModelProwritingaid
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextspellCheckResponseModelProwritingaid
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextspellCheckResponseModelSapling
 */
export interface TextspellCheckResponseModelSapling {
    /**
     * 
     * @type {string}
     * @memberof TextspellCheckResponseModelSapling
     */
    'text': string;
    /**
     * 
     * @type {Array<SpellCheckItem>}
     * @memberof TextspellCheckResponseModelSapling
     */
    'items'?: Array<SpellCheckItem>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextspellCheckResponseModelSapling
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextspellCheckResponseModelSapling
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextspellCheckSpellCheckRequest
 */
export interface TextspellCheckSpellCheckRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof TextspellCheckSpellCheckRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof TextspellCheckSpellCheckRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof TextspellCheckSpellCheckRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof TextspellCheckSpellCheckRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof TextspellCheckSpellCheckRequest
     */
    'show_original_response'?: boolean;
    /**
     * Text to analyze
     * @type {string}
     * @memberof TextspellCheckSpellCheckRequest
     */
    'text': string;
    /**
     * Language code for the language the input text is written in (eg: en, fr).
     * @type {string}
     * @memberof TextspellCheckSpellCheckRequest
     */
    'language'?: string | null;
}
/**
 * 
 * @export
 * @interface TextsummarizeResponseModel
 */
export interface TextsummarizeResponseModel {
    /**
     * 
     * @type {TextsummarizeResponseModelEmvista}
     * @memberof TextsummarizeResponseModel
     */
    'emvista'?: TextsummarizeResponseModelEmvista;
    /**
     * 
     * @type {TextsummarizeResponseModelWritesonic}
     * @memberof TextsummarizeResponseModel
     */
    'writesonic'?: TextsummarizeResponseModelWritesonic;
    /**
     * 
     * @type {TextsummarizeResponseModelMicrosoft}
     * @memberof TextsummarizeResponseModel
     */
    'microsoft'?: TextsummarizeResponseModelMicrosoft;
    /**
     * 
     * @type {TextsummarizeResponseModelConnexun}
     * @memberof TextsummarizeResponseModel
     */
    'connexun'?: TextsummarizeResponseModelConnexun;
    /**
     * 
     * @type {TextsummarizeResponseModelCohere}
     * @memberof TextsummarizeResponseModel
     */
    'cohere'?: TextsummarizeResponseModelCohere;
    /**
     * 
     * @type {TextsummarizeResponseModelMeaningcloud}
     * @memberof TextsummarizeResponseModel
     */
    'meaningcloud'?: TextsummarizeResponseModelMeaningcloud;
    /**
     * 
     * @type {TextsummarizeResponseModelOneai}
     * @memberof TextsummarizeResponseModel
     */
    'oneai'?: TextsummarizeResponseModelOneai;
    /**
     * 
     * @type {TextsummarizeResponseModelOpenai}
     * @memberof TextsummarizeResponseModel
     */
    'openai'?: TextsummarizeResponseModelOpenai;
    /**
     * 
     * @type {TextsummarizeResponseModelHuggingface}
     * @memberof TextsummarizeResponseModel
     */
    'huggingface'?: TextsummarizeResponseModelHuggingface;
}
/**
 * 
 * @export
 * @interface TextsummarizeResponseModelCohere
 */
export interface TextsummarizeResponseModelCohere {
    /**
     * 
     * @type {string}
     * @memberof TextsummarizeResponseModelCohere
     */
    'result': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextsummarizeResponseModelCohere
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextsummarizeResponseModelCohere
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextsummarizeResponseModelConnexun
 */
export interface TextsummarizeResponseModelConnexun {
    /**
     * 
     * @type {string}
     * @memberof TextsummarizeResponseModelConnexun
     */
    'result': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextsummarizeResponseModelConnexun
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextsummarizeResponseModelConnexun
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextsummarizeResponseModelEmvista
 */
export interface TextsummarizeResponseModelEmvista {
    /**
     * 
     * @type {string}
     * @memberof TextsummarizeResponseModelEmvista
     */
    'result': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextsummarizeResponseModelEmvista
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextsummarizeResponseModelEmvista
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextsummarizeResponseModelHuggingface
 */
export interface TextsummarizeResponseModelHuggingface {
    /**
     * 
     * @type {string}
     * @memberof TextsummarizeResponseModelHuggingface
     */
    'result': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextsummarizeResponseModelHuggingface
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextsummarizeResponseModelHuggingface
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextsummarizeResponseModelMeaningcloud
 */
export interface TextsummarizeResponseModelMeaningcloud {
    /**
     * 
     * @type {string}
     * @memberof TextsummarizeResponseModelMeaningcloud
     */
    'result': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextsummarizeResponseModelMeaningcloud
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextsummarizeResponseModelMeaningcloud
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextsummarizeResponseModelMicrosoft
 */
export interface TextsummarizeResponseModelMicrosoft {
    /**
     * 
     * @type {string}
     * @memberof TextsummarizeResponseModelMicrosoft
     */
    'result': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextsummarizeResponseModelMicrosoft
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextsummarizeResponseModelMicrosoft
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextsummarizeResponseModelOneai
 */
export interface TextsummarizeResponseModelOneai {
    /**
     * 
     * @type {string}
     * @memberof TextsummarizeResponseModelOneai
     */
    'result': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextsummarizeResponseModelOneai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextsummarizeResponseModelOneai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextsummarizeResponseModelOpenai
 */
export interface TextsummarizeResponseModelOpenai {
    /**
     * 
     * @type {string}
     * @memberof TextsummarizeResponseModelOpenai
     */
    'result': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextsummarizeResponseModelOpenai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextsummarizeResponseModelOpenai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextsummarizeResponseModelWritesonic
 */
export interface TextsummarizeResponseModelWritesonic {
    /**
     * 
     * @type {string}
     * @memberof TextsummarizeResponseModelWritesonic
     */
    'result': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextsummarizeResponseModelWritesonic
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextsummarizeResponseModelWritesonic
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextsummarizeSummarizeRequest
 */
export interface TextsummarizeSummarizeRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof TextsummarizeSummarizeRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof TextsummarizeSummarizeRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof TextsummarizeSummarizeRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof TextsummarizeSummarizeRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof TextsummarizeSummarizeRequest
     */
    'show_original_response'?: boolean;
    /**
     * Text to analyze
     * @type {string}
     * @memberof TextsummarizeSummarizeRequest
     */
    'text': string;
    /**
     * Language code for the language the input text is written in (eg: en, fr).
     * @type {string}
     * @memberof TextsummarizeSummarizeRequest
     */
    'language'?: string | null;
    /**
     * A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\'google\' : \'google_model\', ibm\': \'ibm_model\'...}.                      **Caution**: setting models can be done only with `Content-Type` : `application/json`.                      
     * @type {{ [key: string]: string; }}
     * @memberof TextsummarizeSummarizeRequest
     */
    'settings'?: { [key: string]: string; } | null;
    /**
     * 
     * @type {number}
     * @memberof TextsummarizeSummarizeRequest
     */
    'output_sentences'?: number;
}
/**
 * 
 * @export
 * @interface TextsyntaxAnalysisResponseModel
 */
export interface TextsyntaxAnalysisResponseModel {
    /**
     * 
     * @type {TextsyntaxAnalysisResponseModelEmvista}
     * @memberof TextsyntaxAnalysisResponseModel
     */
    'emvista'?: TextsyntaxAnalysisResponseModelEmvista;
    /**
     * 
     * @type {TextsyntaxAnalysisResponseModelLettria}
     * @memberof TextsyntaxAnalysisResponseModel
     */
    'lettria'?: TextsyntaxAnalysisResponseModelLettria;
    /**
     * 
     * @type {TextsyntaxAnalysisResponseModelIbm}
     * @memberof TextsyntaxAnalysisResponseModel
     */
    'ibm'?: TextsyntaxAnalysisResponseModelIbm;
    /**
     * 
     * @type {TextsyntaxAnalysisResponseModelGoogle}
     * @memberof TextsyntaxAnalysisResponseModel
     */
    'google'?: TextsyntaxAnalysisResponseModelGoogle;
    /**
     * 
     * @type {TextsyntaxAnalysisResponseModelAmazon}
     * @memberof TextsyntaxAnalysisResponseModel
     */
    'amazon'?: TextsyntaxAnalysisResponseModelAmazon;
    /**
     * 
     * @type {TextsyntaxAnalysisResponseModelEdenAi}
     * @memberof TextsyntaxAnalysisResponseModel
     */
    'eden-ai'?: TextsyntaxAnalysisResponseModelEdenAi;
}
/**
 * 
 * @export
 * @interface TextsyntaxAnalysisResponseModelAmazon
 */
export interface TextsyntaxAnalysisResponseModelAmazon {
    /**
     * 
     * @type {Array<InfosSyntaxAnalysisDataClass>}
     * @memberof TextsyntaxAnalysisResponseModelAmazon
     */
    'items'?: Array<InfosSyntaxAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextsyntaxAnalysisResponseModelAmazon
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextsyntaxAnalysisResponseModelAmazon
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextsyntaxAnalysisResponseModelEdenAi
 */
export interface TextsyntaxAnalysisResponseModelEdenAi {
    /**
     * 
     * @type {Array<InfosSyntaxAnalysisDataClass>}
     * @memberof TextsyntaxAnalysisResponseModelEdenAi
     */
    'items'?: Array<InfosSyntaxAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextsyntaxAnalysisResponseModelEdenAi
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextsyntaxAnalysisResponseModelEdenAi
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextsyntaxAnalysisResponseModelEmvista
 */
export interface TextsyntaxAnalysisResponseModelEmvista {
    /**
     * 
     * @type {Array<InfosSyntaxAnalysisDataClass>}
     * @memberof TextsyntaxAnalysisResponseModelEmvista
     */
    'items'?: Array<InfosSyntaxAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextsyntaxAnalysisResponseModelEmvista
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextsyntaxAnalysisResponseModelEmvista
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextsyntaxAnalysisResponseModelGoogle
 */
export interface TextsyntaxAnalysisResponseModelGoogle {
    /**
     * 
     * @type {Array<InfosSyntaxAnalysisDataClass>}
     * @memberof TextsyntaxAnalysisResponseModelGoogle
     */
    'items'?: Array<InfosSyntaxAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextsyntaxAnalysisResponseModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextsyntaxAnalysisResponseModelGoogle
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextsyntaxAnalysisResponseModelIbm
 */
export interface TextsyntaxAnalysisResponseModelIbm {
    /**
     * 
     * @type {Array<InfosSyntaxAnalysisDataClass>}
     * @memberof TextsyntaxAnalysisResponseModelIbm
     */
    'items'?: Array<InfosSyntaxAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextsyntaxAnalysisResponseModelIbm
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextsyntaxAnalysisResponseModelIbm
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TextsyntaxAnalysisResponseModelLettria
 */
export interface TextsyntaxAnalysisResponseModelLettria {
    /**
     * 
     * @type {Array<InfosSyntaxAnalysisDataClass>}
     * @memberof TextsyntaxAnalysisResponseModelLettria
     */
    'items'?: Array<InfosSyntaxAnalysisDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TextsyntaxAnalysisResponseModelLettria
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TextsyntaxAnalysisResponseModelLettria
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TexttopicExtractionResponseModel
 */
export interface TexttopicExtractionResponseModel {
    /**
     * 
     * @type {TexttopicExtractionResponseModelOpenai}
     * @memberof TexttopicExtractionResponseModel
     */
    'openai'?: TexttopicExtractionResponseModelOpenai;
    /**
     * 
     * @type {TexttopicExtractionResponseModelGoogle}
     * @memberof TexttopicExtractionResponseModel
     */
    'google'?: TexttopicExtractionResponseModelGoogle;
    /**
     * 
     * @type {TexttopicExtractionResponseModelTenstorrent}
     * @memberof TexttopicExtractionResponseModel
     */
    'tenstorrent'?: TexttopicExtractionResponseModelTenstorrent;
    /**
     * 
     * @type {TexttopicExtractionResponseModelIbm}
     * @memberof TexttopicExtractionResponseModel
     */
    'ibm'?: TexttopicExtractionResponseModelIbm;
    /**
     * 
     * @type {TexttopicExtractionResponseModelEdenAi}
     * @memberof TexttopicExtractionResponseModel
     */
    'eden-ai'?: TexttopicExtractionResponseModelEdenAi;
}
/**
 * 
 * @export
 * @interface TexttopicExtractionResponseModelEdenAi
 */
export interface TexttopicExtractionResponseModelEdenAi {
    /**
     * 
     * @type {Array<ExtractedTopic>}
     * @memberof TexttopicExtractionResponseModelEdenAi
     */
    'items'?: Array<ExtractedTopic>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TexttopicExtractionResponseModelEdenAi
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TexttopicExtractionResponseModelEdenAi
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TexttopicExtractionResponseModelGoogle
 */
export interface TexttopicExtractionResponseModelGoogle {
    /**
     * 
     * @type {Array<ExtractedTopic>}
     * @memberof TexttopicExtractionResponseModelGoogle
     */
    'items'?: Array<ExtractedTopic>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TexttopicExtractionResponseModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TexttopicExtractionResponseModelGoogle
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TexttopicExtractionResponseModelIbm
 */
export interface TexttopicExtractionResponseModelIbm {
    /**
     * 
     * @type {Array<ExtractedTopic>}
     * @memberof TexttopicExtractionResponseModelIbm
     */
    'items'?: Array<ExtractedTopic>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TexttopicExtractionResponseModelIbm
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TexttopicExtractionResponseModelIbm
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TexttopicExtractionResponseModelOpenai
 */
export interface TexttopicExtractionResponseModelOpenai {
    /**
     * 
     * @type {Array<ExtractedTopic>}
     * @memberof TexttopicExtractionResponseModelOpenai
     */
    'items'?: Array<ExtractedTopic>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TexttopicExtractionResponseModelOpenai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TexttopicExtractionResponseModelOpenai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TexttopicExtractionResponseModelTenstorrent
 */
export interface TexttopicExtractionResponseModelTenstorrent {
    /**
     * 
     * @type {Array<ExtractedTopic>}
     * @memberof TexttopicExtractionResponseModelTenstorrent
     */
    'items'?: Array<ExtractedTopic>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TexttopicExtractionResponseModelTenstorrent
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TexttopicExtractionResponseModelTenstorrent
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest
 */
export interface TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest
     */
    'show_original_response'?: boolean;
    /**
     * Text to analyze
     * @type {string}
     * @memberof TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest
     */
    'text': string;
    /**
     * Language code for the language the input text is written in (eg: en, fr).
     * @type {string}
     * @memberof TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest
     */
    'language'?: string | null;
}
/**
 * 
 * @export
 * @interface TranslationautomaticTranslationAutomaticTranslationRequest
 */
export interface TranslationautomaticTranslationAutomaticTranslationRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof TranslationautomaticTranslationAutomaticTranslationRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof TranslationautomaticTranslationAutomaticTranslationRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof TranslationautomaticTranslationAutomaticTranslationRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof TranslationautomaticTranslationAutomaticTranslationRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof TranslationautomaticTranslationAutomaticTranslationRequest
     */
    'show_original_response'?: boolean;
    /**
     * Text to analyze
     * @type {string}
     * @memberof TranslationautomaticTranslationAutomaticTranslationRequest
     */
    'text': string;
    /**
     * Source language code (ex: en, fr)
     * @type {string}
     * @memberof TranslationautomaticTranslationAutomaticTranslationRequest
     */
    'source_language'?: string | null;
    /**
     * Target language code (ex: en, fr)
     * @type {string}
     * @memberof TranslationautomaticTranslationAutomaticTranslationRequest
     */
    'target_language': string;
}
/**
 * 
 * @export
 * @interface TranslationautomaticTranslationResponseModel
 */
export interface TranslationautomaticTranslationResponseModel {
    /**
     * 
     * @type {TranslationautomaticTranslationResponseModelModernmt}
     * @memberof TranslationautomaticTranslationResponseModel
     */
    'modernmt'?: TranslationautomaticTranslationResponseModelModernmt;
    /**
     * 
     * @type {TranslationautomaticTranslationResponseModelDeepl}
     * @memberof TranslationautomaticTranslationResponseModel
     */
    'deepl'?: TranslationautomaticTranslationResponseModelDeepl;
    /**
     * 
     * @type {TranslationautomaticTranslationResponseModelMicrosoft}
     * @memberof TranslationautomaticTranslationResponseModel
     */
    'microsoft'?: TranslationautomaticTranslationResponseModelMicrosoft;
    /**
     * 
     * @type {TranslationautomaticTranslationResponseModelPhedone}
     * @memberof TranslationautomaticTranslationResponseModel
     */
    'phedone'?: TranslationautomaticTranslationResponseModelPhedone;
    /**
     * 
     * @type {TranslationautomaticTranslationResponseModelOpenai}
     * @memberof TranslationautomaticTranslationResponseModel
     */
    'openai'?: TranslationautomaticTranslationResponseModelOpenai;
    /**
     * 
     * @type {TranslationautomaticTranslationResponseModelIbm}
     * @memberof TranslationautomaticTranslationResponseModel
     */
    'ibm'?: TranslationautomaticTranslationResponseModelIbm;
    /**
     * 
     * @type {TranslationautomaticTranslationResponseModelGoogle}
     * @memberof TranslationautomaticTranslationResponseModel
     */
    'google'?: TranslationautomaticTranslationResponseModelGoogle;
    /**
     * 
     * @type {TranslationautomaticTranslationResponseModelNeuralspace}
     * @memberof TranslationautomaticTranslationResponseModel
     */
    'neuralspace'?: TranslationautomaticTranslationResponseModelNeuralspace;
    /**
     * 
     * @type {TranslationautomaticTranslationResponseModelHuggingface}
     * @memberof TranslationautomaticTranslationResponseModel
     */
    'huggingface'?: TranslationautomaticTranslationResponseModelHuggingface;
    /**
     * 
     * @type {TranslationautomaticTranslationResponseModelAmazon}
     * @memberof TranslationautomaticTranslationResponseModel
     */
    'amazon'?: TranslationautomaticTranslationResponseModelAmazon;
}
/**
 * 
 * @export
 * @interface TranslationautomaticTranslationResponseModelAmazon
 */
export interface TranslationautomaticTranslationResponseModelAmazon {
    /**
     * 
     * @type {string}
     * @memberof TranslationautomaticTranslationResponseModelAmazon
     */
    'text': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TranslationautomaticTranslationResponseModelAmazon
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TranslationautomaticTranslationResponseModelAmazon
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TranslationautomaticTranslationResponseModelDeepl
 */
export interface TranslationautomaticTranslationResponseModelDeepl {
    /**
     * 
     * @type {string}
     * @memberof TranslationautomaticTranslationResponseModelDeepl
     */
    'text': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TranslationautomaticTranslationResponseModelDeepl
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TranslationautomaticTranslationResponseModelDeepl
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TranslationautomaticTranslationResponseModelGoogle
 */
export interface TranslationautomaticTranslationResponseModelGoogle {
    /**
     * 
     * @type {string}
     * @memberof TranslationautomaticTranslationResponseModelGoogle
     */
    'text': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TranslationautomaticTranslationResponseModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TranslationautomaticTranslationResponseModelGoogle
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TranslationautomaticTranslationResponseModelHuggingface
 */
export interface TranslationautomaticTranslationResponseModelHuggingface {
    /**
     * 
     * @type {string}
     * @memberof TranslationautomaticTranslationResponseModelHuggingface
     */
    'text': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TranslationautomaticTranslationResponseModelHuggingface
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TranslationautomaticTranslationResponseModelHuggingface
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TranslationautomaticTranslationResponseModelIbm
 */
export interface TranslationautomaticTranslationResponseModelIbm {
    /**
     * 
     * @type {string}
     * @memberof TranslationautomaticTranslationResponseModelIbm
     */
    'text': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TranslationautomaticTranslationResponseModelIbm
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TranslationautomaticTranslationResponseModelIbm
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TranslationautomaticTranslationResponseModelMicrosoft
 */
export interface TranslationautomaticTranslationResponseModelMicrosoft {
    /**
     * 
     * @type {string}
     * @memberof TranslationautomaticTranslationResponseModelMicrosoft
     */
    'text': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TranslationautomaticTranslationResponseModelMicrosoft
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TranslationautomaticTranslationResponseModelMicrosoft
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TranslationautomaticTranslationResponseModelModernmt
 */
export interface TranslationautomaticTranslationResponseModelModernmt {
    /**
     * 
     * @type {string}
     * @memberof TranslationautomaticTranslationResponseModelModernmt
     */
    'text': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TranslationautomaticTranslationResponseModelModernmt
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TranslationautomaticTranslationResponseModelModernmt
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TranslationautomaticTranslationResponseModelNeuralspace
 */
export interface TranslationautomaticTranslationResponseModelNeuralspace {
    /**
     * 
     * @type {string}
     * @memberof TranslationautomaticTranslationResponseModelNeuralspace
     */
    'text': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TranslationautomaticTranslationResponseModelNeuralspace
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TranslationautomaticTranslationResponseModelNeuralspace
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TranslationautomaticTranslationResponseModelOpenai
 */
export interface TranslationautomaticTranslationResponseModelOpenai {
    /**
     * 
     * @type {string}
     * @memberof TranslationautomaticTranslationResponseModelOpenai
     */
    'text': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TranslationautomaticTranslationResponseModelOpenai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TranslationautomaticTranslationResponseModelOpenai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TranslationautomaticTranslationResponseModelPhedone
 */
export interface TranslationautomaticTranslationResponseModelPhedone {
    /**
     * 
     * @type {string}
     * @memberof TranslationautomaticTranslationResponseModelPhedone
     */
    'text': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TranslationautomaticTranslationResponseModelPhedone
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TranslationautomaticTranslationResponseModelPhedone
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TranslationdocumentTranslationDocumentTranslationRequest
 */
export interface TranslationdocumentTranslationDocumentTranslationRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof TranslationdocumentTranslationDocumentTranslationRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof TranslationdocumentTranslationDocumentTranslationRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof TranslationdocumentTranslationDocumentTranslationRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof TranslationdocumentTranslationDocumentTranslationRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof TranslationdocumentTranslationDocumentTranslationRequest
     */
    'show_original_response'?: boolean;
    /**
     * File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
     * @type {File}
     * @memberof TranslationdocumentTranslationDocumentTranslationRequest
     */
    'file'?: File;
    /**
     * File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @type {string}
     * @memberof TranslationdocumentTranslationDocumentTranslationRequest
     */
    'file_url'?: string | null;
    /**
     * Source language code (ex: en, fr)
     * @type {string}
     * @memberof TranslationdocumentTranslationDocumentTranslationRequest
     */
    'source_language'?: string | null;
    /**
     * Target language code (ex: en, fr)
     * @type {string}
     * @memberof TranslationdocumentTranslationDocumentTranslationRequest
     */
    'target_language': string;
}
/**
 * 
 * @export
 * @interface TranslationdocumentTranslationResponseModel
 */
export interface TranslationdocumentTranslationResponseModel {
    /**
     * 
     * @type {TranslationdocumentTranslationResponseModelGoogle}
     * @memberof TranslationdocumentTranslationResponseModel
     */
    'google'?: TranslationdocumentTranslationResponseModelGoogle;
    /**
     * 
     * @type {TranslationdocumentTranslationResponseModelDeepl}
     * @memberof TranslationdocumentTranslationResponseModel
     */
    'deepl'?: TranslationdocumentTranslationResponseModelDeepl;
}
/**
 * 
 * @export
 * @interface TranslationdocumentTranslationResponseModelDeepl
 */
export interface TranslationdocumentTranslationResponseModelDeepl {
    /**
     * 
     * @type {string}
     * @memberof TranslationdocumentTranslationResponseModelDeepl
     */
    'file': string;
    /**
     * 
     * @type {string}
     * @memberof TranslationdocumentTranslationResponseModelDeepl
     */
    'document_resource_url': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TranslationdocumentTranslationResponseModelDeepl
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TranslationdocumentTranslationResponseModelDeepl
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TranslationdocumentTranslationResponseModelGoogle
 */
export interface TranslationdocumentTranslationResponseModelGoogle {
    /**
     * 
     * @type {string}
     * @memberof TranslationdocumentTranslationResponseModelGoogle
     */
    'file': string;
    /**
     * 
     * @type {string}
     * @memberof TranslationdocumentTranslationResponseModelGoogle
     */
    'document_resource_url': string;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TranslationdocumentTranslationResponseModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TranslationdocumentTranslationResponseModelGoogle
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TranslationlanguageDetectionLanguageDetectionRequest
 */
export interface TranslationlanguageDetectionLanguageDetectionRequest {
    /**
     * It can be one (ex: **\'amazon\'** or **\'google\'**) or multiple provider(s) (ex: **\'amazon,microsoft,google\'**)             that the data will be redirected to in order to get the processed results.
     * @type {string}
     * @memberof TranslationlanguageDetectionLanguageDetectionRequest
     */
    'providers': string;
    /**
     * Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\'t fail.   *Doesn\'t work with async subfeatures.*     
     * @type {string}
     * @memberof TranslationlanguageDetectionLanguageDetectionRequest
     */
    'fallback_providers'?: string;
    /**
     * Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\'google\' : { \'status\': \'success\', ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\'status\': \'success\', \'provider\': \'google\' ... }, ] ```. <br>                    
     * @type {boolean}
     * @memberof TranslationlanguageDetectionLanguageDetectionRequest
     */
    'response_as_dict'?: boolean;
    /**
     * Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{\'attribute_1\': \'x1\',\'attribute_2\': \'y2\'}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \'attribute_1\': [\'x1\',\'x2\', ...], \'attribute_2\': [y1, y2, ...]}``` 
     * @type {boolean}
     * @memberof TranslationlanguageDetectionLanguageDetectionRequest
     */
    'attributes_as_list'?: boolean;
    /**
     * Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @type {boolean}
     * @memberof TranslationlanguageDetectionLanguageDetectionRequest
     */
    'show_original_response'?: boolean;
    /**
     * Text to analyze
     * @type {string}
     * @memberof TranslationlanguageDetectionLanguageDetectionRequest
     */
    'text': string;
}
/**
 * 
 * @export
 * @interface TranslationlanguageDetectionResponseModel
 */
export interface TranslationlanguageDetectionResponseModel {
    /**
     * 
     * @type {TranslationlanguageDetectionResponseModelModernmt}
     * @memberof TranslationlanguageDetectionResponseModel
     */
    'modernmt'?: TranslationlanguageDetectionResponseModelModernmt;
    /**
     * 
     * @type {TranslationlanguageDetectionResponseModelMicrosoft}
     * @memberof TranslationlanguageDetectionResponseModel
     */
    'microsoft'?: TranslationlanguageDetectionResponseModelMicrosoft;
    /**
     * 
     * @type {TranslationlanguageDetectionResponseModelOpenai}
     * @memberof TranslationlanguageDetectionResponseModel
     */
    'openai'?: TranslationlanguageDetectionResponseModelOpenai;
    /**
     * 
     * @type {TranslationlanguageDetectionResponseModelIbm}
     * @memberof TranslationlanguageDetectionResponseModel
     */
    'ibm'?: TranslationlanguageDetectionResponseModelIbm;
    /**
     * 
     * @type {TranslationlanguageDetectionResponseModelOneai}
     * @memberof TranslationlanguageDetectionResponseModel
     */
    'oneai'?: TranslationlanguageDetectionResponseModelOneai;
    /**
     * 
     * @type {TranslationlanguageDetectionResponseModelGoogle}
     * @memberof TranslationlanguageDetectionResponseModel
     */
    'google'?: TranslationlanguageDetectionResponseModelGoogle;
    /**
     * 
     * @type {TranslationlanguageDetectionResponseModelNeuralspace}
     * @memberof TranslationlanguageDetectionResponseModel
     */
    'neuralspace'?: TranslationlanguageDetectionResponseModelNeuralspace;
    /**
     * 
     * @type {TranslationlanguageDetectionResponseModelAmazon}
     * @memberof TranslationlanguageDetectionResponseModel
     */
    'amazon'?: TranslationlanguageDetectionResponseModelAmazon;
    /**
     * 
     * @type {TranslationlanguageDetectionResponseModelEdenAi}
     * @memberof TranslationlanguageDetectionResponseModel
     */
    'eden-ai'?: TranslationlanguageDetectionResponseModelEdenAi;
}
/**
 * 
 * @export
 * @interface TranslationlanguageDetectionResponseModelAmazon
 */
export interface TranslationlanguageDetectionResponseModelAmazon {
    /**
     * 
     * @type {Array<InfosLanguageDetectionDataClass>}
     * @memberof TranslationlanguageDetectionResponseModelAmazon
     */
    'items'?: Array<InfosLanguageDetectionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TranslationlanguageDetectionResponseModelAmazon
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TranslationlanguageDetectionResponseModelAmazon
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TranslationlanguageDetectionResponseModelEdenAi
 */
export interface TranslationlanguageDetectionResponseModelEdenAi {
    /**
     * 
     * @type {Array<InfosLanguageDetectionDataClass>}
     * @memberof TranslationlanguageDetectionResponseModelEdenAi
     */
    'items'?: Array<InfosLanguageDetectionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TranslationlanguageDetectionResponseModelEdenAi
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TranslationlanguageDetectionResponseModelEdenAi
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TranslationlanguageDetectionResponseModelGoogle
 */
export interface TranslationlanguageDetectionResponseModelGoogle {
    /**
     * 
     * @type {Array<InfosLanguageDetectionDataClass>}
     * @memberof TranslationlanguageDetectionResponseModelGoogle
     */
    'items'?: Array<InfosLanguageDetectionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TranslationlanguageDetectionResponseModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TranslationlanguageDetectionResponseModelGoogle
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TranslationlanguageDetectionResponseModelIbm
 */
export interface TranslationlanguageDetectionResponseModelIbm {
    /**
     * 
     * @type {Array<InfosLanguageDetectionDataClass>}
     * @memberof TranslationlanguageDetectionResponseModelIbm
     */
    'items'?: Array<InfosLanguageDetectionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TranslationlanguageDetectionResponseModelIbm
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TranslationlanguageDetectionResponseModelIbm
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TranslationlanguageDetectionResponseModelMicrosoft
 */
export interface TranslationlanguageDetectionResponseModelMicrosoft {
    /**
     * 
     * @type {Array<InfosLanguageDetectionDataClass>}
     * @memberof TranslationlanguageDetectionResponseModelMicrosoft
     */
    'items'?: Array<InfosLanguageDetectionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TranslationlanguageDetectionResponseModelMicrosoft
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TranslationlanguageDetectionResponseModelMicrosoft
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TranslationlanguageDetectionResponseModelModernmt
 */
export interface TranslationlanguageDetectionResponseModelModernmt {
    /**
     * 
     * @type {Array<InfosLanguageDetectionDataClass>}
     * @memberof TranslationlanguageDetectionResponseModelModernmt
     */
    'items'?: Array<InfosLanguageDetectionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TranslationlanguageDetectionResponseModelModernmt
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TranslationlanguageDetectionResponseModelModernmt
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TranslationlanguageDetectionResponseModelNeuralspace
 */
export interface TranslationlanguageDetectionResponseModelNeuralspace {
    /**
     * 
     * @type {Array<InfosLanguageDetectionDataClass>}
     * @memberof TranslationlanguageDetectionResponseModelNeuralspace
     */
    'items'?: Array<InfosLanguageDetectionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TranslationlanguageDetectionResponseModelNeuralspace
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TranslationlanguageDetectionResponseModelNeuralspace
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TranslationlanguageDetectionResponseModelOneai
 */
export interface TranslationlanguageDetectionResponseModelOneai {
    /**
     * 
     * @type {Array<InfosLanguageDetectionDataClass>}
     * @memberof TranslationlanguageDetectionResponseModelOneai
     */
    'items'?: Array<InfosLanguageDetectionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TranslationlanguageDetectionResponseModelOneai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TranslationlanguageDetectionResponseModelOneai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface TranslationlanguageDetectionResponseModelOpenai
 */
export interface TranslationlanguageDetectionResponseModelOpenai {
    /**
     * 
     * @type {Array<InfosLanguageDetectionDataClass>}
     * @memberof TranslationlanguageDetectionResponseModelOpenai
     */
    'items'?: Array<InfosLanguageDetectionDataClass>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof TranslationlanguageDetectionResponseModelOpenai
     */
    'original_response'?: any;
    /**
     * 
     * @type {StatusF43Enum}
     * @memberof TranslationlanguageDetectionResponseModelOpenai
     */
    'status': StatusF43Enum;
}


/**
 * 
 * @export
 * @interface UpperCloth
 */
export interface UpperCloth {
    /**
     * 
     * @type {string}
     * @memberof UpperCloth
     */
    'value': string;
    /**
     * 
     * @type {number}
     * @memberof UpperCloth
     */
    'confidence': number;
}
/**
 * 
 * @export
 * @interface VideoBoundingBox
 */
export interface VideoBoundingBox {
    /**
     * 
     * @type {number}
     * @memberof VideoBoundingBox
     */
    'top': number;
    /**
     * 
     * @type {number}
     * @memberof VideoBoundingBox
     */
    'left': number;
    /**
     * 
     * @type {number}
     * @memberof VideoBoundingBox
     */
    'height': number;
    /**
     * 
     * @type {number}
     * @memberof VideoBoundingBox
     */
    'width': number;
}
/**
 * 
 * @export
 * @interface VideoFace
 */
export interface VideoFace {
    /**
     * 
     * @type {number}
     * @memberof VideoFace
     */
    'offset': number;
    /**
     * 
     * @type {VideoBoundingBox}
     * @memberof VideoFace
     */
    'bounding_box': VideoBoundingBox;
    /**
     * 
     * @type {FaceAttributes}
     * @memberof VideoFace
     */
    'attributes': FaceAttributes;
    /**
     * 
     * @type {LandmarksVideo}
     * @memberof VideoFace
     */
    'landmarks': LandmarksVideo;
}
/**
 * 
 * @export
 * @interface VideoFacePoses
 */
export interface VideoFacePoses {
    /**
     * 
     * @type {number}
     * @memberof VideoFacePoses
     */
    'pitch': number;
    /**
     * 
     * @type {number}
     * @memberof VideoFacePoses
     */
    'roll': number;
    /**
     * 
     * @type {number}
     * @memberof VideoFacePoses
     */
    'yawn': number;
}
/**
 * 
 * @export
 * @interface VideoLabel
 */
export interface VideoLabel {
    /**
     * 
     * @type {string}
     * @memberof VideoLabel
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof VideoLabel
     */
    'confidence': number;
    /**
     * 
     * @type {Array<VideoLabelTimeStamp>}
     * @memberof VideoLabel
     */
    'timestamp'?: Array<VideoLabelTimeStamp>;
    /**
     * 
     * @type {Array<string>}
     * @memberof VideoLabel
     */
    'category'?: Array<string>;
    /**
     * 
     * @type {Array<VideoLabelBoundingBox>}
     * @memberof VideoLabel
     */
    'bounding_box'?: Array<VideoLabelBoundingBox>;
}
/**
 * 
 * @export
 * @interface VideoLabelBoundingBox
 */
export interface VideoLabelBoundingBox {
    /**
     * 
     * @type {number}
     * @memberof VideoLabelBoundingBox
     */
    'top': number;
    /**
     * 
     * @type {number}
     * @memberof VideoLabelBoundingBox
     */
    'left': number;
    /**
     * 
     * @type {number}
     * @memberof VideoLabelBoundingBox
     */
    'height': number;
    /**
     * 
     * @type {number}
     * @memberof VideoLabelBoundingBox
     */
    'width': number;
}
/**
 * 
 * @export
 * @interface VideoLabelTimeStamp
 */
export interface VideoLabelTimeStamp {
    /**
     * 
     * @type {number}
     * @memberof VideoLabelTimeStamp
     */
    'start': number;
    /**
     * 
     * @type {number}
     * @memberof VideoLabelTimeStamp
     */
    'end': number;
}
/**
 * 
 * @export
 * @interface VideoLogo
 */
export interface VideoLogo {
    /**
     * 
     * @type {number}
     * @memberof VideoLogo
     */
    'timestamp': number;
    /**
     * 
     * @type {VideoLogoBoundingBox}
     * @memberof VideoLogo
     */
    'bounding_box': VideoLogoBoundingBox;
    /**
     * 
     * @type {number}
     * @memberof VideoLogo
     */
    'confidence': number;
}
/**
 * 
 * @export
 * @interface VideoLogoBoundingBox
 */
export interface VideoLogoBoundingBox {
    /**
     * 
     * @type {number}
     * @memberof VideoLogoBoundingBox
     */
    'top': number;
    /**
     * 
     * @type {number}
     * @memberof VideoLogoBoundingBox
     */
    'left': number;
    /**
     * 
     * @type {number}
     * @memberof VideoLogoBoundingBox
     */
    'height': number;
    /**
     * 
     * @type {number}
     * @memberof VideoLogoBoundingBox
     */
    'width': number;
}
/**
 * 
 * @export
 * @interface VideoObjectBoundingBox
 */
export interface VideoObjectBoundingBox {
    /**
     * 
     * @type {number}
     * @memberof VideoObjectBoundingBox
     */
    'top': number;
    /**
     * 
     * @type {number}
     * @memberof VideoObjectBoundingBox
     */
    'left': number;
    /**
     * 
     * @type {number}
     * @memberof VideoObjectBoundingBox
     */
    'height': number;
    /**
     * 
     * @type {number}
     * @memberof VideoObjectBoundingBox
     */
    'width': number;
}
/**
 * 
 * @export
 * @interface VideoPersonPoses
 */
export interface VideoPersonPoses {
    /**
     * 
     * @type {number}
     * @memberof VideoPersonPoses
     */
    'pitch': number;
    /**
     * 
     * @type {number}
     * @memberof VideoPersonPoses
     */
    'roll': number;
    /**
     * 
     * @type {number}
     * @memberof VideoPersonPoses
     */
    'yaw': number;
}
/**
 * 
 * @export
 * @interface VideoPersonQuality
 */
export interface VideoPersonQuality {
    /**
     * 
     * @type {number}
     * @memberof VideoPersonQuality
     */
    'brightness': number;
    /**
     * 
     * @type {number}
     * @memberof VideoPersonQuality
     */
    'sharpness': number;
}
/**
 * 
 * @export
 * @interface VideoText
 */
export interface VideoText {
    /**
     * 
     * @type {string}
     * @memberof VideoText
     */
    'text': string;
    /**
     * 
     * @type {Array<VideoTextFrames>}
     * @memberof VideoText
     */
    'frames'?: Array<VideoTextFrames>;
}
/**
 * 
 * @export
 * @interface VideoTextBoundingBox
 */
export interface VideoTextBoundingBox {
    /**
     * 
     * @type {number}
     * @memberof VideoTextBoundingBox
     */
    'top': number;
    /**
     * 
     * @type {number}
     * @memberof VideoTextBoundingBox
     */
    'left': number;
    /**
     * 
     * @type {number}
     * @memberof VideoTextBoundingBox
     */
    'height': number;
    /**
     * 
     * @type {number}
     * @memberof VideoTextBoundingBox
     */
    'width': number;
}
/**
 * 
 * @export
 * @interface VideoTextFrames
 */
export interface VideoTextFrames {
    /**
     * 
     * @type {number}
     * @memberof VideoTextFrames
     */
    'confidence': number;
    /**
     * 
     * @type {number}
     * @memberof VideoTextFrames
     */
    'timestamp': number;
    /**
     * 
     * @type {VideoTextBoundingBox}
     * @memberof VideoTextFrames
     */
    'bounding_box': VideoTextBoundingBox;
}
/**
 * 
 * @export
 * @interface VideoTrackingBoundingBox
 */
export interface VideoTrackingBoundingBox {
    /**
     * 
     * @type {number}
     * @memberof VideoTrackingBoundingBox
     */
    'top': number;
    /**
     * 
     * @type {number}
     * @memberof VideoTrackingBoundingBox
     */
    'left': number;
    /**
     * 
     * @type {number}
     * @memberof VideoTrackingBoundingBox
     */
    'height': number;
    /**
     * 
     * @type {number}
     * @memberof VideoTrackingBoundingBox
     */
    'width': number;
}
/**
 * 
 * @export
 * @interface VideoTrackingPerson
 */
export interface VideoTrackingPerson {
    /**
     * 
     * @type {Array<PersonTracking>}
     * @memberof VideoTrackingPerson
     */
    'tracked'?: Array<PersonTracking>;
}
/**
 * 
 * @export
 * @interface VideoexplicitContentDetectionAsyncModel
 */
export interface VideoexplicitContentDetectionAsyncModel {
    /**
     * 
     * @type {VideoexplicitContentDetectionAsyncModelGoogle}
     * @memberof VideoexplicitContentDetectionAsyncModel
     */
    'google'?: VideoexplicitContentDetectionAsyncModelGoogle;
    /**
     * 
     * @type {VideoexplicitContentDetectionAsyncModelAmazon}
     * @memberof VideoexplicitContentDetectionAsyncModel
     */
    'amazon'?: VideoexplicitContentDetectionAsyncModelAmazon;
}
/**
 * 
 * @export
 * @interface VideoexplicitContentDetectionAsyncModelAmazon
 */
export interface VideoexplicitContentDetectionAsyncModelAmazon {
    /**
     * 
     * @type {Array<ContentNSFW>}
     * @memberof VideoexplicitContentDetectionAsyncModelAmazon
     */
    'moderation'?: Array<ContentNSFW>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof VideoexplicitContentDetectionAsyncModelAmazon
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof VideoexplicitContentDetectionAsyncModelAmazon
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof VideoexplicitContentDetectionAsyncModelAmazon
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof VideoexplicitContentDetectionAsyncModelAmazon
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface VideoexplicitContentDetectionAsyncModelGoogle
 */
export interface VideoexplicitContentDetectionAsyncModelGoogle {
    /**
     * 
     * @type {Array<ContentNSFW>}
     * @memberof VideoexplicitContentDetectionAsyncModelGoogle
     */
    'moderation'?: Array<ContentNSFW>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof VideoexplicitContentDetectionAsyncModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof VideoexplicitContentDetectionAsyncModelGoogle
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof VideoexplicitContentDetectionAsyncModelGoogle
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof VideoexplicitContentDetectionAsyncModelGoogle
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface VideofaceDetectionAsyncModel
 */
export interface VideofaceDetectionAsyncModel {
    /**
     * 
     * @type {VideofaceDetectionAsyncModelGoogle}
     * @memberof VideofaceDetectionAsyncModel
     */
    'google'?: VideofaceDetectionAsyncModelGoogle;
    /**
     * 
     * @type {VideofaceDetectionAsyncModelAmazon}
     * @memberof VideofaceDetectionAsyncModel
     */
    'amazon'?: VideofaceDetectionAsyncModelAmazon;
}
/**
 * 
 * @export
 * @interface VideofaceDetectionAsyncModelAmazon
 */
export interface VideofaceDetectionAsyncModelAmazon {
    /**
     * 
     * @type {Array<VideoFace>}
     * @memberof VideofaceDetectionAsyncModelAmazon
     */
    'faces'?: Array<VideoFace>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof VideofaceDetectionAsyncModelAmazon
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof VideofaceDetectionAsyncModelAmazon
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof VideofaceDetectionAsyncModelAmazon
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof VideofaceDetectionAsyncModelAmazon
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface VideofaceDetectionAsyncModelGoogle
 */
export interface VideofaceDetectionAsyncModelGoogle {
    /**
     * 
     * @type {Array<VideoFace>}
     * @memberof VideofaceDetectionAsyncModelGoogle
     */
    'faces'?: Array<VideoFace>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof VideofaceDetectionAsyncModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof VideofaceDetectionAsyncModelGoogle
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof VideofaceDetectionAsyncModelGoogle
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof VideofaceDetectionAsyncModelGoogle
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface VideolabelDetectionAsyncModel
 */
export interface VideolabelDetectionAsyncModel {
    /**
     * 
     * @type {VideolabelDetectionAsyncModelGoogle}
     * @memberof VideolabelDetectionAsyncModel
     */
    'google'?: VideolabelDetectionAsyncModelGoogle;
    /**
     * 
     * @type {VideolabelDetectionAsyncModelAmazon}
     * @memberof VideolabelDetectionAsyncModel
     */
    'amazon'?: VideolabelDetectionAsyncModelAmazon;
}
/**
 * 
 * @export
 * @interface VideolabelDetectionAsyncModelAmazon
 */
export interface VideolabelDetectionAsyncModelAmazon {
    /**
     * 
     * @type {Array<VideoLabel>}
     * @memberof VideolabelDetectionAsyncModelAmazon
     */
    'labels'?: Array<VideoLabel>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof VideolabelDetectionAsyncModelAmazon
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof VideolabelDetectionAsyncModelAmazon
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof VideolabelDetectionAsyncModelAmazon
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof VideolabelDetectionAsyncModelAmazon
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface VideolabelDetectionAsyncModelGoogle
 */
export interface VideolabelDetectionAsyncModelGoogle {
    /**
     * 
     * @type {Array<VideoLabel>}
     * @memberof VideolabelDetectionAsyncModelGoogle
     */
    'labels'?: Array<VideoLabel>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof VideolabelDetectionAsyncModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof VideolabelDetectionAsyncModelGoogle
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof VideolabelDetectionAsyncModelGoogle
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof VideolabelDetectionAsyncModelGoogle
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface VideologoDetectionAsyncLogoDetectionAsyncDataClass
 */
export interface VideologoDetectionAsyncLogoDetectionAsyncDataClass {
    /**
     * 
     * @type {Array<LogoTrack>}
     * @memberof VideologoDetectionAsyncLogoDetectionAsyncDataClass
     */
    'logos'?: Array<LogoTrack>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof VideologoDetectionAsyncLogoDetectionAsyncDataClass
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof VideologoDetectionAsyncLogoDetectionAsyncDataClass
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof VideologoDetectionAsyncLogoDetectionAsyncDataClass
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof VideologoDetectionAsyncLogoDetectionAsyncDataClass
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface VideologoDetectionAsyncModel
 */
export interface VideologoDetectionAsyncModel {
    /**
     * 
     * @type {VideologoDetectionAsyncModelGoogle}
     * @memberof VideologoDetectionAsyncModel
     */
    'google'?: VideologoDetectionAsyncModelGoogle;
}
/**
 * 
 * @export
 * @interface VideologoDetectionAsyncModelGoogle
 */
export interface VideologoDetectionAsyncModelGoogle {
    /**
     * 
     * @type {Array<LogoTrack>}
     * @memberof VideologoDetectionAsyncModelGoogle
     */
    'logos'?: Array<LogoTrack>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof VideologoDetectionAsyncModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof VideologoDetectionAsyncModelGoogle
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof VideologoDetectionAsyncModelGoogle
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof VideologoDetectionAsyncModelGoogle
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface VideoobjectTrackingAsyncModel
 */
export interface VideoobjectTrackingAsyncModel {
    /**
     * 
     * @type {VideoobjectTrackingAsyncModelGoogle}
     * @memberof VideoobjectTrackingAsyncModel
     */
    'google'?: VideoobjectTrackingAsyncModelGoogle;
}
/**
 * 
 * @export
 * @interface VideoobjectTrackingAsyncModelGoogle
 */
export interface VideoobjectTrackingAsyncModelGoogle {
    /**
     * 
     * @type {Array<ObjectTrack>}
     * @memberof VideoobjectTrackingAsyncModelGoogle
     */
    'objects'?: Array<ObjectTrack>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof VideoobjectTrackingAsyncModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof VideoobjectTrackingAsyncModelGoogle
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof VideoobjectTrackingAsyncModelGoogle
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof VideoobjectTrackingAsyncModelGoogle
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface VideoobjectTrackingAsyncObjectTrackingAsyncDataClass
 */
export interface VideoobjectTrackingAsyncObjectTrackingAsyncDataClass {
    /**
     * 
     * @type {Array<ObjectTrack>}
     * @memberof VideoobjectTrackingAsyncObjectTrackingAsyncDataClass
     */
    'objects'?: Array<ObjectTrack>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof VideoobjectTrackingAsyncObjectTrackingAsyncDataClass
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof VideoobjectTrackingAsyncObjectTrackingAsyncDataClass
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof VideoobjectTrackingAsyncObjectTrackingAsyncDataClass
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof VideoobjectTrackingAsyncObjectTrackingAsyncDataClass
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface VideopersonTrackingAsyncModel
 */
export interface VideopersonTrackingAsyncModel {
    /**
     * 
     * @type {VideopersonTrackingAsyncModelGoogle}
     * @memberof VideopersonTrackingAsyncModel
     */
    'google'?: VideopersonTrackingAsyncModelGoogle;
    /**
     * 
     * @type {VideopersonTrackingAsyncModelAmazon}
     * @memberof VideopersonTrackingAsyncModel
     */
    'amazon'?: VideopersonTrackingAsyncModelAmazon;
}
/**
 * 
 * @export
 * @interface VideopersonTrackingAsyncModelAmazon
 */
export interface VideopersonTrackingAsyncModelAmazon {
    /**
     * 
     * @type {Array<VideoTrackingPerson>}
     * @memberof VideopersonTrackingAsyncModelAmazon
     */
    'persons'?: Array<VideoTrackingPerson>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof VideopersonTrackingAsyncModelAmazon
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof VideopersonTrackingAsyncModelAmazon
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof VideopersonTrackingAsyncModelAmazon
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof VideopersonTrackingAsyncModelAmazon
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface VideopersonTrackingAsyncModelGoogle
 */
export interface VideopersonTrackingAsyncModelGoogle {
    /**
     * 
     * @type {Array<VideoTrackingPerson>}
     * @memberof VideopersonTrackingAsyncModelGoogle
     */
    'persons'?: Array<VideoTrackingPerson>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof VideopersonTrackingAsyncModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof VideopersonTrackingAsyncModelGoogle
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof VideopersonTrackingAsyncModelGoogle
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof VideopersonTrackingAsyncModelGoogle
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface VideotextDetectionAsyncModel
 */
export interface VideotextDetectionAsyncModel {
    /**
     * 
     * @type {VideotextDetectionAsyncModelGoogle}
     * @memberof VideotextDetectionAsyncModel
     */
    'google'?: VideotextDetectionAsyncModelGoogle;
    /**
     * 
     * @type {VideotextDetectionAsyncModelAmazon}
     * @memberof VideotextDetectionAsyncModel
     */
    'amazon'?: VideotextDetectionAsyncModelAmazon;
}
/**
 * 
 * @export
 * @interface VideotextDetectionAsyncModelAmazon
 */
export interface VideotextDetectionAsyncModelAmazon {
    /**
     * 
     * @type {Array<VideoText>}
     * @memberof VideotextDetectionAsyncModelAmazon
     */
    'texts'?: Array<VideoText>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof VideotextDetectionAsyncModelAmazon
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof VideotextDetectionAsyncModelAmazon
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof VideotextDetectionAsyncModelAmazon
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof VideotextDetectionAsyncModelAmazon
     */
    'error'?: object;
}


/**
 * 
 * @export
 * @interface VideotextDetectionAsyncModelGoogle
 */
export interface VideotextDetectionAsyncModelGoogle {
    /**
     * 
     * @type {Array<VideoText>}
     * @memberof VideotextDetectionAsyncModelGoogle
     */
    'texts'?: Array<VideoText>;
    /**
     * original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request
     * @type {any}
     * @memberof VideotextDetectionAsyncModelGoogle
     */
    'original_response'?: any;
    /**
     * 
     * @type {string}
     * @memberof VideotextDetectionAsyncModelGoogle
     */
    'id': string;
    /**
     * 
     * @type {FinalStatusEnum}
     * @memberof VideotextDetectionAsyncModelGoogle
     */
    'final_status': FinalStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof VideotextDetectionAsyncModelGoogle
     */
    'error'?: object;
}


/**
 * Word of a document      Attributes:         text (str): Text detected in the word         bounding_boxes (Sequence[BoundingBox]): Bounding boxes of the words in the word         confidence (float): Confidence score of the word     
 * @export
 * @interface Word
 */
export interface Word {
    /**
     * Text detected in the word
     * @type {string}
     * @memberof Word
     */
    'text': string;
    /**
     * 
     * @type {WordBoundingBox}
     * @memberof Word
     */
    'bounding_box': WordBoundingBox;
    /**
     * Confidence score of the word
     * @type {number}
     * @memberof Word
     */
    'confidence': number;
}
/**
 * Bounding boxes of the words in the word
 * @export
 * @interface WordBoundingBox
 */
export interface WordBoundingBox {
    /**
     * Left coordinate of the bounding box
     * @type {number}
     * @memberof WordBoundingBox
     */
    'left': number;
    /**
     * Top coordinate of the bounding box
     * @type {number}
     * @memberof WordBoundingBox
     */
    'top': number;
    /**
     * Width of the bounding box
     * @type {number}
     * @memberof WordBoundingBox
     */
    'width': number;
    /**
     * Height of the bounding box
     * @type {number}
     * @memberof WordBoundingBox
     */
    'height': number;
}
/**
 * 
 * @export
 * @interface WorklowResponseType
 */
export interface WorklowResponseType {
}

/**
 * AudioApi - axios parameter creator
 * @export
 */
export const AudioApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|0.024 (per 60 seconde)|15 seconde |**google**|`v1p1beta1`|0.024 (per 60 seconde)|1 seconde |**ibm**|`v1`|0.02 (per 60 seconde)|1 seconde |**microsoft**|`v1.0`|0.0168 (per 60 seconde)|1 seconde |**revai**|`v1`|0.02 (per 60 seconde)|15 seconde |**symbl**|`v1`|0.027 (per 60 seconde)|60 seconde |**voci**|`v1`|0.0162 (per 60 seconde)|1 seconde |**voxist**|`v1`|0.0042 (per 15 seconde)|1 seconde |**neuralspace**|`v1`|0.024 (per 60 seconde)|60 seconde |**oneai**|`v0`|0.0067 (per 60 seconde)|1 seconde |**assembly**|`v2`|0.011 (per 60 seconde)|1 seconde |**deepgram - base**|`v1`|0.0169 (per 60 seconde)|1 seconde |**deepgram - enhanced**|`v1`|0.0189 (per 60 seconde)|1 seconde |**deepgram**|`v1`|0.0169 (per 60 seconde)|1 seconde |**openai**|`boto3 (v1.15.18)`|0.006 (per 60 seconde)|1 seconde |**speechmatics - enhanced**|`v2`|0.0316 (per 60 seconde)|1 seconde |**speechmatics - standard**|`v2`|0.0208 (per 60 seconde)|1 seconde |**speechmatics**|`v2`|0.0316 (per 60 seconde)|1 seconde |**gladia**|`v1`|0.0102 (per 60 seconde)|1 seconde   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Armenian**|`hy`| |**Assamese**|`as`| |**Azerbaijani**|`az`| |**Bashkir**|`ba`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bengali**|`bn`| |**Bosnian**|`bs`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Central Khmer**|`km`| |**Chinese**|`zh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Esperanto**|`eo`| |**Estonian**|`et`| |**Faroese**|`fo`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Gujarati**|`gu`| |**Haitian**|`ht`| |**Hausa**|`ha`| |**Hawaiian**|`haw`| |**Hebrew**|`he`| |**Hebrew**|`iw`| |**Hindi**|`hi`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Indonesian**|`id`| |**Interlingua (International Auxiliary Language Association)**|`ia`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kannada**|`kn`| |**Kazakh**|`kk`| |**Korean**|`ko`| |**Lao**|`lo`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lingala**|`ln`| |**Lithuanian**|`lt`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Mandarin Chinese**|`cmn`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian**|`no`| |**Norwegian Bokmål**|`nb`| |**Norwegian Nynorsk**|`nn`| |**Occitan (post 1500)**|`oc`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Sanskrit**|`sa`| |**Serbian**|`sr`| |**Shona**|`sn`| |**Sindhi**|`sd`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Spanish**|`es`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tamil**|`ta`| |**Tatar**|`tt`| |**Telugu**|`te`| |**Thai**|`th`| |**Tibetan**|`bo`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Welsh**|`cy`| |**Wolof**|`wo`| |**Wu Chinese**|`wuu`| |**Yiddish**|`yi`| |**Yoruba**|`yo`| |**Yue Chinese**|`yue`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Afrikaans (South Africa)**|`af-ZA`| |**Albanian (Albania)**|`sq-AL`| |**Amharic (Ethiopia)**|`am-ET`| |**Arabic (Algeria)**|`ar-DZ`| |**Arabic (Bahrain)**|`ar-BH`| |**Arabic (Egypt)**|`ar-EG`| |**Arabic (Iraq)**|`ar-IQ`| |**Arabic (Israel)**|`ar-IL`| |**Arabic (Jordan)**|`ar-JO`| |**Arabic (Kuwait)**|`ar-KW`| |**Arabic (Lebanon)**|`ar-LB`| |**Arabic (Libya)**|`ar-LY`| |**Arabic (Mauritania)**|`ar-MR`| |**Arabic (Montserrat)**|`ar-MS`| |**Arabic (Morocco)**|`ar-MA`| |**Arabic (Oman)**|`ar-OM`| |**Arabic (Palestinian Territories)**|`ar-PS`| |**Arabic (Qatar)**|`ar-QA`| |**Arabic (Saudi Arabia)**|`ar-SA`| |**Arabic (Syria)**|`ar-SY`| |**Arabic (Tunisia)**|`ar-TN`| |**Arabic (United Arab Emirates)**|`ar-AE`| |**Arabic (Yemen)**|`ar-YE`| |**Armenian (Armenia)**|`hy-AM`| |**Assamese (India)**|`as-IN`| |**Azerbaijani (Azerbaijan)**|`az-AZ`| |**Bangla (Bangladesh)**|`bn-BD`| |**Bangla (India)**|`bn-IN`| |**Bashkir (Russia)**|`ba-RU`| |**Basque (Spain)**|`eu-ES`| |**Belarusian (Belarus)**|`be-BY`| |**Bosnian (Bosnia & Herzegovina)**|`bs-BA`| |**Breton (France)**|`br-FR`| |**Bulgarian (Bulgaria)**|`bg-BG`| |**Burmese (Myanmar (Burma))**|`my-MM`| |**Cantonese (China)**|`yue-CN`| |**Cantonese (Traditional, Hong Kong SAR China)**|`yue-Hant-HK`| |**Catalan (Spain)**|`ca-ES`| |**Chinese (China)**|`zh-CN`| |**Chinese (Hong Kong SAR China)**|`zh-HK`| |**Chinese (Taiwan)**|`zh-TW`| |**Croatian (Croatia)**|`hr-HR`| |**Czech (Czechia)**|`cs-CZ`| |**Danish (Denmark)**|`da-DK`| |**Dutch (Belgium)**|`nl-BE`| |**Dutch (Netherlands)**|`nl-NL`| |**English (Australia)**|`en-AU`| |**English (Canada)**|`en-CA`| |**English (Ghana)**|`en-GH`| |**English (Hong Kong SAR China)**|`en-HK`| |**English (India)**|`en-IN`| |**English (Ireland)**|`en-IE`| |**English (Kenya)**|`en-KE`| |**English (New Zealand)**|`en-NZ`| |**English (Nigeria)**|`en-NG`| |**English (Pakistan)**|`en-PK`| |**English (Philippines)**|`en-PH`| |**English (Singapore)**|`en-SG`| |**English (South Africa)**|`en-ZA`| |**English (Tanzania)**|`en-TZ`| |**English (United Kingdom)**|`en-GB`| |**English (United Kingdom)**|`en-UK`| |**English (United States)**|`en-US`| |**Estonian (Estonia)**|`et-EE`| |**Faroese (Faroe Islands)**|`fo-FO`| |**Filipino (Philippines)**|`fil-PH`| |**Filipino (Philippines)**|`tl-PH`| |**Finnish (Finland)**|`fi-FI`| |**French (Belgium)**|`fr-BE`| |**French (Canada)**|`fr-CA`| |**French (France)**|`fr-FR`| |**French (Switzerland)**|`fr-CH`| |**Galician (Spain)**|`gl-ES`| |**Georgian (Georgia)**|`ka-GE`| |**German (Austria)**|`de-AT`| |**German (Germany)**|`de-DE`| |**German (Switzerland)**|`de-CH`| |**Greek (Greece)**|`el-GR`| |**Gujarati (India)**|`gu-IN`| |**Haitian Creole (Haiti)**|`ht-HT`| |**Hausa (Nigeria)**|`ha-NG`| |**Hawaiian (United States)**|`haw-US`| |**Hebrew (Israel)**|`he-IL`| |**Hebrew (Israel)**|`iw-IL`| |**Hindi (India)**|`hi-IN`| |**Hindi (Latin)**|`hi-Latn`| |**Hungarian (Hungary)**|`hu-HU`| |**Icelandic (Iceland)**|`is-IS`| |**Indonesian (Indonesia)**|`id-ID`| |**Irish (Ireland)**|`ga-IE`| |**Italian (Italy)**|`it-IT`| |**Italian (Switzerland)**|`it-CH`| |**Japanese (Japan)**|`ja-JP`| |**Javanese (Indonesia)**|`jv-ID`| |**Kannada (India)**|`kn-IN`| |**Kazakh (Kazakhstan)**|`kk-KZ`| |**Khmer (Cambodia)**|`km-KH`| |**Korean (South Korea)**|`ko-KR`| |**Lao (Laos)**|`lo-LA`| |**Latvian (Latvia)**|`lv-LV`| |**Lingala (Congo - Kinshasa)**|`ln-CD`| |**Lithuanian (Lithuania)**|`lt-LT`| |**Luxembourgish (Luxembourg)**|`lb-LU`| |**Macedonian (North Macedonia)**|`mk-MK`| |**Malagasy (Madagascar)**|`mg-MG`| |**Malay (Malaysia)**|`ms-MY`| |**Malayalam (India)**|`ml-IN`| |**Maltese (Malta)**|`mt-MT`| |**Marathi (India)**|`mr-IN`| |**Mongolian (Mongolia)**|`mn-MN`| |**Māori (New Zealand)**|`mi-NZ`| |**Nepali (Nepal)**|`ne-NP`| |**Norwegian (Norway)**|`no-NO`| |**Norwegian Bokmål (Norway)**|`nb-NO`| |**Norwegian Nynorsk (Norway)**|`nn-NO`| |**Occitan (France)**|`oc-FR`| |**Pashto (Afghanistan)**|`ps-AF`| |**Persian (Iran)**|`fa-IR`| |**Polish (Poland)**|`pl-PL`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`| |**Punjabi (India)**|`pa-Guru-IN`| |**Romanian (Romania)**|`ro-RO`| |**Russian (Russia)**|`ru-RU`| |**Sanskrit (India)**|`sa-IN`| |**Serbian (Serbia)**|`sr-RS`| |**Shona (Zimbabwe)**|`sn-ZW`| |**Sindhi (Pakistan)**|`sd-PK`| |**Sinhala (Sri Lanka)**|`si-LK`| |**Slovak (Slovakia)**|`sk-SK`| |**Slovenian (Slovenia)**|`sl-SI`| |**Somali (Somalia)**|`so-SO`| |**Spanish (Argentina)**|`es-AR`| |**Spanish (Bolivia)**|`es-BO`| |**Spanish (Chile)**|`es-CL`| |**Spanish (Colombia)**|`es-CO`| |**Spanish (Costa Rica)**|`es-CR`| |**Spanish (Cuba)**|`es-CU`| |**Spanish (Dominican Republic)**|`es-DO`| |**Spanish (Ecuador)**|`es-EC`| |**Spanish (El Salvador)**|`es-SV`| |**Spanish (Equatorial Guinea)**|`es-GQ`| |**Spanish (Guatemala)**|`es-GT`| |**Spanish (Honduras)**|`es-HN`| |**Spanish (Laos)**|`es-LA`| |**Spanish (Latin America)**|`es-419`| |**Spanish (Mexico)**|`es-MX`| |**Spanish (Nicaragua)**|`es-NI`| |**Spanish (Panama)**|`es-PA`| |**Spanish (Paraguay)**|`es-PY`| |**Spanish (Peru)**|`es-PE`| |**Spanish (Puerto Rico)**|`es-PR`| |**Spanish (Spain)**|`es-ES`| |**Spanish (United States)**|`es-US`| |**Spanish (Uruguay)**|`es-UY`| |**Spanish (Venezuela)**|`es-VE`| |**Sundanese (Indonesia)**|`su-ID`| |**Swahili (Kenya)**|`sw-KE`| |**Swahili (Tanzania)**|`sw-TZ`| |**Swedish (Sweden)**|`sv-SE`| |**Tajik (Tajikistan)**|`tg-TJ`| |**Tamil (India)**|`ta-IN`| |**Tamil (Malaysia)**|`ta-MY`| |**Tamil (Singapore)**|`ta-SG`| |**Tamil (Sri Lanka)**|`ta-LK`| |**Tatar (Russia)**|`tt-RU`| |**Telugu (India)**|`te-IN`| |**Thai (Thailand)**|`th-TH`| |**Tibetan (China)**|`bo-CN`| |**Turkish (Turkey)**|`tr-TR`| |**Turkmen (Turkmenistan)**|`tk-TM`| |**Ukrainian (Ukraine)**|`uk-UA`| |**Urdu (India)**|`ur-IN`| |**Urdu (Pakistan)**|`ur-PK`| |**Uzbek (Uzbekistan)**|`uz-UZ`| |**Vietnamese (Vietnam)**|`vi-VN`| |**Welsh (United Kingdom)**|`cy-GB`| |**Wolof (Senegal)**|`wo-SN`| |**Wu Chinese (China)**|`wuu-CN`| |**Yoruba (Nigeria)**|`yo-NG`| |**Zulu (South Africa)**|`zu-ZA`|  </details>
         * @summary Speech to Text Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {string} [language] Language code expected (ex: en, fr)
         * @param {number} [speakers] Number of speakers in the file audio
         * @param {boolean} [profanityFilter] Boolean value to specify weather or not the service will filter profanity and replace inappropriate words with a series of asterisks
         * @param {string} [customVocabulary] List of words or composed words to be detected by the speech to text engine. (Ex: Word, Mike, Draw, Los Angeles,...)
         * @param {boolean} [convertToWav] Boolean value to specify weather to convert the audio/video file to wav format to be accepted by a majority of the providers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        audioSpeechToTextAsyncCreate: async (providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, language?: string, speakers?: number, profanityFilter?: boolean, customVocabulary?: string, convertToWav?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providers' is not null or undefined
            assertParamExists('audioSpeechToTextAsyncCreate', 'providers', providers)
            const localVarPath = `/audio/speech_to_text_async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (providers !== undefined) { 
                localVarFormParams.append('providers', providers as any);
            }
    
            if (fallbackProviders !== undefined) { 
                localVarFormParams.append('fallback_providers', fallbackProviders as any);
            }
    
            if (showOriginalResponse !== undefined) { 
                localVarFormParams.append('show_original_response', showOriginalResponse as any);
            }
    
            if (webhookReceiver !== undefined) { 
                localVarFormParams.append('webhook_receiver', webhookReceiver as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (fileUrl !== undefined) { 
                localVarFormParams.append('file_url', fileUrl as any);
            }
    
            if (language !== undefined) { 
                localVarFormParams.append('language', language as any);
            }
    
            if (speakers !== undefined) { 
                localVarFormParams.append('speakers', speakers as any);
            }
    
            if (profanityFilter !== undefined) { 
                localVarFormParams.append('profanity_filter', profanityFilter as any);
            }
    
            if (customVocabulary !== undefined) { 
                localVarFormParams.append('custom_vocabulary', customVocabulary as any);
            }
    
            if (convertToWav !== undefined) { 
                localVarFormParams.append('convert_to_wav', convertToWav as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Speech to Text List Jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        audioSpeechToTextAsyncRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/audio/speech_to_text_async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Speech to Text Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        audioSpeechToTextAsyncRetrieve2: async (publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'publicId' is not null or undefined
            assertParamExists('audioSpeechToTextAsyncRetrieve2', 'publicId', publicId)
            const localVarPath = `/audio/speech_to_text_async/{public_id}`
                .replace(`{${"public_id"}}`, encodeURIComponent(String(publicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (responseAsDict !== undefined) {
                localVarQueryParameter['response_as_dict'] = responseAsDict;
            }

            if (showOriginalResponse !== undefined) {
                localVarQueryParameter['show_original_response'] = showOriginalResponse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <strong style=\'color: #ac3737\'>No Provider Available</strong>    <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Armenian**|`hy`| |**Azerbaijani**|`az`| |**Basque**|`eu`| |**Bengali**|`bn`| |**Bosnian**|`bs`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Central Khmer**|`km`| |**Chinese**|`zh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Estonian**|`et`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Indonesian**|`id`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kazakh**|`kk`| |**Korean**|`ko`| |**Lao**|`lo`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Macedonian**|`mk`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Marathi**|`mr`| |**Mongolian**|`mn`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian Bokmål**|`nb`| |**Persian**|`fa`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Serbian**|`sr`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Spanish**|`es`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tamil**|`ta`| |**Telugu**|`te`| |**Thai**|`th`| |**Turkish**|`tr`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Welsh**|`cy`| |**Wu Chinese**|`wuu`| |**Xhosa**|`xh`| |**Yue Chinese**|`yue`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Afrikaans (South Africa)**|`af-ZA`| |**Albanian (Albania)**|`sq-AL`| |**Amharic (Ethiopia)**|`am-ET`| |**Arabic (Algeria)**|`ar-DZ`| |**Arabic (Bahrain)**|`ar-BH`| |**Arabic (Egypt)**|`ar-EG`| |**Arabic (Iraq)**|`ar-IQ`| |**Arabic (Jordan)**|`ar-JO`| |**Arabic (Kuwait)**|`ar-KW`| |**Arabic (Lebanon)**|`ar-LB`| |**Arabic (Libya)**|`ar-LY`| |**Arabic (Morocco)**|`ar-MA`| |**Arabic (Oman)**|`ar-OM`| |**Arabic (Qatar)**|`ar-QA`| |**Arabic (Saudi Arabia)**|`ar-SA`| |**Arabic (Tunisia)**|`ar-TN`| |**Arabic (United Arab Emirates)**|`ar-AE`| |**Armenian (Armenia)**|`hy-AM`| |**Azerbaijani (Azerbaijan)**|`az-AZ`| |**Bangla (India)**|`bn-IN`| |**Basque (Spain)**|`eu-ES`| |**Bosnian (Bosnia & Herzegovina)**|`bs-BA`| |**Burmese (Myanmar (Burma))**|`my-MM`| |**Cantonese (China)**|`yue-CN`| |**Catalan (Spain)**|`ca-ES`| |**Chinese (China)**|`zh-CN`| |**Chinese (China)**|`zh-CN-henan`| |**Chinese (China)**|`zh-CN-shandong`| |**Chinese (China)**|`zh-CN-sichuan`| |**Chinese (Hong Kong SAR China)**|`zh-HK`| |**Chinese (Taiwan)**|`zh-TW`| |**Croatian (Croatia)**|`hr-HR`| |**Czech (Czechia)**|`cs-CZ`| |**Danish (Denmark)**|`da-DK`| |**Dutch (Belgium)**|`nl-BE`| |**Dutch (Netherlands)**|`nl-NL`| |**English (Australia)**|`en-AU`| |**English (Canada)**|`en-CA`| |**English (Curaçao)**|`en-AN`| |**English (Hong Kong SAR China)**|`en-HK`| |**English (India)**|`en-IN`| |**English (Ireland)**|`en-IE`| |**English (Kenya)**|`en-KE`| |**English (New Zealand)**|`en-NZ`| |**English (Nigeria)**|`en-NG`| |**English (Philippines)**|`en-PH`| |**English (Singapore)**|`en-SG`| |**English (South Africa)**|`en-ZA`| |**English (Tanzania)**|`en-TZ`| |**English (United Kingdom)**|`en-GB`| |**English (United States)**|`en-US`| |**Estonian (Estonia)**|`et-EE`| |**Filipino (Philippines)**|`fil-PH`| |**Finnish (Finland)**|`fi-FI`| |**French (Belgium)**|`fr-BE`| |**French (Canada)**|`fr-CA`| |**French (France)**|`fr-FR`| |**French (Switzerland)**|`fr-CH`| |**Galician (Spain)**|`gl-ES`| |**Georgian (Georgia)**|`ka-GE`| |**German (Austria)**|`de-AT`| |**German (Germany)**|`de-DE`| |**German (Switzerland)**|`de-CH`| |**Hebrew (Israel)**|`he-IL`| |**Hindi (India)**|`hi-IN`| |**Hungarian (Hungary)**|`hu-HU`| |**Icelandic (Iceland)**|`is-IS`| |**Indonesian (Indonesia)**|`id-ID`| |**Irish (Ireland)**|`ga-IE`| |**Italian (Italy)**|`it-IT`| |**Japanese (Japan)**|`ja-JP`| |**Javanese (Indonesia)**|`jv-ID`| |**Kazakh (Kazakhstan)**|`kk-KZ`| |**Khmer (Cambodia)**|`km-KH`| |**Korean (South Korea)**|`ko-KR`| |**Lao (Laos)**|`lo-LA`| |**Latvian (Latvia)**|`lv-LV`| |**Lithuanian (Lithuania)**|`lt-LT`| |**Macedonian (North Macedonia)**|`mk-MK`| |**Malay (Malaysia)**|`ms-MY`| |**Malayalam (India)**|`ml-IN`| |**Maltese (Malta)**|`mt-MT`| |**Marathi (India)**|`mr-IN`| |**Mongolian (Mongolia)**|`mn-MN`| |**Nepali (Nepal)**|`ne-NP`| |**Norwegian Bokmål (Norway)**|`nb-NO`| |**Pashto (Afghanistan)**|`ps-AF`| |**Persian (Iran)**|`fa-IR`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`| |**Romanian (Romania)**|`ro-RO`| |**Russian (Russia)**|`ru-RU`| |**Serbian (Serbia)**|`sr-RS`| |**Sinhala (Sri Lanka)**|`si-LK`| |**Slovak (Slovakia)**|`sk-SK`| |**Slovenian (Slovenia)**|`sl-SI`| |**Somali (Somalia)**|`so-SO`| |**Spanish (Argentina)**|`es-AR`| |**Spanish (Bolivia)**|`es-BO`| |**Spanish (Chile)**|`es-CL`| |**Spanish (Colombia)**|`es-CO`| |**Spanish (Costa Rica)**|`es-CR`| |**Spanish (Cuba)**|`es-CU`| |**Spanish (Ecuador)**|`es-EC`| |**Spanish (El Salvador)**|`es-SV`| |**Spanish (Equatorial Guinea)**|`es-GQ`| |**Spanish (Guatemala)**|`es-GT`| |**Spanish (Mexico)**|`es-MX`| |**Spanish (Nicaragua)**|`es-NI`| |**Spanish (Panama)**|`es-PA`| |**Spanish (Paraguay)**|`es-PY`| |**Spanish (Puerto Rico)**|`es-PR`| |**Spanish (Spain)**|`es-ES`| |**Spanish (United States)**|`es-US`| |**Spanish (Uruguay)**|`es-UY`| |**Spanish (Venezuela)**|`es-VE`| |**Sundanese (Indonesia)**|`su-ID`| |**Swahili (Kenya)**|`sw-KE`| |**Swahili (Tanzania)**|`sw-TZ`| |**Swedish (Sweden)**|`sv-SE`| |**Tamil (India)**|`ta-IN`| |**Tamil (Malaysia)**|`ta-MY`| |**Tamil (Singapore)**|`ta-SG`| |**Telugu (India)**|`te-IN`| |**Thai (Thailand)**|`th-TH`| |**Turkish (Turkey)**|`tr-TR`| |**Ukrainian (Ukraine)**|`uk-UA`| |**Urdu (India)**|`ur-IN`| |**Urdu (Pakistan)**|`ur-PK`| |**Uzbek (United Kingdom)**|`uz-UK`| |**Vietnamese (Vietnam)**|`vi-VN`| |**Welsh (United Kingdom)**|`cy-GB`| |**Wu Chinese (China)**|`wuu-CN`| |**Xhosa (South Africa)**|`xh-ZA`| |**Zulu (South Africa)**|`zu-ZA`|  </details>
         * @summary Text to Speech launch job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} text Text to analyze
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {string} [language] Language code expected (ex: en, fr)
         * @param {TextToSpeechAsyncRequestOption} [option] 
         * @param {number} [rate] Increase or decrease the speaking rate by expressing a positif or negatif number ranging between             100 and -100 (a relative value as percentage varying from -100% to 100%)
         * @param {number} [pitch] Increase or decrease the speaking pitch by expressing a positif or negatif number ranging between             100 and -100 (a relative value as percentage varying from -100% to 100%)
         * @param {number} [volume] Increase or decrease the audio volume by expressing a positif or negatif number ranging between             100 and -100 (a relative value as percentage varying from -100% to 100%)
         * @param {string} [audioFormat] Optional parameter to specify the audio format in which the audio will be generated. By default,             audios are encoded in MP3, except for lovoai which use the wav container.
         * @param {number} [samplingRate] Optional. The synthesis sample rate (in hertz) for this audio. When this is specified, the audio will be converted             either to the right passed value, or to a the nearest value acceptable by the provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        audioTextToSpeechAsyncCreate: async (providers: string, text: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, language?: string, option?: TextToSpeechAsyncRequestOption, rate?: number, pitch?: number, volume?: number, audioFormat?: string, samplingRate?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providers' is not null or undefined
            assertParamExists('audioTextToSpeechAsyncCreate', 'providers', providers)
            // verify required parameter 'text' is not null or undefined
            assertParamExists('audioTextToSpeechAsyncCreate', 'text', text)
            const localVarPath = `/audio/text_to_speech_async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (providers !== undefined) { 
                localVarFormParams.append('providers', providers as any);
            }
    
            if (fallbackProviders !== undefined) { 
                localVarFormParams.append('fallback_providers', fallbackProviders as any);
            }
    
            if (showOriginalResponse !== undefined) { 
                localVarFormParams.append('show_original_response', showOriginalResponse as any);
            }
    
            if (webhookReceiver !== undefined) { 
                localVarFormParams.append('webhook_receiver', webhookReceiver as any);
            }
    
            if (text !== undefined) { 
                localVarFormParams.append('text', text as any);
            }
    
            if (language !== undefined) { 
                localVarFormParams.append('language', language as any);
            }
    
            if (option !== undefined) { 
                localVarFormParams.append('option', new Blob([JSON.stringify(option)], { type: "application/json", }));
            }
    
            if (rate !== undefined) { 
                localVarFormParams.append('rate', rate as any);
            }
    
            if (pitch !== undefined) { 
                localVarFormParams.append('pitch', pitch as any);
            }
    
            if (volume !== undefined) { 
                localVarFormParams.append('volume', volume as any);
            }
    
            if (audioFormat !== undefined) { 
                localVarFormParams.append('audio_format', audioFormat as any);
            }
    
            if (samplingRate !== undefined) { 
                localVarFormParams.append('sampling_rate', samplingRate as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Text To Speech list jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        audioTextToSpeechAsyncRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/audio/text_to_speech_async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Text To Speech Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        audioTextToSpeechAsyncRetrieve2: async (publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'publicId' is not null or undefined
            assertParamExists('audioTextToSpeechAsyncRetrieve2', 'publicId', publicId)
            const localVarPath = `/audio/text_to_speech_async/{public_id}`
                .replace(`{${"public_id"}}`, encodeURIComponent(String(publicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (responseAsDict !== undefined) {
                localVarQueryParameter['response_as_dict'] = responseAsDict;
            }

            if (showOriginalResponse !== undefined) {
                localVarQueryParameter['show_original_response'] = showOriginalResponse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|4.0 (per 1000000 char)|1 char |**amazon - Neural**|`boto3 (v1.15.18)`|16.0 (per 1000000 char)|1 char |**google**|`v1`|4.0 (per 1000000 char)|1 char |**google - Standard**|`v1`|4.0 (per 1000000 char)|1 char |**google - Neural**|`v1`|16.0 (per 1000000 char)|1 char |**google - Wavenet**|`v1`|16.0 (per 1000000 char)|1 char |**google - Studio**|`v1`|0.16 (per 1000 char)|1 char |**ibm**|`v1`|20.0 (per 1000000 char)|1000 char |**microsoft**|`v1.0`|16.0 (per 1000000 char)|1 char |**lovoai**|`v1`|160.0 (per 1000000 char)|1000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Armenian**|`hy`| |**Azerbaijani**|`az`| |**Basque**|`eu`| |**Bengali**|`bn`| |**Bosnian**|`bs`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Central Khmer**|`km`| |**Chinese**|`zh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Estonian**|`et`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Gujarati**|`gu`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Indonesian**|`id`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kannada**|`kn`| |**Kazakh**|`kk`| |**Korean**|`ko`| |**Lao**|`lo`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Macedonian**|`mk`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Mandarin Chinese**|`cmn`| |**Marathi**|`mr`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian Bokmål**|`nb`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Portuguese (Portugal)**|`pt_PT`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Serbian**|`sr`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Spanish**|`es`| |**Standard Arabic**|`arb`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tamil**|`ta`| |**Telugu**|`te`| |**Thai**|`th`| |**Turkish**|`tr`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Welsh**|`cy`| |**Wu Chinese**|`wuu`| |**Yue Chinese**|`yue`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Afrikaans (South Africa)**|`af-ZA`| |**Albanian (Albania)**|`sq-AL`| |**Amharic (Ethiopia)**|`am-ET`| |**Arabic (Algeria)**|`ar-DZ`| |**Arabic (Bahrain)**|`ar-BH`| |**Arabic (Egypt)**|`ar-EG`| |**Arabic (Iraq)**|`ar-IQ`| |**Arabic (Jordan)**|`ar-JO`| |**Arabic (Kuwait)**|`ar-KW`| |**Arabic (Lebanon)**|`ar-LB`| |**Arabic (Libya)**|`ar-LY`| |**Arabic (Morocco)**|`ar-MA`| |**Arabic (Oman)**|`ar-OM`| |**Arabic (Pseudo-Accents)**|`ar-XA`| |**Arabic (Qatar)**|`ar-QA`| |**Arabic (Saudi Arabia)**|`ar-SA`| |**Arabic (Syria)**|`ar-SY`| |**Arabic (Tunisia)**|`ar-TN`| |**Arabic (United Arab Emirates)**|`ar-AE`| |**Arabic (Yemen)**|`ar-YE`| |**Armenian (Armenia)**|`hy-AM`| |**Azerbaijani (Azerbaijan)**|`az-AZ`| |**Bangla (Bangladesh)**|`bn-BD`| |**Bangla (India)**|`bn-IN`| |**Basque (Spain)**|`eu-ES`| |**Bosnian (Bosnia & Herzegovina)**|`bs-BA`| |**Bulgarian (Bulgaria)**|`bg-BG`| |**Burmese (Myanmar (Burma))**|`my-MM`| |**Cantonese (China)**|`yue-CN`| |**Cantonese (Hong Kong SAR China)**|`yue-HK`| |**Catalan (Spain)**|`ca-ES`| |**Chinese (China)**|`zh-CN`| |**Chinese (Hong Kong SAR China)**|`zh-HK`| |**Chinese (Taiwan)**|`zh-TW`| |**Croatian (Croatia)**|`hr-HR`| |**Czech (Czechia)**|`cs-CZ`| |**Danish (Denmark)**|`da-DK`| |**Dutch (Belgium)**|`nl-BE`| |**Dutch (Netherlands)**|`nl-NL`| |**English (Australia)**|`en-AU`| |**English (Canada)**|`en-CA`| |**English (Hong Kong SAR China)**|`en-HK`| |**English (India)**|`en-IN`| |**English (Ireland)**|`en-IE`| |**English (Kenya)**|`en-KE`| |**English (New Zealand)**|`en-NZ`| |**English (Nigeria)**|`en-NG`| |**English (Philippines)**|`en-PH`| |**English (Singapore)**|`en-SG`| |**English (South Africa)**|`en-ZA`| |**English (Tanzania)**|`en-TZ`| |**English (United Kingdom)**|`en-GB`| |**English (United States)**|`en-US`| |**Estonian (Estonia)**|`et-EE`| |**Filipino (Philippines)**|`fil-PH`| |**Finnish (Finland)**|`fi-FI`| |**French (Belgium)**|`fr-BE`| |**French (Canada)**|`fr-CA`| |**French (France)**|`fr-FR`| |**French (Switzerland)**|`fr-CH`| |**Galician (Spain)**|`gl-ES`| |**Georgian (Georgia)**|`ka-GE`| |**German (Austria)**|`de-AT`| |**German (Germany)**|`de-DE`| |**German (Switzerland)**|`de-CH`| |**Greek (Greece)**|`el-GR`| |**Gujarati (India)**|`gu-IN`| |**Hebrew (Israel)**|`he-IL`| |**Hindi (India)**|`hi-IN`| |**Hungarian (Hungary)**|`hu-HU`| |**Icelandic (Iceland)**|`is-IS`| |**Indonesian (Indonesia)**|`id-ID`| |**Irish (Ireland)**|`ga-IE`| |**Italian (Italy)**|`it-IT`| |**Japanese (Japan)**|`ja-JP`| |**Javanese (Indonesia)**|`jv-ID`| |**Kannada (India)**|`kn-IN`| |**Kazakh (Kazakhstan)**|`kk-KZ`| |**Khmer (Cambodia)**|`km-KH`| |**Korean (South Korea)**|`ko-KR`| |**Lao (Laos)**|`lo-LA`| |**Latvian (Latvia)**|`lv-LV`| |**Lithuanian (Lithuania)**|`lt-LT`| |**Macedonian (North Macedonia)**|`mk-MK`| |**Malay (Malaysia)**|`ms-MY`| |**Malayalam (India)**|`ml-IN`| |**Maltese (Malta)**|`mt-MT`| |**Mandarin Chinese (China)**|`cmn-CN`| |**Mandarin Chinese (Taiwan)**|`cmn-TW`| |**Marathi (India)**|`mr-IN`| |**Mongolian (Mongolia)**|`mn-MN`| |**Nepali (Nepal)**|`ne-NP`| |**Norwegian Bokmål (Norway)**|`nb-NO`| |**Pashto (Afghanistan)**|`ps-AF`| |**Persian (Iran)**|`fa-IR`| |**Polish (Poland)**|`pl-PL`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`| |**Punjabi (India)**|`pa-IN`| |**Romanian (Romania)**|`ro-RO`| |**Russian (Russia)**|`ru-RU`| |**Serbian (Serbia)**|`sr-RS`| |**Sinhala (Sri Lanka)**|`si-LK`| |**Slovak (Slovakia)**|`sk-SK`| |**Slovenian (Slovenia)**|`sl-SI`| |**Somali (Somalia)**|`so-SO`| |**Spanish (Argentina)**|`es-AR`| |**Spanish (Bolivia)**|`es-BO`| |**Spanish (Chile)**|`es-CL`| |**Spanish (Colombia)**|`es-CO`| |**Spanish (Costa Rica)**|`es-CR`| |**Spanish (Cuba)**|`es-CU`| |**Spanish (Dominican Republic)**|`es-DO`| |**Spanish (Ecuador)**|`es-EC`| |**Spanish (El Salvador)**|`es-SV`| |**Spanish (Equatorial Guinea)**|`es-GQ`| |**Spanish (Guatemala)**|`es-GT`| |**Spanish (Honduras)**|`es-HN`| |**Spanish (Laos)**|`es-LA`| |**Spanish (Mexico)**|`es-MX`| |**Spanish (Nicaragua)**|`es-NI`| |**Spanish (Panama)**|`es-PA`| |**Spanish (Paraguay)**|`es-PY`| |**Spanish (Peru)**|`es-PE`| |**Spanish (Puerto Rico)**|`es-PR`| |**Spanish (Spain)**|`es-ES`| |**Spanish (United States)**|`es-US`| |**Spanish (Uruguay)**|`es-UY`| |**Spanish (Venezuela)**|`es-VE`| |**Sundanese (Indonesia)**|`su-ID`| |**Swahili (Kenya)**|`sw-KE`| |**Swahili (Tanzania)**|`sw-TZ`| |**Swedish (Sweden)**|`sv-SE`| |**Tamil (India)**|`ta-IN`| |**Tamil (Malaysia)**|`ta-MY`| |**Tamil (Singapore)**|`ta-SG`| |**Tamil (Sri Lanka)**|`ta-LK`| |**Telugu (India)**|`te-IN`| |**Thai (Thailand)**|`th-TH`| |**Turkish (Turkey)**|`tr-TR`| |**Ukrainian (Ukraine)**|`uk-UA`| |**Urdu (India)**|`ur-IN`| |**Urdu (Pakistan)**|`ur-PK`| |**Uzbek (Uzbekistan)**|`uz-UZ`| |**Vietnamese (Vietnam)**|`vi-VN`| |**Welsh (United Kingdom)**|`cy-GB`| |**Wu Chinese (China)**|`wuu-CN`| |**Zulu (South Africa)**|`zu-ZA`|  </details>
         * @summary Text to Speech
         * @param {AudiotextToSpeechTextToSpeechRequest} audiotextToSpeechTextToSpeechRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        audioTextToSpeechCreate: async (audiotextToSpeechTextToSpeechRequest: AudiotextToSpeechTextToSpeechRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'audiotextToSpeechTextToSpeechRequest' is not null or undefined
            assertParamExists('audioTextToSpeechCreate', 'audiotextToSpeechTextToSpeechRequest', audiotextToSpeechTextToSpeechRequest)
            const localVarPath = `/audio/text_to_speech`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(audiotextToSpeechTextToSpeechRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AudioApi - functional programming interface
 * @export
 */
export const AudioApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AudioApiAxiosParamCreator(configuration)
    return {
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|0.024 (per 60 seconde)|15 seconde |**google**|`v1p1beta1`|0.024 (per 60 seconde)|1 seconde |**ibm**|`v1`|0.02 (per 60 seconde)|1 seconde |**microsoft**|`v1.0`|0.0168 (per 60 seconde)|1 seconde |**revai**|`v1`|0.02 (per 60 seconde)|15 seconde |**symbl**|`v1`|0.027 (per 60 seconde)|60 seconde |**voci**|`v1`|0.0162 (per 60 seconde)|1 seconde |**voxist**|`v1`|0.0042 (per 15 seconde)|1 seconde |**neuralspace**|`v1`|0.024 (per 60 seconde)|60 seconde |**oneai**|`v0`|0.0067 (per 60 seconde)|1 seconde |**assembly**|`v2`|0.011 (per 60 seconde)|1 seconde |**deepgram - base**|`v1`|0.0169 (per 60 seconde)|1 seconde |**deepgram - enhanced**|`v1`|0.0189 (per 60 seconde)|1 seconde |**deepgram**|`v1`|0.0169 (per 60 seconde)|1 seconde |**openai**|`boto3 (v1.15.18)`|0.006 (per 60 seconde)|1 seconde |**speechmatics - enhanced**|`v2`|0.0316 (per 60 seconde)|1 seconde |**speechmatics - standard**|`v2`|0.0208 (per 60 seconde)|1 seconde |**speechmatics**|`v2`|0.0316 (per 60 seconde)|1 seconde |**gladia**|`v1`|0.0102 (per 60 seconde)|1 seconde   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Armenian**|`hy`| |**Assamese**|`as`| |**Azerbaijani**|`az`| |**Bashkir**|`ba`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bengali**|`bn`| |**Bosnian**|`bs`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Central Khmer**|`km`| |**Chinese**|`zh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Esperanto**|`eo`| |**Estonian**|`et`| |**Faroese**|`fo`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Gujarati**|`gu`| |**Haitian**|`ht`| |**Hausa**|`ha`| |**Hawaiian**|`haw`| |**Hebrew**|`he`| |**Hebrew**|`iw`| |**Hindi**|`hi`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Indonesian**|`id`| |**Interlingua (International Auxiliary Language Association)**|`ia`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kannada**|`kn`| |**Kazakh**|`kk`| |**Korean**|`ko`| |**Lao**|`lo`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lingala**|`ln`| |**Lithuanian**|`lt`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Mandarin Chinese**|`cmn`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian**|`no`| |**Norwegian Bokmål**|`nb`| |**Norwegian Nynorsk**|`nn`| |**Occitan (post 1500)**|`oc`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Sanskrit**|`sa`| |**Serbian**|`sr`| |**Shona**|`sn`| |**Sindhi**|`sd`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Spanish**|`es`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tamil**|`ta`| |**Tatar**|`tt`| |**Telugu**|`te`| |**Thai**|`th`| |**Tibetan**|`bo`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Welsh**|`cy`| |**Wolof**|`wo`| |**Wu Chinese**|`wuu`| |**Yiddish**|`yi`| |**Yoruba**|`yo`| |**Yue Chinese**|`yue`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Afrikaans (South Africa)**|`af-ZA`| |**Albanian (Albania)**|`sq-AL`| |**Amharic (Ethiopia)**|`am-ET`| |**Arabic (Algeria)**|`ar-DZ`| |**Arabic (Bahrain)**|`ar-BH`| |**Arabic (Egypt)**|`ar-EG`| |**Arabic (Iraq)**|`ar-IQ`| |**Arabic (Israel)**|`ar-IL`| |**Arabic (Jordan)**|`ar-JO`| |**Arabic (Kuwait)**|`ar-KW`| |**Arabic (Lebanon)**|`ar-LB`| |**Arabic (Libya)**|`ar-LY`| |**Arabic (Mauritania)**|`ar-MR`| |**Arabic (Montserrat)**|`ar-MS`| |**Arabic (Morocco)**|`ar-MA`| |**Arabic (Oman)**|`ar-OM`| |**Arabic (Palestinian Territories)**|`ar-PS`| |**Arabic (Qatar)**|`ar-QA`| |**Arabic (Saudi Arabia)**|`ar-SA`| |**Arabic (Syria)**|`ar-SY`| |**Arabic (Tunisia)**|`ar-TN`| |**Arabic (United Arab Emirates)**|`ar-AE`| |**Arabic (Yemen)**|`ar-YE`| |**Armenian (Armenia)**|`hy-AM`| |**Assamese (India)**|`as-IN`| |**Azerbaijani (Azerbaijan)**|`az-AZ`| |**Bangla (Bangladesh)**|`bn-BD`| |**Bangla (India)**|`bn-IN`| |**Bashkir (Russia)**|`ba-RU`| |**Basque (Spain)**|`eu-ES`| |**Belarusian (Belarus)**|`be-BY`| |**Bosnian (Bosnia & Herzegovina)**|`bs-BA`| |**Breton (France)**|`br-FR`| |**Bulgarian (Bulgaria)**|`bg-BG`| |**Burmese (Myanmar (Burma))**|`my-MM`| |**Cantonese (China)**|`yue-CN`| |**Cantonese (Traditional, Hong Kong SAR China)**|`yue-Hant-HK`| |**Catalan (Spain)**|`ca-ES`| |**Chinese (China)**|`zh-CN`| |**Chinese (Hong Kong SAR China)**|`zh-HK`| |**Chinese (Taiwan)**|`zh-TW`| |**Croatian (Croatia)**|`hr-HR`| |**Czech (Czechia)**|`cs-CZ`| |**Danish (Denmark)**|`da-DK`| |**Dutch (Belgium)**|`nl-BE`| |**Dutch (Netherlands)**|`nl-NL`| |**English (Australia)**|`en-AU`| |**English (Canada)**|`en-CA`| |**English (Ghana)**|`en-GH`| |**English (Hong Kong SAR China)**|`en-HK`| |**English (India)**|`en-IN`| |**English (Ireland)**|`en-IE`| |**English (Kenya)**|`en-KE`| |**English (New Zealand)**|`en-NZ`| |**English (Nigeria)**|`en-NG`| |**English (Pakistan)**|`en-PK`| |**English (Philippines)**|`en-PH`| |**English (Singapore)**|`en-SG`| |**English (South Africa)**|`en-ZA`| |**English (Tanzania)**|`en-TZ`| |**English (United Kingdom)**|`en-GB`| |**English (United Kingdom)**|`en-UK`| |**English (United States)**|`en-US`| |**Estonian (Estonia)**|`et-EE`| |**Faroese (Faroe Islands)**|`fo-FO`| |**Filipino (Philippines)**|`fil-PH`| |**Filipino (Philippines)**|`tl-PH`| |**Finnish (Finland)**|`fi-FI`| |**French (Belgium)**|`fr-BE`| |**French (Canada)**|`fr-CA`| |**French (France)**|`fr-FR`| |**French (Switzerland)**|`fr-CH`| |**Galician (Spain)**|`gl-ES`| |**Georgian (Georgia)**|`ka-GE`| |**German (Austria)**|`de-AT`| |**German (Germany)**|`de-DE`| |**German (Switzerland)**|`de-CH`| |**Greek (Greece)**|`el-GR`| |**Gujarati (India)**|`gu-IN`| |**Haitian Creole (Haiti)**|`ht-HT`| |**Hausa (Nigeria)**|`ha-NG`| |**Hawaiian (United States)**|`haw-US`| |**Hebrew (Israel)**|`he-IL`| |**Hebrew (Israel)**|`iw-IL`| |**Hindi (India)**|`hi-IN`| |**Hindi (Latin)**|`hi-Latn`| |**Hungarian (Hungary)**|`hu-HU`| |**Icelandic (Iceland)**|`is-IS`| |**Indonesian (Indonesia)**|`id-ID`| |**Irish (Ireland)**|`ga-IE`| |**Italian (Italy)**|`it-IT`| |**Italian (Switzerland)**|`it-CH`| |**Japanese (Japan)**|`ja-JP`| |**Javanese (Indonesia)**|`jv-ID`| |**Kannada (India)**|`kn-IN`| |**Kazakh (Kazakhstan)**|`kk-KZ`| |**Khmer (Cambodia)**|`km-KH`| |**Korean (South Korea)**|`ko-KR`| |**Lao (Laos)**|`lo-LA`| |**Latvian (Latvia)**|`lv-LV`| |**Lingala (Congo - Kinshasa)**|`ln-CD`| |**Lithuanian (Lithuania)**|`lt-LT`| |**Luxembourgish (Luxembourg)**|`lb-LU`| |**Macedonian (North Macedonia)**|`mk-MK`| |**Malagasy (Madagascar)**|`mg-MG`| |**Malay (Malaysia)**|`ms-MY`| |**Malayalam (India)**|`ml-IN`| |**Maltese (Malta)**|`mt-MT`| |**Marathi (India)**|`mr-IN`| |**Mongolian (Mongolia)**|`mn-MN`| |**Māori (New Zealand)**|`mi-NZ`| |**Nepali (Nepal)**|`ne-NP`| |**Norwegian (Norway)**|`no-NO`| |**Norwegian Bokmål (Norway)**|`nb-NO`| |**Norwegian Nynorsk (Norway)**|`nn-NO`| |**Occitan (France)**|`oc-FR`| |**Pashto (Afghanistan)**|`ps-AF`| |**Persian (Iran)**|`fa-IR`| |**Polish (Poland)**|`pl-PL`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`| |**Punjabi (India)**|`pa-Guru-IN`| |**Romanian (Romania)**|`ro-RO`| |**Russian (Russia)**|`ru-RU`| |**Sanskrit (India)**|`sa-IN`| |**Serbian (Serbia)**|`sr-RS`| |**Shona (Zimbabwe)**|`sn-ZW`| |**Sindhi (Pakistan)**|`sd-PK`| |**Sinhala (Sri Lanka)**|`si-LK`| |**Slovak (Slovakia)**|`sk-SK`| |**Slovenian (Slovenia)**|`sl-SI`| |**Somali (Somalia)**|`so-SO`| |**Spanish (Argentina)**|`es-AR`| |**Spanish (Bolivia)**|`es-BO`| |**Spanish (Chile)**|`es-CL`| |**Spanish (Colombia)**|`es-CO`| |**Spanish (Costa Rica)**|`es-CR`| |**Spanish (Cuba)**|`es-CU`| |**Spanish (Dominican Republic)**|`es-DO`| |**Spanish (Ecuador)**|`es-EC`| |**Spanish (El Salvador)**|`es-SV`| |**Spanish (Equatorial Guinea)**|`es-GQ`| |**Spanish (Guatemala)**|`es-GT`| |**Spanish (Honduras)**|`es-HN`| |**Spanish (Laos)**|`es-LA`| |**Spanish (Latin America)**|`es-419`| |**Spanish (Mexico)**|`es-MX`| |**Spanish (Nicaragua)**|`es-NI`| |**Spanish (Panama)**|`es-PA`| |**Spanish (Paraguay)**|`es-PY`| |**Spanish (Peru)**|`es-PE`| |**Spanish (Puerto Rico)**|`es-PR`| |**Spanish (Spain)**|`es-ES`| |**Spanish (United States)**|`es-US`| |**Spanish (Uruguay)**|`es-UY`| |**Spanish (Venezuela)**|`es-VE`| |**Sundanese (Indonesia)**|`su-ID`| |**Swahili (Kenya)**|`sw-KE`| |**Swahili (Tanzania)**|`sw-TZ`| |**Swedish (Sweden)**|`sv-SE`| |**Tajik (Tajikistan)**|`tg-TJ`| |**Tamil (India)**|`ta-IN`| |**Tamil (Malaysia)**|`ta-MY`| |**Tamil (Singapore)**|`ta-SG`| |**Tamil (Sri Lanka)**|`ta-LK`| |**Tatar (Russia)**|`tt-RU`| |**Telugu (India)**|`te-IN`| |**Thai (Thailand)**|`th-TH`| |**Tibetan (China)**|`bo-CN`| |**Turkish (Turkey)**|`tr-TR`| |**Turkmen (Turkmenistan)**|`tk-TM`| |**Ukrainian (Ukraine)**|`uk-UA`| |**Urdu (India)**|`ur-IN`| |**Urdu (Pakistan)**|`ur-PK`| |**Uzbek (Uzbekistan)**|`uz-UZ`| |**Vietnamese (Vietnam)**|`vi-VN`| |**Welsh (United Kingdom)**|`cy-GB`| |**Wolof (Senegal)**|`wo-SN`| |**Wu Chinese (China)**|`wuu-CN`| |**Yoruba (Nigeria)**|`yo-NG`| |**Zulu (South Africa)**|`zu-ZA`|  </details>
         * @summary Speech to Text Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {string} [language] Language code expected (ex: en, fr)
         * @param {number} [speakers] Number of speakers in the file audio
         * @param {boolean} [profanityFilter] Boolean value to specify weather or not the service will filter profanity and replace inappropriate words with a series of asterisks
         * @param {string} [customVocabulary] List of words or composed words to be detected by the speech to text engine. (Ex: Word, Mike, Draw, Los Angeles,...)
         * @param {boolean} [convertToWav] Boolean value to specify weather to convert the audio/video file to wav format to be accepted by a majority of the providers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async audioSpeechToTextAsyncCreate(providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, language?: string, speakers?: number, profanityFilter?: boolean, customVocabulary?: string, convertToWav?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LaunchAsyncJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.audioSpeechToTextAsyncCreate(providers, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, language, speakers, profanityFilter, customVocabulary, convertToWav, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Speech to Text List Jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async audioSpeechToTextAsyncRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAsyncJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.audioSpeechToTextAsyncRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Speech to Text Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async audioSpeechToTextAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AsyncaudiospeechToTextAsyncResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.audioSpeechToTextAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <strong style=\'color: #ac3737\'>No Provider Available</strong>    <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Armenian**|`hy`| |**Azerbaijani**|`az`| |**Basque**|`eu`| |**Bengali**|`bn`| |**Bosnian**|`bs`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Central Khmer**|`km`| |**Chinese**|`zh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Estonian**|`et`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Indonesian**|`id`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kazakh**|`kk`| |**Korean**|`ko`| |**Lao**|`lo`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Macedonian**|`mk`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Marathi**|`mr`| |**Mongolian**|`mn`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian Bokmål**|`nb`| |**Persian**|`fa`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Serbian**|`sr`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Spanish**|`es`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tamil**|`ta`| |**Telugu**|`te`| |**Thai**|`th`| |**Turkish**|`tr`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Welsh**|`cy`| |**Wu Chinese**|`wuu`| |**Xhosa**|`xh`| |**Yue Chinese**|`yue`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Afrikaans (South Africa)**|`af-ZA`| |**Albanian (Albania)**|`sq-AL`| |**Amharic (Ethiopia)**|`am-ET`| |**Arabic (Algeria)**|`ar-DZ`| |**Arabic (Bahrain)**|`ar-BH`| |**Arabic (Egypt)**|`ar-EG`| |**Arabic (Iraq)**|`ar-IQ`| |**Arabic (Jordan)**|`ar-JO`| |**Arabic (Kuwait)**|`ar-KW`| |**Arabic (Lebanon)**|`ar-LB`| |**Arabic (Libya)**|`ar-LY`| |**Arabic (Morocco)**|`ar-MA`| |**Arabic (Oman)**|`ar-OM`| |**Arabic (Qatar)**|`ar-QA`| |**Arabic (Saudi Arabia)**|`ar-SA`| |**Arabic (Tunisia)**|`ar-TN`| |**Arabic (United Arab Emirates)**|`ar-AE`| |**Armenian (Armenia)**|`hy-AM`| |**Azerbaijani (Azerbaijan)**|`az-AZ`| |**Bangla (India)**|`bn-IN`| |**Basque (Spain)**|`eu-ES`| |**Bosnian (Bosnia & Herzegovina)**|`bs-BA`| |**Burmese (Myanmar (Burma))**|`my-MM`| |**Cantonese (China)**|`yue-CN`| |**Catalan (Spain)**|`ca-ES`| |**Chinese (China)**|`zh-CN`| |**Chinese (China)**|`zh-CN-henan`| |**Chinese (China)**|`zh-CN-shandong`| |**Chinese (China)**|`zh-CN-sichuan`| |**Chinese (Hong Kong SAR China)**|`zh-HK`| |**Chinese (Taiwan)**|`zh-TW`| |**Croatian (Croatia)**|`hr-HR`| |**Czech (Czechia)**|`cs-CZ`| |**Danish (Denmark)**|`da-DK`| |**Dutch (Belgium)**|`nl-BE`| |**Dutch (Netherlands)**|`nl-NL`| |**English (Australia)**|`en-AU`| |**English (Canada)**|`en-CA`| |**English (Curaçao)**|`en-AN`| |**English (Hong Kong SAR China)**|`en-HK`| |**English (India)**|`en-IN`| |**English (Ireland)**|`en-IE`| |**English (Kenya)**|`en-KE`| |**English (New Zealand)**|`en-NZ`| |**English (Nigeria)**|`en-NG`| |**English (Philippines)**|`en-PH`| |**English (Singapore)**|`en-SG`| |**English (South Africa)**|`en-ZA`| |**English (Tanzania)**|`en-TZ`| |**English (United Kingdom)**|`en-GB`| |**English (United States)**|`en-US`| |**Estonian (Estonia)**|`et-EE`| |**Filipino (Philippines)**|`fil-PH`| |**Finnish (Finland)**|`fi-FI`| |**French (Belgium)**|`fr-BE`| |**French (Canada)**|`fr-CA`| |**French (France)**|`fr-FR`| |**French (Switzerland)**|`fr-CH`| |**Galician (Spain)**|`gl-ES`| |**Georgian (Georgia)**|`ka-GE`| |**German (Austria)**|`de-AT`| |**German (Germany)**|`de-DE`| |**German (Switzerland)**|`de-CH`| |**Hebrew (Israel)**|`he-IL`| |**Hindi (India)**|`hi-IN`| |**Hungarian (Hungary)**|`hu-HU`| |**Icelandic (Iceland)**|`is-IS`| |**Indonesian (Indonesia)**|`id-ID`| |**Irish (Ireland)**|`ga-IE`| |**Italian (Italy)**|`it-IT`| |**Japanese (Japan)**|`ja-JP`| |**Javanese (Indonesia)**|`jv-ID`| |**Kazakh (Kazakhstan)**|`kk-KZ`| |**Khmer (Cambodia)**|`km-KH`| |**Korean (South Korea)**|`ko-KR`| |**Lao (Laos)**|`lo-LA`| |**Latvian (Latvia)**|`lv-LV`| |**Lithuanian (Lithuania)**|`lt-LT`| |**Macedonian (North Macedonia)**|`mk-MK`| |**Malay (Malaysia)**|`ms-MY`| |**Malayalam (India)**|`ml-IN`| |**Maltese (Malta)**|`mt-MT`| |**Marathi (India)**|`mr-IN`| |**Mongolian (Mongolia)**|`mn-MN`| |**Nepali (Nepal)**|`ne-NP`| |**Norwegian Bokmål (Norway)**|`nb-NO`| |**Pashto (Afghanistan)**|`ps-AF`| |**Persian (Iran)**|`fa-IR`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`| |**Romanian (Romania)**|`ro-RO`| |**Russian (Russia)**|`ru-RU`| |**Serbian (Serbia)**|`sr-RS`| |**Sinhala (Sri Lanka)**|`si-LK`| |**Slovak (Slovakia)**|`sk-SK`| |**Slovenian (Slovenia)**|`sl-SI`| |**Somali (Somalia)**|`so-SO`| |**Spanish (Argentina)**|`es-AR`| |**Spanish (Bolivia)**|`es-BO`| |**Spanish (Chile)**|`es-CL`| |**Spanish (Colombia)**|`es-CO`| |**Spanish (Costa Rica)**|`es-CR`| |**Spanish (Cuba)**|`es-CU`| |**Spanish (Ecuador)**|`es-EC`| |**Spanish (El Salvador)**|`es-SV`| |**Spanish (Equatorial Guinea)**|`es-GQ`| |**Spanish (Guatemala)**|`es-GT`| |**Spanish (Mexico)**|`es-MX`| |**Spanish (Nicaragua)**|`es-NI`| |**Spanish (Panama)**|`es-PA`| |**Spanish (Paraguay)**|`es-PY`| |**Spanish (Puerto Rico)**|`es-PR`| |**Spanish (Spain)**|`es-ES`| |**Spanish (United States)**|`es-US`| |**Spanish (Uruguay)**|`es-UY`| |**Spanish (Venezuela)**|`es-VE`| |**Sundanese (Indonesia)**|`su-ID`| |**Swahili (Kenya)**|`sw-KE`| |**Swahili (Tanzania)**|`sw-TZ`| |**Swedish (Sweden)**|`sv-SE`| |**Tamil (India)**|`ta-IN`| |**Tamil (Malaysia)**|`ta-MY`| |**Tamil (Singapore)**|`ta-SG`| |**Telugu (India)**|`te-IN`| |**Thai (Thailand)**|`th-TH`| |**Turkish (Turkey)**|`tr-TR`| |**Ukrainian (Ukraine)**|`uk-UA`| |**Urdu (India)**|`ur-IN`| |**Urdu (Pakistan)**|`ur-PK`| |**Uzbek (United Kingdom)**|`uz-UK`| |**Vietnamese (Vietnam)**|`vi-VN`| |**Welsh (United Kingdom)**|`cy-GB`| |**Wu Chinese (China)**|`wuu-CN`| |**Xhosa (South Africa)**|`xh-ZA`| |**Zulu (South Africa)**|`zu-ZA`|  </details>
         * @summary Text to Speech launch job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} text Text to analyze
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {string} [language] Language code expected (ex: en, fr)
         * @param {TextToSpeechAsyncRequestOption} [option] 
         * @param {number} [rate] Increase or decrease the speaking rate by expressing a positif or negatif number ranging between             100 and -100 (a relative value as percentage varying from -100% to 100%)
         * @param {number} [pitch] Increase or decrease the speaking pitch by expressing a positif or negatif number ranging between             100 and -100 (a relative value as percentage varying from -100% to 100%)
         * @param {number} [volume] Increase or decrease the audio volume by expressing a positif or negatif number ranging between             100 and -100 (a relative value as percentage varying from -100% to 100%)
         * @param {string} [audioFormat] Optional parameter to specify the audio format in which the audio will be generated. By default,             audios are encoded in MP3, except for lovoai which use the wav container.
         * @param {number} [samplingRate] Optional. The synthesis sample rate (in hertz) for this audio. When this is specified, the audio will be converted             either to the right passed value, or to a the nearest value acceptable by the provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async audioTextToSpeechAsyncCreate(providers: string, text: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, language?: string, option?: TextToSpeechAsyncRequestOption, rate?: number, pitch?: number, volume?: number, audioFormat?: string, samplingRate?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LaunchAsyncJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.audioTextToSpeechAsyncCreate(providers, text, fallbackProviders, showOriginalResponse, webhookReceiver, language, option, rate, pitch, volume, audioFormat, samplingRate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Text To Speech list jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async audioTextToSpeechAsyncRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAsyncJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.audioTextToSpeechAsyncRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Text To Speech Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async audioTextToSpeechAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AsyncaudiotextToSpeechAsyncResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.audioTextToSpeechAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|4.0 (per 1000000 char)|1 char |**amazon - Neural**|`boto3 (v1.15.18)`|16.0 (per 1000000 char)|1 char |**google**|`v1`|4.0 (per 1000000 char)|1 char |**google - Standard**|`v1`|4.0 (per 1000000 char)|1 char |**google - Neural**|`v1`|16.0 (per 1000000 char)|1 char |**google - Wavenet**|`v1`|16.0 (per 1000000 char)|1 char |**google - Studio**|`v1`|0.16 (per 1000 char)|1 char |**ibm**|`v1`|20.0 (per 1000000 char)|1000 char |**microsoft**|`v1.0`|16.0 (per 1000000 char)|1 char |**lovoai**|`v1`|160.0 (per 1000000 char)|1000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Armenian**|`hy`| |**Azerbaijani**|`az`| |**Basque**|`eu`| |**Bengali**|`bn`| |**Bosnian**|`bs`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Central Khmer**|`km`| |**Chinese**|`zh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Estonian**|`et`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Gujarati**|`gu`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Indonesian**|`id`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kannada**|`kn`| |**Kazakh**|`kk`| |**Korean**|`ko`| |**Lao**|`lo`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Macedonian**|`mk`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Mandarin Chinese**|`cmn`| |**Marathi**|`mr`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian Bokmål**|`nb`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Portuguese (Portugal)**|`pt_PT`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Serbian**|`sr`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Spanish**|`es`| |**Standard Arabic**|`arb`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tamil**|`ta`| |**Telugu**|`te`| |**Thai**|`th`| |**Turkish**|`tr`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Welsh**|`cy`| |**Wu Chinese**|`wuu`| |**Yue Chinese**|`yue`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Afrikaans (South Africa)**|`af-ZA`| |**Albanian (Albania)**|`sq-AL`| |**Amharic (Ethiopia)**|`am-ET`| |**Arabic (Algeria)**|`ar-DZ`| |**Arabic (Bahrain)**|`ar-BH`| |**Arabic (Egypt)**|`ar-EG`| |**Arabic (Iraq)**|`ar-IQ`| |**Arabic (Jordan)**|`ar-JO`| |**Arabic (Kuwait)**|`ar-KW`| |**Arabic (Lebanon)**|`ar-LB`| |**Arabic (Libya)**|`ar-LY`| |**Arabic (Morocco)**|`ar-MA`| |**Arabic (Oman)**|`ar-OM`| |**Arabic (Pseudo-Accents)**|`ar-XA`| |**Arabic (Qatar)**|`ar-QA`| |**Arabic (Saudi Arabia)**|`ar-SA`| |**Arabic (Syria)**|`ar-SY`| |**Arabic (Tunisia)**|`ar-TN`| |**Arabic (United Arab Emirates)**|`ar-AE`| |**Arabic (Yemen)**|`ar-YE`| |**Armenian (Armenia)**|`hy-AM`| |**Azerbaijani (Azerbaijan)**|`az-AZ`| |**Bangla (Bangladesh)**|`bn-BD`| |**Bangla (India)**|`bn-IN`| |**Basque (Spain)**|`eu-ES`| |**Bosnian (Bosnia & Herzegovina)**|`bs-BA`| |**Bulgarian (Bulgaria)**|`bg-BG`| |**Burmese (Myanmar (Burma))**|`my-MM`| |**Cantonese (China)**|`yue-CN`| |**Cantonese (Hong Kong SAR China)**|`yue-HK`| |**Catalan (Spain)**|`ca-ES`| |**Chinese (China)**|`zh-CN`| |**Chinese (Hong Kong SAR China)**|`zh-HK`| |**Chinese (Taiwan)**|`zh-TW`| |**Croatian (Croatia)**|`hr-HR`| |**Czech (Czechia)**|`cs-CZ`| |**Danish (Denmark)**|`da-DK`| |**Dutch (Belgium)**|`nl-BE`| |**Dutch (Netherlands)**|`nl-NL`| |**English (Australia)**|`en-AU`| |**English (Canada)**|`en-CA`| |**English (Hong Kong SAR China)**|`en-HK`| |**English (India)**|`en-IN`| |**English (Ireland)**|`en-IE`| |**English (Kenya)**|`en-KE`| |**English (New Zealand)**|`en-NZ`| |**English (Nigeria)**|`en-NG`| |**English (Philippines)**|`en-PH`| |**English (Singapore)**|`en-SG`| |**English (South Africa)**|`en-ZA`| |**English (Tanzania)**|`en-TZ`| |**English (United Kingdom)**|`en-GB`| |**English (United States)**|`en-US`| |**Estonian (Estonia)**|`et-EE`| |**Filipino (Philippines)**|`fil-PH`| |**Finnish (Finland)**|`fi-FI`| |**French (Belgium)**|`fr-BE`| |**French (Canada)**|`fr-CA`| |**French (France)**|`fr-FR`| |**French (Switzerland)**|`fr-CH`| |**Galician (Spain)**|`gl-ES`| |**Georgian (Georgia)**|`ka-GE`| |**German (Austria)**|`de-AT`| |**German (Germany)**|`de-DE`| |**German (Switzerland)**|`de-CH`| |**Greek (Greece)**|`el-GR`| |**Gujarati (India)**|`gu-IN`| |**Hebrew (Israel)**|`he-IL`| |**Hindi (India)**|`hi-IN`| |**Hungarian (Hungary)**|`hu-HU`| |**Icelandic (Iceland)**|`is-IS`| |**Indonesian (Indonesia)**|`id-ID`| |**Irish (Ireland)**|`ga-IE`| |**Italian (Italy)**|`it-IT`| |**Japanese (Japan)**|`ja-JP`| |**Javanese (Indonesia)**|`jv-ID`| |**Kannada (India)**|`kn-IN`| |**Kazakh (Kazakhstan)**|`kk-KZ`| |**Khmer (Cambodia)**|`km-KH`| |**Korean (South Korea)**|`ko-KR`| |**Lao (Laos)**|`lo-LA`| |**Latvian (Latvia)**|`lv-LV`| |**Lithuanian (Lithuania)**|`lt-LT`| |**Macedonian (North Macedonia)**|`mk-MK`| |**Malay (Malaysia)**|`ms-MY`| |**Malayalam (India)**|`ml-IN`| |**Maltese (Malta)**|`mt-MT`| |**Mandarin Chinese (China)**|`cmn-CN`| |**Mandarin Chinese (Taiwan)**|`cmn-TW`| |**Marathi (India)**|`mr-IN`| |**Mongolian (Mongolia)**|`mn-MN`| |**Nepali (Nepal)**|`ne-NP`| |**Norwegian Bokmål (Norway)**|`nb-NO`| |**Pashto (Afghanistan)**|`ps-AF`| |**Persian (Iran)**|`fa-IR`| |**Polish (Poland)**|`pl-PL`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`| |**Punjabi (India)**|`pa-IN`| |**Romanian (Romania)**|`ro-RO`| |**Russian (Russia)**|`ru-RU`| |**Serbian (Serbia)**|`sr-RS`| |**Sinhala (Sri Lanka)**|`si-LK`| |**Slovak (Slovakia)**|`sk-SK`| |**Slovenian (Slovenia)**|`sl-SI`| |**Somali (Somalia)**|`so-SO`| |**Spanish (Argentina)**|`es-AR`| |**Spanish (Bolivia)**|`es-BO`| |**Spanish (Chile)**|`es-CL`| |**Spanish (Colombia)**|`es-CO`| |**Spanish (Costa Rica)**|`es-CR`| |**Spanish (Cuba)**|`es-CU`| |**Spanish (Dominican Republic)**|`es-DO`| |**Spanish (Ecuador)**|`es-EC`| |**Spanish (El Salvador)**|`es-SV`| |**Spanish (Equatorial Guinea)**|`es-GQ`| |**Spanish (Guatemala)**|`es-GT`| |**Spanish (Honduras)**|`es-HN`| |**Spanish (Laos)**|`es-LA`| |**Spanish (Mexico)**|`es-MX`| |**Spanish (Nicaragua)**|`es-NI`| |**Spanish (Panama)**|`es-PA`| |**Spanish (Paraguay)**|`es-PY`| |**Spanish (Peru)**|`es-PE`| |**Spanish (Puerto Rico)**|`es-PR`| |**Spanish (Spain)**|`es-ES`| |**Spanish (United States)**|`es-US`| |**Spanish (Uruguay)**|`es-UY`| |**Spanish (Venezuela)**|`es-VE`| |**Sundanese (Indonesia)**|`su-ID`| |**Swahili (Kenya)**|`sw-KE`| |**Swahili (Tanzania)**|`sw-TZ`| |**Swedish (Sweden)**|`sv-SE`| |**Tamil (India)**|`ta-IN`| |**Tamil (Malaysia)**|`ta-MY`| |**Tamil (Singapore)**|`ta-SG`| |**Tamil (Sri Lanka)**|`ta-LK`| |**Telugu (India)**|`te-IN`| |**Thai (Thailand)**|`th-TH`| |**Turkish (Turkey)**|`tr-TR`| |**Ukrainian (Ukraine)**|`uk-UA`| |**Urdu (India)**|`ur-IN`| |**Urdu (Pakistan)**|`ur-PK`| |**Uzbek (Uzbekistan)**|`uz-UZ`| |**Vietnamese (Vietnam)**|`vi-VN`| |**Welsh (United Kingdom)**|`cy-GB`| |**Wu Chinese (China)**|`wuu-CN`| |**Zulu (South Africa)**|`zu-ZA`|  </details>
         * @summary Text to Speech
         * @param {AudiotextToSpeechTextToSpeechRequest} audiotextToSpeechTextToSpeechRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async audioTextToSpeechCreate(audiotextToSpeechTextToSpeechRequest: AudiotextToSpeechTextToSpeechRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AudiotextToSpeechResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.audioTextToSpeechCreate(audiotextToSpeechTextToSpeechRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AudioApi - factory interface
 * @export
 */
export const AudioApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AudioApiFp(configuration)
    return {
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|0.024 (per 60 seconde)|15 seconde |**google**|`v1p1beta1`|0.024 (per 60 seconde)|1 seconde |**ibm**|`v1`|0.02 (per 60 seconde)|1 seconde |**microsoft**|`v1.0`|0.0168 (per 60 seconde)|1 seconde |**revai**|`v1`|0.02 (per 60 seconde)|15 seconde |**symbl**|`v1`|0.027 (per 60 seconde)|60 seconde |**voci**|`v1`|0.0162 (per 60 seconde)|1 seconde |**voxist**|`v1`|0.0042 (per 15 seconde)|1 seconde |**neuralspace**|`v1`|0.024 (per 60 seconde)|60 seconde |**oneai**|`v0`|0.0067 (per 60 seconde)|1 seconde |**assembly**|`v2`|0.011 (per 60 seconde)|1 seconde |**deepgram - base**|`v1`|0.0169 (per 60 seconde)|1 seconde |**deepgram - enhanced**|`v1`|0.0189 (per 60 seconde)|1 seconde |**deepgram**|`v1`|0.0169 (per 60 seconde)|1 seconde |**openai**|`boto3 (v1.15.18)`|0.006 (per 60 seconde)|1 seconde |**speechmatics - enhanced**|`v2`|0.0316 (per 60 seconde)|1 seconde |**speechmatics - standard**|`v2`|0.0208 (per 60 seconde)|1 seconde |**speechmatics**|`v2`|0.0316 (per 60 seconde)|1 seconde |**gladia**|`v1`|0.0102 (per 60 seconde)|1 seconde   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Armenian**|`hy`| |**Assamese**|`as`| |**Azerbaijani**|`az`| |**Bashkir**|`ba`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bengali**|`bn`| |**Bosnian**|`bs`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Central Khmer**|`km`| |**Chinese**|`zh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Esperanto**|`eo`| |**Estonian**|`et`| |**Faroese**|`fo`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Gujarati**|`gu`| |**Haitian**|`ht`| |**Hausa**|`ha`| |**Hawaiian**|`haw`| |**Hebrew**|`he`| |**Hebrew**|`iw`| |**Hindi**|`hi`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Indonesian**|`id`| |**Interlingua (International Auxiliary Language Association)**|`ia`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kannada**|`kn`| |**Kazakh**|`kk`| |**Korean**|`ko`| |**Lao**|`lo`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lingala**|`ln`| |**Lithuanian**|`lt`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Mandarin Chinese**|`cmn`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian**|`no`| |**Norwegian Bokmål**|`nb`| |**Norwegian Nynorsk**|`nn`| |**Occitan (post 1500)**|`oc`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Sanskrit**|`sa`| |**Serbian**|`sr`| |**Shona**|`sn`| |**Sindhi**|`sd`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Spanish**|`es`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tamil**|`ta`| |**Tatar**|`tt`| |**Telugu**|`te`| |**Thai**|`th`| |**Tibetan**|`bo`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Welsh**|`cy`| |**Wolof**|`wo`| |**Wu Chinese**|`wuu`| |**Yiddish**|`yi`| |**Yoruba**|`yo`| |**Yue Chinese**|`yue`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Afrikaans (South Africa)**|`af-ZA`| |**Albanian (Albania)**|`sq-AL`| |**Amharic (Ethiopia)**|`am-ET`| |**Arabic (Algeria)**|`ar-DZ`| |**Arabic (Bahrain)**|`ar-BH`| |**Arabic (Egypt)**|`ar-EG`| |**Arabic (Iraq)**|`ar-IQ`| |**Arabic (Israel)**|`ar-IL`| |**Arabic (Jordan)**|`ar-JO`| |**Arabic (Kuwait)**|`ar-KW`| |**Arabic (Lebanon)**|`ar-LB`| |**Arabic (Libya)**|`ar-LY`| |**Arabic (Mauritania)**|`ar-MR`| |**Arabic (Montserrat)**|`ar-MS`| |**Arabic (Morocco)**|`ar-MA`| |**Arabic (Oman)**|`ar-OM`| |**Arabic (Palestinian Territories)**|`ar-PS`| |**Arabic (Qatar)**|`ar-QA`| |**Arabic (Saudi Arabia)**|`ar-SA`| |**Arabic (Syria)**|`ar-SY`| |**Arabic (Tunisia)**|`ar-TN`| |**Arabic (United Arab Emirates)**|`ar-AE`| |**Arabic (Yemen)**|`ar-YE`| |**Armenian (Armenia)**|`hy-AM`| |**Assamese (India)**|`as-IN`| |**Azerbaijani (Azerbaijan)**|`az-AZ`| |**Bangla (Bangladesh)**|`bn-BD`| |**Bangla (India)**|`bn-IN`| |**Bashkir (Russia)**|`ba-RU`| |**Basque (Spain)**|`eu-ES`| |**Belarusian (Belarus)**|`be-BY`| |**Bosnian (Bosnia & Herzegovina)**|`bs-BA`| |**Breton (France)**|`br-FR`| |**Bulgarian (Bulgaria)**|`bg-BG`| |**Burmese (Myanmar (Burma))**|`my-MM`| |**Cantonese (China)**|`yue-CN`| |**Cantonese (Traditional, Hong Kong SAR China)**|`yue-Hant-HK`| |**Catalan (Spain)**|`ca-ES`| |**Chinese (China)**|`zh-CN`| |**Chinese (Hong Kong SAR China)**|`zh-HK`| |**Chinese (Taiwan)**|`zh-TW`| |**Croatian (Croatia)**|`hr-HR`| |**Czech (Czechia)**|`cs-CZ`| |**Danish (Denmark)**|`da-DK`| |**Dutch (Belgium)**|`nl-BE`| |**Dutch (Netherlands)**|`nl-NL`| |**English (Australia)**|`en-AU`| |**English (Canada)**|`en-CA`| |**English (Ghana)**|`en-GH`| |**English (Hong Kong SAR China)**|`en-HK`| |**English (India)**|`en-IN`| |**English (Ireland)**|`en-IE`| |**English (Kenya)**|`en-KE`| |**English (New Zealand)**|`en-NZ`| |**English (Nigeria)**|`en-NG`| |**English (Pakistan)**|`en-PK`| |**English (Philippines)**|`en-PH`| |**English (Singapore)**|`en-SG`| |**English (South Africa)**|`en-ZA`| |**English (Tanzania)**|`en-TZ`| |**English (United Kingdom)**|`en-GB`| |**English (United Kingdom)**|`en-UK`| |**English (United States)**|`en-US`| |**Estonian (Estonia)**|`et-EE`| |**Faroese (Faroe Islands)**|`fo-FO`| |**Filipino (Philippines)**|`fil-PH`| |**Filipino (Philippines)**|`tl-PH`| |**Finnish (Finland)**|`fi-FI`| |**French (Belgium)**|`fr-BE`| |**French (Canada)**|`fr-CA`| |**French (France)**|`fr-FR`| |**French (Switzerland)**|`fr-CH`| |**Galician (Spain)**|`gl-ES`| |**Georgian (Georgia)**|`ka-GE`| |**German (Austria)**|`de-AT`| |**German (Germany)**|`de-DE`| |**German (Switzerland)**|`de-CH`| |**Greek (Greece)**|`el-GR`| |**Gujarati (India)**|`gu-IN`| |**Haitian Creole (Haiti)**|`ht-HT`| |**Hausa (Nigeria)**|`ha-NG`| |**Hawaiian (United States)**|`haw-US`| |**Hebrew (Israel)**|`he-IL`| |**Hebrew (Israel)**|`iw-IL`| |**Hindi (India)**|`hi-IN`| |**Hindi (Latin)**|`hi-Latn`| |**Hungarian (Hungary)**|`hu-HU`| |**Icelandic (Iceland)**|`is-IS`| |**Indonesian (Indonesia)**|`id-ID`| |**Irish (Ireland)**|`ga-IE`| |**Italian (Italy)**|`it-IT`| |**Italian (Switzerland)**|`it-CH`| |**Japanese (Japan)**|`ja-JP`| |**Javanese (Indonesia)**|`jv-ID`| |**Kannada (India)**|`kn-IN`| |**Kazakh (Kazakhstan)**|`kk-KZ`| |**Khmer (Cambodia)**|`km-KH`| |**Korean (South Korea)**|`ko-KR`| |**Lao (Laos)**|`lo-LA`| |**Latvian (Latvia)**|`lv-LV`| |**Lingala (Congo - Kinshasa)**|`ln-CD`| |**Lithuanian (Lithuania)**|`lt-LT`| |**Luxembourgish (Luxembourg)**|`lb-LU`| |**Macedonian (North Macedonia)**|`mk-MK`| |**Malagasy (Madagascar)**|`mg-MG`| |**Malay (Malaysia)**|`ms-MY`| |**Malayalam (India)**|`ml-IN`| |**Maltese (Malta)**|`mt-MT`| |**Marathi (India)**|`mr-IN`| |**Mongolian (Mongolia)**|`mn-MN`| |**Māori (New Zealand)**|`mi-NZ`| |**Nepali (Nepal)**|`ne-NP`| |**Norwegian (Norway)**|`no-NO`| |**Norwegian Bokmål (Norway)**|`nb-NO`| |**Norwegian Nynorsk (Norway)**|`nn-NO`| |**Occitan (France)**|`oc-FR`| |**Pashto (Afghanistan)**|`ps-AF`| |**Persian (Iran)**|`fa-IR`| |**Polish (Poland)**|`pl-PL`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`| |**Punjabi (India)**|`pa-Guru-IN`| |**Romanian (Romania)**|`ro-RO`| |**Russian (Russia)**|`ru-RU`| |**Sanskrit (India)**|`sa-IN`| |**Serbian (Serbia)**|`sr-RS`| |**Shona (Zimbabwe)**|`sn-ZW`| |**Sindhi (Pakistan)**|`sd-PK`| |**Sinhala (Sri Lanka)**|`si-LK`| |**Slovak (Slovakia)**|`sk-SK`| |**Slovenian (Slovenia)**|`sl-SI`| |**Somali (Somalia)**|`so-SO`| |**Spanish (Argentina)**|`es-AR`| |**Spanish (Bolivia)**|`es-BO`| |**Spanish (Chile)**|`es-CL`| |**Spanish (Colombia)**|`es-CO`| |**Spanish (Costa Rica)**|`es-CR`| |**Spanish (Cuba)**|`es-CU`| |**Spanish (Dominican Republic)**|`es-DO`| |**Spanish (Ecuador)**|`es-EC`| |**Spanish (El Salvador)**|`es-SV`| |**Spanish (Equatorial Guinea)**|`es-GQ`| |**Spanish (Guatemala)**|`es-GT`| |**Spanish (Honduras)**|`es-HN`| |**Spanish (Laos)**|`es-LA`| |**Spanish (Latin America)**|`es-419`| |**Spanish (Mexico)**|`es-MX`| |**Spanish (Nicaragua)**|`es-NI`| |**Spanish (Panama)**|`es-PA`| |**Spanish (Paraguay)**|`es-PY`| |**Spanish (Peru)**|`es-PE`| |**Spanish (Puerto Rico)**|`es-PR`| |**Spanish (Spain)**|`es-ES`| |**Spanish (United States)**|`es-US`| |**Spanish (Uruguay)**|`es-UY`| |**Spanish (Venezuela)**|`es-VE`| |**Sundanese (Indonesia)**|`su-ID`| |**Swahili (Kenya)**|`sw-KE`| |**Swahili (Tanzania)**|`sw-TZ`| |**Swedish (Sweden)**|`sv-SE`| |**Tajik (Tajikistan)**|`tg-TJ`| |**Tamil (India)**|`ta-IN`| |**Tamil (Malaysia)**|`ta-MY`| |**Tamil (Singapore)**|`ta-SG`| |**Tamil (Sri Lanka)**|`ta-LK`| |**Tatar (Russia)**|`tt-RU`| |**Telugu (India)**|`te-IN`| |**Thai (Thailand)**|`th-TH`| |**Tibetan (China)**|`bo-CN`| |**Turkish (Turkey)**|`tr-TR`| |**Turkmen (Turkmenistan)**|`tk-TM`| |**Ukrainian (Ukraine)**|`uk-UA`| |**Urdu (India)**|`ur-IN`| |**Urdu (Pakistan)**|`ur-PK`| |**Uzbek (Uzbekistan)**|`uz-UZ`| |**Vietnamese (Vietnam)**|`vi-VN`| |**Welsh (United Kingdom)**|`cy-GB`| |**Wolof (Senegal)**|`wo-SN`| |**Wu Chinese (China)**|`wuu-CN`| |**Yoruba (Nigeria)**|`yo-NG`| |**Zulu (South Africa)**|`zu-ZA`|  </details>
         * @summary Speech to Text Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {string} [language] Language code expected (ex: en, fr)
         * @param {number} [speakers] Number of speakers in the file audio
         * @param {boolean} [profanityFilter] Boolean value to specify weather or not the service will filter profanity and replace inappropriate words with a series of asterisks
         * @param {string} [customVocabulary] List of words or composed words to be detected by the speech to text engine. (Ex: Word, Mike, Draw, Los Angeles,...)
         * @param {boolean} [convertToWav] Boolean value to specify weather to convert the audio/video file to wav format to be accepted by a majority of the providers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        audioSpeechToTextAsyncCreate(providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, language?: string, speakers?: number, profanityFilter?: boolean, customVocabulary?: string, convertToWav?: boolean, options?: any): AxiosPromise<LaunchAsyncJobResponse> {
            return localVarFp.audioSpeechToTextAsyncCreate(providers, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, language, speakers, profanityFilter, customVocabulary, convertToWav, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Speech to Text List Jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        audioSpeechToTextAsyncRetrieve(options?: any): AxiosPromise<ListAsyncJobResponse> {
            return localVarFp.audioSpeechToTextAsyncRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Speech to Text Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        audioSpeechToTextAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: any): AxiosPromise<AsyncaudiospeechToTextAsyncResponseModel> {
            return localVarFp.audioSpeechToTextAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options).then((request) => request(axios, basePath));
        },
        /**
         * <strong style=\'color: #ac3737\'>No Provider Available</strong>    <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Armenian**|`hy`| |**Azerbaijani**|`az`| |**Basque**|`eu`| |**Bengali**|`bn`| |**Bosnian**|`bs`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Central Khmer**|`km`| |**Chinese**|`zh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Estonian**|`et`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Indonesian**|`id`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kazakh**|`kk`| |**Korean**|`ko`| |**Lao**|`lo`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Macedonian**|`mk`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Marathi**|`mr`| |**Mongolian**|`mn`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian Bokmål**|`nb`| |**Persian**|`fa`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Serbian**|`sr`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Spanish**|`es`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tamil**|`ta`| |**Telugu**|`te`| |**Thai**|`th`| |**Turkish**|`tr`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Welsh**|`cy`| |**Wu Chinese**|`wuu`| |**Xhosa**|`xh`| |**Yue Chinese**|`yue`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Afrikaans (South Africa)**|`af-ZA`| |**Albanian (Albania)**|`sq-AL`| |**Amharic (Ethiopia)**|`am-ET`| |**Arabic (Algeria)**|`ar-DZ`| |**Arabic (Bahrain)**|`ar-BH`| |**Arabic (Egypt)**|`ar-EG`| |**Arabic (Iraq)**|`ar-IQ`| |**Arabic (Jordan)**|`ar-JO`| |**Arabic (Kuwait)**|`ar-KW`| |**Arabic (Lebanon)**|`ar-LB`| |**Arabic (Libya)**|`ar-LY`| |**Arabic (Morocco)**|`ar-MA`| |**Arabic (Oman)**|`ar-OM`| |**Arabic (Qatar)**|`ar-QA`| |**Arabic (Saudi Arabia)**|`ar-SA`| |**Arabic (Tunisia)**|`ar-TN`| |**Arabic (United Arab Emirates)**|`ar-AE`| |**Armenian (Armenia)**|`hy-AM`| |**Azerbaijani (Azerbaijan)**|`az-AZ`| |**Bangla (India)**|`bn-IN`| |**Basque (Spain)**|`eu-ES`| |**Bosnian (Bosnia & Herzegovina)**|`bs-BA`| |**Burmese (Myanmar (Burma))**|`my-MM`| |**Cantonese (China)**|`yue-CN`| |**Catalan (Spain)**|`ca-ES`| |**Chinese (China)**|`zh-CN`| |**Chinese (China)**|`zh-CN-henan`| |**Chinese (China)**|`zh-CN-shandong`| |**Chinese (China)**|`zh-CN-sichuan`| |**Chinese (Hong Kong SAR China)**|`zh-HK`| |**Chinese (Taiwan)**|`zh-TW`| |**Croatian (Croatia)**|`hr-HR`| |**Czech (Czechia)**|`cs-CZ`| |**Danish (Denmark)**|`da-DK`| |**Dutch (Belgium)**|`nl-BE`| |**Dutch (Netherlands)**|`nl-NL`| |**English (Australia)**|`en-AU`| |**English (Canada)**|`en-CA`| |**English (Curaçao)**|`en-AN`| |**English (Hong Kong SAR China)**|`en-HK`| |**English (India)**|`en-IN`| |**English (Ireland)**|`en-IE`| |**English (Kenya)**|`en-KE`| |**English (New Zealand)**|`en-NZ`| |**English (Nigeria)**|`en-NG`| |**English (Philippines)**|`en-PH`| |**English (Singapore)**|`en-SG`| |**English (South Africa)**|`en-ZA`| |**English (Tanzania)**|`en-TZ`| |**English (United Kingdom)**|`en-GB`| |**English (United States)**|`en-US`| |**Estonian (Estonia)**|`et-EE`| |**Filipino (Philippines)**|`fil-PH`| |**Finnish (Finland)**|`fi-FI`| |**French (Belgium)**|`fr-BE`| |**French (Canada)**|`fr-CA`| |**French (France)**|`fr-FR`| |**French (Switzerland)**|`fr-CH`| |**Galician (Spain)**|`gl-ES`| |**Georgian (Georgia)**|`ka-GE`| |**German (Austria)**|`de-AT`| |**German (Germany)**|`de-DE`| |**German (Switzerland)**|`de-CH`| |**Hebrew (Israel)**|`he-IL`| |**Hindi (India)**|`hi-IN`| |**Hungarian (Hungary)**|`hu-HU`| |**Icelandic (Iceland)**|`is-IS`| |**Indonesian (Indonesia)**|`id-ID`| |**Irish (Ireland)**|`ga-IE`| |**Italian (Italy)**|`it-IT`| |**Japanese (Japan)**|`ja-JP`| |**Javanese (Indonesia)**|`jv-ID`| |**Kazakh (Kazakhstan)**|`kk-KZ`| |**Khmer (Cambodia)**|`km-KH`| |**Korean (South Korea)**|`ko-KR`| |**Lao (Laos)**|`lo-LA`| |**Latvian (Latvia)**|`lv-LV`| |**Lithuanian (Lithuania)**|`lt-LT`| |**Macedonian (North Macedonia)**|`mk-MK`| |**Malay (Malaysia)**|`ms-MY`| |**Malayalam (India)**|`ml-IN`| |**Maltese (Malta)**|`mt-MT`| |**Marathi (India)**|`mr-IN`| |**Mongolian (Mongolia)**|`mn-MN`| |**Nepali (Nepal)**|`ne-NP`| |**Norwegian Bokmål (Norway)**|`nb-NO`| |**Pashto (Afghanistan)**|`ps-AF`| |**Persian (Iran)**|`fa-IR`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`| |**Romanian (Romania)**|`ro-RO`| |**Russian (Russia)**|`ru-RU`| |**Serbian (Serbia)**|`sr-RS`| |**Sinhala (Sri Lanka)**|`si-LK`| |**Slovak (Slovakia)**|`sk-SK`| |**Slovenian (Slovenia)**|`sl-SI`| |**Somali (Somalia)**|`so-SO`| |**Spanish (Argentina)**|`es-AR`| |**Spanish (Bolivia)**|`es-BO`| |**Spanish (Chile)**|`es-CL`| |**Spanish (Colombia)**|`es-CO`| |**Spanish (Costa Rica)**|`es-CR`| |**Spanish (Cuba)**|`es-CU`| |**Spanish (Ecuador)**|`es-EC`| |**Spanish (El Salvador)**|`es-SV`| |**Spanish (Equatorial Guinea)**|`es-GQ`| |**Spanish (Guatemala)**|`es-GT`| |**Spanish (Mexico)**|`es-MX`| |**Spanish (Nicaragua)**|`es-NI`| |**Spanish (Panama)**|`es-PA`| |**Spanish (Paraguay)**|`es-PY`| |**Spanish (Puerto Rico)**|`es-PR`| |**Spanish (Spain)**|`es-ES`| |**Spanish (United States)**|`es-US`| |**Spanish (Uruguay)**|`es-UY`| |**Spanish (Venezuela)**|`es-VE`| |**Sundanese (Indonesia)**|`su-ID`| |**Swahili (Kenya)**|`sw-KE`| |**Swahili (Tanzania)**|`sw-TZ`| |**Swedish (Sweden)**|`sv-SE`| |**Tamil (India)**|`ta-IN`| |**Tamil (Malaysia)**|`ta-MY`| |**Tamil (Singapore)**|`ta-SG`| |**Telugu (India)**|`te-IN`| |**Thai (Thailand)**|`th-TH`| |**Turkish (Turkey)**|`tr-TR`| |**Ukrainian (Ukraine)**|`uk-UA`| |**Urdu (India)**|`ur-IN`| |**Urdu (Pakistan)**|`ur-PK`| |**Uzbek (United Kingdom)**|`uz-UK`| |**Vietnamese (Vietnam)**|`vi-VN`| |**Welsh (United Kingdom)**|`cy-GB`| |**Wu Chinese (China)**|`wuu-CN`| |**Xhosa (South Africa)**|`xh-ZA`| |**Zulu (South Africa)**|`zu-ZA`|  </details>
         * @summary Text to Speech launch job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} text Text to analyze
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {string} [language] Language code expected (ex: en, fr)
         * @param {TextToSpeechAsyncRequestOption} [option] 
         * @param {number} [rate] Increase or decrease the speaking rate by expressing a positif or negatif number ranging between             100 and -100 (a relative value as percentage varying from -100% to 100%)
         * @param {number} [pitch] Increase or decrease the speaking pitch by expressing a positif or negatif number ranging between             100 and -100 (a relative value as percentage varying from -100% to 100%)
         * @param {number} [volume] Increase or decrease the audio volume by expressing a positif or negatif number ranging between             100 and -100 (a relative value as percentage varying from -100% to 100%)
         * @param {string} [audioFormat] Optional parameter to specify the audio format in which the audio will be generated. By default,             audios are encoded in MP3, except for lovoai which use the wav container.
         * @param {number} [samplingRate] Optional. The synthesis sample rate (in hertz) for this audio. When this is specified, the audio will be converted             either to the right passed value, or to a the nearest value acceptable by the provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        audioTextToSpeechAsyncCreate(providers: string, text: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, language?: string, option?: TextToSpeechAsyncRequestOption, rate?: number, pitch?: number, volume?: number, audioFormat?: string, samplingRate?: number, options?: any): AxiosPromise<LaunchAsyncJobResponse> {
            return localVarFp.audioTextToSpeechAsyncCreate(providers, text, fallbackProviders, showOriginalResponse, webhookReceiver, language, option, rate, pitch, volume, audioFormat, samplingRate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Text To Speech list jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        audioTextToSpeechAsyncRetrieve(options?: any): AxiosPromise<ListAsyncJobResponse> {
            return localVarFp.audioTextToSpeechAsyncRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Text To Speech Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        audioTextToSpeechAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: any): AxiosPromise<AsyncaudiotextToSpeechAsyncResponseModel> {
            return localVarFp.audioTextToSpeechAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|4.0 (per 1000000 char)|1 char |**amazon - Neural**|`boto3 (v1.15.18)`|16.0 (per 1000000 char)|1 char |**google**|`v1`|4.0 (per 1000000 char)|1 char |**google - Standard**|`v1`|4.0 (per 1000000 char)|1 char |**google - Neural**|`v1`|16.0 (per 1000000 char)|1 char |**google - Wavenet**|`v1`|16.0 (per 1000000 char)|1 char |**google - Studio**|`v1`|0.16 (per 1000 char)|1 char |**ibm**|`v1`|20.0 (per 1000000 char)|1000 char |**microsoft**|`v1.0`|16.0 (per 1000000 char)|1 char |**lovoai**|`v1`|160.0 (per 1000000 char)|1000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Armenian**|`hy`| |**Azerbaijani**|`az`| |**Basque**|`eu`| |**Bengali**|`bn`| |**Bosnian**|`bs`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Central Khmer**|`km`| |**Chinese**|`zh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Estonian**|`et`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Gujarati**|`gu`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Indonesian**|`id`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kannada**|`kn`| |**Kazakh**|`kk`| |**Korean**|`ko`| |**Lao**|`lo`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Macedonian**|`mk`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Mandarin Chinese**|`cmn`| |**Marathi**|`mr`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian Bokmål**|`nb`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Portuguese (Portugal)**|`pt_PT`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Serbian**|`sr`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Spanish**|`es`| |**Standard Arabic**|`arb`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tamil**|`ta`| |**Telugu**|`te`| |**Thai**|`th`| |**Turkish**|`tr`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Welsh**|`cy`| |**Wu Chinese**|`wuu`| |**Yue Chinese**|`yue`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Afrikaans (South Africa)**|`af-ZA`| |**Albanian (Albania)**|`sq-AL`| |**Amharic (Ethiopia)**|`am-ET`| |**Arabic (Algeria)**|`ar-DZ`| |**Arabic (Bahrain)**|`ar-BH`| |**Arabic (Egypt)**|`ar-EG`| |**Arabic (Iraq)**|`ar-IQ`| |**Arabic (Jordan)**|`ar-JO`| |**Arabic (Kuwait)**|`ar-KW`| |**Arabic (Lebanon)**|`ar-LB`| |**Arabic (Libya)**|`ar-LY`| |**Arabic (Morocco)**|`ar-MA`| |**Arabic (Oman)**|`ar-OM`| |**Arabic (Pseudo-Accents)**|`ar-XA`| |**Arabic (Qatar)**|`ar-QA`| |**Arabic (Saudi Arabia)**|`ar-SA`| |**Arabic (Syria)**|`ar-SY`| |**Arabic (Tunisia)**|`ar-TN`| |**Arabic (United Arab Emirates)**|`ar-AE`| |**Arabic (Yemen)**|`ar-YE`| |**Armenian (Armenia)**|`hy-AM`| |**Azerbaijani (Azerbaijan)**|`az-AZ`| |**Bangla (Bangladesh)**|`bn-BD`| |**Bangla (India)**|`bn-IN`| |**Basque (Spain)**|`eu-ES`| |**Bosnian (Bosnia & Herzegovina)**|`bs-BA`| |**Bulgarian (Bulgaria)**|`bg-BG`| |**Burmese (Myanmar (Burma))**|`my-MM`| |**Cantonese (China)**|`yue-CN`| |**Cantonese (Hong Kong SAR China)**|`yue-HK`| |**Catalan (Spain)**|`ca-ES`| |**Chinese (China)**|`zh-CN`| |**Chinese (Hong Kong SAR China)**|`zh-HK`| |**Chinese (Taiwan)**|`zh-TW`| |**Croatian (Croatia)**|`hr-HR`| |**Czech (Czechia)**|`cs-CZ`| |**Danish (Denmark)**|`da-DK`| |**Dutch (Belgium)**|`nl-BE`| |**Dutch (Netherlands)**|`nl-NL`| |**English (Australia)**|`en-AU`| |**English (Canada)**|`en-CA`| |**English (Hong Kong SAR China)**|`en-HK`| |**English (India)**|`en-IN`| |**English (Ireland)**|`en-IE`| |**English (Kenya)**|`en-KE`| |**English (New Zealand)**|`en-NZ`| |**English (Nigeria)**|`en-NG`| |**English (Philippines)**|`en-PH`| |**English (Singapore)**|`en-SG`| |**English (South Africa)**|`en-ZA`| |**English (Tanzania)**|`en-TZ`| |**English (United Kingdom)**|`en-GB`| |**English (United States)**|`en-US`| |**Estonian (Estonia)**|`et-EE`| |**Filipino (Philippines)**|`fil-PH`| |**Finnish (Finland)**|`fi-FI`| |**French (Belgium)**|`fr-BE`| |**French (Canada)**|`fr-CA`| |**French (France)**|`fr-FR`| |**French (Switzerland)**|`fr-CH`| |**Galician (Spain)**|`gl-ES`| |**Georgian (Georgia)**|`ka-GE`| |**German (Austria)**|`de-AT`| |**German (Germany)**|`de-DE`| |**German (Switzerland)**|`de-CH`| |**Greek (Greece)**|`el-GR`| |**Gujarati (India)**|`gu-IN`| |**Hebrew (Israel)**|`he-IL`| |**Hindi (India)**|`hi-IN`| |**Hungarian (Hungary)**|`hu-HU`| |**Icelandic (Iceland)**|`is-IS`| |**Indonesian (Indonesia)**|`id-ID`| |**Irish (Ireland)**|`ga-IE`| |**Italian (Italy)**|`it-IT`| |**Japanese (Japan)**|`ja-JP`| |**Javanese (Indonesia)**|`jv-ID`| |**Kannada (India)**|`kn-IN`| |**Kazakh (Kazakhstan)**|`kk-KZ`| |**Khmer (Cambodia)**|`km-KH`| |**Korean (South Korea)**|`ko-KR`| |**Lao (Laos)**|`lo-LA`| |**Latvian (Latvia)**|`lv-LV`| |**Lithuanian (Lithuania)**|`lt-LT`| |**Macedonian (North Macedonia)**|`mk-MK`| |**Malay (Malaysia)**|`ms-MY`| |**Malayalam (India)**|`ml-IN`| |**Maltese (Malta)**|`mt-MT`| |**Mandarin Chinese (China)**|`cmn-CN`| |**Mandarin Chinese (Taiwan)**|`cmn-TW`| |**Marathi (India)**|`mr-IN`| |**Mongolian (Mongolia)**|`mn-MN`| |**Nepali (Nepal)**|`ne-NP`| |**Norwegian Bokmål (Norway)**|`nb-NO`| |**Pashto (Afghanistan)**|`ps-AF`| |**Persian (Iran)**|`fa-IR`| |**Polish (Poland)**|`pl-PL`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`| |**Punjabi (India)**|`pa-IN`| |**Romanian (Romania)**|`ro-RO`| |**Russian (Russia)**|`ru-RU`| |**Serbian (Serbia)**|`sr-RS`| |**Sinhala (Sri Lanka)**|`si-LK`| |**Slovak (Slovakia)**|`sk-SK`| |**Slovenian (Slovenia)**|`sl-SI`| |**Somali (Somalia)**|`so-SO`| |**Spanish (Argentina)**|`es-AR`| |**Spanish (Bolivia)**|`es-BO`| |**Spanish (Chile)**|`es-CL`| |**Spanish (Colombia)**|`es-CO`| |**Spanish (Costa Rica)**|`es-CR`| |**Spanish (Cuba)**|`es-CU`| |**Spanish (Dominican Republic)**|`es-DO`| |**Spanish (Ecuador)**|`es-EC`| |**Spanish (El Salvador)**|`es-SV`| |**Spanish (Equatorial Guinea)**|`es-GQ`| |**Spanish (Guatemala)**|`es-GT`| |**Spanish (Honduras)**|`es-HN`| |**Spanish (Laos)**|`es-LA`| |**Spanish (Mexico)**|`es-MX`| |**Spanish (Nicaragua)**|`es-NI`| |**Spanish (Panama)**|`es-PA`| |**Spanish (Paraguay)**|`es-PY`| |**Spanish (Peru)**|`es-PE`| |**Spanish (Puerto Rico)**|`es-PR`| |**Spanish (Spain)**|`es-ES`| |**Spanish (United States)**|`es-US`| |**Spanish (Uruguay)**|`es-UY`| |**Spanish (Venezuela)**|`es-VE`| |**Sundanese (Indonesia)**|`su-ID`| |**Swahili (Kenya)**|`sw-KE`| |**Swahili (Tanzania)**|`sw-TZ`| |**Swedish (Sweden)**|`sv-SE`| |**Tamil (India)**|`ta-IN`| |**Tamil (Malaysia)**|`ta-MY`| |**Tamil (Singapore)**|`ta-SG`| |**Tamil (Sri Lanka)**|`ta-LK`| |**Telugu (India)**|`te-IN`| |**Thai (Thailand)**|`th-TH`| |**Turkish (Turkey)**|`tr-TR`| |**Ukrainian (Ukraine)**|`uk-UA`| |**Urdu (India)**|`ur-IN`| |**Urdu (Pakistan)**|`ur-PK`| |**Uzbek (Uzbekistan)**|`uz-UZ`| |**Vietnamese (Vietnam)**|`vi-VN`| |**Welsh (United Kingdom)**|`cy-GB`| |**Wu Chinese (China)**|`wuu-CN`| |**Zulu (South Africa)**|`zu-ZA`|  </details>
         * @summary Text to Speech
         * @param {AudiotextToSpeechTextToSpeechRequest} audiotextToSpeechTextToSpeechRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        audioTextToSpeechCreate(audiotextToSpeechTextToSpeechRequest: AudiotextToSpeechTextToSpeechRequest, options?: any): AxiosPromise<AudiotextToSpeechResponseModel> {
            return localVarFp.audioTextToSpeechCreate(audiotextToSpeechTextToSpeechRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AudioApi - object-oriented interface
 * @export
 * @class AudioApi
 * @extends {BaseAPI}
 */
export class AudioApi extends BaseAPI {
    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|0.024 (per 60 seconde)|15 seconde |**google**|`v1p1beta1`|0.024 (per 60 seconde)|1 seconde |**ibm**|`v1`|0.02 (per 60 seconde)|1 seconde |**microsoft**|`v1.0`|0.0168 (per 60 seconde)|1 seconde |**revai**|`v1`|0.02 (per 60 seconde)|15 seconde |**symbl**|`v1`|0.027 (per 60 seconde)|60 seconde |**voci**|`v1`|0.0162 (per 60 seconde)|1 seconde |**voxist**|`v1`|0.0042 (per 15 seconde)|1 seconde |**neuralspace**|`v1`|0.024 (per 60 seconde)|60 seconde |**oneai**|`v0`|0.0067 (per 60 seconde)|1 seconde |**assembly**|`v2`|0.011 (per 60 seconde)|1 seconde |**deepgram - base**|`v1`|0.0169 (per 60 seconde)|1 seconde |**deepgram - enhanced**|`v1`|0.0189 (per 60 seconde)|1 seconde |**deepgram**|`v1`|0.0169 (per 60 seconde)|1 seconde |**openai**|`boto3 (v1.15.18)`|0.006 (per 60 seconde)|1 seconde |**speechmatics - enhanced**|`v2`|0.0316 (per 60 seconde)|1 seconde |**speechmatics - standard**|`v2`|0.0208 (per 60 seconde)|1 seconde |**speechmatics**|`v2`|0.0316 (per 60 seconde)|1 seconde |**gladia**|`v1`|0.0102 (per 60 seconde)|1 seconde   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Armenian**|`hy`| |**Assamese**|`as`| |**Azerbaijani**|`az`| |**Bashkir**|`ba`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bengali**|`bn`| |**Bosnian**|`bs`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Central Khmer**|`km`| |**Chinese**|`zh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Esperanto**|`eo`| |**Estonian**|`et`| |**Faroese**|`fo`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Gujarati**|`gu`| |**Haitian**|`ht`| |**Hausa**|`ha`| |**Hawaiian**|`haw`| |**Hebrew**|`he`| |**Hebrew**|`iw`| |**Hindi**|`hi`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Indonesian**|`id`| |**Interlingua (International Auxiliary Language Association)**|`ia`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kannada**|`kn`| |**Kazakh**|`kk`| |**Korean**|`ko`| |**Lao**|`lo`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lingala**|`ln`| |**Lithuanian**|`lt`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Mandarin Chinese**|`cmn`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian**|`no`| |**Norwegian Bokmål**|`nb`| |**Norwegian Nynorsk**|`nn`| |**Occitan (post 1500)**|`oc`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Sanskrit**|`sa`| |**Serbian**|`sr`| |**Shona**|`sn`| |**Sindhi**|`sd`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Spanish**|`es`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tamil**|`ta`| |**Tatar**|`tt`| |**Telugu**|`te`| |**Thai**|`th`| |**Tibetan**|`bo`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Welsh**|`cy`| |**Wolof**|`wo`| |**Wu Chinese**|`wuu`| |**Yiddish**|`yi`| |**Yoruba**|`yo`| |**Yue Chinese**|`yue`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Afrikaans (South Africa)**|`af-ZA`| |**Albanian (Albania)**|`sq-AL`| |**Amharic (Ethiopia)**|`am-ET`| |**Arabic (Algeria)**|`ar-DZ`| |**Arabic (Bahrain)**|`ar-BH`| |**Arabic (Egypt)**|`ar-EG`| |**Arabic (Iraq)**|`ar-IQ`| |**Arabic (Israel)**|`ar-IL`| |**Arabic (Jordan)**|`ar-JO`| |**Arabic (Kuwait)**|`ar-KW`| |**Arabic (Lebanon)**|`ar-LB`| |**Arabic (Libya)**|`ar-LY`| |**Arabic (Mauritania)**|`ar-MR`| |**Arabic (Montserrat)**|`ar-MS`| |**Arabic (Morocco)**|`ar-MA`| |**Arabic (Oman)**|`ar-OM`| |**Arabic (Palestinian Territories)**|`ar-PS`| |**Arabic (Qatar)**|`ar-QA`| |**Arabic (Saudi Arabia)**|`ar-SA`| |**Arabic (Syria)**|`ar-SY`| |**Arabic (Tunisia)**|`ar-TN`| |**Arabic (United Arab Emirates)**|`ar-AE`| |**Arabic (Yemen)**|`ar-YE`| |**Armenian (Armenia)**|`hy-AM`| |**Assamese (India)**|`as-IN`| |**Azerbaijani (Azerbaijan)**|`az-AZ`| |**Bangla (Bangladesh)**|`bn-BD`| |**Bangla (India)**|`bn-IN`| |**Bashkir (Russia)**|`ba-RU`| |**Basque (Spain)**|`eu-ES`| |**Belarusian (Belarus)**|`be-BY`| |**Bosnian (Bosnia & Herzegovina)**|`bs-BA`| |**Breton (France)**|`br-FR`| |**Bulgarian (Bulgaria)**|`bg-BG`| |**Burmese (Myanmar (Burma))**|`my-MM`| |**Cantonese (China)**|`yue-CN`| |**Cantonese (Traditional, Hong Kong SAR China)**|`yue-Hant-HK`| |**Catalan (Spain)**|`ca-ES`| |**Chinese (China)**|`zh-CN`| |**Chinese (Hong Kong SAR China)**|`zh-HK`| |**Chinese (Taiwan)**|`zh-TW`| |**Croatian (Croatia)**|`hr-HR`| |**Czech (Czechia)**|`cs-CZ`| |**Danish (Denmark)**|`da-DK`| |**Dutch (Belgium)**|`nl-BE`| |**Dutch (Netherlands)**|`nl-NL`| |**English (Australia)**|`en-AU`| |**English (Canada)**|`en-CA`| |**English (Ghana)**|`en-GH`| |**English (Hong Kong SAR China)**|`en-HK`| |**English (India)**|`en-IN`| |**English (Ireland)**|`en-IE`| |**English (Kenya)**|`en-KE`| |**English (New Zealand)**|`en-NZ`| |**English (Nigeria)**|`en-NG`| |**English (Pakistan)**|`en-PK`| |**English (Philippines)**|`en-PH`| |**English (Singapore)**|`en-SG`| |**English (South Africa)**|`en-ZA`| |**English (Tanzania)**|`en-TZ`| |**English (United Kingdom)**|`en-GB`| |**English (United Kingdom)**|`en-UK`| |**English (United States)**|`en-US`| |**Estonian (Estonia)**|`et-EE`| |**Faroese (Faroe Islands)**|`fo-FO`| |**Filipino (Philippines)**|`fil-PH`| |**Filipino (Philippines)**|`tl-PH`| |**Finnish (Finland)**|`fi-FI`| |**French (Belgium)**|`fr-BE`| |**French (Canada)**|`fr-CA`| |**French (France)**|`fr-FR`| |**French (Switzerland)**|`fr-CH`| |**Galician (Spain)**|`gl-ES`| |**Georgian (Georgia)**|`ka-GE`| |**German (Austria)**|`de-AT`| |**German (Germany)**|`de-DE`| |**German (Switzerland)**|`de-CH`| |**Greek (Greece)**|`el-GR`| |**Gujarati (India)**|`gu-IN`| |**Haitian Creole (Haiti)**|`ht-HT`| |**Hausa (Nigeria)**|`ha-NG`| |**Hawaiian (United States)**|`haw-US`| |**Hebrew (Israel)**|`he-IL`| |**Hebrew (Israel)**|`iw-IL`| |**Hindi (India)**|`hi-IN`| |**Hindi (Latin)**|`hi-Latn`| |**Hungarian (Hungary)**|`hu-HU`| |**Icelandic (Iceland)**|`is-IS`| |**Indonesian (Indonesia)**|`id-ID`| |**Irish (Ireland)**|`ga-IE`| |**Italian (Italy)**|`it-IT`| |**Italian (Switzerland)**|`it-CH`| |**Japanese (Japan)**|`ja-JP`| |**Javanese (Indonesia)**|`jv-ID`| |**Kannada (India)**|`kn-IN`| |**Kazakh (Kazakhstan)**|`kk-KZ`| |**Khmer (Cambodia)**|`km-KH`| |**Korean (South Korea)**|`ko-KR`| |**Lao (Laos)**|`lo-LA`| |**Latvian (Latvia)**|`lv-LV`| |**Lingala (Congo - Kinshasa)**|`ln-CD`| |**Lithuanian (Lithuania)**|`lt-LT`| |**Luxembourgish (Luxembourg)**|`lb-LU`| |**Macedonian (North Macedonia)**|`mk-MK`| |**Malagasy (Madagascar)**|`mg-MG`| |**Malay (Malaysia)**|`ms-MY`| |**Malayalam (India)**|`ml-IN`| |**Maltese (Malta)**|`mt-MT`| |**Marathi (India)**|`mr-IN`| |**Mongolian (Mongolia)**|`mn-MN`| |**Māori (New Zealand)**|`mi-NZ`| |**Nepali (Nepal)**|`ne-NP`| |**Norwegian (Norway)**|`no-NO`| |**Norwegian Bokmål (Norway)**|`nb-NO`| |**Norwegian Nynorsk (Norway)**|`nn-NO`| |**Occitan (France)**|`oc-FR`| |**Pashto (Afghanistan)**|`ps-AF`| |**Persian (Iran)**|`fa-IR`| |**Polish (Poland)**|`pl-PL`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`| |**Punjabi (India)**|`pa-Guru-IN`| |**Romanian (Romania)**|`ro-RO`| |**Russian (Russia)**|`ru-RU`| |**Sanskrit (India)**|`sa-IN`| |**Serbian (Serbia)**|`sr-RS`| |**Shona (Zimbabwe)**|`sn-ZW`| |**Sindhi (Pakistan)**|`sd-PK`| |**Sinhala (Sri Lanka)**|`si-LK`| |**Slovak (Slovakia)**|`sk-SK`| |**Slovenian (Slovenia)**|`sl-SI`| |**Somali (Somalia)**|`so-SO`| |**Spanish (Argentina)**|`es-AR`| |**Spanish (Bolivia)**|`es-BO`| |**Spanish (Chile)**|`es-CL`| |**Spanish (Colombia)**|`es-CO`| |**Spanish (Costa Rica)**|`es-CR`| |**Spanish (Cuba)**|`es-CU`| |**Spanish (Dominican Republic)**|`es-DO`| |**Spanish (Ecuador)**|`es-EC`| |**Spanish (El Salvador)**|`es-SV`| |**Spanish (Equatorial Guinea)**|`es-GQ`| |**Spanish (Guatemala)**|`es-GT`| |**Spanish (Honduras)**|`es-HN`| |**Spanish (Laos)**|`es-LA`| |**Spanish (Latin America)**|`es-419`| |**Spanish (Mexico)**|`es-MX`| |**Spanish (Nicaragua)**|`es-NI`| |**Spanish (Panama)**|`es-PA`| |**Spanish (Paraguay)**|`es-PY`| |**Spanish (Peru)**|`es-PE`| |**Spanish (Puerto Rico)**|`es-PR`| |**Spanish (Spain)**|`es-ES`| |**Spanish (United States)**|`es-US`| |**Spanish (Uruguay)**|`es-UY`| |**Spanish (Venezuela)**|`es-VE`| |**Sundanese (Indonesia)**|`su-ID`| |**Swahili (Kenya)**|`sw-KE`| |**Swahili (Tanzania)**|`sw-TZ`| |**Swedish (Sweden)**|`sv-SE`| |**Tajik (Tajikistan)**|`tg-TJ`| |**Tamil (India)**|`ta-IN`| |**Tamil (Malaysia)**|`ta-MY`| |**Tamil (Singapore)**|`ta-SG`| |**Tamil (Sri Lanka)**|`ta-LK`| |**Tatar (Russia)**|`tt-RU`| |**Telugu (India)**|`te-IN`| |**Thai (Thailand)**|`th-TH`| |**Tibetan (China)**|`bo-CN`| |**Turkish (Turkey)**|`tr-TR`| |**Turkmen (Turkmenistan)**|`tk-TM`| |**Ukrainian (Ukraine)**|`uk-UA`| |**Urdu (India)**|`ur-IN`| |**Urdu (Pakistan)**|`ur-PK`| |**Uzbek (Uzbekistan)**|`uz-UZ`| |**Vietnamese (Vietnam)**|`vi-VN`| |**Welsh (United Kingdom)**|`cy-GB`| |**Wolof (Senegal)**|`wo-SN`| |**Wu Chinese (China)**|`wuu-CN`| |**Yoruba (Nigeria)**|`yo-NG`| |**Zulu (South Africa)**|`zu-ZA`|  </details>
     * @summary Speech to Text Launch Job
     * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
     * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
     * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
     * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
     * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @param {string} [language] Language code expected (ex: en, fr)
     * @param {number} [speakers] Number of speakers in the file audio
     * @param {boolean} [profanityFilter] Boolean value to specify weather or not the service will filter profanity and replace inappropriate words with a series of asterisks
     * @param {string} [customVocabulary] List of words or composed words to be detected by the speech to text engine. (Ex: Word, Mike, Draw, Los Angeles,...)
     * @param {boolean} [convertToWav] Boolean value to specify weather to convert the audio/video file to wav format to be accepted by a majority of the providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudioApi
     */
    public audioSpeechToTextAsyncCreate(providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, language?: string, speakers?: number, profanityFilter?: boolean, customVocabulary?: string, convertToWav?: boolean, options?: AxiosRequestConfig) {
        return AudioApiFp(this.configuration).audioSpeechToTextAsyncCreate(providers, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, language, speakers, profanityFilter, customVocabulary, convertToWav, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
     * @summary Speech to Text List Jobs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudioApi
     */
    public audioSpeechToTextAsyncRetrieve(options?: AxiosRequestConfig) {
        return AudioApiFp(this.configuration).audioSpeechToTextAsyncRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the status and results of an async job given its ID.
     * @summary Speech to Text Get Job Results
     * @param {string} publicId 
     * @param {boolean} [responseAsDict] 
     * @param {boolean} [showOriginalResponse] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudioApi
     */
    public audioSpeechToTextAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: AxiosRequestConfig) {
        return AudioApiFp(this.configuration).audioSpeechToTextAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <strong style=\'color: #ac3737\'>No Provider Available</strong>    <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Armenian**|`hy`| |**Azerbaijani**|`az`| |**Basque**|`eu`| |**Bengali**|`bn`| |**Bosnian**|`bs`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Central Khmer**|`km`| |**Chinese**|`zh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Estonian**|`et`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Indonesian**|`id`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kazakh**|`kk`| |**Korean**|`ko`| |**Lao**|`lo`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Macedonian**|`mk`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Marathi**|`mr`| |**Mongolian**|`mn`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian Bokmål**|`nb`| |**Persian**|`fa`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Serbian**|`sr`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Spanish**|`es`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tamil**|`ta`| |**Telugu**|`te`| |**Thai**|`th`| |**Turkish**|`tr`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Welsh**|`cy`| |**Wu Chinese**|`wuu`| |**Xhosa**|`xh`| |**Yue Chinese**|`yue`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Afrikaans (South Africa)**|`af-ZA`| |**Albanian (Albania)**|`sq-AL`| |**Amharic (Ethiopia)**|`am-ET`| |**Arabic (Algeria)**|`ar-DZ`| |**Arabic (Bahrain)**|`ar-BH`| |**Arabic (Egypt)**|`ar-EG`| |**Arabic (Iraq)**|`ar-IQ`| |**Arabic (Jordan)**|`ar-JO`| |**Arabic (Kuwait)**|`ar-KW`| |**Arabic (Lebanon)**|`ar-LB`| |**Arabic (Libya)**|`ar-LY`| |**Arabic (Morocco)**|`ar-MA`| |**Arabic (Oman)**|`ar-OM`| |**Arabic (Qatar)**|`ar-QA`| |**Arabic (Saudi Arabia)**|`ar-SA`| |**Arabic (Tunisia)**|`ar-TN`| |**Arabic (United Arab Emirates)**|`ar-AE`| |**Armenian (Armenia)**|`hy-AM`| |**Azerbaijani (Azerbaijan)**|`az-AZ`| |**Bangla (India)**|`bn-IN`| |**Basque (Spain)**|`eu-ES`| |**Bosnian (Bosnia & Herzegovina)**|`bs-BA`| |**Burmese (Myanmar (Burma))**|`my-MM`| |**Cantonese (China)**|`yue-CN`| |**Catalan (Spain)**|`ca-ES`| |**Chinese (China)**|`zh-CN`| |**Chinese (China)**|`zh-CN-henan`| |**Chinese (China)**|`zh-CN-shandong`| |**Chinese (China)**|`zh-CN-sichuan`| |**Chinese (Hong Kong SAR China)**|`zh-HK`| |**Chinese (Taiwan)**|`zh-TW`| |**Croatian (Croatia)**|`hr-HR`| |**Czech (Czechia)**|`cs-CZ`| |**Danish (Denmark)**|`da-DK`| |**Dutch (Belgium)**|`nl-BE`| |**Dutch (Netherlands)**|`nl-NL`| |**English (Australia)**|`en-AU`| |**English (Canada)**|`en-CA`| |**English (Curaçao)**|`en-AN`| |**English (Hong Kong SAR China)**|`en-HK`| |**English (India)**|`en-IN`| |**English (Ireland)**|`en-IE`| |**English (Kenya)**|`en-KE`| |**English (New Zealand)**|`en-NZ`| |**English (Nigeria)**|`en-NG`| |**English (Philippines)**|`en-PH`| |**English (Singapore)**|`en-SG`| |**English (South Africa)**|`en-ZA`| |**English (Tanzania)**|`en-TZ`| |**English (United Kingdom)**|`en-GB`| |**English (United States)**|`en-US`| |**Estonian (Estonia)**|`et-EE`| |**Filipino (Philippines)**|`fil-PH`| |**Finnish (Finland)**|`fi-FI`| |**French (Belgium)**|`fr-BE`| |**French (Canada)**|`fr-CA`| |**French (France)**|`fr-FR`| |**French (Switzerland)**|`fr-CH`| |**Galician (Spain)**|`gl-ES`| |**Georgian (Georgia)**|`ka-GE`| |**German (Austria)**|`de-AT`| |**German (Germany)**|`de-DE`| |**German (Switzerland)**|`de-CH`| |**Hebrew (Israel)**|`he-IL`| |**Hindi (India)**|`hi-IN`| |**Hungarian (Hungary)**|`hu-HU`| |**Icelandic (Iceland)**|`is-IS`| |**Indonesian (Indonesia)**|`id-ID`| |**Irish (Ireland)**|`ga-IE`| |**Italian (Italy)**|`it-IT`| |**Japanese (Japan)**|`ja-JP`| |**Javanese (Indonesia)**|`jv-ID`| |**Kazakh (Kazakhstan)**|`kk-KZ`| |**Khmer (Cambodia)**|`km-KH`| |**Korean (South Korea)**|`ko-KR`| |**Lao (Laos)**|`lo-LA`| |**Latvian (Latvia)**|`lv-LV`| |**Lithuanian (Lithuania)**|`lt-LT`| |**Macedonian (North Macedonia)**|`mk-MK`| |**Malay (Malaysia)**|`ms-MY`| |**Malayalam (India)**|`ml-IN`| |**Maltese (Malta)**|`mt-MT`| |**Marathi (India)**|`mr-IN`| |**Mongolian (Mongolia)**|`mn-MN`| |**Nepali (Nepal)**|`ne-NP`| |**Norwegian Bokmål (Norway)**|`nb-NO`| |**Pashto (Afghanistan)**|`ps-AF`| |**Persian (Iran)**|`fa-IR`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`| |**Romanian (Romania)**|`ro-RO`| |**Russian (Russia)**|`ru-RU`| |**Serbian (Serbia)**|`sr-RS`| |**Sinhala (Sri Lanka)**|`si-LK`| |**Slovak (Slovakia)**|`sk-SK`| |**Slovenian (Slovenia)**|`sl-SI`| |**Somali (Somalia)**|`so-SO`| |**Spanish (Argentina)**|`es-AR`| |**Spanish (Bolivia)**|`es-BO`| |**Spanish (Chile)**|`es-CL`| |**Spanish (Colombia)**|`es-CO`| |**Spanish (Costa Rica)**|`es-CR`| |**Spanish (Cuba)**|`es-CU`| |**Spanish (Ecuador)**|`es-EC`| |**Spanish (El Salvador)**|`es-SV`| |**Spanish (Equatorial Guinea)**|`es-GQ`| |**Spanish (Guatemala)**|`es-GT`| |**Spanish (Mexico)**|`es-MX`| |**Spanish (Nicaragua)**|`es-NI`| |**Spanish (Panama)**|`es-PA`| |**Spanish (Paraguay)**|`es-PY`| |**Spanish (Puerto Rico)**|`es-PR`| |**Spanish (Spain)**|`es-ES`| |**Spanish (United States)**|`es-US`| |**Spanish (Uruguay)**|`es-UY`| |**Spanish (Venezuela)**|`es-VE`| |**Sundanese (Indonesia)**|`su-ID`| |**Swahili (Kenya)**|`sw-KE`| |**Swahili (Tanzania)**|`sw-TZ`| |**Swedish (Sweden)**|`sv-SE`| |**Tamil (India)**|`ta-IN`| |**Tamil (Malaysia)**|`ta-MY`| |**Tamil (Singapore)**|`ta-SG`| |**Telugu (India)**|`te-IN`| |**Thai (Thailand)**|`th-TH`| |**Turkish (Turkey)**|`tr-TR`| |**Ukrainian (Ukraine)**|`uk-UA`| |**Urdu (India)**|`ur-IN`| |**Urdu (Pakistan)**|`ur-PK`| |**Uzbek (United Kingdom)**|`uz-UK`| |**Vietnamese (Vietnam)**|`vi-VN`| |**Welsh (United Kingdom)**|`cy-GB`| |**Wu Chinese (China)**|`wuu-CN`| |**Xhosa (South Africa)**|`xh-ZA`| |**Zulu (South Africa)**|`zu-ZA`|  </details>
     * @summary Text to Speech launch job
     * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
     * @param {string} text Text to analyze
     * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
     * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
     * @param {string} [language] Language code expected (ex: en, fr)
     * @param {TextToSpeechAsyncRequestOption} [option] 
     * @param {number} [rate] Increase or decrease the speaking rate by expressing a positif or negatif number ranging between             100 and -100 (a relative value as percentage varying from -100% to 100%)
     * @param {number} [pitch] Increase or decrease the speaking pitch by expressing a positif or negatif number ranging between             100 and -100 (a relative value as percentage varying from -100% to 100%)
     * @param {number} [volume] Increase or decrease the audio volume by expressing a positif or negatif number ranging between             100 and -100 (a relative value as percentage varying from -100% to 100%)
     * @param {string} [audioFormat] Optional parameter to specify the audio format in which the audio will be generated. By default,             audios are encoded in MP3, except for lovoai which use the wav container.
     * @param {number} [samplingRate] Optional. The synthesis sample rate (in hertz) for this audio. When this is specified, the audio will be converted             either to the right passed value, or to a the nearest value acceptable by the provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudioApi
     */
    public audioTextToSpeechAsyncCreate(providers: string, text: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, language?: string, option?: TextToSpeechAsyncRequestOption, rate?: number, pitch?: number, volume?: number, audioFormat?: string, samplingRate?: number, options?: AxiosRequestConfig) {
        return AudioApiFp(this.configuration).audioTextToSpeechAsyncCreate(providers, text, fallbackProviders, showOriginalResponse, webhookReceiver, language, option, rate, pitch, volume, audioFormat, samplingRate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
     * @summary Text To Speech list jobs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudioApi
     */
    public audioTextToSpeechAsyncRetrieve(options?: AxiosRequestConfig) {
        return AudioApiFp(this.configuration).audioTextToSpeechAsyncRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the status and results of an async job given its ID.
     * @summary Text To Speech Get Job Results
     * @param {string} publicId 
     * @param {boolean} [responseAsDict] 
     * @param {boolean} [showOriginalResponse] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudioApi
     */
    public audioTextToSpeechAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: AxiosRequestConfig) {
        return AudioApiFp(this.configuration).audioTextToSpeechAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|4.0 (per 1000000 char)|1 char |**amazon - Neural**|`boto3 (v1.15.18)`|16.0 (per 1000000 char)|1 char |**google**|`v1`|4.0 (per 1000000 char)|1 char |**google - Standard**|`v1`|4.0 (per 1000000 char)|1 char |**google - Neural**|`v1`|16.0 (per 1000000 char)|1 char |**google - Wavenet**|`v1`|16.0 (per 1000000 char)|1 char |**google - Studio**|`v1`|0.16 (per 1000 char)|1 char |**ibm**|`v1`|20.0 (per 1000000 char)|1000 char |**microsoft**|`v1.0`|16.0 (per 1000000 char)|1 char |**lovoai**|`v1`|160.0 (per 1000000 char)|1000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Armenian**|`hy`| |**Azerbaijani**|`az`| |**Basque**|`eu`| |**Bengali**|`bn`| |**Bosnian**|`bs`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Central Khmer**|`km`| |**Chinese**|`zh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Estonian**|`et`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Gujarati**|`gu`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Indonesian**|`id`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kannada**|`kn`| |**Kazakh**|`kk`| |**Korean**|`ko`| |**Lao**|`lo`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Macedonian**|`mk`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Mandarin Chinese**|`cmn`| |**Marathi**|`mr`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian Bokmål**|`nb`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Portuguese (Portugal)**|`pt_PT`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Serbian**|`sr`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Spanish**|`es`| |**Standard Arabic**|`arb`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tamil**|`ta`| |**Telugu**|`te`| |**Thai**|`th`| |**Turkish**|`tr`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Welsh**|`cy`| |**Wu Chinese**|`wuu`| |**Yue Chinese**|`yue`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Afrikaans (South Africa)**|`af-ZA`| |**Albanian (Albania)**|`sq-AL`| |**Amharic (Ethiopia)**|`am-ET`| |**Arabic (Algeria)**|`ar-DZ`| |**Arabic (Bahrain)**|`ar-BH`| |**Arabic (Egypt)**|`ar-EG`| |**Arabic (Iraq)**|`ar-IQ`| |**Arabic (Jordan)**|`ar-JO`| |**Arabic (Kuwait)**|`ar-KW`| |**Arabic (Lebanon)**|`ar-LB`| |**Arabic (Libya)**|`ar-LY`| |**Arabic (Morocco)**|`ar-MA`| |**Arabic (Oman)**|`ar-OM`| |**Arabic (Pseudo-Accents)**|`ar-XA`| |**Arabic (Qatar)**|`ar-QA`| |**Arabic (Saudi Arabia)**|`ar-SA`| |**Arabic (Syria)**|`ar-SY`| |**Arabic (Tunisia)**|`ar-TN`| |**Arabic (United Arab Emirates)**|`ar-AE`| |**Arabic (Yemen)**|`ar-YE`| |**Armenian (Armenia)**|`hy-AM`| |**Azerbaijani (Azerbaijan)**|`az-AZ`| |**Bangla (Bangladesh)**|`bn-BD`| |**Bangla (India)**|`bn-IN`| |**Basque (Spain)**|`eu-ES`| |**Bosnian (Bosnia & Herzegovina)**|`bs-BA`| |**Bulgarian (Bulgaria)**|`bg-BG`| |**Burmese (Myanmar (Burma))**|`my-MM`| |**Cantonese (China)**|`yue-CN`| |**Cantonese (Hong Kong SAR China)**|`yue-HK`| |**Catalan (Spain)**|`ca-ES`| |**Chinese (China)**|`zh-CN`| |**Chinese (Hong Kong SAR China)**|`zh-HK`| |**Chinese (Taiwan)**|`zh-TW`| |**Croatian (Croatia)**|`hr-HR`| |**Czech (Czechia)**|`cs-CZ`| |**Danish (Denmark)**|`da-DK`| |**Dutch (Belgium)**|`nl-BE`| |**Dutch (Netherlands)**|`nl-NL`| |**English (Australia)**|`en-AU`| |**English (Canada)**|`en-CA`| |**English (Hong Kong SAR China)**|`en-HK`| |**English (India)**|`en-IN`| |**English (Ireland)**|`en-IE`| |**English (Kenya)**|`en-KE`| |**English (New Zealand)**|`en-NZ`| |**English (Nigeria)**|`en-NG`| |**English (Philippines)**|`en-PH`| |**English (Singapore)**|`en-SG`| |**English (South Africa)**|`en-ZA`| |**English (Tanzania)**|`en-TZ`| |**English (United Kingdom)**|`en-GB`| |**English (United States)**|`en-US`| |**Estonian (Estonia)**|`et-EE`| |**Filipino (Philippines)**|`fil-PH`| |**Finnish (Finland)**|`fi-FI`| |**French (Belgium)**|`fr-BE`| |**French (Canada)**|`fr-CA`| |**French (France)**|`fr-FR`| |**French (Switzerland)**|`fr-CH`| |**Galician (Spain)**|`gl-ES`| |**Georgian (Georgia)**|`ka-GE`| |**German (Austria)**|`de-AT`| |**German (Germany)**|`de-DE`| |**German (Switzerland)**|`de-CH`| |**Greek (Greece)**|`el-GR`| |**Gujarati (India)**|`gu-IN`| |**Hebrew (Israel)**|`he-IL`| |**Hindi (India)**|`hi-IN`| |**Hungarian (Hungary)**|`hu-HU`| |**Icelandic (Iceland)**|`is-IS`| |**Indonesian (Indonesia)**|`id-ID`| |**Irish (Ireland)**|`ga-IE`| |**Italian (Italy)**|`it-IT`| |**Japanese (Japan)**|`ja-JP`| |**Javanese (Indonesia)**|`jv-ID`| |**Kannada (India)**|`kn-IN`| |**Kazakh (Kazakhstan)**|`kk-KZ`| |**Khmer (Cambodia)**|`km-KH`| |**Korean (South Korea)**|`ko-KR`| |**Lao (Laos)**|`lo-LA`| |**Latvian (Latvia)**|`lv-LV`| |**Lithuanian (Lithuania)**|`lt-LT`| |**Macedonian (North Macedonia)**|`mk-MK`| |**Malay (Malaysia)**|`ms-MY`| |**Malayalam (India)**|`ml-IN`| |**Maltese (Malta)**|`mt-MT`| |**Mandarin Chinese (China)**|`cmn-CN`| |**Mandarin Chinese (Taiwan)**|`cmn-TW`| |**Marathi (India)**|`mr-IN`| |**Mongolian (Mongolia)**|`mn-MN`| |**Nepali (Nepal)**|`ne-NP`| |**Norwegian Bokmål (Norway)**|`nb-NO`| |**Pashto (Afghanistan)**|`ps-AF`| |**Persian (Iran)**|`fa-IR`| |**Polish (Poland)**|`pl-PL`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`| |**Punjabi (India)**|`pa-IN`| |**Romanian (Romania)**|`ro-RO`| |**Russian (Russia)**|`ru-RU`| |**Serbian (Serbia)**|`sr-RS`| |**Sinhala (Sri Lanka)**|`si-LK`| |**Slovak (Slovakia)**|`sk-SK`| |**Slovenian (Slovenia)**|`sl-SI`| |**Somali (Somalia)**|`so-SO`| |**Spanish (Argentina)**|`es-AR`| |**Spanish (Bolivia)**|`es-BO`| |**Spanish (Chile)**|`es-CL`| |**Spanish (Colombia)**|`es-CO`| |**Spanish (Costa Rica)**|`es-CR`| |**Spanish (Cuba)**|`es-CU`| |**Spanish (Dominican Republic)**|`es-DO`| |**Spanish (Ecuador)**|`es-EC`| |**Spanish (El Salvador)**|`es-SV`| |**Spanish (Equatorial Guinea)**|`es-GQ`| |**Spanish (Guatemala)**|`es-GT`| |**Spanish (Honduras)**|`es-HN`| |**Spanish (Laos)**|`es-LA`| |**Spanish (Mexico)**|`es-MX`| |**Spanish (Nicaragua)**|`es-NI`| |**Spanish (Panama)**|`es-PA`| |**Spanish (Paraguay)**|`es-PY`| |**Spanish (Peru)**|`es-PE`| |**Spanish (Puerto Rico)**|`es-PR`| |**Spanish (Spain)**|`es-ES`| |**Spanish (United States)**|`es-US`| |**Spanish (Uruguay)**|`es-UY`| |**Spanish (Venezuela)**|`es-VE`| |**Sundanese (Indonesia)**|`su-ID`| |**Swahili (Kenya)**|`sw-KE`| |**Swahili (Tanzania)**|`sw-TZ`| |**Swedish (Sweden)**|`sv-SE`| |**Tamil (India)**|`ta-IN`| |**Tamil (Malaysia)**|`ta-MY`| |**Tamil (Singapore)**|`ta-SG`| |**Tamil (Sri Lanka)**|`ta-LK`| |**Telugu (India)**|`te-IN`| |**Thai (Thailand)**|`th-TH`| |**Turkish (Turkey)**|`tr-TR`| |**Ukrainian (Ukraine)**|`uk-UA`| |**Urdu (India)**|`ur-IN`| |**Urdu (Pakistan)**|`ur-PK`| |**Uzbek (Uzbekistan)**|`uz-UZ`| |**Vietnamese (Vietnam)**|`vi-VN`| |**Welsh (United Kingdom)**|`cy-GB`| |**Wu Chinese (China)**|`wuu-CN`| |**Zulu (South Africa)**|`zu-ZA`|  </details>
     * @summary Text to Speech
     * @param {AudiotextToSpeechTextToSpeechRequest} audiotextToSpeechTextToSpeechRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudioApi
     */
    public audioTextToSpeechCreate(audiotextToSpeechTextToSpeechRequest: AudiotextToSpeechTextToSpeechRequest, options?: AxiosRequestConfig) {
        return AudioApiFp(this.configuration).audioTextToSpeechCreate(audiotextToSpeechTextToSpeechRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BatchApi - axios parameter creator
 * @export
 */
export const BatchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  Launch a async Batch job, given a job name that will be used as its id.  Each request should have the same parameters as you would normally pass to a feature.   You can also pass an optional paramater `name` to help better identify each requests you send.   Example with `text`/`sentiment_analysis`:  ```json \"requests\": [     {         \"text\": \"It\'s -25 outside and I am so hot.\",         \"language\": \"en\",         \"providers\": \"google,amazon\"     },     {         \"name\": \"mixed\",         \"text\": \"Overall I am satisfied with my experience at Amazon, but two areas of major improvement needed.\",         \"language\": \"en\",         \"providers\": \"google\"     },     ... ] ```           <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Features</strong></summary>    |Feature Name|Subfeature Name| |------------|---------------| |`text`|`generation`| |`text`|`named_entity_recognition`| |`text`|`moderation`| |`text`|`embeddings`| |`text`|`summarize`| |`text`|`chat`| |`text`|`sentiment_analysis`| |`text`|`topic_extraction`| |`image`|`object_detection`| |`text`|`anonymization`| |`text`|`custom_classification`| |`text`|`spell_check`| |`translation`|`automatic_translation`| |`image`|`explicit_content`| |`translation`|`language_detection`| |`text`|`custom_named_entity_recognition`| |`text`|`keyword_extraction`| |`text`|`question_answer`| |`audio`|`text_to_speech`| |`text`|`search`| |`translation`|`document_translation`| |`text`|`code_generation`| |`text`|`syntax_analysis`| |`ocr`|`invoice_parser`| |`ocr`|`resume_parser`| |`ocr`|`receipt_parser`| |`ocr`|`identity_parser`| |`image`|`face_detection`| |`image`|`landmark_detection`| |`image`|`logo_detection`| |`image`|`anonymization`| |`image`|`generation`| |`video`|`text_detection_async`| |`audio`|`speech_to_text_async`|  </details>  
         * @summary Launch Batch Job
         * @param {string} feature 
         * @param {string} name 
         * @param {string} subfeature 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchCreate: async (feature: string, name: string, subfeature: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feature' is not null or undefined
            assertParamExists('batchCreate', 'feature', feature)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('batchCreate', 'name', name)
            // verify required parameter 'subfeature' is not null or undefined
            assertParamExists('batchCreate', 'subfeature', subfeature)
            const localVarPath = `/{feature}/{subfeature}/batch/{name}/`
                .replace(`{${"feature"}}`, encodeURIComponent(String(feature)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"subfeature"}}`, encodeURIComponent(String(subfeature)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return paginated response of requests with their status and their responses if the request succeeded or errror if failed
         * @summary Get Batch Job Result
         * @param {string} feature 
         * @param {string} name 
         * @param {string} subfeature 
         * @param {string} [name2] 
         * @param {number} [page] 
         * @param {number} [publicId] 
         * @param {'succeeded' | 'failed' | 'finished' | 'processing'} [status] * &#x60;succeeded&#x60; - Status Succeeded * &#x60;failed&#x60; - Status Failed * &#x60;finished&#x60; - Status Finished * &#x60;processing&#x60; - Status Processing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchRetrieve: async (feature: string, name: string, subfeature: string, name2?: string, page?: number, publicId?: number, status?: 'succeeded' | 'failed' | 'finished' | 'processing', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feature' is not null or undefined
            assertParamExists('batchRetrieve', 'feature', feature)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('batchRetrieve', 'name', name)
            // verify required parameter 'subfeature' is not null or undefined
            assertParamExists('batchRetrieve', 'subfeature', subfeature)
            const localVarPath = `/{feature}/{subfeature}/batch/{name}/`
                .replace(`{${"feature"}}`, encodeURIComponent(String(feature)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"subfeature"}}`, encodeURIComponent(String(subfeature)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (name2 !== undefined) {
                localVarQueryParameter['name'] = name2;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (publicId !== undefined) {
                localVarQueryParameter['public_id'] = publicId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BatchApi - functional programming interface
 * @export
 */
export const BatchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BatchApiAxiosParamCreator(configuration)
    return {
        /**
         *  Launch a async Batch job, given a job name that will be used as its id.  Each request should have the same parameters as you would normally pass to a feature.   You can also pass an optional paramater `name` to help better identify each requests you send.   Example with `text`/`sentiment_analysis`:  ```json \"requests\": [     {         \"text\": \"It\'s -25 outside and I am so hot.\",         \"language\": \"en\",         \"providers\": \"google,amazon\"     },     {         \"name\": \"mixed\",         \"text\": \"Overall I am satisfied with my experience at Amazon, but two areas of major improvement needed.\",         \"language\": \"en\",         \"providers\": \"google\"     },     ... ] ```           <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Features</strong></summary>    |Feature Name|Subfeature Name| |------------|---------------| |`text`|`generation`| |`text`|`named_entity_recognition`| |`text`|`moderation`| |`text`|`embeddings`| |`text`|`summarize`| |`text`|`chat`| |`text`|`sentiment_analysis`| |`text`|`topic_extraction`| |`image`|`object_detection`| |`text`|`anonymization`| |`text`|`custom_classification`| |`text`|`spell_check`| |`translation`|`automatic_translation`| |`image`|`explicit_content`| |`translation`|`language_detection`| |`text`|`custom_named_entity_recognition`| |`text`|`keyword_extraction`| |`text`|`question_answer`| |`audio`|`text_to_speech`| |`text`|`search`| |`translation`|`document_translation`| |`text`|`code_generation`| |`text`|`syntax_analysis`| |`ocr`|`invoice_parser`| |`ocr`|`resume_parser`| |`ocr`|`receipt_parser`| |`ocr`|`identity_parser`| |`image`|`face_detection`| |`image`|`landmark_detection`| |`image`|`logo_detection`| |`image`|`anonymization`| |`image`|`generation`| |`video`|`text_detection_async`| |`audio`|`speech_to_text_async`|  </details>  
         * @summary Launch Batch Job
         * @param {string} feature 
         * @param {string} name 
         * @param {string} subfeature 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async batchCreate(feature: string, name: string, subfeature: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchLaunchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.batchCreate(feature, name, subfeature, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return paginated response of requests with their status and their responses if the request succeeded or errror if failed
         * @summary Get Batch Job Result
         * @param {string} feature 
         * @param {string} name 
         * @param {string} subfeature 
         * @param {string} [name2] 
         * @param {number} [page] 
         * @param {number} [publicId] 
         * @param {'succeeded' | 'failed' | 'finished' | 'processing'} [status] * &#x60;succeeded&#x60; - Status Succeeded * &#x60;failed&#x60; - Status Failed * &#x60;finished&#x60; - Status Finished * &#x60;processing&#x60; - Status Processing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async batchRetrieve(feature: string, name: string, subfeature: string, name2?: string, page?: number, publicId?: number, status?: 'succeeded' | 'failed' | 'finished' | 'processing', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedBatchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.batchRetrieve(feature, name, subfeature, name2, page, publicId, status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BatchApi - factory interface
 * @export
 */
export const BatchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BatchApiFp(configuration)
    return {
        /**
         *  Launch a async Batch job, given a job name that will be used as its id.  Each request should have the same parameters as you would normally pass to a feature.   You can also pass an optional paramater `name` to help better identify each requests you send.   Example with `text`/`sentiment_analysis`:  ```json \"requests\": [     {         \"text\": \"It\'s -25 outside and I am so hot.\",         \"language\": \"en\",         \"providers\": \"google,amazon\"     },     {         \"name\": \"mixed\",         \"text\": \"Overall I am satisfied with my experience at Amazon, but two areas of major improvement needed.\",         \"language\": \"en\",         \"providers\": \"google\"     },     ... ] ```           <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Features</strong></summary>    |Feature Name|Subfeature Name| |------------|---------------| |`text`|`generation`| |`text`|`named_entity_recognition`| |`text`|`moderation`| |`text`|`embeddings`| |`text`|`summarize`| |`text`|`chat`| |`text`|`sentiment_analysis`| |`text`|`topic_extraction`| |`image`|`object_detection`| |`text`|`anonymization`| |`text`|`custom_classification`| |`text`|`spell_check`| |`translation`|`automatic_translation`| |`image`|`explicit_content`| |`translation`|`language_detection`| |`text`|`custom_named_entity_recognition`| |`text`|`keyword_extraction`| |`text`|`question_answer`| |`audio`|`text_to_speech`| |`text`|`search`| |`translation`|`document_translation`| |`text`|`code_generation`| |`text`|`syntax_analysis`| |`ocr`|`invoice_parser`| |`ocr`|`resume_parser`| |`ocr`|`receipt_parser`| |`ocr`|`identity_parser`| |`image`|`face_detection`| |`image`|`landmark_detection`| |`image`|`logo_detection`| |`image`|`anonymization`| |`image`|`generation`| |`video`|`text_detection_async`| |`audio`|`speech_to_text_async`|  </details>  
         * @summary Launch Batch Job
         * @param {string} feature 
         * @param {string} name 
         * @param {string} subfeature 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchCreate(feature: string, name: string, subfeature: string, options?: any): AxiosPromise<BatchLaunchResponse> {
            return localVarFp.batchCreate(feature, name, subfeature, options).then((request) => request(axios, basePath));
        },
        /**
         * Return paginated response of requests with their status and their responses if the request succeeded or errror if failed
         * @summary Get Batch Job Result
         * @param {string} feature 
         * @param {string} name 
         * @param {string} subfeature 
         * @param {string} [name2] 
         * @param {number} [page] 
         * @param {number} [publicId] 
         * @param {'succeeded' | 'failed' | 'finished' | 'processing'} [status] * &#x60;succeeded&#x60; - Status Succeeded * &#x60;failed&#x60; - Status Failed * &#x60;finished&#x60; - Status Finished * &#x60;processing&#x60; - Status Processing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchRetrieve(feature: string, name: string, subfeature: string, name2?: string, page?: number, publicId?: number, status?: 'succeeded' | 'failed' | 'finished' | 'processing', options?: any): AxiosPromise<PaginatedBatchResponse> {
            return localVarFp.batchRetrieve(feature, name, subfeature, name2, page, publicId, status, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BatchApi - object-oriented interface
 * @export
 * @class BatchApi
 * @extends {BaseAPI}
 */
export class BatchApi extends BaseAPI {
    /**
     *  Launch a async Batch job, given a job name that will be used as its id.  Each request should have the same parameters as you would normally pass to a feature.   You can also pass an optional paramater `name` to help better identify each requests you send.   Example with `text`/`sentiment_analysis`:  ```json \"requests\": [     {         \"text\": \"It\'s -25 outside and I am so hot.\",         \"language\": \"en\",         \"providers\": \"google,amazon\"     },     {         \"name\": \"mixed\",         \"text\": \"Overall I am satisfied with my experience at Amazon, but two areas of major improvement needed.\",         \"language\": \"en\",         \"providers\": \"google\"     },     ... ] ```           <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Features</strong></summary>    |Feature Name|Subfeature Name| |------------|---------------| |`text`|`generation`| |`text`|`named_entity_recognition`| |`text`|`moderation`| |`text`|`embeddings`| |`text`|`summarize`| |`text`|`chat`| |`text`|`sentiment_analysis`| |`text`|`topic_extraction`| |`image`|`object_detection`| |`text`|`anonymization`| |`text`|`custom_classification`| |`text`|`spell_check`| |`translation`|`automatic_translation`| |`image`|`explicit_content`| |`translation`|`language_detection`| |`text`|`custom_named_entity_recognition`| |`text`|`keyword_extraction`| |`text`|`question_answer`| |`audio`|`text_to_speech`| |`text`|`search`| |`translation`|`document_translation`| |`text`|`code_generation`| |`text`|`syntax_analysis`| |`ocr`|`invoice_parser`| |`ocr`|`resume_parser`| |`ocr`|`receipt_parser`| |`ocr`|`identity_parser`| |`image`|`face_detection`| |`image`|`landmark_detection`| |`image`|`logo_detection`| |`image`|`anonymization`| |`image`|`generation`| |`video`|`text_detection_async`| |`audio`|`speech_to_text_async`|  </details>  
     * @summary Launch Batch Job
     * @param {string} feature 
     * @param {string} name 
     * @param {string} subfeature 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public batchCreate(feature: string, name: string, subfeature: string, options?: AxiosRequestConfig) {
        return BatchApiFp(this.configuration).batchCreate(feature, name, subfeature, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return paginated response of requests with their status and their responses if the request succeeded or errror if failed
     * @summary Get Batch Job Result
     * @param {string} feature 
     * @param {string} name 
     * @param {string} subfeature 
     * @param {string} [name2] 
     * @param {number} [page] 
     * @param {number} [publicId] 
     * @param {'succeeded' | 'failed' | 'finished' | 'processing'} [status] * &#x60;succeeded&#x60; - Status Succeeded * &#x60;failed&#x60; - Status Failed * &#x60;finished&#x60; - Status Finished * &#x60;processing&#x60; - Status Processing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public batchRetrieve(feature: string, name: string, subfeature: string, name2?: string, page?: number, publicId?: number, status?: 'succeeded' | 'failed' | 'finished' | 'processing', options?: AxiosRequestConfig) {
        return BatchApiFp(this.configuration).batchRetrieve(feature, name, subfeature, name2, page, publicId, status, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ImageApi - axios parameter creator
 * @export
 */
export const ImageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**api4ai**|`v1.0.0`|25.0 (per 1000 file)|1 file   </details>  
         * @summary Anonymization
         * @param {ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest} imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageAnonymizationCreate: async (imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest: ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest' is not null or undefined
            assertParamExists('imageAnonymizationCreate', 'imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest', imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest)
            const localVarPath = `/image/anonymization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000 file)|1 file |**clarifai**|`8.0.0`|2.0 (per 1000 file)|1 file |**google**|`v1`|1.5 (per 1000 file)|1 file |**microsoft**|`v3.2`|1.0 (per 1000 file)|1 file |**sentisight**|`v3.3.1`|1.0 (per 1000 file)|1 file |**picpurify**|`v1.1`|2.0 (per 1000 file)|1 file |**api4ai**|`v1.0.0`|0.75 (per 1000 file)|1 file   </details>  
         * @summary Explicit Content Detection
         * @param {ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest} imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageExplicitContentCreate: async (imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest: ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest' is not null or undefined
            assertParamExists('imageExplicitContentCreate', 'imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest', imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest)
            const localVarPath = `/image/explicit_content`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**base64**|`latest`|0.25 (per 1 request)|1 request |**facepp**|`v3`|2.0 (per 1000 request)|1 request |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000 request)|1 request   </details>  
         * @summary Face Comparison
         * @param {ImagefaceCompareFaceCompareRequest} imagefaceCompareFaceCompareRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageFaceCompareCreate: async (imagefaceCompareFaceCompareRequest: ImagefaceCompareFaceCompareRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imagefaceCompareFaceCompareRequest' is not null or undefined
            assertParamExists('imageFaceCompareCreate', 'imagefaceCompareFaceCompareRequest', imagefaceCompareFaceCompareRequest)
            const localVarPath = `/image/face_compare`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imagefaceCompareFaceCompareRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000 file)|1 file |**clarifai**|`8.0.0`|2.0 (per 1000 file)|1 file |**google**|`v1`|1.5 (per 1000 file)|1 file |**microsoft**|`v3.2`|1.0 (per 1000 file)|1 file |**api4ai**|`v1.0.0`|0.75 (per 1000 file)|1 file |**picpurify**|`v1.1`|1.2 (per 1000 file)|1 file |**skybiometry**|`v1`|1.0 (per 1000 file)|1 file   </details>  
         * @summary Face Detection
         * @param {ImagefaceDetectionFaceDetectionRequest} imagefaceDetectionFaceDetectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageFaceDetectionCreate: async (imagefaceDetectionFaceDetectionRequest: ImagefaceDetectionFaceDetectionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imagefaceDetectionFaceDetectionRequest' is not null or undefined
            assertParamExists('imageFaceDetectionCreate', 'imagefaceDetectionFaceDetectionRequest', imagefaceDetectionFaceDetectionRequest)
            const localVarPath = `/image/face_detection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imagefaceDetectionFaceDetectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|1.0 (per 1000 file)|1 file |**microsoft**|`Face API - v1.0`|1.0 (per 1000 file)|1 file |**facepp**|`v3`|0.6 (per 1000 request)|1 request   </details>  
         * @summary Face Recognition - Add Face
         * @param {ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest} imagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageFaceRecognitionAddFaceCreate: async (imagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest: ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest' is not null or undefined
            assertParamExists('imageFaceRecognitionAddFaceCreate', 'imagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest', imagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest)
            const localVarPath = `/image/face_recognition/add_face`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|free|- |**microsoft**|`Face API - v1.0`|free|- |**facepp**|`v3`|0.1 (per 1000 request)|1 request   </details>  
         * @summary Face Recognition - Delete Face
         * @param {ImagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest} imagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageFaceRecognitionDeleteFaceCreate: async (imagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest: ImagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest' is not null or undefined
            assertParamExists('imageFaceRecognitionDeleteFaceCreate', 'imagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest', imagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest)
            const localVarPath = `/image/face_recognition/delete_face`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|free|- |**microsoft**|`Face API - v1.0`|free|- |**facepp**|`v3`|0.1 (per 1000 request)|1 request   </details>  
         * @summary Face Recognition - List Faces
         * @param {string} providers It can be one (ex: **\&#39;amazon\&#39;** or **\&#39;google\&#39;**) or multiple provider(s) (ex: **\&#39;amazon,microsoft,google\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {boolean} [attributesAsList] Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : &lt;br&gt;      &#x60;&#x60;&#x60;{\&#39;items\&#39;: [{\&#39;attribute_1\&#39;: \&#39;x1\&#39;,\&#39;attribute_2\&#39;: \&#39;y2\&#39;}, ... ]}&#x60;&#x60;&#x60; &lt;br&gt;      When it is set to **true**, the response contains an object with each attribute as a list : &lt;br&gt;      &#x60;&#x60;&#x60;{ \&#39;attribute_1\&#39;: [\&#39;x1\&#39;,\&#39;x2\&#39;, ...], \&#39;attribute_2\&#39;: [y1, y2, ...]}&#x60;&#x60;&#x60; 
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\&#39;t fail.   *Doesn\&#39;t work with async subfeatures.*     
         * @param {boolean} [responseAsDict] Optional : When set to **true** (default), the response is an object of responses with providers names as keys : &lt;br&gt;                    &#x60;&#x60;&#x60; {\&#39;google\&#39; : { \&#39;status\&#39;: \&#39;success\&#39;, ... }, } &#x60;&#x60;&#x60; &lt;br&gt;                 When set to **false** the response structure is a list of response objects : &lt;br&gt;                     &#x60;&#x60;&#x60; [{\&#39;status\&#39;: \&#39;success\&#39;, \&#39;provider\&#39;: \&#39;google\&#39; ... }, ] &#x60;&#x60;&#x60;. &lt;br&gt;                    
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageFaceRecognitionListFacesRetrieve: async (providers: string, attributesAsList?: boolean, fallbackProviders?: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providers' is not null or undefined
            assertParamExists('imageFaceRecognitionListFacesRetrieve', 'providers', providers)
            const localVarPath = `/image/face_recognition/list_faces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (attributesAsList !== undefined) {
                localVarQueryParameter['attributes_as_list'] = attributesAsList;
            }

            if (fallbackProviders !== undefined) {
                localVarQueryParameter['fallback_providers'] = fallbackProviders;
            }

            if (providers !== undefined) {
                localVarQueryParameter['providers'] = providers;
            }

            if (responseAsDict !== undefined) {
                localVarQueryParameter['response_as_dict'] = responseAsDict;
            }

            if (showOriginalResponse !== undefined) {
                localVarQueryParameter['show_original_response'] = showOriginalResponse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|1.0 (per 1000 file)|1 file |**microsoft**|`Face API - v1.0`|1.0 (per 1000 file)|1 file |**facepp**|`v3`|2.0 (per 1000 request)|1 request   </details>  
         * @summary Face Recognition - Recognize Face
         * @param {ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest} imagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageFaceRecognitionRecognizeCreate: async (imagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest: ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest' is not null or undefined
            assertParamExists('imageFaceRecognitionRecognizeCreate', 'imagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest', imagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest)
            const localVarPath = `/image/face_recognition/recognize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Resolution|Price|Billing unit| |----|-------|------|-----|------------| |**deepai**|`v1Beta`|-|0.05 (per 1 request)|1 request |**openai**|`v1Beta`|`256x256`|0.016 (per 1 image)|1 image |**openai**|`v1Beta`|`512x512`|0.018 (per 1 image)|1 image |**openai**|`v1Beta`|`1024x1024`|0.02 (per 1 image)|1 image |**stabilityai**|`v1Beta`|`512x512`|0.004 (per 1 image)|1 image |**stabilityai**|`v1Beta`|`1024x1024`|0.032 (per 1 image)|1 image   </details>  
         * @summary Image generation
         * @param {ImagegenerationGenerationRequest} imagegenerationGenerationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageGenerationCreate: async (imagegenerationGenerationRequest: ImagegenerationGenerationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imagegenerationGenerationRequest' is not null or undefined
            assertParamExists('imageGenerationCreate', 'imagegenerationGenerationRequest', imagegenerationGenerationRequest)
            const localVarPath = `/image/generation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imagegenerationGenerationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**google**|`v1`|1.5 (per 1000 file)|1 file |**microsoft**|`v3.2`|1.0 (per 1000 file)|1 file   </details>  
         * @summary Landmark Detection
         * @param {ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest} imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageLandmarkDetectionCreate: async (imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest: ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest' is not null or undefined
            assertParamExists('imageLandmarkDetectionCreate', 'imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest', imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest)
            const localVarPath = `/image/landmark_detection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**google**|`v1`|1.5 (per 1000 file)|1 file |**microsoft**|`v3.2`|1.0 (per 1000 file)|1 file |**smartclick**|`v3.2`|0.5 (per 1000 file)|1 file |**api4ai**|`v1.0.0`|0.25 (per 1000 file)|1 file |**clarifai**|`8.0.0`|2.0 (per 1000 file)|1 file   </details>  
         * @summary Logo Detection
         * @param {ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest} imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageLogoDetectionCreate: async (imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest: ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest' is not null or undefined
            assertParamExists('imageLogoDetectionCreate', 'imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest', imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest)
            const localVarPath = `/image/logo_detection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000 file)|1 file |**api4ai**|`1.9.2`|0.5 (per 1000 file)|1 file |**clarifai**|`8.0.0`|2.0 (per 1000 file)|1 file |**google**|`v1`|2.25 (per 1000 file)|1 file |**microsoft**|`v3.2`|1.0 (per 1000 file)|1 file |**sentisight**|`v3.3.1`|1.0 (per 1000 file)|1 file   </details>  
         * @summary Object Detection
         * @param {ImageobjectDetectionObjectDetectionRequest} imageobjectDetectionObjectDetectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageObjectDetectionCreate: async (imageobjectDetectionObjectDetectionRequest: ImageobjectDetectionObjectDetectionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageobjectDetectionObjectDetectionRequest' is not null or undefined
            assertParamExists('imageObjectDetectionCreate', 'imageobjectDetectionObjectDetectionRequest', imageobjectDetectionObjectDetectionRequest)
            const localVarPath = `/image/object_detection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imageobjectDetectionObjectDetectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**sentisight**|`v3.3.1`|free|-   </details>  
         * @summary Search - Delete phase
         * @param {ImagesearchdeleteImageDeleteImageRequest} imagesearchdeleteImageDeleteImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageSearchDeleteImageCreate: async (imagesearchdeleteImageDeleteImageRequest: ImagesearchdeleteImageDeleteImageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imagesearchdeleteImageDeleteImageRequest' is not null or undefined
            assertParamExists('imageSearchDeleteImageCreate', 'imagesearchdeleteImageDeleteImageRequest', imagesearchdeleteImageDeleteImageRequest)
            const localVarPath = `/image/search/delete_image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imagesearchdeleteImageDeleteImageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**sentisight**|`v3.3.1`|free|-   </details>  
         * @summary Search - get image
         * @param {string} imageName 
         * @param {string} providers It can be one (ex: **\&#39;amazon\&#39;** or **\&#39;google\&#39;**) or multiple provider(s) (ex: **\&#39;amazon,microsoft,google\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {boolean} [attributesAsList] Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : &lt;br&gt;      &#x60;&#x60;&#x60;{\&#39;items\&#39;: [{\&#39;attribute_1\&#39;: \&#39;x1\&#39;,\&#39;attribute_2\&#39;: \&#39;y2\&#39;}, ... ]}&#x60;&#x60;&#x60; &lt;br&gt;      When it is set to **true**, the response contains an object with each attribute as a list : &lt;br&gt;      &#x60;&#x60;&#x60;{ \&#39;attribute_1\&#39;: [\&#39;x1\&#39;,\&#39;x2\&#39;, ...], \&#39;attribute_2\&#39;: [y1, y2, ...]}&#x60;&#x60;&#x60; 
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\&#39;t fail.   *Doesn\&#39;t work with async subfeatures.*     
         * @param {boolean} [responseAsDict] Optional : When set to **true** (default), the response is an object of responses with providers names as keys : &lt;br&gt;                    &#x60;&#x60;&#x60; {\&#39;google\&#39; : { \&#39;status\&#39;: \&#39;success\&#39;, ... }, } &#x60;&#x60;&#x60; &lt;br&gt;                 When set to **false** the response structure is a list of response objects : &lt;br&gt;                     &#x60;&#x60;&#x60; [{\&#39;status\&#39;: \&#39;success\&#39;, \&#39;provider\&#39;: \&#39;google\&#39; ... }, ] &#x60;&#x60;&#x60;. &lt;br&gt;                    
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageSearchGetImageRetrieve: async (imageName: string, providers: string, attributesAsList?: boolean, fallbackProviders?: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageName' is not null or undefined
            assertParamExists('imageSearchGetImageRetrieve', 'imageName', imageName)
            // verify required parameter 'providers' is not null or undefined
            assertParamExists('imageSearchGetImageRetrieve', 'providers', providers)
            const localVarPath = `/image/search/get_image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (attributesAsList !== undefined) {
                localVarQueryParameter['attributes_as_list'] = attributesAsList;
            }

            if (fallbackProviders !== undefined) {
                localVarQueryParameter['fallback_providers'] = fallbackProviders;
            }

            if (imageName !== undefined) {
                localVarQueryParameter['image_name'] = imageName;
            }

            if (providers !== undefined) {
                localVarQueryParameter['providers'] = providers;
            }

            if (responseAsDict !== undefined) {
                localVarQueryParameter['response_as_dict'] = responseAsDict;
            }

            if (showOriginalResponse !== undefined) {
                localVarQueryParameter['show_original_response'] = showOriginalResponse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**sentisight**|`v3.3.1`|free|-   </details>  
         * @summary Search - list all images
         * @param {string} providers It can be one (ex: **\&#39;amazon\&#39;** or **\&#39;google\&#39;**) or multiple provider(s) (ex: **\&#39;amazon,microsoft,google\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {boolean} [attributesAsList] Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : &lt;br&gt;      &#x60;&#x60;&#x60;{\&#39;items\&#39;: [{\&#39;attribute_1\&#39;: \&#39;x1\&#39;,\&#39;attribute_2\&#39;: \&#39;y2\&#39;}, ... ]}&#x60;&#x60;&#x60; &lt;br&gt;      When it is set to **true**, the response contains an object with each attribute as a list : &lt;br&gt;      &#x60;&#x60;&#x60;{ \&#39;attribute_1\&#39;: [\&#39;x1\&#39;,\&#39;x2\&#39;, ...], \&#39;attribute_2\&#39;: [y1, y2, ...]}&#x60;&#x60;&#x60; 
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\&#39;t fail.   *Doesn\&#39;t work with async subfeatures.*     
         * @param {boolean} [responseAsDict] Optional : When set to **true** (default), the response is an object of responses with providers names as keys : &lt;br&gt;                    &#x60;&#x60;&#x60; {\&#39;google\&#39; : { \&#39;status\&#39;: \&#39;success\&#39;, ... }, } &#x60;&#x60;&#x60; &lt;br&gt;                 When set to **false** the response structure is a list of response objects : &lt;br&gt;                     &#x60;&#x60;&#x60; [{\&#39;status\&#39;: \&#39;success\&#39;, \&#39;provider\&#39;: \&#39;google\&#39; ... }, ] &#x60;&#x60;&#x60;. &lt;br&gt;                    
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageSearchGetImagesRetrieve: async (providers: string, attributesAsList?: boolean, fallbackProviders?: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providers' is not null or undefined
            assertParamExists('imageSearchGetImagesRetrieve', 'providers', providers)
            const localVarPath = `/image/search/get_images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (attributesAsList !== undefined) {
                localVarQueryParameter['attributes_as_list'] = attributesAsList;
            }

            if (fallbackProviders !== undefined) {
                localVarQueryParameter['fallback_providers'] = fallbackProviders;
            }

            if (providers !== undefined) {
                localVarQueryParameter['providers'] = providers;
            }

            if (responseAsDict !== undefined) {
                localVarQueryParameter['response_as_dict'] = responseAsDict;
            }

            if (showOriginalResponse !== undefined) {
                localVarQueryParameter['show_original_response'] = showOriginalResponse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**sentisight**|`v3.3.1`|1.0 (per 1000 file)|1 file   </details>  
         * @summary Search - launch similarity
         * @param {ImagesearchlaunchSimilaritySearchImageRequest} imagesearchlaunchSimilaritySearchImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageSearchLaunchSimilarityCreate: async (imagesearchlaunchSimilaritySearchImageRequest: ImagesearchlaunchSimilaritySearchImageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imagesearchlaunchSimilaritySearchImageRequest' is not null or undefined
            assertParamExists('imageSearchLaunchSimilarityCreate', 'imagesearchlaunchSimilaritySearchImageRequest', imagesearchlaunchSimilaritySearchImageRequest)
            const localVarPath = `/image/search/launch_similarity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imagesearchlaunchSimilaritySearchImageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**sentisight**|`v3.3.1`|1.0 (per 1000 file)|1 file   </details>  
         * @summary Search - Upload Phase
         * @param {ImagesearchuploadImageUploadImageRequest} imagesearchuploadImageUploadImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageSearchUploadImageCreate: async (imagesearchuploadImageUploadImageRequest: ImagesearchuploadImageUploadImageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imagesearchuploadImageUploadImageRequest' is not null or undefined
            assertParamExists('imageSearchUploadImageCreate', 'imagesearchuploadImageUploadImageRequest', imagesearchuploadImageUploadImageRequest)
            const localVarPath = `/image/search/upload_image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imagesearchuploadImageUploadImageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImageApi - functional programming interface
 * @export
 */
export const ImageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImageApiAxiosParamCreator(configuration)
    return {
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**api4ai**|`v1.0.0`|25.0 (per 1000 file)|1 file   </details>  
         * @summary Anonymization
         * @param {ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest} imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageAnonymizationCreate(imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest: ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageanonymizationResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageAnonymizationCreate(imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000 file)|1 file |**clarifai**|`8.0.0`|2.0 (per 1000 file)|1 file |**google**|`v1`|1.5 (per 1000 file)|1 file |**microsoft**|`v3.2`|1.0 (per 1000 file)|1 file |**sentisight**|`v3.3.1`|1.0 (per 1000 file)|1 file |**picpurify**|`v1.1`|2.0 (per 1000 file)|1 file |**api4ai**|`v1.0.0`|0.75 (per 1000 file)|1 file   </details>  
         * @summary Explicit Content Detection
         * @param {ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest} imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageExplicitContentCreate(imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest: ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageexplicitContentResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageExplicitContentCreate(imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**base64**|`latest`|0.25 (per 1 request)|1 request |**facepp**|`v3`|2.0 (per 1000 request)|1 request |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000 request)|1 request   </details>  
         * @summary Face Comparison
         * @param {ImagefaceCompareFaceCompareRequest} imagefaceCompareFaceCompareRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageFaceCompareCreate(imagefaceCompareFaceCompareRequest: ImagefaceCompareFaceCompareRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImagefaceCompareResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageFaceCompareCreate(imagefaceCompareFaceCompareRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000 file)|1 file |**clarifai**|`8.0.0`|2.0 (per 1000 file)|1 file |**google**|`v1`|1.5 (per 1000 file)|1 file |**microsoft**|`v3.2`|1.0 (per 1000 file)|1 file |**api4ai**|`v1.0.0`|0.75 (per 1000 file)|1 file |**picpurify**|`v1.1`|1.2 (per 1000 file)|1 file |**skybiometry**|`v1`|1.0 (per 1000 file)|1 file   </details>  
         * @summary Face Detection
         * @param {ImagefaceDetectionFaceDetectionRequest} imagefaceDetectionFaceDetectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageFaceDetectionCreate(imagefaceDetectionFaceDetectionRequest: ImagefaceDetectionFaceDetectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImagefaceDetectionResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageFaceDetectionCreate(imagefaceDetectionFaceDetectionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|1.0 (per 1000 file)|1 file |**microsoft**|`Face API - v1.0`|1.0 (per 1000 file)|1 file |**facepp**|`v3`|0.6 (per 1000 request)|1 request   </details>  
         * @summary Face Recognition - Add Face
         * @param {ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest} imagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageFaceRecognitionAddFaceCreate(imagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest: ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImagefaceRecognitionResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageFaceRecognitionAddFaceCreate(imagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|free|- |**microsoft**|`Face API - v1.0`|free|- |**facepp**|`v3`|0.1 (per 1000 request)|1 request   </details>  
         * @summary Face Recognition - Delete Face
         * @param {ImagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest} imagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageFaceRecognitionDeleteFaceCreate(imagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest: ImagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImagefaceRecognitionResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageFaceRecognitionDeleteFaceCreate(imagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|free|- |**microsoft**|`Face API - v1.0`|free|- |**facepp**|`v3`|0.1 (per 1000 request)|1 request   </details>  
         * @summary Face Recognition - List Faces
         * @param {string} providers It can be one (ex: **\&#39;amazon\&#39;** or **\&#39;google\&#39;**) or multiple provider(s) (ex: **\&#39;amazon,microsoft,google\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {boolean} [attributesAsList] Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : &lt;br&gt;      &#x60;&#x60;&#x60;{\&#39;items\&#39;: [{\&#39;attribute_1\&#39;: \&#39;x1\&#39;,\&#39;attribute_2\&#39;: \&#39;y2\&#39;}, ... ]}&#x60;&#x60;&#x60; &lt;br&gt;      When it is set to **true**, the response contains an object with each attribute as a list : &lt;br&gt;      &#x60;&#x60;&#x60;{ \&#39;attribute_1\&#39;: [\&#39;x1\&#39;,\&#39;x2\&#39;, ...], \&#39;attribute_2\&#39;: [y1, y2, ...]}&#x60;&#x60;&#x60; 
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\&#39;t fail.   *Doesn\&#39;t work with async subfeatures.*     
         * @param {boolean} [responseAsDict] Optional : When set to **true** (default), the response is an object of responses with providers names as keys : &lt;br&gt;                    &#x60;&#x60;&#x60; {\&#39;google\&#39; : { \&#39;status\&#39;: \&#39;success\&#39;, ... }, } &#x60;&#x60;&#x60; &lt;br&gt;                 When set to **false** the response structure is a list of response objects : &lt;br&gt;                     &#x60;&#x60;&#x60; [{\&#39;status\&#39;: \&#39;success\&#39;, \&#39;provider\&#39;: \&#39;google\&#39; ... }, ] &#x60;&#x60;&#x60;. &lt;br&gt;                    
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageFaceRecognitionListFacesRetrieve(providers: string, attributesAsList?: boolean, fallbackProviders?: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImagefaceRecognitionResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageFaceRecognitionListFacesRetrieve(providers, attributesAsList, fallbackProviders, responseAsDict, showOriginalResponse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|1.0 (per 1000 file)|1 file |**microsoft**|`Face API - v1.0`|1.0 (per 1000 file)|1 file |**facepp**|`v3`|2.0 (per 1000 request)|1 request   </details>  
         * @summary Face Recognition - Recognize Face
         * @param {ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest} imagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageFaceRecognitionRecognizeCreate(imagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest: ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImagefaceRecognitionResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageFaceRecognitionRecognizeCreate(imagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Resolution|Price|Billing unit| |----|-------|------|-----|------------| |**deepai**|`v1Beta`|-|0.05 (per 1 request)|1 request |**openai**|`v1Beta`|`256x256`|0.016 (per 1 image)|1 image |**openai**|`v1Beta`|`512x512`|0.018 (per 1 image)|1 image |**openai**|`v1Beta`|`1024x1024`|0.02 (per 1 image)|1 image |**stabilityai**|`v1Beta`|`512x512`|0.004 (per 1 image)|1 image |**stabilityai**|`v1Beta`|`1024x1024`|0.032 (per 1 image)|1 image   </details>  
         * @summary Image generation
         * @param {ImagegenerationGenerationRequest} imagegenerationGenerationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageGenerationCreate(imagegenerationGenerationRequest: ImagegenerationGenerationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImagegenerationResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageGenerationCreate(imagegenerationGenerationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**google**|`v1`|1.5 (per 1000 file)|1 file |**microsoft**|`v3.2`|1.0 (per 1000 file)|1 file   </details>  
         * @summary Landmark Detection
         * @param {ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest} imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageLandmarkDetectionCreate(imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest: ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImagelandmarkDetectionResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageLandmarkDetectionCreate(imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**google**|`v1`|1.5 (per 1000 file)|1 file |**microsoft**|`v3.2`|1.0 (per 1000 file)|1 file |**smartclick**|`v3.2`|0.5 (per 1000 file)|1 file |**api4ai**|`v1.0.0`|0.25 (per 1000 file)|1 file |**clarifai**|`8.0.0`|2.0 (per 1000 file)|1 file   </details>  
         * @summary Logo Detection
         * @param {ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest} imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageLogoDetectionCreate(imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest: ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImagelogoDetectionResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageLogoDetectionCreate(imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000 file)|1 file |**api4ai**|`1.9.2`|0.5 (per 1000 file)|1 file |**clarifai**|`8.0.0`|2.0 (per 1000 file)|1 file |**google**|`v1`|2.25 (per 1000 file)|1 file |**microsoft**|`v3.2`|1.0 (per 1000 file)|1 file |**sentisight**|`v3.3.1`|1.0 (per 1000 file)|1 file   </details>  
         * @summary Object Detection
         * @param {ImageobjectDetectionObjectDetectionRequest} imageobjectDetectionObjectDetectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageObjectDetectionCreate(imageobjectDetectionObjectDetectionRequest: ImageobjectDetectionObjectDetectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageobjectDetectionResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageObjectDetectionCreate(imageobjectDetectionObjectDetectionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**sentisight**|`v3.3.1`|free|-   </details>  
         * @summary Search - Delete phase
         * @param {ImagesearchdeleteImageDeleteImageRequest} imagesearchdeleteImageDeleteImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageSearchDeleteImageCreate(imagesearchdeleteImageDeleteImageRequest: ImagesearchdeleteImageDeleteImageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImagesearchResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageSearchDeleteImageCreate(imagesearchdeleteImageDeleteImageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**sentisight**|`v3.3.1`|free|-   </details>  
         * @summary Search - get image
         * @param {string} imageName 
         * @param {string} providers It can be one (ex: **\&#39;amazon\&#39;** or **\&#39;google\&#39;**) or multiple provider(s) (ex: **\&#39;amazon,microsoft,google\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {boolean} [attributesAsList] Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : &lt;br&gt;      &#x60;&#x60;&#x60;{\&#39;items\&#39;: [{\&#39;attribute_1\&#39;: \&#39;x1\&#39;,\&#39;attribute_2\&#39;: \&#39;y2\&#39;}, ... ]}&#x60;&#x60;&#x60; &lt;br&gt;      When it is set to **true**, the response contains an object with each attribute as a list : &lt;br&gt;      &#x60;&#x60;&#x60;{ \&#39;attribute_1\&#39;: [\&#39;x1\&#39;,\&#39;x2\&#39;, ...], \&#39;attribute_2\&#39;: [y1, y2, ...]}&#x60;&#x60;&#x60; 
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\&#39;t fail.   *Doesn\&#39;t work with async subfeatures.*     
         * @param {boolean} [responseAsDict] Optional : When set to **true** (default), the response is an object of responses with providers names as keys : &lt;br&gt;                    &#x60;&#x60;&#x60; {\&#39;google\&#39; : { \&#39;status\&#39;: \&#39;success\&#39;, ... }, } &#x60;&#x60;&#x60; &lt;br&gt;                 When set to **false** the response structure is a list of response objects : &lt;br&gt;                     &#x60;&#x60;&#x60; [{\&#39;status\&#39;: \&#39;success\&#39;, \&#39;provider\&#39;: \&#39;google\&#39; ... }, ] &#x60;&#x60;&#x60;. &lt;br&gt;                    
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageSearchGetImageRetrieve(imageName: string, providers: string, attributesAsList?: boolean, fallbackProviders?: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImagesearchResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageSearchGetImageRetrieve(imageName, providers, attributesAsList, fallbackProviders, responseAsDict, showOriginalResponse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**sentisight**|`v3.3.1`|free|-   </details>  
         * @summary Search - list all images
         * @param {string} providers It can be one (ex: **\&#39;amazon\&#39;** or **\&#39;google\&#39;**) or multiple provider(s) (ex: **\&#39;amazon,microsoft,google\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {boolean} [attributesAsList] Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : &lt;br&gt;      &#x60;&#x60;&#x60;{\&#39;items\&#39;: [{\&#39;attribute_1\&#39;: \&#39;x1\&#39;,\&#39;attribute_2\&#39;: \&#39;y2\&#39;}, ... ]}&#x60;&#x60;&#x60; &lt;br&gt;      When it is set to **true**, the response contains an object with each attribute as a list : &lt;br&gt;      &#x60;&#x60;&#x60;{ \&#39;attribute_1\&#39;: [\&#39;x1\&#39;,\&#39;x2\&#39;, ...], \&#39;attribute_2\&#39;: [y1, y2, ...]}&#x60;&#x60;&#x60; 
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\&#39;t fail.   *Doesn\&#39;t work with async subfeatures.*     
         * @param {boolean} [responseAsDict] Optional : When set to **true** (default), the response is an object of responses with providers names as keys : &lt;br&gt;                    &#x60;&#x60;&#x60; {\&#39;google\&#39; : { \&#39;status\&#39;: \&#39;success\&#39;, ... }, } &#x60;&#x60;&#x60; &lt;br&gt;                 When set to **false** the response structure is a list of response objects : &lt;br&gt;                     &#x60;&#x60;&#x60; [{\&#39;status\&#39;: \&#39;success\&#39;, \&#39;provider\&#39;: \&#39;google\&#39; ... }, ] &#x60;&#x60;&#x60;. &lt;br&gt;                    
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageSearchGetImagesRetrieve(providers: string, attributesAsList?: boolean, fallbackProviders?: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImagesearchResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageSearchGetImagesRetrieve(providers, attributesAsList, fallbackProviders, responseAsDict, showOriginalResponse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**sentisight**|`v3.3.1`|1.0 (per 1000 file)|1 file   </details>  
         * @summary Search - launch similarity
         * @param {ImagesearchlaunchSimilaritySearchImageRequest} imagesearchlaunchSimilaritySearchImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageSearchLaunchSimilarityCreate(imagesearchlaunchSimilaritySearchImageRequest: ImagesearchlaunchSimilaritySearchImageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImagesearchResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageSearchLaunchSimilarityCreate(imagesearchlaunchSimilaritySearchImageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**sentisight**|`v3.3.1`|1.0 (per 1000 file)|1 file   </details>  
         * @summary Search - Upload Phase
         * @param {ImagesearchuploadImageUploadImageRequest} imagesearchuploadImageUploadImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageSearchUploadImageCreate(imagesearchuploadImageUploadImageRequest: ImagesearchuploadImageUploadImageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImagesearchResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageSearchUploadImageCreate(imagesearchuploadImageUploadImageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ImageApi - factory interface
 * @export
 */
export const ImageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImageApiFp(configuration)
    return {
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**api4ai**|`v1.0.0`|25.0 (per 1000 file)|1 file   </details>  
         * @summary Anonymization
         * @param {ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest} imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageAnonymizationCreate(imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest: ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, options?: any): AxiosPromise<ImageanonymizationResponseModel> {
            return localVarFp.imageAnonymizationCreate(imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000 file)|1 file |**clarifai**|`8.0.0`|2.0 (per 1000 file)|1 file |**google**|`v1`|1.5 (per 1000 file)|1 file |**microsoft**|`v3.2`|1.0 (per 1000 file)|1 file |**sentisight**|`v3.3.1`|1.0 (per 1000 file)|1 file |**picpurify**|`v1.1`|2.0 (per 1000 file)|1 file |**api4ai**|`v1.0.0`|0.75 (per 1000 file)|1 file   </details>  
         * @summary Explicit Content Detection
         * @param {ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest} imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageExplicitContentCreate(imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest: ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, options?: any): AxiosPromise<ImageexplicitContentResponseModel> {
            return localVarFp.imageExplicitContentCreate(imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**base64**|`latest`|0.25 (per 1 request)|1 request |**facepp**|`v3`|2.0 (per 1000 request)|1 request |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000 request)|1 request   </details>  
         * @summary Face Comparison
         * @param {ImagefaceCompareFaceCompareRequest} imagefaceCompareFaceCompareRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageFaceCompareCreate(imagefaceCompareFaceCompareRequest: ImagefaceCompareFaceCompareRequest, options?: any): AxiosPromise<ImagefaceCompareResponseModel> {
            return localVarFp.imageFaceCompareCreate(imagefaceCompareFaceCompareRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000 file)|1 file |**clarifai**|`8.0.0`|2.0 (per 1000 file)|1 file |**google**|`v1`|1.5 (per 1000 file)|1 file |**microsoft**|`v3.2`|1.0 (per 1000 file)|1 file |**api4ai**|`v1.0.0`|0.75 (per 1000 file)|1 file |**picpurify**|`v1.1`|1.2 (per 1000 file)|1 file |**skybiometry**|`v1`|1.0 (per 1000 file)|1 file   </details>  
         * @summary Face Detection
         * @param {ImagefaceDetectionFaceDetectionRequest} imagefaceDetectionFaceDetectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageFaceDetectionCreate(imagefaceDetectionFaceDetectionRequest: ImagefaceDetectionFaceDetectionRequest, options?: any): AxiosPromise<ImagefaceDetectionResponseModel> {
            return localVarFp.imageFaceDetectionCreate(imagefaceDetectionFaceDetectionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|1.0 (per 1000 file)|1 file |**microsoft**|`Face API - v1.0`|1.0 (per 1000 file)|1 file |**facepp**|`v3`|0.6 (per 1000 request)|1 request   </details>  
         * @summary Face Recognition - Add Face
         * @param {ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest} imagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageFaceRecognitionAddFaceCreate(imagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest: ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest, options?: any): AxiosPromise<ImagefaceRecognitionResponseModel> {
            return localVarFp.imageFaceRecognitionAddFaceCreate(imagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|free|- |**microsoft**|`Face API - v1.0`|free|- |**facepp**|`v3`|0.1 (per 1000 request)|1 request   </details>  
         * @summary Face Recognition - Delete Face
         * @param {ImagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest} imagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageFaceRecognitionDeleteFaceCreate(imagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest: ImagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest, options?: any): AxiosPromise<ImagefaceRecognitionResponseModel> {
            return localVarFp.imageFaceRecognitionDeleteFaceCreate(imagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|free|- |**microsoft**|`Face API - v1.0`|free|- |**facepp**|`v3`|0.1 (per 1000 request)|1 request   </details>  
         * @summary Face Recognition - List Faces
         * @param {string} providers It can be one (ex: **\&#39;amazon\&#39;** or **\&#39;google\&#39;**) or multiple provider(s) (ex: **\&#39;amazon,microsoft,google\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {boolean} [attributesAsList] Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : &lt;br&gt;      &#x60;&#x60;&#x60;{\&#39;items\&#39;: [{\&#39;attribute_1\&#39;: \&#39;x1\&#39;,\&#39;attribute_2\&#39;: \&#39;y2\&#39;}, ... ]}&#x60;&#x60;&#x60; &lt;br&gt;      When it is set to **true**, the response contains an object with each attribute as a list : &lt;br&gt;      &#x60;&#x60;&#x60;{ \&#39;attribute_1\&#39;: [\&#39;x1\&#39;,\&#39;x2\&#39;, ...], \&#39;attribute_2\&#39;: [y1, y2, ...]}&#x60;&#x60;&#x60; 
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\&#39;t fail.   *Doesn\&#39;t work with async subfeatures.*     
         * @param {boolean} [responseAsDict] Optional : When set to **true** (default), the response is an object of responses with providers names as keys : &lt;br&gt;                    &#x60;&#x60;&#x60; {\&#39;google\&#39; : { \&#39;status\&#39;: \&#39;success\&#39;, ... }, } &#x60;&#x60;&#x60; &lt;br&gt;                 When set to **false** the response structure is a list of response objects : &lt;br&gt;                     &#x60;&#x60;&#x60; [{\&#39;status\&#39;: \&#39;success\&#39;, \&#39;provider\&#39;: \&#39;google\&#39; ... }, ] &#x60;&#x60;&#x60;. &lt;br&gt;                    
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageFaceRecognitionListFacesRetrieve(providers: string, attributesAsList?: boolean, fallbackProviders?: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: any): AxiosPromise<ImagefaceRecognitionResponseModel> {
            return localVarFp.imageFaceRecognitionListFacesRetrieve(providers, attributesAsList, fallbackProviders, responseAsDict, showOriginalResponse, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|1.0 (per 1000 file)|1 file |**microsoft**|`Face API - v1.0`|1.0 (per 1000 file)|1 file |**facepp**|`v3`|2.0 (per 1000 request)|1 request   </details>  
         * @summary Face Recognition - Recognize Face
         * @param {ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest} imagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageFaceRecognitionRecognizeCreate(imagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest: ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest, options?: any): AxiosPromise<ImagefaceRecognitionResponseModel> {
            return localVarFp.imageFaceRecognitionRecognizeCreate(imagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Resolution|Price|Billing unit| |----|-------|------|-----|------------| |**deepai**|`v1Beta`|-|0.05 (per 1 request)|1 request |**openai**|`v1Beta`|`256x256`|0.016 (per 1 image)|1 image |**openai**|`v1Beta`|`512x512`|0.018 (per 1 image)|1 image |**openai**|`v1Beta`|`1024x1024`|0.02 (per 1 image)|1 image |**stabilityai**|`v1Beta`|`512x512`|0.004 (per 1 image)|1 image |**stabilityai**|`v1Beta`|`1024x1024`|0.032 (per 1 image)|1 image   </details>  
         * @summary Image generation
         * @param {ImagegenerationGenerationRequest} imagegenerationGenerationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageGenerationCreate(imagegenerationGenerationRequest: ImagegenerationGenerationRequest, options?: any): AxiosPromise<ImagegenerationResponseModel> {
            return localVarFp.imageGenerationCreate(imagegenerationGenerationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**google**|`v1`|1.5 (per 1000 file)|1 file |**microsoft**|`v3.2`|1.0 (per 1000 file)|1 file   </details>  
         * @summary Landmark Detection
         * @param {ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest} imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageLandmarkDetectionCreate(imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest: ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, options?: any): AxiosPromise<ImagelandmarkDetectionResponseModel> {
            return localVarFp.imageLandmarkDetectionCreate(imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**google**|`v1`|1.5 (per 1000 file)|1 file |**microsoft**|`v3.2`|1.0 (per 1000 file)|1 file |**smartclick**|`v3.2`|0.5 (per 1000 file)|1 file |**api4ai**|`v1.0.0`|0.25 (per 1000 file)|1 file |**clarifai**|`8.0.0`|2.0 (per 1000 file)|1 file   </details>  
         * @summary Logo Detection
         * @param {ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest} imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageLogoDetectionCreate(imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest: ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, options?: any): AxiosPromise<ImagelogoDetectionResponseModel> {
            return localVarFp.imageLogoDetectionCreate(imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000 file)|1 file |**api4ai**|`1.9.2`|0.5 (per 1000 file)|1 file |**clarifai**|`8.0.0`|2.0 (per 1000 file)|1 file |**google**|`v1`|2.25 (per 1000 file)|1 file |**microsoft**|`v3.2`|1.0 (per 1000 file)|1 file |**sentisight**|`v3.3.1`|1.0 (per 1000 file)|1 file   </details>  
         * @summary Object Detection
         * @param {ImageobjectDetectionObjectDetectionRequest} imageobjectDetectionObjectDetectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageObjectDetectionCreate(imageobjectDetectionObjectDetectionRequest: ImageobjectDetectionObjectDetectionRequest, options?: any): AxiosPromise<ImageobjectDetectionResponseModel> {
            return localVarFp.imageObjectDetectionCreate(imageobjectDetectionObjectDetectionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**sentisight**|`v3.3.1`|free|-   </details>  
         * @summary Search - Delete phase
         * @param {ImagesearchdeleteImageDeleteImageRequest} imagesearchdeleteImageDeleteImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageSearchDeleteImageCreate(imagesearchdeleteImageDeleteImageRequest: ImagesearchdeleteImageDeleteImageRequest, options?: any): AxiosPromise<ImagesearchResponseModel> {
            return localVarFp.imageSearchDeleteImageCreate(imagesearchdeleteImageDeleteImageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**sentisight**|`v3.3.1`|free|-   </details>  
         * @summary Search - get image
         * @param {string} imageName 
         * @param {string} providers It can be one (ex: **\&#39;amazon\&#39;** or **\&#39;google\&#39;**) or multiple provider(s) (ex: **\&#39;amazon,microsoft,google\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {boolean} [attributesAsList] Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : &lt;br&gt;      &#x60;&#x60;&#x60;{\&#39;items\&#39;: [{\&#39;attribute_1\&#39;: \&#39;x1\&#39;,\&#39;attribute_2\&#39;: \&#39;y2\&#39;}, ... ]}&#x60;&#x60;&#x60; &lt;br&gt;      When it is set to **true**, the response contains an object with each attribute as a list : &lt;br&gt;      &#x60;&#x60;&#x60;{ \&#39;attribute_1\&#39;: [\&#39;x1\&#39;,\&#39;x2\&#39;, ...], \&#39;attribute_2\&#39;: [y1, y2, ...]}&#x60;&#x60;&#x60; 
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\&#39;t fail.   *Doesn\&#39;t work with async subfeatures.*     
         * @param {boolean} [responseAsDict] Optional : When set to **true** (default), the response is an object of responses with providers names as keys : &lt;br&gt;                    &#x60;&#x60;&#x60; {\&#39;google\&#39; : { \&#39;status\&#39;: \&#39;success\&#39;, ... }, } &#x60;&#x60;&#x60; &lt;br&gt;                 When set to **false** the response structure is a list of response objects : &lt;br&gt;                     &#x60;&#x60;&#x60; [{\&#39;status\&#39;: \&#39;success\&#39;, \&#39;provider\&#39;: \&#39;google\&#39; ... }, ] &#x60;&#x60;&#x60;. &lt;br&gt;                    
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageSearchGetImageRetrieve(imageName: string, providers: string, attributesAsList?: boolean, fallbackProviders?: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: any): AxiosPromise<ImagesearchResponseModel> {
            return localVarFp.imageSearchGetImageRetrieve(imageName, providers, attributesAsList, fallbackProviders, responseAsDict, showOriginalResponse, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**sentisight**|`v3.3.1`|free|-   </details>  
         * @summary Search - list all images
         * @param {string} providers It can be one (ex: **\&#39;amazon\&#39;** or **\&#39;google\&#39;**) or multiple provider(s) (ex: **\&#39;amazon,microsoft,google\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {boolean} [attributesAsList] Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : &lt;br&gt;      &#x60;&#x60;&#x60;{\&#39;items\&#39;: [{\&#39;attribute_1\&#39;: \&#39;x1\&#39;,\&#39;attribute_2\&#39;: \&#39;y2\&#39;}, ... ]}&#x60;&#x60;&#x60; &lt;br&gt;      When it is set to **true**, the response contains an object with each attribute as a list : &lt;br&gt;      &#x60;&#x60;&#x60;{ \&#39;attribute_1\&#39;: [\&#39;x1\&#39;,\&#39;x2\&#39;, ...], \&#39;attribute_2\&#39;: [y1, y2, ...]}&#x60;&#x60;&#x60; 
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\&#39;t fail.   *Doesn\&#39;t work with async subfeatures.*     
         * @param {boolean} [responseAsDict] Optional : When set to **true** (default), the response is an object of responses with providers names as keys : &lt;br&gt;                    &#x60;&#x60;&#x60; {\&#39;google\&#39; : { \&#39;status\&#39;: \&#39;success\&#39;, ... }, } &#x60;&#x60;&#x60; &lt;br&gt;                 When set to **false** the response structure is a list of response objects : &lt;br&gt;                     &#x60;&#x60;&#x60; [{\&#39;status\&#39;: \&#39;success\&#39;, \&#39;provider\&#39;: \&#39;google\&#39; ... }, ] &#x60;&#x60;&#x60;. &lt;br&gt;                    
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageSearchGetImagesRetrieve(providers: string, attributesAsList?: boolean, fallbackProviders?: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: any): AxiosPromise<ImagesearchResponseModel> {
            return localVarFp.imageSearchGetImagesRetrieve(providers, attributesAsList, fallbackProviders, responseAsDict, showOriginalResponse, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**sentisight**|`v3.3.1`|1.0 (per 1000 file)|1 file   </details>  
         * @summary Search - launch similarity
         * @param {ImagesearchlaunchSimilaritySearchImageRequest} imagesearchlaunchSimilaritySearchImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageSearchLaunchSimilarityCreate(imagesearchlaunchSimilaritySearchImageRequest: ImagesearchlaunchSimilaritySearchImageRequest, options?: any): AxiosPromise<ImagesearchResponseModel> {
            return localVarFp.imageSearchLaunchSimilarityCreate(imagesearchlaunchSimilaritySearchImageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**sentisight**|`v3.3.1`|1.0 (per 1000 file)|1 file   </details>  
         * @summary Search - Upload Phase
         * @param {ImagesearchuploadImageUploadImageRequest} imagesearchuploadImageUploadImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageSearchUploadImageCreate(imagesearchuploadImageUploadImageRequest: ImagesearchuploadImageUploadImageRequest, options?: any): AxiosPromise<ImagesearchResponseModel> {
            return localVarFp.imageSearchUploadImageCreate(imagesearchuploadImageUploadImageRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ImageApi - object-oriented interface
 * @export
 * @class ImageApi
 * @extends {BaseAPI}
 */
export class ImageApi extends BaseAPI {
    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**api4ai**|`v1.0.0`|25.0 (per 1000 file)|1 file   </details>  
     * @summary Anonymization
     * @param {ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest} imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageAnonymizationCreate(imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest: ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageAnonymizationCreate(imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000 file)|1 file |**clarifai**|`8.0.0`|2.0 (per 1000 file)|1 file |**google**|`v1`|1.5 (per 1000 file)|1 file |**microsoft**|`v3.2`|1.0 (per 1000 file)|1 file |**sentisight**|`v3.3.1`|1.0 (per 1000 file)|1 file |**picpurify**|`v1.1`|2.0 (per 1000 file)|1 file |**api4ai**|`v1.0.0`|0.75 (per 1000 file)|1 file   </details>  
     * @summary Explicit Content Detection
     * @param {ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest} imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageExplicitContentCreate(imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest: ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageExplicitContentCreate(imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**base64**|`latest`|0.25 (per 1 request)|1 request |**facepp**|`v3`|2.0 (per 1000 request)|1 request |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000 request)|1 request   </details>  
     * @summary Face Comparison
     * @param {ImagefaceCompareFaceCompareRequest} imagefaceCompareFaceCompareRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageFaceCompareCreate(imagefaceCompareFaceCompareRequest: ImagefaceCompareFaceCompareRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageFaceCompareCreate(imagefaceCompareFaceCompareRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000 file)|1 file |**clarifai**|`8.0.0`|2.0 (per 1000 file)|1 file |**google**|`v1`|1.5 (per 1000 file)|1 file |**microsoft**|`v3.2`|1.0 (per 1000 file)|1 file |**api4ai**|`v1.0.0`|0.75 (per 1000 file)|1 file |**picpurify**|`v1.1`|1.2 (per 1000 file)|1 file |**skybiometry**|`v1`|1.0 (per 1000 file)|1 file   </details>  
     * @summary Face Detection
     * @param {ImagefaceDetectionFaceDetectionRequest} imagefaceDetectionFaceDetectionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageFaceDetectionCreate(imagefaceDetectionFaceDetectionRequest: ImagefaceDetectionFaceDetectionRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageFaceDetectionCreate(imagefaceDetectionFaceDetectionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|1.0 (per 1000 file)|1 file |**microsoft**|`Face API - v1.0`|1.0 (per 1000 file)|1 file |**facepp**|`v3`|0.6 (per 1000 request)|1 request   </details>  
     * @summary Face Recognition - Add Face
     * @param {ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest} imagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageFaceRecognitionAddFaceCreate(imagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest: ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageFaceRecognitionAddFaceCreate(imagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|free|- |**microsoft**|`Face API - v1.0`|free|- |**facepp**|`v3`|0.1 (per 1000 request)|1 request   </details>  
     * @summary Face Recognition - Delete Face
     * @param {ImagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest} imagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageFaceRecognitionDeleteFaceCreate(imagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest: ImagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageFaceRecognitionDeleteFaceCreate(imagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|free|- |**microsoft**|`Face API - v1.0`|free|- |**facepp**|`v3`|0.1 (per 1000 request)|1 request   </details>  
     * @summary Face Recognition - List Faces
     * @param {string} providers It can be one (ex: **\&#39;amazon\&#39;** or **\&#39;google\&#39;**) or multiple provider(s) (ex: **\&#39;amazon,microsoft,google\&#39;**)             that the data will be redirected to in order to get the processed results.
     * @param {boolean} [attributesAsList] Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : &lt;br&gt;      &#x60;&#x60;&#x60;{\&#39;items\&#39;: [{\&#39;attribute_1\&#39;: \&#39;x1\&#39;,\&#39;attribute_2\&#39;: \&#39;y2\&#39;}, ... ]}&#x60;&#x60;&#x60; &lt;br&gt;      When it is set to **true**, the response contains an object with each attribute as a list : &lt;br&gt;      &#x60;&#x60;&#x60;{ \&#39;attribute_1\&#39;: [\&#39;x1\&#39;,\&#39;x2\&#39;, ...], \&#39;attribute_2\&#39;: [y1, y2, ...]}&#x60;&#x60;&#x60; 
     * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\&#39;t fail.   *Doesn\&#39;t work with async subfeatures.*     
     * @param {boolean} [responseAsDict] Optional : When set to **true** (default), the response is an object of responses with providers names as keys : &lt;br&gt;                    &#x60;&#x60;&#x60; {\&#39;google\&#39; : { \&#39;status\&#39;: \&#39;success\&#39;, ... }, } &#x60;&#x60;&#x60; &lt;br&gt;                 When set to **false** the response structure is a list of response objects : &lt;br&gt;                     &#x60;&#x60;&#x60; [{\&#39;status\&#39;: \&#39;success\&#39;, \&#39;provider\&#39;: \&#39;google\&#39; ... }, ] &#x60;&#x60;&#x60;. &lt;br&gt;                    
     * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageFaceRecognitionListFacesRetrieve(providers: string, attributesAsList?: boolean, fallbackProviders?: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageFaceRecognitionListFacesRetrieve(providers, attributesAsList, fallbackProviders, responseAsDict, showOriginalResponse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|1.0 (per 1000 file)|1 file |**microsoft**|`Face API - v1.0`|1.0 (per 1000 file)|1 file |**facepp**|`v3`|2.0 (per 1000 request)|1 request   </details>  
     * @summary Face Recognition - Recognize Face
     * @param {ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest} imagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageFaceRecognitionRecognizeCreate(imagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest: ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageFaceRecognitionRecognizeCreate(imagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Resolution|Price|Billing unit| |----|-------|------|-----|------------| |**deepai**|`v1Beta`|-|0.05 (per 1 request)|1 request |**openai**|`v1Beta`|`256x256`|0.016 (per 1 image)|1 image |**openai**|`v1Beta`|`512x512`|0.018 (per 1 image)|1 image |**openai**|`v1Beta`|`1024x1024`|0.02 (per 1 image)|1 image |**stabilityai**|`v1Beta`|`512x512`|0.004 (per 1 image)|1 image |**stabilityai**|`v1Beta`|`1024x1024`|0.032 (per 1 image)|1 image   </details>  
     * @summary Image generation
     * @param {ImagegenerationGenerationRequest} imagegenerationGenerationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageGenerationCreate(imagegenerationGenerationRequest: ImagegenerationGenerationRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageGenerationCreate(imagegenerationGenerationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**google**|`v1`|1.5 (per 1000 file)|1 file |**microsoft**|`v3.2`|1.0 (per 1000 file)|1 file   </details>  
     * @summary Landmark Detection
     * @param {ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest} imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageLandmarkDetectionCreate(imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest: ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageLandmarkDetectionCreate(imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**google**|`v1`|1.5 (per 1000 file)|1 file |**microsoft**|`v3.2`|1.0 (per 1000 file)|1 file |**smartclick**|`v3.2`|0.5 (per 1000 file)|1 file |**api4ai**|`v1.0.0`|0.25 (per 1000 file)|1 file |**clarifai**|`8.0.0`|2.0 (per 1000 file)|1 file   </details>  
     * @summary Logo Detection
     * @param {ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest} imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageLogoDetectionCreate(imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest: ImageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageLogoDetectionCreate(imageanonymizationimagelogoDetectionimagelandmarkDetectionimageexplicitContentImageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000 file)|1 file |**api4ai**|`1.9.2`|0.5 (per 1000 file)|1 file |**clarifai**|`8.0.0`|2.0 (per 1000 file)|1 file |**google**|`v1`|2.25 (per 1000 file)|1 file |**microsoft**|`v3.2`|1.0 (per 1000 file)|1 file |**sentisight**|`v3.3.1`|1.0 (per 1000 file)|1 file   </details>  
     * @summary Object Detection
     * @param {ImageobjectDetectionObjectDetectionRequest} imageobjectDetectionObjectDetectionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageObjectDetectionCreate(imageobjectDetectionObjectDetectionRequest: ImageobjectDetectionObjectDetectionRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageObjectDetectionCreate(imageobjectDetectionObjectDetectionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**sentisight**|`v3.3.1`|free|-   </details>  
     * @summary Search - Delete phase
     * @param {ImagesearchdeleteImageDeleteImageRequest} imagesearchdeleteImageDeleteImageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageSearchDeleteImageCreate(imagesearchdeleteImageDeleteImageRequest: ImagesearchdeleteImageDeleteImageRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageSearchDeleteImageCreate(imagesearchdeleteImageDeleteImageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**sentisight**|`v3.3.1`|free|-   </details>  
     * @summary Search - get image
     * @param {string} imageName 
     * @param {string} providers It can be one (ex: **\&#39;amazon\&#39;** or **\&#39;google\&#39;**) or multiple provider(s) (ex: **\&#39;amazon,microsoft,google\&#39;**)             that the data will be redirected to in order to get the processed results.
     * @param {boolean} [attributesAsList] Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : &lt;br&gt;      &#x60;&#x60;&#x60;{\&#39;items\&#39;: [{\&#39;attribute_1\&#39;: \&#39;x1\&#39;,\&#39;attribute_2\&#39;: \&#39;y2\&#39;}, ... ]}&#x60;&#x60;&#x60; &lt;br&gt;      When it is set to **true**, the response contains an object with each attribute as a list : &lt;br&gt;      &#x60;&#x60;&#x60;{ \&#39;attribute_1\&#39;: [\&#39;x1\&#39;,\&#39;x2\&#39;, ...], \&#39;attribute_2\&#39;: [y1, y2, ...]}&#x60;&#x60;&#x60; 
     * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\&#39;t fail.   *Doesn\&#39;t work with async subfeatures.*     
     * @param {boolean} [responseAsDict] Optional : When set to **true** (default), the response is an object of responses with providers names as keys : &lt;br&gt;                    &#x60;&#x60;&#x60; {\&#39;google\&#39; : { \&#39;status\&#39;: \&#39;success\&#39;, ... }, } &#x60;&#x60;&#x60; &lt;br&gt;                 When set to **false** the response structure is a list of response objects : &lt;br&gt;                     &#x60;&#x60;&#x60; [{\&#39;status\&#39;: \&#39;success\&#39;, \&#39;provider\&#39;: \&#39;google\&#39; ... }, ] &#x60;&#x60;&#x60;. &lt;br&gt;                    
     * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageSearchGetImageRetrieve(imageName: string, providers: string, attributesAsList?: boolean, fallbackProviders?: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageSearchGetImageRetrieve(imageName, providers, attributesAsList, fallbackProviders, responseAsDict, showOriginalResponse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**sentisight**|`v3.3.1`|free|-   </details>  
     * @summary Search - list all images
     * @param {string} providers It can be one (ex: **\&#39;amazon\&#39;** or **\&#39;google\&#39;**) or multiple provider(s) (ex: **\&#39;amazon,microsoft,google\&#39;**)             that the data will be redirected to in order to get the processed results.
     * @param {boolean} [attributesAsList] Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : &lt;br&gt;      &#x60;&#x60;&#x60;{\&#39;items\&#39;: [{\&#39;attribute_1\&#39;: \&#39;x1\&#39;,\&#39;attribute_2\&#39;: \&#39;y2\&#39;}, ... ]}&#x60;&#x60;&#x60; &lt;br&gt;      When it is set to **true**, the response contains an object with each attribute as a list : &lt;br&gt;      &#x60;&#x60;&#x60;{ \&#39;attribute_1\&#39;: [\&#39;x1\&#39;,\&#39;x2\&#39;, ...], \&#39;attribute_2\&#39;: [y1, y2, ...]}&#x60;&#x60;&#x60; 
     * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\&#39;t fail.   *Doesn\&#39;t work with async subfeatures.*     
     * @param {boolean} [responseAsDict] Optional : When set to **true** (default), the response is an object of responses with providers names as keys : &lt;br&gt;                    &#x60;&#x60;&#x60; {\&#39;google\&#39; : { \&#39;status\&#39;: \&#39;success\&#39;, ... }, } &#x60;&#x60;&#x60; &lt;br&gt;                 When set to **false** the response structure is a list of response objects : &lt;br&gt;                     &#x60;&#x60;&#x60; [{\&#39;status\&#39;: \&#39;success\&#39;, \&#39;provider\&#39;: \&#39;google\&#39; ... }, ] &#x60;&#x60;&#x60;. &lt;br&gt;                    
     * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageSearchGetImagesRetrieve(providers: string, attributesAsList?: boolean, fallbackProviders?: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageSearchGetImagesRetrieve(providers, attributesAsList, fallbackProviders, responseAsDict, showOriginalResponse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**sentisight**|`v3.3.1`|1.0 (per 1000 file)|1 file   </details>  
     * @summary Search - launch similarity
     * @param {ImagesearchlaunchSimilaritySearchImageRequest} imagesearchlaunchSimilaritySearchImageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageSearchLaunchSimilarityCreate(imagesearchlaunchSimilaritySearchImageRequest: ImagesearchlaunchSimilaritySearchImageRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageSearchLaunchSimilarityCreate(imagesearchlaunchSimilaritySearchImageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**sentisight**|`v3.3.1`|1.0 (per 1000 file)|1 file   </details>  
     * @summary Search - Upload Phase
     * @param {ImagesearchuploadImageUploadImageRequest} imagesearchuploadImageUploadImageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageSearchUploadImageCreate(imagesearchuploadImageUploadImageRequest: ImagesearchuploadImageUploadImageRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageSearchUploadImageCreate(imagesearchuploadImageUploadImageRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InfosApi - axios parameter creator
 * @export
 */
export const InfosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List Provider and features relations : You can get a list of *all providers* for a *feature* or *all features* for a *given provider*.  You can have the detailed information on the **pricing**, **supported languages** as well as the **models** for providers who propose different models (eg: voice models available for a text to speech provider).  Example : If you want the detailed list of all providers that can analyse the sentiment of a text written in french, you\'d need to set `feature__name=text`,  `subfeature__name=sentiment_analysis` and `languages=fr`.  Which will look like the following :   ```bash curl --request GET  https://api.edenai.run/v2/info/provider_subfeatures?subfeature__name=sentiment_analysis&feature__name=text&languages=fr ```
         * @summary List Providers Subfeatures
         * @param {string} [featureName] 
         * @param {string} [gender] Accepts two values: either \&#39;male\&#39; or \&#39;female\&#39;. Used to                              filter models voices for the text_to_speech subfeature
         * @param {boolean} [isWorking] 
         * @param {string} [language] languages [icontains]
         * @param {string} [phaseName] 
         * @param {string} [providerName] 
         * @param {string} [subfeatureName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoProviderSubfeaturesList: async (featureName?: string, gender?: string, isWorking?: boolean, language?: string, phaseName?: string, providerName?: string, subfeatureName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/info/provider_subfeatures`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (featureName !== undefined) {
                localVarQueryParameter['feature__name'] = featureName;
            }

            if (gender !== undefined) {
                localVarQueryParameter['gender'] = gender;
            }

            if (isWorking !== undefined) {
                localVarQueryParameter['is_working'] = isWorking;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (phaseName !== undefined) {
                localVarQueryParameter['phase__name'] = phaseName;
            }

            if (providerName !== undefined) {
                localVarQueryParameter['provider__name'] = providerName;
            }

            if (subfeatureName !== undefined) {
                localVarQueryParameter['subfeature__name'] = subfeatureName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InfosApi - functional programming interface
 * @export
 */
export const InfosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InfosApiAxiosParamCreator(configuration)
    return {
        /**
         * List Provider and features relations : You can get a list of *all providers* for a *feature* or *all features* for a *given provider*.  You can have the detailed information on the **pricing**, **supported languages** as well as the **models** for providers who propose different models (eg: voice models available for a text to speech provider).  Example : If you want the detailed list of all providers that can analyse the sentiment of a text written in french, you\'d need to set `feature__name=text`,  `subfeature__name=sentiment_analysis` and `languages=fr`.  Which will look like the following :   ```bash curl --request GET  https://api.edenai.run/v2/info/provider_subfeatures?subfeature__name=sentiment_analysis&feature__name=text&languages=fr ```
         * @summary List Providers Subfeatures
         * @param {string} [featureName] 
         * @param {string} [gender] Accepts two values: either \&#39;male\&#39; or \&#39;female\&#39;. Used to                              filter models voices for the text_to_speech subfeature
         * @param {boolean} [isWorking] 
         * @param {string} [language] languages [icontains]
         * @param {string} [phaseName] 
         * @param {string} [providerName] 
         * @param {string} [subfeatureName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async infoProviderSubfeaturesList(featureName?: string, gender?: string, isWorking?: boolean, language?: string, phaseName?: string, providerName?: string, subfeatureName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProviderSubfeature>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.infoProviderSubfeaturesList(featureName, gender, isWorking, language, phaseName, providerName, subfeatureName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InfosApi - factory interface
 * @export
 */
export const InfosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InfosApiFp(configuration)
    return {
        /**
         * List Provider and features relations : You can get a list of *all providers* for a *feature* or *all features* for a *given provider*.  You can have the detailed information on the **pricing**, **supported languages** as well as the **models** for providers who propose different models (eg: voice models available for a text to speech provider).  Example : If you want the detailed list of all providers that can analyse the sentiment of a text written in french, you\'d need to set `feature__name=text`,  `subfeature__name=sentiment_analysis` and `languages=fr`.  Which will look like the following :   ```bash curl --request GET  https://api.edenai.run/v2/info/provider_subfeatures?subfeature__name=sentiment_analysis&feature__name=text&languages=fr ```
         * @summary List Providers Subfeatures
         * @param {string} [featureName] 
         * @param {string} [gender] Accepts two values: either \&#39;male\&#39; or \&#39;female\&#39;. Used to                              filter models voices for the text_to_speech subfeature
         * @param {boolean} [isWorking] 
         * @param {string} [language] languages [icontains]
         * @param {string} [phaseName] 
         * @param {string} [providerName] 
         * @param {string} [subfeatureName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoProviderSubfeaturesList(featureName?: string, gender?: string, isWorking?: boolean, language?: string, phaseName?: string, providerName?: string, subfeatureName?: string, options?: any): AxiosPromise<Array<ProviderSubfeature>> {
            return localVarFp.infoProviderSubfeaturesList(featureName, gender, isWorking, language, phaseName, providerName, subfeatureName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InfosApi - object-oriented interface
 * @export
 * @class InfosApi
 * @extends {BaseAPI}
 */
export class InfosApi extends BaseAPI {
    /**
     * List Provider and features relations : You can get a list of *all providers* for a *feature* or *all features* for a *given provider*.  You can have the detailed information on the **pricing**, **supported languages** as well as the **models** for providers who propose different models (eg: voice models available for a text to speech provider).  Example : If you want the detailed list of all providers that can analyse the sentiment of a text written in french, you\'d need to set `feature__name=text`,  `subfeature__name=sentiment_analysis` and `languages=fr`.  Which will look like the following :   ```bash curl --request GET  https://api.edenai.run/v2/info/provider_subfeatures?subfeature__name=sentiment_analysis&feature__name=text&languages=fr ```
     * @summary List Providers Subfeatures
     * @param {string} [featureName] 
     * @param {string} [gender] Accepts two values: either \&#39;male\&#39; or \&#39;female\&#39;. Used to                              filter models voices for the text_to_speech subfeature
     * @param {boolean} [isWorking] 
     * @param {string} [language] languages [icontains]
     * @param {string} [phaseName] 
     * @param {string} [providerName] 
     * @param {string} [subfeatureName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfosApi
     */
    public infoProviderSubfeaturesList(featureName?: string, gender?: string, isWorking?: boolean, language?: string, phaseName?: string, providerName?: string, subfeatureName?: string, options?: AxiosRequestConfig) {
        return InfosApiFp(this.configuration).infoProviderSubfeaturesList(featureName, gender, isWorking, language, phaseName, providerName, subfeatureName, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OCRApi - axios parameter creator
 * @export
 */
export const OCRApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**base64**|`latest`|0.25 (per 1 page)|1 page |**veryfi**|`v8`|0.16 (per 1 request)|1 request   </details>  
         * @summary Bank Check Parsing
         * @param {OcrbankCheckParsingBankCheckParsingRequest} ocrbankCheckParsingBankCheckParsingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrBankCheckParsingCreate: async (ocrbankCheckParsingBankCheckParsingRequest: OcrbankCheckParsingBankCheckParsingRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ocrbankCheckParsingBankCheckParsingRequest' is not null or undefined
            assertParamExists('ocrBankCheckParsingCreate', 'ocrbankCheckParsingBankCheckParsingRequest', ocrbankCheckParsingBankCheckParsingRequest)
            const localVarPath = `/ocr/bank_check_parsing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ocrbankCheckParsingBankCheckParsingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|15.0 (per 1000 page)|1 page   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**English**|`en`| |**French**|`fr`| |**German**|`de`| |**Italian**|`it`| |**Portuguese**|`pt`| |**Spanish**|`es`|  </details>
         * @summary Custom Document Parsing Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} queries Your queries need to be a list of dict containing the questions you want answered and the page to look for the information in :  \\\&#39;[{\\\&#39;query\\\&#39;:\\\&#39;your query\\\&#39;,\\\&#39;pages\\\&#39;:\\\&#39;your pages\\\&#39;},{\\\&#39;query\\\&#39;:\\\&#39;your query\\\&#39;,\\\&#39;pages\\\&#39;:\\\&#39;your pages\\\&#39;}]\\\&#39;
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrCustomDocumentParsingAsyncCreate: async (providers: string, queries: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providers' is not null or undefined
            assertParamExists('ocrCustomDocumentParsingAsyncCreate', 'providers', providers)
            // verify required parameter 'queries' is not null or undefined
            assertParamExists('ocrCustomDocumentParsingAsyncCreate', 'queries', queries)
            const localVarPath = `/ocr/custom_document_parsing_async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (providers !== undefined) { 
                localVarFormParams.append('providers', providers as any);
            }
    
            if (fallbackProviders !== undefined) { 
                localVarFormParams.append('fallback_providers', fallbackProviders as any);
            }
    
            if (showOriginalResponse !== undefined) { 
                localVarFormParams.append('show_original_response', showOriginalResponse as any);
            }
    
            if (webhookReceiver !== undefined) { 
                localVarFormParams.append('webhook_receiver', webhookReceiver as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (fileUrl !== undefined) { 
                localVarFormParams.append('file_url', fileUrl as any);
            }
    
            if (queries !== undefined) { 
                localVarFormParams.append('queries', queries as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Custom Document Parsing List Job
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrCustomDocumentParsingAsyncRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ocr/custom_document_parsing_async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Custom Document Parsing Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrCustomDocumentParsingAsyncRetrieve2: async (publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'publicId' is not null or undefined
            assertParamExists('ocrCustomDocumentParsingAsyncRetrieve2', 'publicId', publicId)
            const localVarPath = `/ocr/custom_document_parsing_async/{public_id}`
                .replace(`{${"public_id"}}`, encodeURIComponent(String(publicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (responseAsDict !== undefined) {
                localVarQueryParameter['response_as_dict'] = responseAsDict;
            }

            if (showOriginalResponse !== undefined) {
                localVarQueryParameter['show_original_response'] = showOriginalResponse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|0.05 (per 1 page)|1 page |**base64**|`latest`|0.25 (per 1 page)|1 page   </details>  
         * @summary Data Extraction
         * @param {OcrdataExtractionDataExtractionRequest} ocrdataExtractionDataExtractionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrDataExtractionCreate: async (ocrdataExtractionDataExtractionRequest: OcrdataExtractionDataExtractionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ocrdataExtractionDataExtractionRequest' is not null or undefined
            assertParamExists('ocrDataExtractionCreate', 'ocrdataExtractionDataExtractionRequest', ocrdataExtractionDataExtractionRequest)
            const localVarPath = `/ocr/data_extraction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ocrdataExtractionDataExtractionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|0.025 (per 1 page)|1 page |**base64**|`latest`|0.2 (per 1 page)|1 page |**microsoft**|`rest API 3.0`|0.05 (per 1 page)|1 page |**mindee**|`v2`|0.1 (per 1 page)|1 page |**klippa**|`v1`|0.1 (per 1 file)|1 file   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**English**|`en`| |**French**|`fr`| |**German**|`de`| |**Italian**|`it`| |**Portuguese**|`pt`| |**Spanish**|`es`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**English (United States)**|`en-US`| |**French (France)**|`fr-FR`| |**German (Germany)**|`de-DE`| |**Italian (Italy)**|`it-IT`| |**Portuguese (Portugal)**|`pt-PT`| |**Spanish (Spain)**|`es-ES`|  </details>
         * @summary Identity Parser
         * @param {OcridentityParserIdentityParserRequest} ocridentityParserIdentityParserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrIdentityParserCreate: async (ocridentityParserIdentityParserRequest: OcridentityParserIdentityParserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ocridentityParserIdentityParserRequest' is not null or undefined
            assertParamExists('ocrIdentityParserCreate', 'ocridentityParserIdentityParserRequest', ocridentityParserIdentityParserRequest)
            const localVarPath = `/ocr/identity_parser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ocridentityParserIdentityParserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**affinda**|`affinda 1.0.2`|0.08 (per 1 page)|1 page |**base64**|`latest`|0.25 (per 1 page)|1 page |**dataleon**|`v3.1.0`|0.05 (per 1 page)|1 page |**microsoft**|`v2.1-preview.3`|0.05 (per 1 page)|1 page |**mindee**|`v2`|0.1 (per 1 page)|1 page |**amazon**|`boto3 1.26.8`|0.01 (per 1 page)|1 page |**google**|`DocumentAI v1 beta3`|0.01 (per 1 page)|10 page |**klippa**|`v1`|0.1 (per 1 file)|1 file |**veryfi**|`v8`|0.16 (per 1 file)|1 file   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Catalan**|`ca`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Estonian**|`et`| |**French**|`fr`| |**German**|`de`| |**Italian**|`it`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Portuguese**|`pt`| |**Romanian**|`ro`| |**Spanish**|`es`| |**Swedish**|`sv`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Danish (Denmark)**|`da-DK`| |**English (United States)**|`en-US`| |**French (France)**|`fr-FR`| |**German (Germany)**|`de-DE`| |**Italian (Italy)**|`it-IT`| |**Portuguese (Portugal)**|`pt-PT`| |**Spanish (Spain)**|`es-ES`|  </details>
         * @summary Invoice Parser
         * @param {OcrinvoiceParserInvoiceParserRequest} ocrinvoiceParserInvoiceParserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrInvoiceParserCreate: async (ocrinvoiceParserInvoiceParserRequest: OcrinvoiceParserInvoiceParserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ocrinvoiceParserInvoiceParserRequest' is not null or undefined
            assertParamExists('ocrInvoiceParserCreate', 'ocrinvoiceParserInvoiceParserRequest', ocrinvoiceParserInvoiceParserRequest)
            const localVarPath = `/ocr/invoice_parser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ocrinvoiceParserInvoiceParserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.5 (per 1000 page)|1 page   </details>  
         * @summary Ocr Async Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrOcrAsyncCreate: async (providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providers' is not null or undefined
            assertParamExists('ocrOcrAsyncCreate', 'providers', providers)
            const localVarPath = `/ocr/ocr_async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (providers !== undefined) { 
                localVarFormParams.append('providers', providers as any);
            }
    
            if (fallbackProviders !== undefined) { 
                localVarFormParams.append('fallback_providers', fallbackProviders as any);
            }
    
            if (showOriginalResponse !== undefined) { 
                localVarFormParams.append('show_original_response', showOriginalResponse as any);
            }
    
            if (webhookReceiver !== undefined) { 
                localVarFormParams.append('webhook_receiver', webhookReceiver as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (fileUrl !== undefined) { 
                localVarFormParams.append('file_url', fileUrl as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Ocr Async List Job
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrOcrAsyncRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ocr/ocr_async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Ocr Async Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrOcrAsyncRetrieve2: async (publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'publicId' is not null or undefined
            assertParamExists('ocrOcrAsyncRetrieve2', 'publicId', publicId)
            const localVarPath = `/ocr/ocr_async/{public_id}`
                .replace(`{${"public_id"}}`, encodeURIComponent(String(publicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (responseAsDict !== undefined) {
                localVarQueryParameter['response_as_dict'] = responseAsDict;
            }

            if (showOriginalResponse !== undefined) {
                localVarQueryParameter['show_original_response'] = showOriginalResponse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.5 (per 1000 page)|1 page |**clarifai**|`8.0.0`|2.0 (per 1000 page)|1 page |**google**|`v1`|1.5 (per 1000 page)|1 page |**microsoft**|`v3.2`|1.0 (per 1000 page)|1 page |**sentisight**|`v3.3.1`|1.0 (per 1000 file)|1 file |**api4ai**|`v1.0.0`|3.0 (per 1000 request)|1 request   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Abaza**|`abq`| |**Adyghe**|`ady`| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Angika**|`anp`| |**Arabic**|`ar`| |**Assamese**|`as`| |**Asturian**|`ast`| |**Avaric**|`av`| |**Awadhi**|`awa`| |**Azerbaijani**|`az`| |**Bagheli**|`bfy`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bengali**|`bn`| |**Bhojpuri**|`bho`| |**Bihari languages**|`bh`| |**Bislama**|`bi`| |**Bodo (India)**|`brx`| |**Bosnian**|`bs`| |**Braj**|`bra`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Bundeli**|`bns`| |**Buriat**|`bua`| |**Camling**|`rab`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Chamorro**|`ch`| |**Chechen**|`ce`| |**Chhattisgarhi**|`hne`| |**Chinese**|`zh`| |**Cornish**|`kw`| |**Corsican**|`co`| |**Crimean Tatar**|`crh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dargwa**|`dar`| |**Dari**|`prs`| |**Dhimal**|`dhi`| |**Dogri (macrolanguage)**|`doi`| |**Dutch**|`nl`| |**English**|`en`| |**Erzya**|`myv`| |**Estonian**|`et`| |**Faroese**|`fo`| |**Fijian**|`fj`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Friulian**|`fur`| |**Gagauz**|`gag`| |**Galician**|`gl`| |**German**|`de`| |**Gilbertese**|`gil`| |**Goan Konkani**|`gom`| |**Gondi**|`gon`| |**Gurung**|`gvr`| |**Haitian**|`ht`| |**Halbi**|`hlb`| |**Hani**|`hni`| |**Haryanvi**|`bgc`| |**Hawaiian**|`haw`| |**Hindi**|`hi`| |**Hmong Daw**|`mww`| |**Ho**|`hoc`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Inari Sami**|`smn`| |**Indonesian**|`id`| |**Ingush**|`inh`| |**Interlingua (International Auxiliary Language Association)**|`ia`| |**Inuktitut**|`iu`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Jaunsari**|`jns`| |**Javanese**|`jv`| |**K\'iche\'**|`quc`| |**Kabardian**|`kbd`| |**Kabuverdianu**|`kea`| |**Kachin**|`kac`| |**Kalaallisut**|`kl`| |**Kangri**|`xnr`| |**Kara-Kalpak**|`kaa`| |**Karachay-Balkar**|`krc`| |**Kashubian**|`csb`| |**Kazakh**|`kk`| |**Khaling**|`klr`| |**Khasi**|`kha`| |**Kirghiz**|`ky`| |**Korean**|`ko`| |**Korku**|`kfq`| |**Koryak**|`kpy`| |**Kosraean**|`kos`| |**Kumarbhag Paharia**|`kmj`| |**Kumyk**|`kum`| |**Kurdish**|`ku`| |**Kurukh**|`kru`| |**Kölsch**|`ksh`| |**Lak**|`lbe`| |**Lakota**|`lkt`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lezghian**|`lez`| |**Lithuanian**|`lt`| |**Lower Sorbian**|`dsb`| |**Lule Sami**|`smj`| |**Luxembourgish**|`lb`| |**Mahasu Pahari**|`bfz`| |**Maithili**|`mai`| |**Malay (macrolanguage)**|`ms`| |**Maltese**|`mt`| |**Manx**|`gv`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Marshallese**|`mh`| |**Mongolian**|`mn`| |**Neapolitan**|`nap`| |**Nepali (macrolanguage)**|`ne`| |**Newari**|`new`| |**Niuean**|`niu`| |**Nogai**|`nog`| |**Northern Sami**|`se`| |**Norwegian**|`no`| |**Occitan (post 1500)**|`oc`| |**Old English (ca. 450-1100)**|`ang`| |**Ossetian**|`os`| |**Pali**|`pi`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Romansh**|`rm`| |**Russian**|`ru`| |**Sadri**|`sck`| |**Samoan**|`sm`| |**Sanskrit**|`sa`| |**Santali**|`sat`| |**Scots**|`sco`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Sherpa**|`xsr`| |**Sirmauri**|`srx`| |**Skolt Sami**|`sms`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Southern Sami**|`sma`| |**Spanish**|`es`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tabassaran**|`tab`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tatar**|`tt`| |**Tetum**|`tet`| |**Thangmi**|`thf`| |**Tonga (Tonga Islands)**|`to`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Tuvinian**|`tyv`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Upper Sorbian**|`hsb`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Volapük**|`vo`| |**Walser**|`wae`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Yucateco**|`yua`| |**Zhuang**|`za`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Arabic (Pseudo-Accents)**|`ar-XA`| |**Belarusian**|`be-cyrl`| |**Belarusian (Latin)**|`be-latn`| |**Chinese (China)**|`zh-CN`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Taiwan)**|`zh-TW`| |**Chinese (Traditional)**|`zh-Hant`| |**Danish (Denmark)**|`da-DK`| |**Dutch (Netherlands)**|`nl-NL`| |**English (United States)**|`en-US`| |**Finnish (Finland)**|`fi-FI`| |**French (France)**|`fr-FR`| |**German (Germany)**|`de-DE`| |**Hungarian (Hungary)**|`hu-HU`| |**Italian (Italy)**|`it-IT`| |**Japanese (Japan)**|`ja-JP`| |**Kara-Kalpak (Cyrillic)**|`kaa-Cyrl`| |**Kazakh**|`kk-cyrl`| |**Kazakh (Latin)**|`kk-latn`| |**Korean (South Korea)**|`ko-KR`| |**Kurdish (Arabic)**|`ku-arab`| |**Kurdish (Latin)**|`ku-latn`| |**Polish**|`pl-PO`| |**Portuguese (Portugal)**|`pt-PT`| |**Region: Czechia**|`cz-CZ`| |**Region: Greece**|`gr-GR`| |**Russian (Russia)**|`ru-RU`| |**Serbian (Cyrillic, Montenegro)**|`sr-Cyrl-ME`| |**Serbian (Latin)**|`sr-latn`| |**Serbian (Latin, Montenegro)**|`sr-Latn-ME`| |**Serbian (Montenegro)**|`sr-ME`| |**Spanish (Spain)**|`es-ES`| |**Swedish (Sweden)**|`sv-SE`| |**Turkish (Turkey)**|`tr-TR`| |**Uzbek (Arabic)**|`uz-arab`| |**Uzbek (Cyrillic)**|`uz-cyrl`|  </details>
         * @summary OCR
         * @param {OcrocrOcrRequest} ocrocrOcrRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrOcrCreate: async (ocrocrOcrRequest: OcrocrOcrRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ocrocrOcrRequest' is not null or undefined
            assertParamExists('ocrOcrCreate', 'ocrocrOcrRequest', ocrocrOcrRequest)
            const localVarPath = `/ocr/ocr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ocrocrOcrRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|15.0 (per 1000 page)|1 page |**google**|`DocumentAI v1 beta3`|65.0 (per 1000 page)|1 page |**microsoft**|`rest API 3.0`|50.0 (per 1000 page)|1 page   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Angika**|`anp`| |**Arabic**|`ar`| |**Asturian**|`ast`| |**Awadhi**|`awa`| |**Azerbaijani**|`az`| |**Bagheli**|`bfy`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bhojpuri**|`bho`| |**Bislama**|`bi`| |**Bodo (India)**|`brx`| |**Bosnian**|`bs`| |**Braj**|`bra`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Bundeli**|`bns`| |**Buriat**|`bua`| |**Camling**|`rab`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Chamorro**|`ch`| |**Chhattisgarhi**|`hne`| |**Chinese**|`zh`| |**Cornish**|`kw`| |**Corsican**|`co`| |**Crimean Tatar**|`crh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dari**|`prs`| |**Dhimal**|`dhi`| |**Dogri (macrolanguage)**|`doi`| |**Dutch**|`nl`| |**English**|`en`| |**Erzya**|`myv`| |**Estonian**|`et`| |**Faroese**|`fo`| |**Fijian**|`fj`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Friulian**|`fur`| |**Gagauz**|`gag`| |**Galician**|`gl`| |**German**|`de`| |**Gilbertese**|`gil`| |**Gondi**|`gon`| |**Gurung**|`gvr`| |**Haitian**|`ht`| |**Halbi**|`hlb`| |**Hani**|`hni`| |**Haryanvi**|`bgc`| |**Hawaiian**|`haw`| |**Hindi**|`hi`| |**Hmong Daw**|`mww`| |**Ho**|`hoc`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Inari Sami**|`smn`| |**Indonesian**|`id`| |**Interlingua (International Auxiliary Language Association)**|`ia`| |**Inuktitut**|`iu`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Jaunsari**|`jns`| |**Javanese**|`jv`| |**K\'iche\'**|`quc`| |**Kabuverdianu**|`kea`| |**Kachin**|`kac`| |**Kalaallisut**|`kl`| |**Kangri**|`xnr`| |**Kara-Kalpak**|`kaa`| |**Karachay-Balkar**|`krc`| |**Kashubian**|`csb`| |**Kazakh**|`kk`| |**Khaling**|`klr`| |**Khasi**|`kha`| |**Kirghiz**|`ky`| |**Korean**|`ko`| |**Korku**|`kfq`| |**Koryak**|`kpy`| |**Kosraean**|`kos`| |**Kumarbhag Paharia**|`kmj`| |**Kumyk**|`kum`| |**Kurdish**|`ku`| |**Kurukh**|`kru`| |**Kölsch**|`ksh`| |**Lakota**|`lkt`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Lower Sorbian**|`dsb`| |**Lule Sami**|`smj`| |**Luxembourgish**|`lb`| |**Mahasu Pahari**|`bfz`| |**Malay (macrolanguage)**|`ms`| |**Maltese**|`mt`| |**Manx**|`gv`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Mongolian**|`mn`| |**Neapolitan**|`nap`| |**Nepali (macrolanguage)**|`ne`| |**Niuean**|`niu`| |**Nogai**|`nog`| |**Northern Sami**|`se`| |**Norwegian**|`no`| |**Occitan (post 1500)**|`oc`| |**Ossetian**|`os`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Romansh**|`rm`| |**Russian**|`ru`| |**Sadri**|`sck`| |**Samoan**|`sm`| |**Sanskrit**|`sa`| |**Santali**|`sat`| |**Scots**|`sco`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Sherpa**|`xsr`| |**Sirmauri**|`srx`| |**Skolt Sami**|`sms`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Southern Sami**|`sma`| |**Spanish**|`es`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tatar**|`tt`| |**Tetum**|`tet`| |**Thangmi**|`thf`| |**Tonga (Tonga Islands)**|`to`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Tuvinian**|`tyv`| |**Uighur**|`ug`| |**Upper Sorbian**|`hsb`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Volapük**|`vo`| |**Walser**|`wae`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Yucateco**|`yua`| |**Zhuang**|`za`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Belarusian**|`be-Cyrl`| |**Belarusian (Latin)**|`be-Latn`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Traditional)**|`zh-Hant`| |**Kara-Kalpak (Cyrillic)**|`kaa-Cyrl`| |**Kazakh**|`kk-Cyrl`| |**Kazakh (Latin)**|`kk-Latn`| |**Kurdish (Arabic)**|`ku-Arab`| |**Kurdish (Latin)**|`ku-Latn`| |**Serbian (Cyrillic)**|`sr-Cyrl`| |**Serbian (Cyrillic, Montenegro)**|`sr-Cyrl-ME`| |**Serbian (Latin)**|`sr-Latn`| |**Serbian (Latin, Montenegro)**|`sr-Latn-ME`| |**Serbian (Montenegro)**|`sr-ME`| |**Uzbek (Arabic)**|`uz-Arab`| |**Uzbek (Cyrillic)**|`uz-cyrl`|  </details>
         * @summary OCR Tables Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {string} [language] Language code of the language the document is written in (ex: fr (French), en (English), es (Spanish))
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrOcrTablesAsyncCreate: async (providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, language?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providers' is not null or undefined
            assertParamExists('ocrOcrTablesAsyncCreate', 'providers', providers)
            const localVarPath = `/ocr/ocr_tables_async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (providers !== undefined) { 
                localVarFormParams.append('providers', providers as any);
            }
    
            if (fallbackProviders !== undefined) { 
                localVarFormParams.append('fallback_providers', fallbackProviders as any);
            }
    
            if (showOriginalResponse !== undefined) { 
                localVarFormParams.append('show_original_response', showOriginalResponse as any);
            }
    
            if (webhookReceiver !== undefined) { 
                localVarFormParams.append('webhook_receiver', webhookReceiver as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (fileUrl !== undefined) { 
                localVarFormParams.append('file_url', fileUrl as any);
            }
    
            if (language !== undefined) { 
                localVarFormParams.append('language', language as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary OCR Tables List Job
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrOcrTablesAsyncRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ocr/ocr_tables_async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary OCR Tables Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrOcrTablesAsyncRetrieve2: async (publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'publicId' is not null or undefined
            assertParamExists('ocrOcrTablesAsyncRetrieve2', 'publicId', publicId)
            const localVarPath = `/ocr/ocr_tables_async/{public_id}`
                .replace(`{${"public_id"}}`, encodeURIComponent(String(publicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (responseAsDict !== undefined) {
                localVarQueryParameter['response_as_dict'] = responseAsDict;
            }

            if (showOriginalResponse !== undefined) {
                localVarQueryParameter['show_original_response'] = showOriginalResponse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**base64**|`latest`|0.25 (per 1 page)|1 page |**dataleon**|`v3.1.0`|0.025 (per 1 page)|1 page |**microsoft**|`rest API 3.0`|0.05 (per 1 page)|1 page |**mindee**|`v2`|0.1 (per 1 page)|1 page |**tabscanner**|`latest`|0.08 (per 1 page)|1 page |**google**|`DocumentAI v1 beta3`|0.01 (per 1 page)|10 page |**klippa**|`v1`|0.1 (per 1 file)|1 file |**veryfi**|`v8`|0.08 (per 1 file)|1 file |**amazon**|`boto3 1.26.8`|0.01 (per 1 page)|1 page   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Catalan**|`ca`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Estonian**|`et`| |**French**|`fr`| |**German**|`de`| |**Italian**|`it`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Portuguese**|`pt`| |**Romanian**|`ro`| |**Spanish**|`es`| |**Swedish**|`sv`| |**Turkish**|`tr`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Catalan (Spain)**|`ca-ES`| |**Danish (Denmark)**|`da-DK`| |**Dutch (Netherlands)**|`nl-NL`| |**English (United Kingdom)**|`en-GB`| |**English (United States)**|`en-US`| |**French (Canada)**|`fr-CA`| |**French (France)**|`fr-FR`| |**French (Switzerland)**|`fr-CH`| |**German (Germany)**|`de-DE`| |**German (Switzerland)**|`de-CH`| |**Italian (Italy)**|`it-IT`| |**Italian (Switzerland)**|`it-CH`| |**Portuguese (Portugal)**|`pt-PT`| |**Spanish (Spain)**|`es-ES`|  </details>
         * @summary Receipt Parser
         * @param {OcrreceiptParserReceiptParserRequest} ocrreceiptParserReceiptParserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrReceiptParserCreate: async (ocrreceiptParserReceiptParserRequest: OcrreceiptParserReceiptParserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ocrreceiptParserReceiptParserRequest' is not null or undefined
            assertParamExists('ocrReceiptParserCreate', 'ocrreceiptParserReceiptParserRequest', ocrreceiptParserReceiptParserRequest)
            const localVarPath = `/ocr/receipt_parser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ocrreceiptParserReceiptParserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**affinda**|`affinda 1.0.2`|0.07 (per 1 file)|1 file |**hireability**|`hireability 1.0.0`|0.05 (per 1 file)|1 file   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Arabic**|`ar`| |**English**|`en`| |**French**|`fr`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`|  </details>
         * @summary Resume Parser
         * @param {OcrresumeParserResumeParserRequest} ocrresumeParserResumeParserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrResumeParserCreate: async (ocrresumeParserResumeParserRequest: OcrresumeParserResumeParserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ocrresumeParserResumeParserRequest' is not null or undefined
            assertParamExists('ocrResumeParserCreate', 'ocrresumeParserResumeParserRequest', ocrresumeParserResumeParserRequest)
            const localVarPath = `/ocr/resume_parser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ocrresumeParserResumeParserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OCRApi - functional programming interface
 * @export
 */
export const OCRApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OCRApiAxiosParamCreator(configuration)
    return {
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**base64**|`latest`|0.25 (per 1 page)|1 page |**veryfi**|`v8`|0.16 (per 1 request)|1 request   </details>  
         * @summary Bank Check Parsing
         * @param {OcrbankCheckParsingBankCheckParsingRequest} ocrbankCheckParsingBankCheckParsingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocrBankCheckParsingCreate(ocrbankCheckParsingBankCheckParsingRequest: OcrbankCheckParsingBankCheckParsingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OcrbankCheckParsingResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocrBankCheckParsingCreate(ocrbankCheckParsingBankCheckParsingRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|15.0 (per 1000 page)|1 page   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**English**|`en`| |**French**|`fr`| |**German**|`de`| |**Italian**|`it`| |**Portuguese**|`pt`| |**Spanish**|`es`|  </details>
         * @summary Custom Document Parsing Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} queries Your queries need to be a list of dict containing the questions you want answered and the page to look for the information in :  \\\&#39;[{\\\&#39;query\\\&#39;:\\\&#39;your query\\\&#39;,\\\&#39;pages\\\&#39;:\\\&#39;your pages\\\&#39;},{\\\&#39;query\\\&#39;:\\\&#39;your query\\\&#39;,\\\&#39;pages\\\&#39;:\\\&#39;your pages\\\&#39;}]\\\&#39;
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocrCustomDocumentParsingAsyncCreate(providers: string, queries: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LaunchAsyncJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocrCustomDocumentParsingAsyncCreate(providers, queries, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Custom Document Parsing List Job
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocrCustomDocumentParsingAsyncRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAsyncJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocrCustomDocumentParsingAsyncRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Custom Document Parsing Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocrCustomDocumentParsingAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AsyncocrcustomDocumentParsingAsyncResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocrCustomDocumentParsingAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|0.05 (per 1 page)|1 page |**base64**|`latest`|0.25 (per 1 page)|1 page   </details>  
         * @summary Data Extraction
         * @param {OcrdataExtractionDataExtractionRequest} ocrdataExtractionDataExtractionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocrDataExtractionCreate(ocrdataExtractionDataExtractionRequest: OcrdataExtractionDataExtractionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OcrdataExtractionResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocrDataExtractionCreate(ocrdataExtractionDataExtractionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|0.025 (per 1 page)|1 page |**base64**|`latest`|0.2 (per 1 page)|1 page |**microsoft**|`rest API 3.0`|0.05 (per 1 page)|1 page |**mindee**|`v2`|0.1 (per 1 page)|1 page |**klippa**|`v1`|0.1 (per 1 file)|1 file   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**English**|`en`| |**French**|`fr`| |**German**|`de`| |**Italian**|`it`| |**Portuguese**|`pt`| |**Spanish**|`es`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**English (United States)**|`en-US`| |**French (France)**|`fr-FR`| |**German (Germany)**|`de-DE`| |**Italian (Italy)**|`it-IT`| |**Portuguese (Portugal)**|`pt-PT`| |**Spanish (Spain)**|`es-ES`|  </details>
         * @summary Identity Parser
         * @param {OcridentityParserIdentityParserRequest} ocridentityParserIdentityParserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocrIdentityParserCreate(ocridentityParserIdentityParserRequest: OcridentityParserIdentityParserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OcridentityParserResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocrIdentityParserCreate(ocridentityParserIdentityParserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**affinda**|`affinda 1.0.2`|0.08 (per 1 page)|1 page |**base64**|`latest`|0.25 (per 1 page)|1 page |**dataleon**|`v3.1.0`|0.05 (per 1 page)|1 page |**microsoft**|`v2.1-preview.3`|0.05 (per 1 page)|1 page |**mindee**|`v2`|0.1 (per 1 page)|1 page |**amazon**|`boto3 1.26.8`|0.01 (per 1 page)|1 page |**google**|`DocumentAI v1 beta3`|0.01 (per 1 page)|10 page |**klippa**|`v1`|0.1 (per 1 file)|1 file |**veryfi**|`v8`|0.16 (per 1 file)|1 file   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Catalan**|`ca`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Estonian**|`et`| |**French**|`fr`| |**German**|`de`| |**Italian**|`it`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Portuguese**|`pt`| |**Romanian**|`ro`| |**Spanish**|`es`| |**Swedish**|`sv`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Danish (Denmark)**|`da-DK`| |**English (United States)**|`en-US`| |**French (France)**|`fr-FR`| |**German (Germany)**|`de-DE`| |**Italian (Italy)**|`it-IT`| |**Portuguese (Portugal)**|`pt-PT`| |**Spanish (Spain)**|`es-ES`|  </details>
         * @summary Invoice Parser
         * @param {OcrinvoiceParserInvoiceParserRequest} ocrinvoiceParserInvoiceParserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocrInvoiceParserCreate(ocrinvoiceParserInvoiceParserRequest: OcrinvoiceParserInvoiceParserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OcrinvoiceParserResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocrInvoiceParserCreate(ocrinvoiceParserInvoiceParserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.5 (per 1000 page)|1 page   </details>  
         * @summary Ocr Async Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocrOcrAsyncCreate(providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LaunchAsyncJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocrOcrAsyncCreate(providers, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Ocr Async List Job
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocrOcrAsyncRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAsyncJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocrOcrAsyncRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Ocr Async Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocrOcrAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AsyncocrocrAsyncResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocrOcrAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.5 (per 1000 page)|1 page |**clarifai**|`8.0.0`|2.0 (per 1000 page)|1 page |**google**|`v1`|1.5 (per 1000 page)|1 page |**microsoft**|`v3.2`|1.0 (per 1000 page)|1 page |**sentisight**|`v3.3.1`|1.0 (per 1000 file)|1 file |**api4ai**|`v1.0.0`|3.0 (per 1000 request)|1 request   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Abaza**|`abq`| |**Adyghe**|`ady`| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Angika**|`anp`| |**Arabic**|`ar`| |**Assamese**|`as`| |**Asturian**|`ast`| |**Avaric**|`av`| |**Awadhi**|`awa`| |**Azerbaijani**|`az`| |**Bagheli**|`bfy`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bengali**|`bn`| |**Bhojpuri**|`bho`| |**Bihari languages**|`bh`| |**Bislama**|`bi`| |**Bodo (India)**|`brx`| |**Bosnian**|`bs`| |**Braj**|`bra`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Bundeli**|`bns`| |**Buriat**|`bua`| |**Camling**|`rab`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Chamorro**|`ch`| |**Chechen**|`ce`| |**Chhattisgarhi**|`hne`| |**Chinese**|`zh`| |**Cornish**|`kw`| |**Corsican**|`co`| |**Crimean Tatar**|`crh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dargwa**|`dar`| |**Dari**|`prs`| |**Dhimal**|`dhi`| |**Dogri (macrolanguage)**|`doi`| |**Dutch**|`nl`| |**English**|`en`| |**Erzya**|`myv`| |**Estonian**|`et`| |**Faroese**|`fo`| |**Fijian**|`fj`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Friulian**|`fur`| |**Gagauz**|`gag`| |**Galician**|`gl`| |**German**|`de`| |**Gilbertese**|`gil`| |**Goan Konkani**|`gom`| |**Gondi**|`gon`| |**Gurung**|`gvr`| |**Haitian**|`ht`| |**Halbi**|`hlb`| |**Hani**|`hni`| |**Haryanvi**|`bgc`| |**Hawaiian**|`haw`| |**Hindi**|`hi`| |**Hmong Daw**|`mww`| |**Ho**|`hoc`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Inari Sami**|`smn`| |**Indonesian**|`id`| |**Ingush**|`inh`| |**Interlingua (International Auxiliary Language Association)**|`ia`| |**Inuktitut**|`iu`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Jaunsari**|`jns`| |**Javanese**|`jv`| |**K\'iche\'**|`quc`| |**Kabardian**|`kbd`| |**Kabuverdianu**|`kea`| |**Kachin**|`kac`| |**Kalaallisut**|`kl`| |**Kangri**|`xnr`| |**Kara-Kalpak**|`kaa`| |**Karachay-Balkar**|`krc`| |**Kashubian**|`csb`| |**Kazakh**|`kk`| |**Khaling**|`klr`| |**Khasi**|`kha`| |**Kirghiz**|`ky`| |**Korean**|`ko`| |**Korku**|`kfq`| |**Koryak**|`kpy`| |**Kosraean**|`kos`| |**Kumarbhag Paharia**|`kmj`| |**Kumyk**|`kum`| |**Kurdish**|`ku`| |**Kurukh**|`kru`| |**Kölsch**|`ksh`| |**Lak**|`lbe`| |**Lakota**|`lkt`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lezghian**|`lez`| |**Lithuanian**|`lt`| |**Lower Sorbian**|`dsb`| |**Lule Sami**|`smj`| |**Luxembourgish**|`lb`| |**Mahasu Pahari**|`bfz`| |**Maithili**|`mai`| |**Malay (macrolanguage)**|`ms`| |**Maltese**|`mt`| |**Manx**|`gv`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Marshallese**|`mh`| |**Mongolian**|`mn`| |**Neapolitan**|`nap`| |**Nepali (macrolanguage)**|`ne`| |**Newari**|`new`| |**Niuean**|`niu`| |**Nogai**|`nog`| |**Northern Sami**|`se`| |**Norwegian**|`no`| |**Occitan (post 1500)**|`oc`| |**Old English (ca. 450-1100)**|`ang`| |**Ossetian**|`os`| |**Pali**|`pi`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Romansh**|`rm`| |**Russian**|`ru`| |**Sadri**|`sck`| |**Samoan**|`sm`| |**Sanskrit**|`sa`| |**Santali**|`sat`| |**Scots**|`sco`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Sherpa**|`xsr`| |**Sirmauri**|`srx`| |**Skolt Sami**|`sms`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Southern Sami**|`sma`| |**Spanish**|`es`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tabassaran**|`tab`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tatar**|`tt`| |**Tetum**|`tet`| |**Thangmi**|`thf`| |**Tonga (Tonga Islands)**|`to`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Tuvinian**|`tyv`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Upper Sorbian**|`hsb`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Volapük**|`vo`| |**Walser**|`wae`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Yucateco**|`yua`| |**Zhuang**|`za`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Arabic (Pseudo-Accents)**|`ar-XA`| |**Belarusian**|`be-cyrl`| |**Belarusian (Latin)**|`be-latn`| |**Chinese (China)**|`zh-CN`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Taiwan)**|`zh-TW`| |**Chinese (Traditional)**|`zh-Hant`| |**Danish (Denmark)**|`da-DK`| |**Dutch (Netherlands)**|`nl-NL`| |**English (United States)**|`en-US`| |**Finnish (Finland)**|`fi-FI`| |**French (France)**|`fr-FR`| |**German (Germany)**|`de-DE`| |**Hungarian (Hungary)**|`hu-HU`| |**Italian (Italy)**|`it-IT`| |**Japanese (Japan)**|`ja-JP`| |**Kara-Kalpak (Cyrillic)**|`kaa-Cyrl`| |**Kazakh**|`kk-cyrl`| |**Kazakh (Latin)**|`kk-latn`| |**Korean (South Korea)**|`ko-KR`| |**Kurdish (Arabic)**|`ku-arab`| |**Kurdish (Latin)**|`ku-latn`| |**Polish**|`pl-PO`| |**Portuguese (Portugal)**|`pt-PT`| |**Region: Czechia**|`cz-CZ`| |**Region: Greece**|`gr-GR`| |**Russian (Russia)**|`ru-RU`| |**Serbian (Cyrillic, Montenegro)**|`sr-Cyrl-ME`| |**Serbian (Latin)**|`sr-latn`| |**Serbian (Latin, Montenegro)**|`sr-Latn-ME`| |**Serbian (Montenegro)**|`sr-ME`| |**Spanish (Spain)**|`es-ES`| |**Swedish (Sweden)**|`sv-SE`| |**Turkish (Turkey)**|`tr-TR`| |**Uzbek (Arabic)**|`uz-arab`| |**Uzbek (Cyrillic)**|`uz-cyrl`|  </details>
         * @summary OCR
         * @param {OcrocrOcrRequest} ocrocrOcrRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocrOcrCreate(ocrocrOcrRequest: OcrocrOcrRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OcrocrResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocrOcrCreate(ocrocrOcrRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|15.0 (per 1000 page)|1 page |**google**|`DocumentAI v1 beta3`|65.0 (per 1000 page)|1 page |**microsoft**|`rest API 3.0`|50.0 (per 1000 page)|1 page   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Angika**|`anp`| |**Arabic**|`ar`| |**Asturian**|`ast`| |**Awadhi**|`awa`| |**Azerbaijani**|`az`| |**Bagheli**|`bfy`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bhojpuri**|`bho`| |**Bislama**|`bi`| |**Bodo (India)**|`brx`| |**Bosnian**|`bs`| |**Braj**|`bra`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Bundeli**|`bns`| |**Buriat**|`bua`| |**Camling**|`rab`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Chamorro**|`ch`| |**Chhattisgarhi**|`hne`| |**Chinese**|`zh`| |**Cornish**|`kw`| |**Corsican**|`co`| |**Crimean Tatar**|`crh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dari**|`prs`| |**Dhimal**|`dhi`| |**Dogri (macrolanguage)**|`doi`| |**Dutch**|`nl`| |**English**|`en`| |**Erzya**|`myv`| |**Estonian**|`et`| |**Faroese**|`fo`| |**Fijian**|`fj`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Friulian**|`fur`| |**Gagauz**|`gag`| |**Galician**|`gl`| |**German**|`de`| |**Gilbertese**|`gil`| |**Gondi**|`gon`| |**Gurung**|`gvr`| |**Haitian**|`ht`| |**Halbi**|`hlb`| |**Hani**|`hni`| |**Haryanvi**|`bgc`| |**Hawaiian**|`haw`| |**Hindi**|`hi`| |**Hmong Daw**|`mww`| |**Ho**|`hoc`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Inari Sami**|`smn`| |**Indonesian**|`id`| |**Interlingua (International Auxiliary Language Association)**|`ia`| |**Inuktitut**|`iu`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Jaunsari**|`jns`| |**Javanese**|`jv`| |**K\'iche\'**|`quc`| |**Kabuverdianu**|`kea`| |**Kachin**|`kac`| |**Kalaallisut**|`kl`| |**Kangri**|`xnr`| |**Kara-Kalpak**|`kaa`| |**Karachay-Balkar**|`krc`| |**Kashubian**|`csb`| |**Kazakh**|`kk`| |**Khaling**|`klr`| |**Khasi**|`kha`| |**Kirghiz**|`ky`| |**Korean**|`ko`| |**Korku**|`kfq`| |**Koryak**|`kpy`| |**Kosraean**|`kos`| |**Kumarbhag Paharia**|`kmj`| |**Kumyk**|`kum`| |**Kurdish**|`ku`| |**Kurukh**|`kru`| |**Kölsch**|`ksh`| |**Lakota**|`lkt`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Lower Sorbian**|`dsb`| |**Lule Sami**|`smj`| |**Luxembourgish**|`lb`| |**Mahasu Pahari**|`bfz`| |**Malay (macrolanguage)**|`ms`| |**Maltese**|`mt`| |**Manx**|`gv`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Mongolian**|`mn`| |**Neapolitan**|`nap`| |**Nepali (macrolanguage)**|`ne`| |**Niuean**|`niu`| |**Nogai**|`nog`| |**Northern Sami**|`se`| |**Norwegian**|`no`| |**Occitan (post 1500)**|`oc`| |**Ossetian**|`os`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Romansh**|`rm`| |**Russian**|`ru`| |**Sadri**|`sck`| |**Samoan**|`sm`| |**Sanskrit**|`sa`| |**Santali**|`sat`| |**Scots**|`sco`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Sherpa**|`xsr`| |**Sirmauri**|`srx`| |**Skolt Sami**|`sms`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Southern Sami**|`sma`| |**Spanish**|`es`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tatar**|`tt`| |**Tetum**|`tet`| |**Thangmi**|`thf`| |**Tonga (Tonga Islands)**|`to`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Tuvinian**|`tyv`| |**Uighur**|`ug`| |**Upper Sorbian**|`hsb`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Volapük**|`vo`| |**Walser**|`wae`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Yucateco**|`yua`| |**Zhuang**|`za`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Belarusian**|`be-Cyrl`| |**Belarusian (Latin)**|`be-Latn`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Traditional)**|`zh-Hant`| |**Kara-Kalpak (Cyrillic)**|`kaa-Cyrl`| |**Kazakh**|`kk-Cyrl`| |**Kazakh (Latin)**|`kk-Latn`| |**Kurdish (Arabic)**|`ku-Arab`| |**Kurdish (Latin)**|`ku-Latn`| |**Serbian (Cyrillic)**|`sr-Cyrl`| |**Serbian (Cyrillic, Montenegro)**|`sr-Cyrl-ME`| |**Serbian (Latin)**|`sr-Latn`| |**Serbian (Latin, Montenegro)**|`sr-Latn-ME`| |**Serbian (Montenegro)**|`sr-ME`| |**Uzbek (Arabic)**|`uz-Arab`| |**Uzbek (Cyrillic)**|`uz-cyrl`|  </details>
         * @summary OCR Tables Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {string} [language] Language code of the language the document is written in (ex: fr (French), en (English), es (Spanish))
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocrOcrTablesAsyncCreate(providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, language?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LaunchAsyncJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocrOcrTablesAsyncCreate(providers, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, language, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary OCR Tables List Job
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocrOcrTablesAsyncRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAsyncJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocrOcrTablesAsyncRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary OCR Tables Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocrOcrTablesAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AsyncocrocrTablesAsyncResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocrOcrTablesAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**base64**|`latest`|0.25 (per 1 page)|1 page |**dataleon**|`v3.1.0`|0.025 (per 1 page)|1 page |**microsoft**|`rest API 3.0`|0.05 (per 1 page)|1 page |**mindee**|`v2`|0.1 (per 1 page)|1 page |**tabscanner**|`latest`|0.08 (per 1 page)|1 page |**google**|`DocumentAI v1 beta3`|0.01 (per 1 page)|10 page |**klippa**|`v1`|0.1 (per 1 file)|1 file |**veryfi**|`v8`|0.08 (per 1 file)|1 file |**amazon**|`boto3 1.26.8`|0.01 (per 1 page)|1 page   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Catalan**|`ca`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Estonian**|`et`| |**French**|`fr`| |**German**|`de`| |**Italian**|`it`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Portuguese**|`pt`| |**Romanian**|`ro`| |**Spanish**|`es`| |**Swedish**|`sv`| |**Turkish**|`tr`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Catalan (Spain)**|`ca-ES`| |**Danish (Denmark)**|`da-DK`| |**Dutch (Netherlands)**|`nl-NL`| |**English (United Kingdom)**|`en-GB`| |**English (United States)**|`en-US`| |**French (Canada)**|`fr-CA`| |**French (France)**|`fr-FR`| |**French (Switzerland)**|`fr-CH`| |**German (Germany)**|`de-DE`| |**German (Switzerland)**|`de-CH`| |**Italian (Italy)**|`it-IT`| |**Italian (Switzerland)**|`it-CH`| |**Portuguese (Portugal)**|`pt-PT`| |**Spanish (Spain)**|`es-ES`|  </details>
         * @summary Receipt Parser
         * @param {OcrreceiptParserReceiptParserRequest} ocrreceiptParserReceiptParserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocrReceiptParserCreate(ocrreceiptParserReceiptParserRequest: OcrreceiptParserReceiptParserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OcrreceiptParserResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocrReceiptParserCreate(ocrreceiptParserReceiptParserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**affinda**|`affinda 1.0.2`|0.07 (per 1 file)|1 file |**hireability**|`hireability 1.0.0`|0.05 (per 1 file)|1 file   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Arabic**|`ar`| |**English**|`en`| |**French**|`fr`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`|  </details>
         * @summary Resume Parser
         * @param {OcrresumeParserResumeParserRequest} ocrresumeParserResumeParserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocrResumeParserCreate(ocrresumeParserResumeParserRequest: OcrresumeParserResumeParserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OcrresumeParserResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocrResumeParserCreate(ocrresumeParserResumeParserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OCRApi - factory interface
 * @export
 */
export const OCRApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OCRApiFp(configuration)
    return {
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**base64**|`latest`|0.25 (per 1 page)|1 page |**veryfi**|`v8`|0.16 (per 1 request)|1 request   </details>  
         * @summary Bank Check Parsing
         * @param {OcrbankCheckParsingBankCheckParsingRequest} ocrbankCheckParsingBankCheckParsingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrBankCheckParsingCreate(ocrbankCheckParsingBankCheckParsingRequest: OcrbankCheckParsingBankCheckParsingRequest, options?: any): AxiosPromise<OcrbankCheckParsingResponseModel> {
            return localVarFp.ocrBankCheckParsingCreate(ocrbankCheckParsingBankCheckParsingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|15.0 (per 1000 page)|1 page   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**English**|`en`| |**French**|`fr`| |**German**|`de`| |**Italian**|`it`| |**Portuguese**|`pt`| |**Spanish**|`es`|  </details>
         * @summary Custom Document Parsing Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} queries Your queries need to be a list of dict containing the questions you want answered and the page to look for the information in :  \\\&#39;[{\\\&#39;query\\\&#39;:\\\&#39;your query\\\&#39;,\\\&#39;pages\\\&#39;:\\\&#39;your pages\\\&#39;},{\\\&#39;query\\\&#39;:\\\&#39;your query\\\&#39;,\\\&#39;pages\\\&#39;:\\\&#39;your pages\\\&#39;}]\\\&#39;
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrCustomDocumentParsingAsyncCreate(providers: string, queries: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options?: any): AxiosPromise<LaunchAsyncJobResponse> {
            return localVarFp.ocrCustomDocumentParsingAsyncCreate(providers, queries, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Custom Document Parsing List Job
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrCustomDocumentParsingAsyncRetrieve(options?: any): AxiosPromise<ListAsyncJobResponse> {
            return localVarFp.ocrCustomDocumentParsingAsyncRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Custom Document Parsing Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrCustomDocumentParsingAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: any): AxiosPromise<AsyncocrcustomDocumentParsingAsyncResponseModel> {
            return localVarFp.ocrCustomDocumentParsingAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|0.05 (per 1 page)|1 page |**base64**|`latest`|0.25 (per 1 page)|1 page   </details>  
         * @summary Data Extraction
         * @param {OcrdataExtractionDataExtractionRequest} ocrdataExtractionDataExtractionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrDataExtractionCreate(ocrdataExtractionDataExtractionRequest: OcrdataExtractionDataExtractionRequest, options?: any): AxiosPromise<OcrdataExtractionResponseModel> {
            return localVarFp.ocrDataExtractionCreate(ocrdataExtractionDataExtractionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|0.025 (per 1 page)|1 page |**base64**|`latest`|0.2 (per 1 page)|1 page |**microsoft**|`rest API 3.0`|0.05 (per 1 page)|1 page |**mindee**|`v2`|0.1 (per 1 page)|1 page |**klippa**|`v1`|0.1 (per 1 file)|1 file   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**English**|`en`| |**French**|`fr`| |**German**|`de`| |**Italian**|`it`| |**Portuguese**|`pt`| |**Spanish**|`es`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**English (United States)**|`en-US`| |**French (France)**|`fr-FR`| |**German (Germany)**|`de-DE`| |**Italian (Italy)**|`it-IT`| |**Portuguese (Portugal)**|`pt-PT`| |**Spanish (Spain)**|`es-ES`|  </details>
         * @summary Identity Parser
         * @param {OcridentityParserIdentityParserRequest} ocridentityParserIdentityParserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrIdentityParserCreate(ocridentityParserIdentityParserRequest: OcridentityParserIdentityParserRequest, options?: any): AxiosPromise<OcridentityParserResponseModel> {
            return localVarFp.ocrIdentityParserCreate(ocridentityParserIdentityParserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**affinda**|`affinda 1.0.2`|0.08 (per 1 page)|1 page |**base64**|`latest`|0.25 (per 1 page)|1 page |**dataleon**|`v3.1.0`|0.05 (per 1 page)|1 page |**microsoft**|`v2.1-preview.3`|0.05 (per 1 page)|1 page |**mindee**|`v2`|0.1 (per 1 page)|1 page |**amazon**|`boto3 1.26.8`|0.01 (per 1 page)|1 page |**google**|`DocumentAI v1 beta3`|0.01 (per 1 page)|10 page |**klippa**|`v1`|0.1 (per 1 file)|1 file |**veryfi**|`v8`|0.16 (per 1 file)|1 file   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Catalan**|`ca`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Estonian**|`et`| |**French**|`fr`| |**German**|`de`| |**Italian**|`it`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Portuguese**|`pt`| |**Romanian**|`ro`| |**Spanish**|`es`| |**Swedish**|`sv`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Danish (Denmark)**|`da-DK`| |**English (United States)**|`en-US`| |**French (France)**|`fr-FR`| |**German (Germany)**|`de-DE`| |**Italian (Italy)**|`it-IT`| |**Portuguese (Portugal)**|`pt-PT`| |**Spanish (Spain)**|`es-ES`|  </details>
         * @summary Invoice Parser
         * @param {OcrinvoiceParserInvoiceParserRequest} ocrinvoiceParserInvoiceParserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrInvoiceParserCreate(ocrinvoiceParserInvoiceParserRequest: OcrinvoiceParserInvoiceParserRequest, options?: any): AxiosPromise<OcrinvoiceParserResponseModel> {
            return localVarFp.ocrInvoiceParserCreate(ocrinvoiceParserInvoiceParserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.5 (per 1000 page)|1 page   </details>  
         * @summary Ocr Async Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrOcrAsyncCreate(providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options?: any): AxiosPromise<LaunchAsyncJobResponse> {
            return localVarFp.ocrOcrAsyncCreate(providers, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Ocr Async List Job
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrOcrAsyncRetrieve(options?: any): AxiosPromise<ListAsyncJobResponse> {
            return localVarFp.ocrOcrAsyncRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Ocr Async Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrOcrAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: any): AxiosPromise<AsyncocrocrAsyncResponseModel> {
            return localVarFp.ocrOcrAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.5 (per 1000 page)|1 page |**clarifai**|`8.0.0`|2.0 (per 1000 page)|1 page |**google**|`v1`|1.5 (per 1000 page)|1 page |**microsoft**|`v3.2`|1.0 (per 1000 page)|1 page |**sentisight**|`v3.3.1`|1.0 (per 1000 file)|1 file |**api4ai**|`v1.0.0`|3.0 (per 1000 request)|1 request   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Abaza**|`abq`| |**Adyghe**|`ady`| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Angika**|`anp`| |**Arabic**|`ar`| |**Assamese**|`as`| |**Asturian**|`ast`| |**Avaric**|`av`| |**Awadhi**|`awa`| |**Azerbaijani**|`az`| |**Bagheli**|`bfy`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bengali**|`bn`| |**Bhojpuri**|`bho`| |**Bihari languages**|`bh`| |**Bislama**|`bi`| |**Bodo (India)**|`brx`| |**Bosnian**|`bs`| |**Braj**|`bra`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Bundeli**|`bns`| |**Buriat**|`bua`| |**Camling**|`rab`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Chamorro**|`ch`| |**Chechen**|`ce`| |**Chhattisgarhi**|`hne`| |**Chinese**|`zh`| |**Cornish**|`kw`| |**Corsican**|`co`| |**Crimean Tatar**|`crh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dargwa**|`dar`| |**Dari**|`prs`| |**Dhimal**|`dhi`| |**Dogri (macrolanguage)**|`doi`| |**Dutch**|`nl`| |**English**|`en`| |**Erzya**|`myv`| |**Estonian**|`et`| |**Faroese**|`fo`| |**Fijian**|`fj`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Friulian**|`fur`| |**Gagauz**|`gag`| |**Galician**|`gl`| |**German**|`de`| |**Gilbertese**|`gil`| |**Goan Konkani**|`gom`| |**Gondi**|`gon`| |**Gurung**|`gvr`| |**Haitian**|`ht`| |**Halbi**|`hlb`| |**Hani**|`hni`| |**Haryanvi**|`bgc`| |**Hawaiian**|`haw`| |**Hindi**|`hi`| |**Hmong Daw**|`mww`| |**Ho**|`hoc`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Inari Sami**|`smn`| |**Indonesian**|`id`| |**Ingush**|`inh`| |**Interlingua (International Auxiliary Language Association)**|`ia`| |**Inuktitut**|`iu`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Jaunsari**|`jns`| |**Javanese**|`jv`| |**K\'iche\'**|`quc`| |**Kabardian**|`kbd`| |**Kabuverdianu**|`kea`| |**Kachin**|`kac`| |**Kalaallisut**|`kl`| |**Kangri**|`xnr`| |**Kara-Kalpak**|`kaa`| |**Karachay-Balkar**|`krc`| |**Kashubian**|`csb`| |**Kazakh**|`kk`| |**Khaling**|`klr`| |**Khasi**|`kha`| |**Kirghiz**|`ky`| |**Korean**|`ko`| |**Korku**|`kfq`| |**Koryak**|`kpy`| |**Kosraean**|`kos`| |**Kumarbhag Paharia**|`kmj`| |**Kumyk**|`kum`| |**Kurdish**|`ku`| |**Kurukh**|`kru`| |**Kölsch**|`ksh`| |**Lak**|`lbe`| |**Lakota**|`lkt`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lezghian**|`lez`| |**Lithuanian**|`lt`| |**Lower Sorbian**|`dsb`| |**Lule Sami**|`smj`| |**Luxembourgish**|`lb`| |**Mahasu Pahari**|`bfz`| |**Maithili**|`mai`| |**Malay (macrolanguage)**|`ms`| |**Maltese**|`mt`| |**Manx**|`gv`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Marshallese**|`mh`| |**Mongolian**|`mn`| |**Neapolitan**|`nap`| |**Nepali (macrolanguage)**|`ne`| |**Newari**|`new`| |**Niuean**|`niu`| |**Nogai**|`nog`| |**Northern Sami**|`se`| |**Norwegian**|`no`| |**Occitan (post 1500)**|`oc`| |**Old English (ca. 450-1100)**|`ang`| |**Ossetian**|`os`| |**Pali**|`pi`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Romansh**|`rm`| |**Russian**|`ru`| |**Sadri**|`sck`| |**Samoan**|`sm`| |**Sanskrit**|`sa`| |**Santali**|`sat`| |**Scots**|`sco`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Sherpa**|`xsr`| |**Sirmauri**|`srx`| |**Skolt Sami**|`sms`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Southern Sami**|`sma`| |**Spanish**|`es`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tabassaran**|`tab`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tatar**|`tt`| |**Tetum**|`tet`| |**Thangmi**|`thf`| |**Tonga (Tonga Islands)**|`to`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Tuvinian**|`tyv`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Upper Sorbian**|`hsb`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Volapük**|`vo`| |**Walser**|`wae`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Yucateco**|`yua`| |**Zhuang**|`za`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Arabic (Pseudo-Accents)**|`ar-XA`| |**Belarusian**|`be-cyrl`| |**Belarusian (Latin)**|`be-latn`| |**Chinese (China)**|`zh-CN`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Taiwan)**|`zh-TW`| |**Chinese (Traditional)**|`zh-Hant`| |**Danish (Denmark)**|`da-DK`| |**Dutch (Netherlands)**|`nl-NL`| |**English (United States)**|`en-US`| |**Finnish (Finland)**|`fi-FI`| |**French (France)**|`fr-FR`| |**German (Germany)**|`de-DE`| |**Hungarian (Hungary)**|`hu-HU`| |**Italian (Italy)**|`it-IT`| |**Japanese (Japan)**|`ja-JP`| |**Kara-Kalpak (Cyrillic)**|`kaa-Cyrl`| |**Kazakh**|`kk-cyrl`| |**Kazakh (Latin)**|`kk-latn`| |**Korean (South Korea)**|`ko-KR`| |**Kurdish (Arabic)**|`ku-arab`| |**Kurdish (Latin)**|`ku-latn`| |**Polish**|`pl-PO`| |**Portuguese (Portugal)**|`pt-PT`| |**Region: Czechia**|`cz-CZ`| |**Region: Greece**|`gr-GR`| |**Russian (Russia)**|`ru-RU`| |**Serbian (Cyrillic, Montenegro)**|`sr-Cyrl-ME`| |**Serbian (Latin)**|`sr-latn`| |**Serbian (Latin, Montenegro)**|`sr-Latn-ME`| |**Serbian (Montenegro)**|`sr-ME`| |**Spanish (Spain)**|`es-ES`| |**Swedish (Sweden)**|`sv-SE`| |**Turkish (Turkey)**|`tr-TR`| |**Uzbek (Arabic)**|`uz-arab`| |**Uzbek (Cyrillic)**|`uz-cyrl`|  </details>
         * @summary OCR
         * @param {OcrocrOcrRequest} ocrocrOcrRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrOcrCreate(ocrocrOcrRequest: OcrocrOcrRequest, options?: any): AxiosPromise<OcrocrResponseModel> {
            return localVarFp.ocrOcrCreate(ocrocrOcrRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|15.0 (per 1000 page)|1 page |**google**|`DocumentAI v1 beta3`|65.0 (per 1000 page)|1 page |**microsoft**|`rest API 3.0`|50.0 (per 1000 page)|1 page   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Angika**|`anp`| |**Arabic**|`ar`| |**Asturian**|`ast`| |**Awadhi**|`awa`| |**Azerbaijani**|`az`| |**Bagheli**|`bfy`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bhojpuri**|`bho`| |**Bislama**|`bi`| |**Bodo (India)**|`brx`| |**Bosnian**|`bs`| |**Braj**|`bra`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Bundeli**|`bns`| |**Buriat**|`bua`| |**Camling**|`rab`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Chamorro**|`ch`| |**Chhattisgarhi**|`hne`| |**Chinese**|`zh`| |**Cornish**|`kw`| |**Corsican**|`co`| |**Crimean Tatar**|`crh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dari**|`prs`| |**Dhimal**|`dhi`| |**Dogri (macrolanguage)**|`doi`| |**Dutch**|`nl`| |**English**|`en`| |**Erzya**|`myv`| |**Estonian**|`et`| |**Faroese**|`fo`| |**Fijian**|`fj`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Friulian**|`fur`| |**Gagauz**|`gag`| |**Galician**|`gl`| |**German**|`de`| |**Gilbertese**|`gil`| |**Gondi**|`gon`| |**Gurung**|`gvr`| |**Haitian**|`ht`| |**Halbi**|`hlb`| |**Hani**|`hni`| |**Haryanvi**|`bgc`| |**Hawaiian**|`haw`| |**Hindi**|`hi`| |**Hmong Daw**|`mww`| |**Ho**|`hoc`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Inari Sami**|`smn`| |**Indonesian**|`id`| |**Interlingua (International Auxiliary Language Association)**|`ia`| |**Inuktitut**|`iu`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Jaunsari**|`jns`| |**Javanese**|`jv`| |**K\'iche\'**|`quc`| |**Kabuverdianu**|`kea`| |**Kachin**|`kac`| |**Kalaallisut**|`kl`| |**Kangri**|`xnr`| |**Kara-Kalpak**|`kaa`| |**Karachay-Balkar**|`krc`| |**Kashubian**|`csb`| |**Kazakh**|`kk`| |**Khaling**|`klr`| |**Khasi**|`kha`| |**Kirghiz**|`ky`| |**Korean**|`ko`| |**Korku**|`kfq`| |**Koryak**|`kpy`| |**Kosraean**|`kos`| |**Kumarbhag Paharia**|`kmj`| |**Kumyk**|`kum`| |**Kurdish**|`ku`| |**Kurukh**|`kru`| |**Kölsch**|`ksh`| |**Lakota**|`lkt`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Lower Sorbian**|`dsb`| |**Lule Sami**|`smj`| |**Luxembourgish**|`lb`| |**Mahasu Pahari**|`bfz`| |**Malay (macrolanguage)**|`ms`| |**Maltese**|`mt`| |**Manx**|`gv`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Mongolian**|`mn`| |**Neapolitan**|`nap`| |**Nepali (macrolanguage)**|`ne`| |**Niuean**|`niu`| |**Nogai**|`nog`| |**Northern Sami**|`se`| |**Norwegian**|`no`| |**Occitan (post 1500)**|`oc`| |**Ossetian**|`os`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Romansh**|`rm`| |**Russian**|`ru`| |**Sadri**|`sck`| |**Samoan**|`sm`| |**Sanskrit**|`sa`| |**Santali**|`sat`| |**Scots**|`sco`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Sherpa**|`xsr`| |**Sirmauri**|`srx`| |**Skolt Sami**|`sms`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Southern Sami**|`sma`| |**Spanish**|`es`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tatar**|`tt`| |**Tetum**|`tet`| |**Thangmi**|`thf`| |**Tonga (Tonga Islands)**|`to`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Tuvinian**|`tyv`| |**Uighur**|`ug`| |**Upper Sorbian**|`hsb`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Volapük**|`vo`| |**Walser**|`wae`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Yucateco**|`yua`| |**Zhuang**|`za`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Belarusian**|`be-Cyrl`| |**Belarusian (Latin)**|`be-Latn`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Traditional)**|`zh-Hant`| |**Kara-Kalpak (Cyrillic)**|`kaa-Cyrl`| |**Kazakh**|`kk-Cyrl`| |**Kazakh (Latin)**|`kk-Latn`| |**Kurdish (Arabic)**|`ku-Arab`| |**Kurdish (Latin)**|`ku-Latn`| |**Serbian (Cyrillic)**|`sr-Cyrl`| |**Serbian (Cyrillic, Montenegro)**|`sr-Cyrl-ME`| |**Serbian (Latin)**|`sr-Latn`| |**Serbian (Latin, Montenegro)**|`sr-Latn-ME`| |**Serbian (Montenegro)**|`sr-ME`| |**Uzbek (Arabic)**|`uz-Arab`| |**Uzbek (Cyrillic)**|`uz-cyrl`|  </details>
         * @summary OCR Tables Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {string} [language] Language code of the language the document is written in (ex: fr (French), en (English), es (Spanish))
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrOcrTablesAsyncCreate(providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, language?: string, options?: any): AxiosPromise<LaunchAsyncJobResponse> {
            return localVarFp.ocrOcrTablesAsyncCreate(providers, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, language, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary OCR Tables List Job
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrOcrTablesAsyncRetrieve(options?: any): AxiosPromise<ListAsyncJobResponse> {
            return localVarFp.ocrOcrTablesAsyncRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary OCR Tables Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrOcrTablesAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: any): AxiosPromise<AsyncocrocrTablesAsyncResponseModel> {
            return localVarFp.ocrOcrTablesAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**base64**|`latest`|0.25 (per 1 page)|1 page |**dataleon**|`v3.1.0`|0.025 (per 1 page)|1 page |**microsoft**|`rest API 3.0`|0.05 (per 1 page)|1 page |**mindee**|`v2`|0.1 (per 1 page)|1 page |**tabscanner**|`latest`|0.08 (per 1 page)|1 page |**google**|`DocumentAI v1 beta3`|0.01 (per 1 page)|10 page |**klippa**|`v1`|0.1 (per 1 file)|1 file |**veryfi**|`v8`|0.08 (per 1 file)|1 file |**amazon**|`boto3 1.26.8`|0.01 (per 1 page)|1 page   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Catalan**|`ca`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Estonian**|`et`| |**French**|`fr`| |**German**|`de`| |**Italian**|`it`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Portuguese**|`pt`| |**Romanian**|`ro`| |**Spanish**|`es`| |**Swedish**|`sv`| |**Turkish**|`tr`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Catalan (Spain)**|`ca-ES`| |**Danish (Denmark)**|`da-DK`| |**Dutch (Netherlands)**|`nl-NL`| |**English (United Kingdom)**|`en-GB`| |**English (United States)**|`en-US`| |**French (Canada)**|`fr-CA`| |**French (France)**|`fr-FR`| |**French (Switzerland)**|`fr-CH`| |**German (Germany)**|`de-DE`| |**German (Switzerland)**|`de-CH`| |**Italian (Italy)**|`it-IT`| |**Italian (Switzerland)**|`it-CH`| |**Portuguese (Portugal)**|`pt-PT`| |**Spanish (Spain)**|`es-ES`|  </details>
         * @summary Receipt Parser
         * @param {OcrreceiptParserReceiptParserRequest} ocrreceiptParserReceiptParserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrReceiptParserCreate(ocrreceiptParserReceiptParserRequest: OcrreceiptParserReceiptParserRequest, options?: any): AxiosPromise<OcrreceiptParserResponseModel> {
            return localVarFp.ocrReceiptParserCreate(ocrreceiptParserReceiptParserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**affinda**|`affinda 1.0.2`|0.07 (per 1 file)|1 file |**hireability**|`hireability 1.0.0`|0.05 (per 1 file)|1 file   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Arabic**|`ar`| |**English**|`en`| |**French**|`fr`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`|  </details>
         * @summary Resume Parser
         * @param {OcrresumeParserResumeParserRequest} ocrresumeParserResumeParserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocrResumeParserCreate(ocrresumeParserResumeParserRequest: OcrresumeParserResumeParserRequest, options?: any): AxiosPromise<OcrresumeParserResponseModel> {
            return localVarFp.ocrResumeParserCreate(ocrresumeParserResumeParserRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OCRApi - object-oriented interface
 * @export
 * @class OCRApi
 * @extends {BaseAPI}
 */
export class OCRApi extends BaseAPI {
    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**base64**|`latest`|0.25 (per 1 page)|1 page |**veryfi**|`v8`|0.16 (per 1 request)|1 request   </details>  
     * @summary Bank Check Parsing
     * @param {OcrbankCheckParsingBankCheckParsingRequest} ocrbankCheckParsingBankCheckParsingRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OCRApi
     */
    public ocrBankCheckParsingCreate(ocrbankCheckParsingBankCheckParsingRequest: OcrbankCheckParsingBankCheckParsingRequest, options?: AxiosRequestConfig) {
        return OCRApiFp(this.configuration).ocrBankCheckParsingCreate(ocrbankCheckParsingBankCheckParsingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|15.0 (per 1000 page)|1 page   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**English**|`en`| |**French**|`fr`| |**German**|`de`| |**Italian**|`it`| |**Portuguese**|`pt`| |**Spanish**|`es`|  </details>
     * @summary Custom Document Parsing Launch Job
     * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
     * @param {string} queries Your queries need to be a list of dict containing the questions you want answered and the page to look for the information in :  \\\&#39;[{\\\&#39;query\\\&#39;:\\\&#39;your query\\\&#39;,\\\&#39;pages\\\&#39;:\\\&#39;your pages\\\&#39;},{\\\&#39;query\\\&#39;:\\\&#39;your query\\\&#39;,\\\&#39;pages\\\&#39;:\\\&#39;your pages\\\&#39;}]\\\&#39;
     * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
     * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
     * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
     * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OCRApi
     */
    public ocrCustomDocumentParsingAsyncCreate(providers: string, queries: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options?: AxiosRequestConfig) {
        return OCRApiFp(this.configuration).ocrCustomDocumentParsingAsyncCreate(providers, queries, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
     * @summary Custom Document Parsing List Job
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OCRApi
     */
    public ocrCustomDocumentParsingAsyncRetrieve(options?: AxiosRequestConfig) {
        return OCRApiFp(this.configuration).ocrCustomDocumentParsingAsyncRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the status and results of an async job given its ID.
     * @summary Custom Document Parsing Get Job Results
     * @param {string} publicId 
     * @param {boolean} [responseAsDict] 
     * @param {boolean} [showOriginalResponse] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OCRApi
     */
    public ocrCustomDocumentParsingAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: AxiosRequestConfig) {
        return OCRApiFp(this.configuration).ocrCustomDocumentParsingAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|0.05 (per 1 page)|1 page |**base64**|`latest`|0.25 (per 1 page)|1 page   </details>  
     * @summary Data Extraction
     * @param {OcrdataExtractionDataExtractionRequest} ocrdataExtractionDataExtractionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OCRApi
     */
    public ocrDataExtractionCreate(ocrdataExtractionDataExtractionRequest: OcrdataExtractionDataExtractionRequest, options?: AxiosRequestConfig) {
        return OCRApiFp(this.configuration).ocrDataExtractionCreate(ocrdataExtractionDataExtractionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|0.025 (per 1 page)|1 page |**base64**|`latest`|0.2 (per 1 page)|1 page |**microsoft**|`rest API 3.0`|0.05 (per 1 page)|1 page |**mindee**|`v2`|0.1 (per 1 page)|1 page |**klippa**|`v1`|0.1 (per 1 file)|1 file   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**English**|`en`| |**French**|`fr`| |**German**|`de`| |**Italian**|`it`| |**Portuguese**|`pt`| |**Spanish**|`es`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**English (United States)**|`en-US`| |**French (France)**|`fr-FR`| |**German (Germany)**|`de-DE`| |**Italian (Italy)**|`it-IT`| |**Portuguese (Portugal)**|`pt-PT`| |**Spanish (Spain)**|`es-ES`|  </details>
     * @summary Identity Parser
     * @param {OcridentityParserIdentityParserRequest} ocridentityParserIdentityParserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OCRApi
     */
    public ocrIdentityParserCreate(ocridentityParserIdentityParserRequest: OcridentityParserIdentityParserRequest, options?: AxiosRequestConfig) {
        return OCRApiFp(this.configuration).ocrIdentityParserCreate(ocridentityParserIdentityParserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**affinda**|`affinda 1.0.2`|0.08 (per 1 page)|1 page |**base64**|`latest`|0.25 (per 1 page)|1 page |**dataleon**|`v3.1.0`|0.05 (per 1 page)|1 page |**microsoft**|`v2.1-preview.3`|0.05 (per 1 page)|1 page |**mindee**|`v2`|0.1 (per 1 page)|1 page |**amazon**|`boto3 1.26.8`|0.01 (per 1 page)|1 page |**google**|`DocumentAI v1 beta3`|0.01 (per 1 page)|10 page |**klippa**|`v1`|0.1 (per 1 file)|1 file |**veryfi**|`v8`|0.16 (per 1 file)|1 file   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Catalan**|`ca`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Estonian**|`et`| |**French**|`fr`| |**German**|`de`| |**Italian**|`it`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Portuguese**|`pt`| |**Romanian**|`ro`| |**Spanish**|`es`| |**Swedish**|`sv`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Danish (Denmark)**|`da-DK`| |**English (United States)**|`en-US`| |**French (France)**|`fr-FR`| |**German (Germany)**|`de-DE`| |**Italian (Italy)**|`it-IT`| |**Portuguese (Portugal)**|`pt-PT`| |**Spanish (Spain)**|`es-ES`|  </details>
     * @summary Invoice Parser
     * @param {OcrinvoiceParserInvoiceParserRequest} ocrinvoiceParserInvoiceParserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OCRApi
     */
    public ocrInvoiceParserCreate(ocrinvoiceParserInvoiceParserRequest: OcrinvoiceParserInvoiceParserRequest, options?: AxiosRequestConfig) {
        return OCRApiFp(this.configuration).ocrInvoiceParserCreate(ocrinvoiceParserInvoiceParserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.5 (per 1000 page)|1 page   </details>  
     * @summary Ocr Async Launch Job
     * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
     * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
     * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
     * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
     * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OCRApi
     */
    public ocrOcrAsyncCreate(providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options?: AxiosRequestConfig) {
        return OCRApiFp(this.configuration).ocrOcrAsyncCreate(providers, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
     * @summary Ocr Async List Job
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OCRApi
     */
    public ocrOcrAsyncRetrieve(options?: AxiosRequestConfig) {
        return OCRApiFp(this.configuration).ocrOcrAsyncRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the status and results of an async job given its ID.
     * @summary Ocr Async Get Job Results
     * @param {string} publicId 
     * @param {boolean} [responseAsDict] 
     * @param {boolean} [showOriginalResponse] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OCRApi
     */
    public ocrOcrAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: AxiosRequestConfig) {
        return OCRApiFp(this.configuration).ocrOcrAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.5 (per 1000 page)|1 page |**clarifai**|`8.0.0`|2.0 (per 1000 page)|1 page |**google**|`v1`|1.5 (per 1000 page)|1 page |**microsoft**|`v3.2`|1.0 (per 1000 page)|1 page |**sentisight**|`v3.3.1`|1.0 (per 1000 file)|1 file |**api4ai**|`v1.0.0`|3.0 (per 1000 request)|1 request   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Abaza**|`abq`| |**Adyghe**|`ady`| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Angika**|`anp`| |**Arabic**|`ar`| |**Assamese**|`as`| |**Asturian**|`ast`| |**Avaric**|`av`| |**Awadhi**|`awa`| |**Azerbaijani**|`az`| |**Bagheli**|`bfy`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bengali**|`bn`| |**Bhojpuri**|`bho`| |**Bihari languages**|`bh`| |**Bislama**|`bi`| |**Bodo (India)**|`brx`| |**Bosnian**|`bs`| |**Braj**|`bra`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Bundeli**|`bns`| |**Buriat**|`bua`| |**Camling**|`rab`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Chamorro**|`ch`| |**Chechen**|`ce`| |**Chhattisgarhi**|`hne`| |**Chinese**|`zh`| |**Cornish**|`kw`| |**Corsican**|`co`| |**Crimean Tatar**|`crh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dargwa**|`dar`| |**Dari**|`prs`| |**Dhimal**|`dhi`| |**Dogri (macrolanguage)**|`doi`| |**Dutch**|`nl`| |**English**|`en`| |**Erzya**|`myv`| |**Estonian**|`et`| |**Faroese**|`fo`| |**Fijian**|`fj`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Friulian**|`fur`| |**Gagauz**|`gag`| |**Galician**|`gl`| |**German**|`de`| |**Gilbertese**|`gil`| |**Goan Konkani**|`gom`| |**Gondi**|`gon`| |**Gurung**|`gvr`| |**Haitian**|`ht`| |**Halbi**|`hlb`| |**Hani**|`hni`| |**Haryanvi**|`bgc`| |**Hawaiian**|`haw`| |**Hindi**|`hi`| |**Hmong Daw**|`mww`| |**Ho**|`hoc`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Inari Sami**|`smn`| |**Indonesian**|`id`| |**Ingush**|`inh`| |**Interlingua (International Auxiliary Language Association)**|`ia`| |**Inuktitut**|`iu`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Jaunsari**|`jns`| |**Javanese**|`jv`| |**K\'iche\'**|`quc`| |**Kabardian**|`kbd`| |**Kabuverdianu**|`kea`| |**Kachin**|`kac`| |**Kalaallisut**|`kl`| |**Kangri**|`xnr`| |**Kara-Kalpak**|`kaa`| |**Karachay-Balkar**|`krc`| |**Kashubian**|`csb`| |**Kazakh**|`kk`| |**Khaling**|`klr`| |**Khasi**|`kha`| |**Kirghiz**|`ky`| |**Korean**|`ko`| |**Korku**|`kfq`| |**Koryak**|`kpy`| |**Kosraean**|`kos`| |**Kumarbhag Paharia**|`kmj`| |**Kumyk**|`kum`| |**Kurdish**|`ku`| |**Kurukh**|`kru`| |**Kölsch**|`ksh`| |**Lak**|`lbe`| |**Lakota**|`lkt`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lezghian**|`lez`| |**Lithuanian**|`lt`| |**Lower Sorbian**|`dsb`| |**Lule Sami**|`smj`| |**Luxembourgish**|`lb`| |**Mahasu Pahari**|`bfz`| |**Maithili**|`mai`| |**Malay (macrolanguage)**|`ms`| |**Maltese**|`mt`| |**Manx**|`gv`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Marshallese**|`mh`| |**Mongolian**|`mn`| |**Neapolitan**|`nap`| |**Nepali (macrolanguage)**|`ne`| |**Newari**|`new`| |**Niuean**|`niu`| |**Nogai**|`nog`| |**Northern Sami**|`se`| |**Norwegian**|`no`| |**Occitan (post 1500)**|`oc`| |**Old English (ca. 450-1100)**|`ang`| |**Ossetian**|`os`| |**Pali**|`pi`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Romansh**|`rm`| |**Russian**|`ru`| |**Sadri**|`sck`| |**Samoan**|`sm`| |**Sanskrit**|`sa`| |**Santali**|`sat`| |**Scots**|`sco`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Sherpa**|`xsr`| |**Sirmauri**|`srx`| |**Skolt Sami**|`sms`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Southern Sami**|`sma`| |**Spanish**|`es`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tabassaran**|`tab`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tatar**|`tt`| |**Tetum**|`tet`| |**Thangmi**|`thf`| |**Tonga (Tonga Islands)**|`to`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Tuvinian**|`tyv`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Upper Sorbian**|`hsb`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Volapük**|`vo`| |**Walser**|`wae`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Yucateco**|`yua`| |**Zhuang**|`za`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Arabic (Pseudo-Accents)**|`ar-XA`| |**Belarusian**|`be-cyrl`| |**Belarusian (Latin)**|`be-latn`| |**Chinese (China)**|`zh-CN`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Taiwan)**|`zh-TW`| |**Chinese (Traditional)**|`zh-Hant`| |**Danish (Denmark)**|`da-DK`| |**Dutch (Netherlands)**|`nl-NL`| |**English (United States)**|`en-US`| |**Finnish (Finland)**|`fi-FI`| |**French (France)**|`fr-FR`| |**German (Germany)**|`de-DE`| |**Hungarian (Hungary)**|`hu-HU`| |**Italian (Italy)**|`it-IT`| |**Japanese (Japan)**|`ja-JP`| |**Kara-Kalpak (Cyrillic)**|`kaa-Cyrl`| |**Kazakh**|`kk-cyrl`| |**Kazakh (Latin)**|`kk-latn`| |**Korean (South Korea)**|`ko-KR`| |**Kurdish (Arabic)**|`ku-arab`| |**Kurdish (Latin)**|`ku-latn`| |**Polish**|`pl-PO`| |**Portuguese (Portugal)**|`pt-PT`| |**Region: Czechia**|`cz-CZ`| |**Region: Greece**|`gr-GR`| |**Russian (Russia)**|`ru-RU`| |**Serbian (Cyrillic, Montenegro)**|`sr-Cyrl-ME`| |**Serbian (Latin)**|`sr-latn`| |**Serbian (Latin, Montenegro)**|`sr-Latn-ME`| |**Serbian (Montenegro)**|`sr-ME`| |**Spanish (Spain)**|`es-ES`| |**Swedish (Sweden)**|`sv-SE`| |**Turkish (Turkey)**|`tr-TR`| |**Uzbek (Arabic)**|`uz-arab`| |**Uzbek (Cyrillic)**|`uz-cyrl`|  </details>
     * @summary OCR
     * @param {OcrocrOcrRequest} ocrocrOcrRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OCRApi
     */
    public ocrOcrCreate(ocrocrOcrRequest: OcrocrOcrRequest, options?: AxiosRequestConfig) {
        return OCRApiFp(this.configuration).ocrOcrCreate(ocrocrOcrRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|15.0 (per 1000 page)|1 page |**google**|`DocumentAI v1 beta3`|65.0 (per 1000 page)|1 page |**microsoft**|`rest API 3.0`|50.0 (per 1000 page)|1 page   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Angika**|`anp`| |**Arabic**|`ar`| |**Asturian**|`ast`| |**Awadhi**|`awa`| |**Azerbaijani**|`az`| |**Bagheli**|`bfy`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bhojpuri**|`bho`| |**Bislama**|`bi`| |**Bodo (India)**|`brx`| |**Bosnian**|`bs`| |**Braj**|`bra`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Bundeli**|`bns`| |**Buriat**|`bua`| |**Camling**|`rab`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Chamorro**|`ch`| |**Chhattisgarhi**|`hne`| |**Chinese**|`zh`| |**Cornish**|`kw`| |**Corsican**|`co`| |**Crimean Tatar**|`crh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dari**|`prs`| |**Dhimal**|`dhi`| |**Dogri (macrolanguage)**|`doi`| |**Dutch**|`nl`| |**English**|`en`| |**Erzya**|`myv`| |**Estonian**|`et`| |**Faroese**|`fo`| |**Fijian**|`fj`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Friulian**|`fur`| |**Gagauz**|`gag`| |**Galician**|`gl`| |**German**|`de`| |**Gilbertese**|`gil`| |**Gondi**|`gon`| |**Gurung**|`gvr`| |**Haitian**|`ht`| |**Halbi**|`hlb`| |**Hani**|`hni`| |**Haryanvi**|`bgc`| |**Hawaiian**|`haw`| |**Hindi**|`hi`| |**Hmong Daw**|`mww`| |**Ho**|`hoc`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Inari Sami**|`smn`| |**Indonesian**|`id`| |**Interlingua (International Auxiliary Language Association)**|`ia`| |**Inuktitut**|`iu`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Jaunsari**|`jns`| |**Javanese**|`jv`| |**K\'iche\'**|`quc`| |**Kabuverdianu**|`kea`| |**Kachin**|`kac`| |**Kalaallisut**|`kl`| |**Kangri**|`xnr`| |**Kara-Kalpak**|`kaa`| |**Karachay-Balkar**|`krc`| |**Kashubian**|`csb`| |**Kazakh**|`kk`| |**Khaling**|`klr`| |**Khasi**|`kha`| |**Kirghiz**|`ky`| |**Korean**|`ko`| |**Korku**|`kfq`| |**Koryak**|`kpy`| |**Kosraean**|`kos`| |**Kumarbhag Paharia**|`kmj`| |**Kumyk**|`kum`| |**Kurdish**|`ku`| |**Kurukh**|`kru`| |**Kölsch**|`ksh`| |**Lakota**|`lkt`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Lower Sorbian**|`dsb`| |**Lule Sami**|`smj`| |**Luxembourgish**|`lb`| |**Mahasu Pahari**|`bfz`| |**Malay (macrolanguage)**|`ms`| |**Maltese**|`mt`| |**Manx**|`gv`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Mongolian**|`mn`| |**Neapolitan**|`nap`| |**Nepali (macrolanguage)**|`ne`| |**Niuean**|`niu`| |**Nogai**|`nog`| |**Northern Sami**|`se`| |**Norwegian**|`no`| |**Occitan (post 1500)**|`oc`| |**Ossetian**|`os`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Romansh**|`rm`| |**Russian**|`ru`| |**Sadri**|`sck`| |**Samoan**|`sm`| |**Sanskrit**|`sa`| |**Santali**|`sat`| |**Scots**|`sco`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Sherpa**|`xsr`| |**Sirmauri**|`srx`| |**Skolt Sami**|`sms`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Southern Sami**|`sma`| |**Spanish**|`es`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tatar**|`tt`| |**Tetum**|`tet`| |**Thangmi**|`thf`| |**Tonga (Tonga Islands)**|`to`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Tuvinian**|`tyv`| |**Uighur**|`ug`| |**Upper Sorbian**|`hsb`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Volapük**|`vo`| |**Walser**|`wae`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Yucateco**|`yua`| |**Zhuang**|`za`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Belarusian**|`be-Cyrl`| |**Belarusian (Latin)**|`be-Latn`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Traditional)**|`zh-Hant`| |**Kara-Kalpak (Cyrillic)**|`kaa-Cyrl`| |**Kazakh**|`kk-Cyrl`| |**Kazakh (Latin)**|`kk-Latn`| |**Kurdish (Arabic)**|`ku-Arab`| |**Kurdish (Latin)**|`ku-Latn`| |**Serbian (Cyrillic)**|`sr-Cyrl`| |**Serbian (Cyrillic, Montenegro)**|`sr-Cyrl-ME`| |**Serbian (Latin)**|`sr-Latn`| |**Serbian (Latin, Montenegro)**|`sr-Latn-ME`| |**Serbian (Montenegro)**|`sr-ME`| |**Uzbek (Arabic)**|`uz-Arab`| |**Uzbek (Cyrillic)**|`uz-cyrl`|  </details>
     * @summary OCR Tables Launch Job
     * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
     * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
     * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
     * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
     * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @param {string} [language] Language code of the language the document is written in (ex: fr (French), en (English), es (Spanish))
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OCRApi
     */
    public ocrOcrTablesAsyncCreate(providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, language?: string, options?: AxiosRequestConfig) {
        return OCRApiFp(this.configuration).ocrOcrTablesAsyncCreate(providers, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, language, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
     * @summary OCR Tables List Job
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OCRApi
     */
    public ocrOcrTablesAsyncRetrieve(options?: AxiosRequestConfig) {
        return OCRApiFp(this.configuration).ocrOcrTablesAsyncRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the status and results of an async job given its ID.
     * @summary OCR Tables Get Job Results
     * @param {string} publicId 
     * @param {boolean} [responseAsDict] 
     * @param {boolean} [showOriginalResponse] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OCRApi
     */
    public ocrOcrTablesAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: AxiosRequestConfig) {
        return OCRApiFp(this.configuration).ocrOcrTablesAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**base64**|`latest`|0.25 (per 1 page)|1 page |**dataleon**|`v3.1.0`|0.025 (per 1 page)|1 page |**microsoft**|`rest API 3.0`|0.05 (per 1 page)|1 page |**mindee**|`v2`|0.1 (per 1 page)|1 page |**tabscanner**|`latest`|0.08 (per 1 page)|1 page |**google**|`DocumentAI v1 beta3`|0.01 (per 1 page)|10 page |**klippa**|`v1`|0.1 (per 1 file)|1 file |**veryfi**|`v8`|0.08 (per 1 file)|1 file |**amazon**|`boto3 1.26.8`|0.01 (per 1 page)|1 page   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Catalan**|`ca`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Estonian**|`et`| |**French**|`fr`| |**German**|`de`| |**Italian**|`it`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Portuguese**|`pt`| |**Romanian**|`ro`| |**Spanish**|`es`| |**Swedish**|`sv`| |**Turkish**|`tr`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Catalan (Spain)**|`ca-ES`| |**Danish (Denmark)**|`da-DK`| |**Dutch (Netherlands)**|`nl-NL`| |**English (United Kingdom)**|`en-GB`| |**English (United States)**|`en-US`| |**French (Canada)**|`fr-CA`| |**French (France)**|`fr-FR`| |**French (Switzerland)**|`fr-CH`| |**German (Germany)**|`de-DE`| |**German (Switzerland)**|`de-CH`| |**Italian (Italy)**|`it-IT`| |**Italian (Switzerland)**|`it-CH`| |**Portuguese (Portugal)**|`pt-PT`| |**Spanish (Spain)**|`es-ES`|  </details>
     * @summary Receipt Parser
     * @param {OcrreceiptParserReceiptParserRequest} ocrreceiptParserReceiptParserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OCRApi
     */
    public ocrReceiptParserCreate(ocrreceiptParserReceiptParserRequest: OcrreceiptParserReceiptParserRequest, options?: AxiosRequestConfig) {
        return OCRApiFp(this.configuration).ocrReceiptParserCreate(ocrreceiptParserReceiptParserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**affinda**|`affinda 1.0.2`|0.07 (per 1 file)|1 file |**hireability**|`hireability 1.0.0`|0.05 (per 1 file)|1 file   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Arabic**|`ar`| |**English**|`en`| |**French**|`fr`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`|  </details>
     * @summary Resume Parser
     * @param {OcrresumeParserResumeParserRequest} ocrresumeParserResumeParserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OCRApi
     */
    public ocrResumeParserCreate(ocrresumeParserResumeParserRequest: OcrresumeParserResumeParserRequest, options?: AxiosRequestConfig) {
        return OCRApiFp(this.configuration).ocrResumeParserCreate(ocrresumeParserResumeParserRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TextApi - axios parameter creator
 * @export
 */
export const TextApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**originalityai**|`v1`|0.01 (per 400 char)|400 char |**sapling**|`v1`|0.005 (per 1000 char)|1000 char   </details>  <details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`|  </details>
         * @summary AI Content Detection
         * @param {TextaiDetectionAiDetectionRequest} textaiDetectionAiDetectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textAiDetectionCreate: async (textaiDetectionAiDetectionRequest: TextaiDetectionAiDetectionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'textaiDetectionAiDetectionRequest' is not null or undefined
            assertParamExists('textAiDetectionCreate', 'textaiDetectionAiDetectionRequest', textaiDetectionAiDetectionRequest)
            const localVarPath = `/text/ai_detection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(textaiDetectionAiDetectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**emvista**|`v1.0`|3.0 (per 1000000 char)|1 char |**oneai**|`v0`|2.14 (per 1000000 char)|1 char |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000000 char)|300 char |**microsoft**|`v3.1`|0.25 (per 1000000 char)|1000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Arabic**|`ar`| |**Chinese**|`zh`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Finnish**|`fi`| |**French**|`fr`| |**German**|`de`| |**Hindi**|`hi`| |**Italian**|`it`| |**Japanese**|`ja`| |**Korean**|`ko`| |**Modern Greek (1453-)**|`el`| |**Norwegian**|`no`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Russian**|`ru`| |**Spanish**|`es`| |**Swedish**|`sv`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Traditional)**|`zh-Hant`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`|  </details>
         * @summary Anonymization
         * @param {TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest} texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textAnonymizationCreate: async (texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest: TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest' is not null or undefined
            assertParamExists('textAnonymizationCreate', 'texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest', texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest)
            const localVarPath = `/text/anonymization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**openai - gpt-3.5-turbo**|`v1Beta`|0.002 (per 1000 token)|1 token |**openai - gpt-4-32k-0314**|`v1Beta`|0.12 (per 1000 token)|1 token |**openai - gpt-4-0314**|`v1Beta`|0.06 (per 1000 token)|1 token |**openai - gpt-4**|`v1Beta`|0.06 (per 1000 token)|1 token |**openai - gpt-3.5-turbo-0301**|`v1Beta`|0.002 (per 1000 token)|1 token |**openai - gpt-4-32k**|`v1Beta`|0.12 (per 1000 token)|1 token |**openai**|`v1Beta`|0.12 (per 1000 token)|1 token |**google**|`v1`|0.5 (per 1000000 char)|1 char   </details>  
         * @summary Chat
         * @param {TextchatChatRequest} textchatChatRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textChatCreate: async (textchatChatRequest: TextchatChatRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'textchatChatRequest' is not null or undefined
            assertParamExists('textChatCreate', 'textchatChatRequest', textchatChatRequest)
            const localVarPath = `/text/chat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(textchatChatRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**openai**|`v1`|2.0 (per 1000000 token)|1 token |**google**|`v1`|0.5 (per 1000000 char)|1 char   </details>  
         * @summary Code Generation
         * @param {TextcodeGenerationCodeGenerationRequest} textcodeGenerationCodeGenerationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textCodeGenerationCreate: async (textcodeGenerationCodeGenerationRequest: TextcodeGenerationCodeGenerationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'textcodeGenerationCodeGenerationRequest' is not null or undefined
            assertParamExists('textCodeGenerationCreate', 'textcodeGenerationCodeGenerationRequest', textcodeGenerationCodeGenerationRequest)
            const localVarPath = `/text/code_generation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(textcodeGenerationCodeGenerationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**cohere**|`2022-12-06`|2.0 (per 1000 request)|1 request |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token   </details>  
         * @summary Custom Text Classification
         * @param {TextcustomClassificationCustomClassificationRequest} textcustomClassificationCustomClassificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textCustomClassificationCreate: async (textcustomClassificationCustomClassificationRequest: TextcustomClassificationCustomClassificationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'textcustomClassificationCustomClassificationRequest' is not null or undefined
            assertParamExists('textCustomClassificationCreate', 'textcustomClassificationCustomClassificationRequest', textcustomClassificationCustomClassificationRequest)
            const localVarPath = `/text/custom_classification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(textcustomClassificationCustomClassificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**cohere**|`2022-12-06`|2.0 (per 1000 request)|1 request   </details>  
         * @summary Custom Named Entity Recognition
         * @param {TextcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest} textcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textCustomNamedEntityRecognitionCreate: async (textcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest: TextcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'textcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest' is not null or undefined
            assertParamExists('textCustomNamedEntityRecognitionCreate', 'textcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest', textcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest)
            const localVarPath = `/text/custom_named_entity_recognition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(textcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**google**|`v1`|0.1 (per 1000000 char)|1 char   </details>  
         * @summary Embeddings
         * @param {TextembeddingsEmbeddingsRequest} textembeddingsEmbeddingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textEmbeddingsCreate: async (textembeddingsEmbeddingsRequest: TextembeddingsEmbeddingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'textembeddingsEmbeddingsRequest' is not null or undefined
            assertParamExists('textEmbeddingsCreate', 'textembeddingsEmbeddingsRequest', textembeddingsEmbeddingsRequest)
            const localVarPath = `/text/embeddings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(textembeddingsEmbeddingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|1.0 (per 1000000 char)|300 char |**google**|`v1`|2.0 (per 1000000 char)|1000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**English**|`en`| |**Japanese**|`ja`| |**Spanish**|`es`|  </details>
         * @summary Entity Sentiment
         * @param {TextentitySentimentEntitySentimentRequest} textentitySentimentEntitySentimentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textEntitySentimentCreate: async (textentitySentimentEntitySentimentRequest: TextentitySentimentEntitySentimentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'textentitySentimentEntitySentimentRequest' is not null or undefined
            assertParamExists('textEntitySentimentCreate', 'textentitySentimentEntitySentimentRequest', textentitySentimentEntitySentimentRequest)
            const localVarPath = `/text/entity_sentiment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(textentitySentimentEntitySentimentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**cohere**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**cohere - command**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**cohere - command-light**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**cohere - command-nightly**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**cohere - command-light-nightly**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**cohere - base**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**cohere - base-light**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**openai - text-ada-001**|`v1`|0.4 (per 1000000 token)|1 token |**openai - text-curie-001**|`v1`|2.0 (per 1000000 token)|1 token |**openai - text-davinci-002**|`v1`|20.0 (per 1000000 token)|1 token |**openai - text-davinci-003**|`v1`|20.0 (per 1000000 token)|1 token |**openai - text-babbage-001**|`v1`|0.5 (per 1000000 token)|1 token |**openai**|`v1`|20.0 (per 1000000 token)|1 token |**google**|`v1`|1.0 (per 1000000 char)|1 char   </details>  
         * @summary Generation
         * @param {TextgenerationGenerationRequest} textgenerationGenerationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textGenerationCreate: async (textgenerationGenerationRequest: TextgenerationGenerationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'textgenerationGenerationRequest' is not null or undefined
            assertParamExists('textGenerationCreate', 'textgenerationGenerationRequest', textgenerationGenerationRequest)
            const localVarPath = `/text/generation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(textgenerationGenerationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000000 char)|300 char |**ibm**|`v1 (2021-08-01)`|0.3 (per 1000000 char)|10000 char |**microsoft**|`v3.1`|1.0 (per 1000000 char)|1000 char |**emvista**|`v1.0`|1.0 (per 1000000 char)|1000 char |**oneai**|`v0`|2.14 (per 1000000 char)|1 char |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**tenstorrent**|`v1.0.0`|0.7 (per 1000000 char)|1000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Arabic**|`ar`| |**Bulgarian**|`bg`| |**Catalan**|`ca`| |**Chinese**|`zh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Estonian**|`et`| |**Finnish**|`fi`| |**French**|`fr`| |**German**|`de`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Hungarian**|`hu`| |**Indonesian**|`id`| |**Italian**|`it`| |**Japanese**|`ja`| |**Korean**|`ko`| |**Latvian**|`lv`| |**Modern Greek (1453-)**|`el`| |**Norwegian**|`no`| |**Norwegian Bokmål**|`nb`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Spanish**|`es`| |**Swedish**|`sv`| |**Turkish**|`tr`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Taiwan)**|`zh-TW`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`|  </details>
         * @summary Keyword Extraction
         * @param {TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest} texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textKeywordExtractionCreate: async (texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest: TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest' is not null or undefined
            assertParamExists('textKeywordExtractionCreate', 'texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest', texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest)
            const localVarPath = `/text/keyword_extraction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**microsoft**|`v1.0`|1.0 (per 1000 request)|1 request |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**clarifai**|`8.0.0`|1.2 (per 1000 request)|1 request |**google**|`v1`|5.0 (per 1000000 char)|100 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Aragonese**|`an`| |**Armenian**|`hy`| |**Assamese**|`as`| |**Asturian**|`ast`| |**Azerbaijani**|`az`| |**Bashkir**|`ba`| |**Basque**|`eu`| |**Bavarian**|`bar`| |**Belarusian**|`be`| |**Bengali**|`bn`| |**Bishnupriya**|`bpy`| |**Bosnian**|`bs`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Central Khmer**|`km`| |**Central Kurdish**|`ckb`| |**Chechen**|`ce`| |**Cherokee**|`chr`| |**Chinese**|`zh`| |**Chuvash**|`cv`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Estonian**|`et`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Fulah**|`ff`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Gujarati**|`gu`| |**Haitian**|`ht`| |**Hausa**|`ha`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Ido**|`io`| |**Igbo**|`ig`| |**Indonesian**|`id`| |**Inuktitut**|`iu`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kannada**|`kn`| |**Kazakh**|`kk`| |**Kinyarwanda**|`rw`| |**Kirghiz**|`ky`| |**Konkani (macrolanguage)**|`kok`| |**Korean**|`ko`| |**Lahnda**|`lah`| |**Lao**|`lo`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Lombard**|`lmo`| |**Low German**|`nds`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Minangkabau**|`min`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian**|`no`| |**Norwegian Bokmål**|`nb`| |**Norwegian Nynorsk**|`nn`| |**Occitan (post 1500)**|`oc`| |**Oriya (macrolanguage)**|`or`| |**Panjabi**|`pa`| |**Pedi**|`nso`| |**Persian**|`fa`| |**Piemontese**|`pms`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Quechua**|`qu`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Scots**|`sco`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Serbo-Croatian**|`sh`| |**Sicilian**|`scn`| |**Sindhi**|`sd`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**South Azerbaijani**|`azb`| |**Southern Sotho**|`st`| |**Spanish**|`es`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tamil**|`ta`| |**Tatar**|`tt`| |**Telugu**|`te`| |**Thai**|`th`| |**Tigrinya**|`ti`| |**Tswana**|`tn`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Volapük**|`vo`| |**Waray (Philippines)**|`war`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Wolof**|`wo`| |**Xhosa**|`xh`| |**Yoruba**|`yo`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (Traditional)**|`zh-Hant`| |**Low German (Netherlands)**|`nds-NL`|  </details>
         * @summary Moderation
         * @param {TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest} texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textModerationCreate: async (texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest: TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest' is not null or undefined
            assertParamExists('textModerationCreate', 'texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest', texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest)
            const localVarPath = `/text/moderation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000000 char)|300 char |**google**|`v1`|1.0 (per 1000000 char)|1000 char |**ibm**|`v1 (2021-08-01)`|0.3 (per 1000000 char)|10000 char |**lettria**|`v5.5.2`|2.0 (per 1000000 char)|1000 char |**microsoft**|`v3.1`|1.0 (per 1000000 char)|1000 char |**neuralspace**|`v1`|0.007 (per 1 request)|1 request |**oneai**|`v0`|2.14 (per 1000000 char)|1 char |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**tenstorrent**|`v1.0.0`|1.0 (per 1000000 char)|1000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Arabic**|`ar`| |**Aragonese**|`an`| |**Armenian**|`hy`| |**Assamese**|`as`| |**Azerbaijani**|`az`| |**Bashkir**|`ba`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bengali**|`bn`| |**Bosnian**|`bs`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Chechen**|`ce`| |**Chinese**|`zh`| |**Chuvash**|`cv`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Estonian**|`et`| |**Finnish**|`fi`| |**French**|`fr`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Gujarati**|`gu`| |**Haitian**|`ht`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Indonesian**|`id`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kannada**|`kn`| |**Kazakh**|`kk`| |**Kirghiz**|`ky`| |**Korean**|`ko`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Marathi**|`mr`| |**Modern Greek (1453-)**|`el`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian**|`no`| |**Norwegian Bokmål**|`nb`| |**Occitan (post 1500)**|`oc`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Serbian**|`sr`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Spanish**|`es`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tamil**|`ta`| |**Tatar**|`tt`| |**Telugu**|`te`| |**Turkish**|`tr`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Welsh**|`cy`| |**Yoruba**|`yo`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Taiwan)**|`zh-TW`| |**Chinese (Traditional)**|`zh-Hant`| |**English (United States)**|`en-US`| |**French (France)**|`fr-FR`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`|  </details>
         * @summary Named Entity Recognition
         * @param {TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest} texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textNamedEntityRecognitionCreate: async (texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest: TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest' is not null or undefined
            assertParamExists('textNamedEntityRecognitionCreate', 'texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest', texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest)
            const localVarPath = `/text/named_entity_recognition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**originalityai**|`v1`|0.01 (per 400 char)|400 char   </details>  
         * @summary Plagia Detection
         * @param {TextplagiaDetectionPlagiaDetectionRequest} textplagiaDetectionPlagiaDetectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textPlagiaDetectionCreate: async (textplagiaDetectionPlagiaDetectionRequest: TextplagiaDetectionPlagiaDetectionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'textplagiaDetectionPlagiaDetectionRequest' is not null or undefined
            assertParamExists('textPlagiaDetectionCreate', 'textplagiaDetectionPlagiaDetectionRequest', textplagiaDetectionPlagiaDetectionRequest)
            const localVarPath = `/text/plagia_detection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(textplagiaDetectionPlagiaDetectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**openai**|`v3.0.0`|0.24 (per 1000 token)|1 token   </details>  
         * @summary Prompt Optimization
         * @param {TextpromptOptimizationPromptOptimizationRequest} textpromptOptimizationPromptOptimizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textPromptOptimizationCreate: async (textpromptOptimizationPromptOptimizationRequest: TextpromptOptimizationPromptOptimizationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'textpromptOptimizationPromptOptimizationRequest' is not null or undefined
            assertParamExists('textPromptOptimizationCreate', 'textpromptOptimizationPromptOptimizationRequest', textpromptOptimizationPromptOptimizationRequest)
            const localVarPath = `/text/prompt_optimization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(textpromptOptimizationPromptOptimizationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**huggingface**|`v1`|0.02 (per 1000 char)|1 char |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**tenstorrent**|`v1.0.0`|10.0 (per 1000000 char)|1000 char   </details>  
         * @summary Question Answer
         * @param {TextquestionAnswerQuestionAnswerRequest} textquestionAnswerQuestionAnswerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textQuestionAnswerCreate: async (textquestionAnswerQuestionAnswerRequest: TextquestionAnswerQuestionAnswerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'textquestionAnswerQuestionAnswerRequest' is not null or undefined
            assertParamExists('textQuestionAnswerCreate', 'textquestionAnswerQuestionAnswerRequest', textquestionAnswerQuestionAnswerRequest)
            const localVarPath = `/text/question_answer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(textquestionAnswerQuestionAnswerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token   </details>  
         * @summary Search
         * @param {TextsearchSearchRequest} textsearchSearchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textSearchCreate: async (textsearchSearchRequest: TextsearchSearchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'textsearchSearchRequest' is not null or undefined
            assertParamExists('textSearchCreate', 'textsearchSearchRequest', textsearchSearchRequest)
            const localVarPath = `/text/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(textsearchSearchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000000 char)|300 char |**connexun**|`v1.0`|2.0 (per 1000 request)|1 request |**google**|`v1`|1.0 (per 1000000 char)|1000 char |**ibm**|`v1 (2021-08-01)`|0.3 (per 1000000 char)|10000 char |**lettria**|`v5.5.2`|2.0 (per 1000000 char)|1000 char |**microsoft**|`v3.1`|1.0 (per 1000000 char)|1000 char |**emvista**|`v1.0`|3.0 (per 1000000 char)|1000 char |**oneai**|`v0`|2.14 (per 1000000 char)|1 char |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**tenstorrent**|`v1.1.0`|0.7 (per 1000000 char)|1000 char |**sapling**|`v1`|20.0 (per 1000000 char)|1000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Arabic**|`ar`| |**Bengali**|`bn`| |**Chinese**|`zh`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Finnish**|`fi`| |**French**|`fr`| |**German**|`de`| |**Hindi**|`hi`| |**Indonesian**|`id`| |**Italian**|`it`| |**Japanese**|`ja`| |**Korean**|`ko`| |**Modern Greek (1453-)**|`el`| |**Norwegian**|`no`| |**Panjabi**|`pa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Spanish**|`es`| |**Swedish**|`sv`| |**Tamil**|`ta`| |**Thai**|`th`| |**Turkish**|`tr`| |**Ukrainian**|`uk`| |**Vietnamese**|`vi`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Taiwan)**|`zh-TW`| |**Chinese (Traditional)**|`zh-Hant`| |**English (United States)**|`en-US`| |**French (France)**|`fr-FR`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`|  </details>
         * @summary Sentiment Analysis
         * @param {TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest} texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textSentimentAnalysisCreate: async (texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest: TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest' is not null or undefined
            assertParamExists('textSentimentAnalysisCreate', 'texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest', texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest)
            const localVarPath = `/text/sentiment_analysis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**microsoft**|`v7`|0.3 (per 1000 request)|1 request |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**prowritingaid**|`v1.0`|10.0 (per 1000 request)|1 request |**cohere**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**sapling**|`v1`|2.0 (per 1000000 char)|1 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Armenian**|`hy`| |**Azerbaijani**|`az`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bengali**|`bn`| |**Bosnian**|`bs`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Central Khmer**|`km`| |**Chinese**|`zh`| |**Corsican**|`co`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Esperanto**|`eo`| |**Estonian**|`et`| |**Finnish**|`fi`| |**French**|`fr`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Gujarati**|`gu`| |**Haitian**|`ht`| |**Hausa**|`ha`| |**Hawaiian**|`haw`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Hmong**|`hmn`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Igbo**|`ig`| |**Indonesian**|`id`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kannada**|`kn`| |**Kazakh**|`kk`| |**Kinyarwanda**|`rw`| |**Kirghiz**|`ky`| |**Korean**|`ko`| |**Kurdish**|`ku`| |**Lao**|`lo`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian**|`no`| |**Norwegian Bokmål**|`nb`| |**Nyanja**|`ny`| |**Oriya (macrolanguage)**|`or`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Samoan**|`sm`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Shona**|`sn`| |**Sindhi**|`sd`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Southern Sotho**|`st`| |**Spanish**|`es`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tamil**|`ta`| |**Tatar**|`tt`| |**Telugu**|`te`| |**Thai**|`th`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Xhosa**|`xh`| |**Yiddish**|`yi`| |**Yoruba**|`yo`| |**Zulu**|`zu`| |**jp**|`jp`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (China)**|`zh-CN`| |**Chinese (Simplified)**|`zh-hans`| |**Chinese (Taiwan)**|`zh-TW`| |**Chinese (Traditional)**|`zh-hant`| |**English (United Kingdom)**|`en-gb`| |**Portuguese (Brazil)**|`pt-br`| |**Portuguese (Portugal)**|`pt-pt`|  </details>
         * @summary Spell Check
         * @param {TextspellCheckSpellCheckRequest} textspellCheckSpellCheckRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textSpellCheckCreate: async (textspellCheckSpellCheckRequest: TextspellCheckSpellCheckRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'textspellCheckSpellCheckRequest' is not null or undefined
            assertParamExists('textSpellCheckCreate', 'textspellCheckSpellCheckRequest', textspellCheckSpellCheckRequest)
            const localVarPath = `/text/spell_check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(textspellCheckSpellCheckRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**connexun**|`v1.0`|2.0 (per 1000 request)|1 request |**microsoft**|`v3.1`|2.0 (per 1000000 char)|1000 char |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**openai - text-ada-001**|`v3.0.0`|0.4 (per 1000000 token)|1 token |**openai - text-babbage-001**|`v3.0.0`|0.5 (per 1000000 token)|1 token |**openai - text-curie-001**|`v3.0.0`|2.0 (per 1000000 token)|1 token |**openai - text-davinci-002**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**openai - text-davinci-003**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**emvista**|`v1.0`|1.0 (per 1000000 char)|1000 char |**oneai**|`v0`|2.14 (per 1000000 char)|1 char |**cohere**|`2022-12-06`|5.0 (per 2000000 char)|2000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Abkhazian**|`ab`| |**Acoli**|`ach`| |**Afar**|`aa`| |**Afrikaans**|`af`| |**Akan**|`ak`| |**Albanian**|`sq`| |**American Sign Language**|`ase`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Aragonese**|`an`| |**Argentine Sign Language**|`aed`| |**Armenian**|`hy`| |**Assamese**|`as`| |**Avaric**|`av`| |**Avestan**|`ae`| |**Aymara**|`ay`| |**Azerbaijani**|`az`| |**Bambara**|`bm`| |**Bashkir**|`ba`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bemba (Zambia)**|`bem`| |**Bengali**|`bn`| |**Berber languages**|`ber`| |**Bihari languages**|`bh`| |**Bislama**|`bi`| |**Bosnian**|`bs`| |**Brazilian Sign Language**|`bzs`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Celtic languages**|`cel`| |**Central Bikol**|`bcl`| |**Central Khmer**|`km`| |**Chamorro**|`ch`| |**Chechen**|`ce`| |**Chilean Sign Language**|`csg`| |**Chinese**|`zh`| |**Church Slavic**|`cu`| |**Chuukese**|`chk`| |**Chuvash**|`cv`| |**Colombian Sign Language**|`csn`| |**Congo Swahili**|`swc`| |**Cornish**|`kw`| |**Corsican**|`co`| |**Cree**|`cr`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dhivehi**|`dv`| |**Dutch**|`nl`| |**Dzongkha**|`dz`| |**Efik**|`efi`| |**English**|`en`| |**Esperanto**|`eo`| |**Estonian**|`et`| |**Ewe**|`ee`| |**Faroese**|`fo`| |**Fijian**|`fj`| |**Finnish**|`fi`| |**Finnish Sign Language**|`fse`| |**Fon**|`fon`| |**French**|`fr`| |**Fulah**|`ff`| |**Ga**|`gaa`| |**Galician**|`gl`| |**Ganda**|`lg`| |**Georgian**|`ka`| |**German**|`de`| |**Gilbertese**|`gil`| |**Guarani**|`gn`| |**Gujarati**|`gu`| |**Gun**|`guw`| |**Haitian**|`ht`| |**Hausa**|`ha`| |**Hebrew**|`he`| |**Herero**|`hz`| |**Hiligaynon**|`hil`| |**Hindi**|`hi`| |**Hiri Motu**|`ho`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Ido**|`io`| |**Igbo**|`ig`| |**Iloko**|`ilo`| |**Indonesian**|`id`| |**Interlingua (International Auxiliary Language Association)**|`ia`| |**Interlingue**|`ie`| |**Inuktitut**|`iu`| |**Inupiaq**|`ik`| |**Irish**|`ga`| |**Isoko**|`iso`| |**Isthmus Zapotec**|`zai`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kabyle**|`kab`| |**Kalaallisut**|`kl`| |**Kannada**|`kn`| |**Kanuri**|`kr`| |**Kaonde**|`kqn`| |**Kashmiri**|`ks`| |**Kazakh**|`kk`| |**Kikuyu**|`ki`| |**Kinyarwanda**|`rw`| |**Kirghiz**|`ky`| |**Komi**|`kv`| |**Kongo**|`kg`| |**Korean**|`ko`| |**Kuanyama**|`kj`| |**Kurdish**|`ku`| |**Kwangali**|`kwn`| |**Lao**|`lo`| |**Latin**|`la`| |**Latvian**|`lv`| |**Limburgan**|`li`| |**Lingala**|`ln`| |**Lithuanian**|`lt`| |**Lozi**|`loz`| |**Luba-Katanga**|`lu`| |**Luba-Lulua**|`lua`| |**Lunda**|`lun`| |**Luo (Kenya and Tanzania)**|`luo`| |**Lushai**|`lus`| |**Luvale**|`lue`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Manx**|`gv`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Marshallese**|`mh`| |**Mexican Sign Language**|`mfs`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Morisyen**|`mfe`| |**Mossi**|`mos`| |**Nauru**|`na`| |**Navajo**|`nv`| |**Ndonga**|`ng`| |**Nepali (macrolanguage)**|`ne`| |**Niuean**|`niu`| |**North Ndebele**|`nd`| |**Northern Sami**|`se`| |**Norwegian**|`no`| |**Norwegian Bokmål**|`nb`| |**Norwegian Nynorsk**|`nn`| |**Nyaneka**|`nyk`| |**Nyanja**|`ny`| |**Occitan (post 1500)**|`oc`| |**Ojibwa**|`oj`| |**Oriya (macrolanguage)**|`or`| |**Oromo**|`om`| |**Ossetian**|`os`| |**Pali**|`pi`| |**Pangasinan**|`pag`| |**Panjabi**|`pa`| |**Papiamento**|`pap`| |**Pedi**|`nso`| |**Persian**|`fa`| |**Peruvian Sign Language**|`prl`| |**Pijin**|`pis`| |**Pohnpeian**|`pon`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Quechua**|`qu`| |**Romance languages**|`roa`| |**Romanian**|`ro`| |**Romansh**|`rm`| |**Rundi**|`rn`| |**Russian**|`ru`| |**Ruund**|`rnd`| |**Samoan**|`sm`| |**San Salvador Kongo**|`kwy`| |**Sango**|`sg`| |**Sanskrit**|`sa`| |**Sardinian**|`sc`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Seselwa Creole French**|`crs`| |**Shona**|`sn`| |**Sichuan Yi**|`ii`| |**Sindhi**|`sd`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**South Ndebele**|`nr`| |**Southern Sotho**|`st`| |**Spanish**|`es`| |**Spanish Sign Language**|`ssp`| |**Sranan Tongo**|`srn`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swati**|`ss`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tahitian**|`ty`| |**Tajik**|`tg`| |**Tamil**|`ta`| |**Tatar**|`tt`| |**Telugu**|`te`| |**Tetela**|`tll`| |**Tetun Dili**|`tdt`| |**Thai**|`th`| |**Tibetan**|`bo`| |**Tigrinya**|`ti`| |**Tiv**|`tiv`| |**Tok Pisin**|`tpi`| |**Tonga (Tonga Islands)**|`to`| |**Tonga (Zambia)**|`toi`| |**Tsonga**|`ts`| |**Tswana**|`tn`| |**Tumbuka**|`tum`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Tuvalu**|`tvl`| |**Twi**|`tw`| |**Tzotzil**|`tzo`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Umbundu**|`umb`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Venda**|`ve`| |**Venezuelan Sign Language**|`vsl`| |**Vietnamese**|`vi`| |**Volapük**|`vo`| |**Wallisian**|`wls`| |**Walloon**|`wa`| |**Waray (Philippines)**|`war`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Wolaytta**|`wal`| |**Wolof**|`wo`| |**Xhosa**|`xh`| |**Yapese**|`yap`| |**Yiddish**|`yi`| |**Yoruba**|`yo`| |**Yucateco**|`yua`| |**Yue Chinese**|`yue`| |**Zande (individual language)**|`zne`| |**Zhuang**|`za`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (Simplified)**|`zh-Hans`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Brazil)**|`pt-br`| |**Portuguese (Portugal)**|`pt-PT`| |**Portuguese (Portugal)**|`pt-pt`|  </details>
         * @summary Summarize
         * @param {TextsummarizeSummarizeRequest} textsummarizeSummarizeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textSummarizeCreate: async (textsummarizeSummarizeRequest: TextsummarizeSummarizeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'textsummarizeSummarizeRequest' is not null or undefined
            assertParamExists('textSummarizeCreate', 'textsummarizeSummarizeRequest', textsummarizeSummarizeRequest)
            const localVarPath = `/text/summarize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(textsummarizeSummarizeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|0.5 (per 1000000 char)|300 char |**google**|`v1`|0.5 (per 1000000 char)|1000 char |**ibm**|`v1 (2021-08-01)`|0.3 (per 1000000 char)|10000 char |**lettria**|`v5.5.2`|2.0 (per 1000000 char)|1000 char |**emvista**|`v1.0`|1.0 (per 1000000 char)|1 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Arabic**|`ar`| |**Chinese**|`zh`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Finnish**|`fi`| |**French**|`fr`| |**German**|`de`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Italian**|`it`| |**Japanese**|`ja`| |**Korean**|`ko`| |**Norwegian**|`no`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Slovak**|`sk`| |**Spanish**|`es`| |**Swedish**|`sv`| |**Turkish**|`tr`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (Taiwan)**|`zh-TW`| |**Chinese (Traditional)**|`zh-Hant`| |**English (United States)**|`en-US`| |**French (France)**|`fr-FR`|  </details>
         * @summary Syntax Analysis
         * @param {TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest} texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textSyntaxAnalysisCreate: async (texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest: TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest' is not null or undefined
            assertParamExists('textSyntaxAnalysisCreate', 'texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest', texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest)
            const localVarPath = `/text/syntax_analysis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**google**|`v1`|2.0 (per 1000000 char)|1000 char |**ibm**|`v1 (2021-08-01)`|0.3 (per 1000000 char)|10000 char |**openai**|`v1`|20.0 (per 1000000 token)|1 token |**tenstorrent**|`v1.0.0`|2.0 (per 1000000 char)|1000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Arabic**|`ar`| |**Chinese**|`zh`| |**Dutch**|`nl`| |**English**|`en`| |**French**|`fr`| |**German**|`de`| |**Italian**|`it`| |**Japanese**|`ja`| |**Korean**|`ko`| |**Portuguese**|`pt`| |**Russian**|`ru`| |**Spanish**|`es`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`|  </details>
         * @summary Topic Extraction
         * @param {TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest} texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textTopicExtractionCreate: async (texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest: TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest' is not null or undefined
            assertParamExists('textTopicExtractionCreate', 'texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest', texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest)
            const localVarPath = `/text/topic_extraction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TextApi - functional programming interface
 * @export
 */
export const TextApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TextApiAxiosParamCreator(configuration)
    return {
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**originalityai**|`v1`|0.01 (per 400 char)|400 char |**sapling**|`v1`|0.005 (per 1000 char)|1000 char   </details>  <details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`|  </details>
         * @summary AI Content Detection
         * @param {TextaiDetectionAiDetectionRequest} textaiDetectionAiDetectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async textAiDetectionCreate(textaiDetectionAiDetectionRequest: TextaiDetectionAiDetectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextaiDetectionResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.textAiDetectionCreate(textaiDetectionAiDetectionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**emvista**|`v1.0`|3.0 (per 1000000 char)|1 char |**oneai**|`v0`|2.14 (per 1000000 char)|1 char |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000000 char)|300 char |**microsoft**|`v3.1`|0.25 (per 1000000 char)|1000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Arabic**|`ar`| |**Chinese**|`zh`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Finnish**|`fi`| |**French**|`fr`| |**German**|`de`| |**Hindi**|`hi`| |**Italian**|`it`| |**Japanese**|`ja`| |**Korean**|`ko`| |**Modern Greek (1453-)**|`el`| |**Norwegian**|`no`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Russian**|`ru`| |**Spanish**|`es`| |**Swedish**|`sv`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Traditional)**|`zh-Hant`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`|  </details>
         * @summary Anonymization
         * @param {TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest} texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async textAnonymizationCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest: TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextanonymizationResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.textAnonymizationCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**openai - gpt-3.5-turbo**|`v1Beta`|0.002 (per 1000 token)|1 token |**openai - gpt-4-32k-0314**|`v1Beta`|0.12 (per 1000 token)|1 token |**openai - gpt-4-0314**|`v1Beta`|0.06 (per 1000 token)|1 token |**openai - gpt-4**|`v1Beta`|0.06 (per 1000 token)|1 token |**openai - gpt-3.5-turbo-0301**|`v1Beta`|0.002 (per 1000 token)|1 token |**openai - gpt-4-32k**|`v1Beta`|0.12 (per 1000 token)|1 token |**openai**|`v1Beta`|0.12 (per 1000 token)|1 token |**google**|`v1`|0.5 (per 1000000 char)|1 char   </details>  
         * @summary Chat
         * @param {TextchatChatRequest} textchatChatRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async textChatCreate(textchatChatRequest: TextchatChatRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextchatResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.textChatCreate(textchatChatRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**openai**|`v1`|2.0 (per 1000000 token)|1 token |**google**|`v1`|0.5 (per 1000000 char)|1 char   </details>  
         * @summary Code Generation
         * @param {TextcodeGenerationCodeGenerationRequest} textcodeGenerationCodeGenerationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async textCodeGenerationCreate(textcodeGenerationCodeGenerationRequest: TextcodeGenerationCodeGenerationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextcodeGenerationResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.textCodeGenerationCreate(textcodeGenerationCodeGenerationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**cohere**|`2022-12-06`|2.0 (per 1000 request)|1 request |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token   </details>  
         * @summary Custom Text Classification
         * @param {TextcustomClassificationCustomClassificationRequest} textcustomClassificationCustomClassificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async textCustomClassificationCreate(textcustomClassificationCustomClassificationRequest: TextcustomClassificationCustomClassificationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextcustomClassificationResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.textCustomClassificationCreate(textcustomClassificationCustomClassificationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**cohere**|`2022-12-06`|2.0 (per 1000 request)|1 request   </details>  
         * @summary Custom Named Entity Recognition
         * @param {TextcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest} textcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async textCustomNamedEntityRecognitionCreate(textcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest: TextcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextcustomNamedEntityRecognitionResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.textCustomNamedEntityRecognitionCreate(textcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**google**|`v1`|0.1 (per 1000000 char)|1 char   </details>  
         * @summary Embeddings
         * @param {TextembeddingsEmbeddingsRequest} textembeddingsEmbeddingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async textEmbeddingsCreate(textembeddingsEmbeddingsRequest: TextembeddingsEmbeddingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextembeddingsResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.textEmbeddingsCreate(textembeddingsEmbeddingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|1.0 (per 1000000 char)|300 char |**google**|`v1`|2.0 (per 1000000 char)|1000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**English**|`en`| |**Japanese**|`ja`| |**Spanish**|`es`|  </details>
         * @summary Entity Sentiment
         * @param {TextentitySentimentEntitySentimentRequest} textentitySentimentEntitySentimentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async textEntitySentimentCreate(textentitySentimentEntitySentimentRequest: TextentitySentimentEntitySentimentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextentitySentimentResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.textEntitySentimentCreate(textentitySentimentEntitySentimentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**cohere**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**cohere - command**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**cohere - command-light**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**cohere - command-nightly**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**cohere - command-light-nightly**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**cohere - base**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**cohere - base-light**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**openai - text-ada-001**|`v1`|0.4 (per 1000000 token)|1 token |**openai - text-curie-001**|`v1`|2.0 (per 1000000 token)|1 token |**openai - text-davinci-002**|`v1`|20.0 (per 1000000 token)|1 token |**openai - text-davinci-003**|`v1`|20.0 (per 1000000 token)|1 token |**openai - text-babbage-001**|`v1`|0.5 (per 1000000 token)|1 token |**openai**|`v1`|20.0 (per 1000000 token)|1 token |**google**|`v1`|1.0 (per 1000000 char)|1 char   </details>  
         * @summary Generation
         * @param {TextgenerationGenerationRequest} textgenerationGenerationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async textGenerationCreate(textgenerationGenerationRequest: TextgenerationGenerationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextgenerationResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.textGenerationCreate(textgenerationGenerationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000000 char)|300 char |**ibm**|`v1 (2021-08-01)`|0.3 (per 1000000 char)|10000 char |**microsoft**|`v3.1`|1.0 (per 1000000 char)|1000 char |**emvista**|`v1.0`|1.0 (per 1000000 char)|1000 char |**oneai**|`v0`|2.14 (per 1000000 char)|1 char |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**tenstorrent**|`v1.0.0`|0.7 (per 1000000 char)|1000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Arabic**|`ar`| |**Bulgarian**|`bg`| |**Catalan**|`ca`| |**Chinese**|`zh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Estonian**|`et`| |**Finnish**|`fi`| |**French**|`fr`| |**German**|`de`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Hungarian**|`hu`| |**Indonesian**|`id`| |**Italian**|`it`| |**Japanese**|`ja`| |**Korean**|`ko`| |**Latvian**|`lv`| |**Modern Greek (1453-)**|`el`| |**Norwegian**|`no`| |**Norwegian Bokmål**|`nb`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Spanish**|`es`| |**Swedish**|`sv`| |**Turkish**|`tr`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Taiwan)**|`zh-TW`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`|  </details>
         * @summary Keyword Extraction
         * @param {TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest} texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async textKeywordExtractionCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest: TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextkeywordExtractionResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.textKeywordExtractionCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**microsoft**|`v1.0`|1.0 (per 1000 request)|1 request |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**clarifai**|`8.0.0`|1.2 (per 1000 request)|1 request |**google**|`v1`|5.0 (per 1000000 char)|100 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Aragonese**|`an`| |**Armenian**|`hy`| |**Assamese**|`as`| |**Asturian**|`ast`| |**Azerbaijani**|`az`| |**Bashkir**|`ba`| |**Basque**|`eu`| |**Bavarian**|`bar`| |**Belarusian**|`be`| |**Bengali**|`bn`| |**Bishnupriya**|`bpy`| |**Bosnian**|`bs`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Central Khmer**|`km`| |**Central Kurdish**|`ckb`| |**Chechen**|`ce`| |**Cherokee**|`chr`| |**Chinese**|`zh`| |**Chuvash**|`cv`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Estonian**|`et`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Fulah**|`ff`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Gujarati**|`gu`| |**Haitian**|`ht`| |**Hausa**|`ha`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Ido**|`io`| |**Igbo**|`ig`| |**Indonesian**|`id`| |**Inuktitut**|`iu`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kannada**|`kn`| |**Kazakh**|`kk`| |**Kinyarwanda**|`rw`| |**Kirghiz**|`ky`| |**Konkani (macrolanguage)**|`kok`| |**Korean**|`ko`| |**Lahnda**|`lah`| |**Lao**|`lo`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Lombard**|`lmo`| |**Low German**|`nds`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Minangkabau**|`min`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian**|`no`| |**Norwegian Bokmål**|`nb`| |**Norwegian Nynorsk**|`nn`| |**Occitan (post 1500)**|`oc`| |**Oriya (macrolanguage)**|`or`| |**Panjabi**|`pa`| |**Pedi**|`nso`| |**Persian**|`fa`| |**Piemontese**|`pms`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Quechua**|`qu`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Scots**|`sco`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Serbo-Croatian**|`sh`| |**Sicilian**|`scn`| |**Sindhi**|`sd`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**South Azerbaijani**|`azb`| |**Southern Sotho**|`st`| |**Spanish**|`es`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tamil**|`ta`| |**Tatar**|`tt`| |**Telugu**|`te`| |**Thai**|`th`| |**Tigrinya**|`ti`| |**Tswana**|`tn`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Volapük**|`vo`| |**Waray (Philippines)**|`war`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Wolof**|`wo`| |**Xhosa**|`xh`| |**Yoruba**|`yo`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (Traditional)**|`zh-Hant`| |**Low German (Netherlands)**|`nds-NL`|  </details>
         * @summary Moderation
         * @param {TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest} texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async textModerationCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest: TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextmoderationResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.textModerationCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000000 char)|300 char |**google**|`v1`|1.0 (per 1000000 char)|1000 char |**ibm**|`v1 (2021-08-01)`|0.3 (per 1000000 char)|10000 char |**lettria**|`v5.5.2`|2.0 (per 1000000 char)|1000 char |**microsoft**|`v3.1`|1.0 (per 1000000 char)|1000 char |**neuralspace**|`v1`|0.007 (per 1 request)|1 request |**oneai**|`v0`|2.14 (per 1000000 char)|1 char |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**tenstorrent**|`v1.0.0`|1.0 (per 1000000 char)|1000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Arabic**|`ar`| |**Aragonese**|`an`| |**Armenian**|`hy`| |**Assamese**|`as`| |**Azerbaijani**|`az`| |**Bashkir**|`ba`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bengali**|`bn`| |**Bosnian**|`bs`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Chechen**|`ce`| |**Chinese**|`zh`| |**Chuvash**|`cv`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Estonian**|`et`| |**Finnish**|`fi`| |**French**|`fr`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Gujarati**|`gu`| |**Haitian**|`ht`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Indonesian**|`id`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kannada**|`kn`| |**Kazakh**|`kk`| |**Kirghiz**|`ky`| |**Korean**|`ko`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Marathi**|`mr`| |**Modern Greek (1453-)**|`el`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian**|`no`| |**Norwegian Bokmål**|`nb`| |**Occitan (post 1500)**|`oc`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Serbian**|`sr`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Spanish**|`es`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tamil**|`ta`| |**Tatar**|`tt`| |**Telugu**|`te`| |**Turkish**|`tr`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Welsh**|`cy`| |**Yoruba**|`yo`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Taiwan)**|`zh-TW`| |**Chinese (Traditional)**|`zh-Hant`| |**English (United States)**|`en-US`| |**French (France)**|`fr-FR`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`|  </details>
         * @summary Named Entity Recognition
         * @param {TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest} texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async textNamedEntityRecognitionCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest: TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextnamedEntityRecognitionResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.textNamedEntityRecognitionCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**originalityai**|`v1`|0.01 (per 400 char)|400 char   </details>  
         * @summary Plagia Detection
         * @param {TextplagiaDetectionPlagiaDetectionRequest} textplagiaDetectionPlagiaDetectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async textPlagiaDetectionCreate(textplagiaDetectionPlagiaDetectionRequest: TextplagiaDetectionPlagiaDetectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextplagiaDetectionResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.textPlagiaDetectionCreate(textplagiaDetectionPlagiaDetectionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**openai**|`v3.0.0`|0.24 (per 1000 token)|1 token   </details>  
         * @summary Prompt Optimization
         * @param {TextpromptOptimizationPromptOptimizationRequest} textpromptOptimizationPromptOptimizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async textPromptOptimizationCreate(textpromptOptimizationPromptOptimizationRequest: TextpromptOptimizationPromptOptimizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextpromptOptimizationResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.textPromptOptimizationCreate(textpromptOptimizationPromptOptimizationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**huggingface**|`v1`|0.02 (per 1000 char)|1 char |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**tenstorrent**|`v1.0.0`|10.0 (per 1000000 char)|1000 char   </details>  
         * @summary Question Answer
         * @param {TextquestionAnswerQuestionAnswerRequest} textquestionAnswerQuestionAnswerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async textQuestionAnswerCreate(textquestionAnswerQuestionAnswerRequest: TextquestionAnswerQuestionAnswerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextquestionAnswerResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.textQuestionAnswerCreate(textquestionAnswerQuestionAnswerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token   </details>  
         * @summary Search
         * @param {TextsearchSearchRequest} textsearchSearchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async textSearchCreate(textsearchSearchRequest: TextsearchSearchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextsearchResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.textSearchCreate(textsearchSearchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000000 char)|300 char |**connexun**|`v1.0`|2.0 (per 1000 request)|1 request |**google**|`v1`|1.0 (per 1000000 char)|1000 char |**ibm**|`v1 (2021-08-01)`|0.3 (per 1000000 char)|10000 char |**lettria**|`v5.5.2`|2.0 (per 1000000 char)|1000 char |**microsoft**|`v3.1`|1.0 (per 1000000 char)|1000 char |**emvista**|`v1.0`|3.0 (per 1000000 char)|1000 char |**oneai**|`v0`|2.14 (per 1000000 char)|1 char |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**tenstorrent**|`v1.1.0`|0.7 (per 1000000 char)|1000 char |**sapling**|`v1`|20.0 (per 1000000 char)|1000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Arabic**|`ar`| |**Bengali**|`bn`| |**Chinese**|`zh`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Finnish**|`fi`| |**French**|`fr`| |**German**|`de`| |**Hindi**|`hi`| |**Indonesian**|`id`| |**Italian**|`it`| |**Japanese**|`ja`| |**Korean**|`ko`| |**Modern Greek (1453-)**|`el`| |**Norwegian**|`no`| |**Panjabi**|`pa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Spanish**|`es`| |**Swedish**|`sv`| |**Tamil**|`ta`| |**Thai**|`th`| |**Turkish**|`tr`| |**Ukrainian**|`uk`| |**Vietnamese**|`vi`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Taiwan)**|`zh-TW`| |**Chinese (Traditional)**|`zh-Hant`| |**English (United States)**|`en-US`| |**French (France)**|`fr-FR`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`|  </details>
         * @summary Sentiment Analysis
         * @param {TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest} texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async textSentimentAnalysisCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest: TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextsentimentAnalysisResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.textSentimentAnalysisCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**microsoft**|`v7`|0.3 (per 1000 request)|1 request |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**prowritingaid**|`v1.0`|10.0 (per 1000 request)|1 request |**cohere**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**sapling**|`v1`|2.0 (per 1000000 char)|1 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Armenian**|`hy`| |**Azerbaijani**|`az`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bengali**|`bn`| |**Bosnian**|`bs`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Central Khmer**|`km`| |**Chinese**|`zh`| |**Corsican**|`co`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Esperanto**|`eo`| |**Estonian**|`et`| |**Finnish**|`fi`| |**French**|`fr`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Gujarati**|`gu`| |**Haitian**|`ht`| |**Hausa**|`ha`| |**Hawaiian**|`haw`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Hmong**|`hmn`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Igbo**|`ig`| |**Indonesian**|`id`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kannada**|`kn`| |**Kazakh**|`kk`| |**Kinyarwanda**|`rw`| |**Kirghiz**|`ky`| |**Korean**|`ko`| |**Kurdish**|`ku`| |**Lao**|`lo`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian**|`no`| |**Norwegian Bokmål**|`nb`| |**Nyanja**|`ny`| |**Oriya (macrolanguage)**|`or`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Samoan**|`sm`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Shona**|`sn`| |**Sindhi**|`sd`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Southern Sotho**|`st`| |**Spanish**|`es`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tamil**|`ta`| |**Tatar**|`tt`| |**Telugu**|`te`| |**Thai**|`th`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Xhosa**|`xh`| |**Yiddish**|`yi`| |**Yoruba**|`yo`| |**Zulu**|`zu`| |**jp**|`jp`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (China)**|`zh-CN`| |**Chinese (Simplified)**|`zh-hans`| |**Chinese (Taiwan)**|`zh-TW`| |**Chinese (Traditional)**|`zh-hant`| |**English (United Kingdom)**|`en-gb`| |**Portuguese (Brazil)**|`pt-br`| |**Portuguese (Portugal)**|`pt-pt`|  </details>
         * @summary Spell Check
         * @param {TextspellCheckSpellCheckRequest} textspellCheckSpellCheckRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async textSpellCheckCreate(textspellCheckSpellCheckRequest: TextspellCheckSpellCheckRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextspellCheckResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.textSpellCheckCreate(textspellCheckSpellCheckRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**connexun**|`v1.0`|2.0 (per 1000 request)|1 request |**microsoft**|`v3.1`|2.0 (per 1000000 char)|1000 char |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**openai - text-ada-001**|`v3.0.0`|0.4 (per 1000000 token)|1 token |**openai - text-babbage-001**|`v3.0.0`|0.5 (per 1000000 token)|1 token |**openai - text-curie-001**|`v3.0.0`|2.0 (per 1000000 token)|1 token |**openai - text-davinci-002**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**openai - text-davinci-003**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**emvista**|`v1.0`|1.0 (per 1000000 char)|1000 char |**oneai**|`v0`|2.14 (per 1000000 char)|1 char |**cohere**|`2022-12-06`|5.0 (per 2000000 char)|2000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Abkhazian**|`ab`| |**Acoli**|`ach`| |**Afar**|`aa`| |**Afrikaans**|`af`| |**Akan**|`ak`| |**Albanian**|`sq`| |**American Sign Language**|`ase`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Aragonese**|`an`| |**Argentine Sign Language**|`aed`| |**Armenian**|`hy`| |**Assamese**|`as`| |**Avaric**|`av`| |**Avestan**|`ae`| |**Aymara**|`ay`| |**Azerbaijani**|`az`| |**Bambara**|`bm`| |**Bashkir**|`ba`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bemba (Zambia)**|`bem`| |**Bengali**|`bn`| |**Berber languages**|`ber`| |**Bihari languages**|`bh`| |**Bislama**|`bi`| |**Bosnian**|`bs`| |**Brazilian Sign Language**|`bzs`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Celtic languages**|`cel`| |**Central Bikol**|`bcl`| |**Central Khmer**|`km`| |**Chamorro**|`ch`| |**Chechen**|`ce`| |**Chilean Sign Language**|`csg`| |**Chinese**|`zh`| |**Church Slavic**|`cu`| |**Chuukese**|`chk`| |**Chuvash**|`cv`| |**Colombian Sign Language**|`csn`| |**Congo Swahili**|`swc`| |**Cornish**|`kw`| |**Corsican**|`co`| |**Cree**|`cr`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dhivehi**|`dv`| |**Dutch**|`nl`| |**Dzongkha**|`dz`| |**Efik**|`efi`| |**English**|`en`| |**Esperanto**|`eo`| |**Estonian**|`et`| |**Ewe**|`ee`| |**Faroese**|`fo`| |**Fijian**|`fj`| |**Finnish**|`fi`| |**Finnish Sign Language**|`fse`| |**Fon**|`fon`| |**French**|`fr`| |**Fulah**|`ff`| |**Ga**|`gaa`| |**Galician**|`gl`| |**Ganda**|`lg`| |**Georgian**|`ka`| |**German**|`de`| |**Gilbertese**|`gil`| |**Guarani**|`gn`| |**Gujarati**|`gu`| |**Gun**|`guw`| |**Haitian**|`ht`| |**Hausa**|`ha`| |**Hebrew**|`he`| |**Herero**|`hz`| |**Hiligaynon**|`hil`| |**Hindi**|`hi`| |**Hiri Motu**|`ho`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Ido**|`io`| |**Igbo**|`ig`| |**Iloko**|`ilo`| |**Indonesian**|`id`| |**Interlingua (International Auxiliary Language Association)**|`ia`| |**Interlingue**|`ie`| |**Inuktitut**|`iu`| |**Inupiaq**|`ik`| |**Irish**|`ga`| |**Isoko**|`iso`| |**Isthmus Zapotec**|`zai`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kabyle**|`kab`| |**Kalaallisut**|`kl`| |**Kannada**|`kn`| |**Kanuri**|`kr`| |**Kaonde**|`kqn`| |**Kashmiri**|`ks`| |**Kazakh**|`kk`| |**Kikuyu**|`ki`| |**Kinyarwanda**|`rw`| |**Kirghiz**|`ky`| |**Komi**|`kv`| |**Kongo**|`kg`| |**Korean**|`ko`| |**Kuanyama**|`kj`| |**Kurdish**|`ku`| |**Kwangali**|`kwn`| |**Lao**|`lo`| |**Latin**|`la`| |**Latvian**|`lv`| |**Limburgan**|`li`| |**Lingala**|`ln`| |**Lithuanian**|`lt`| |**Lozi**|`loz`| |**Luba-Katanga**|`lu`| |**Luba-Lulua**|`lua`| |**Lunda**|`lun`| |**Luo (Kenya and Tanzania)**|`luo`| |**Lushai**|`lus`| |**Luvale**|`lue`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Manx**|`gv`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Marshallese**|`mh`| |**Mexican Sign Language**|`mfs`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Morisyen**|`mfe`| |**Mossi**|`mos`| |**Nauru**|`na`| |**Navajo**|`nv`| |**Ndonga**|`ng`| |**Nepali (macrolanguage)**|`ne`| |**Niuean**|`niu`| |**North Ndebele**|`nd`| |**Northern Sami**|`se`| |**Norwegian**|`no`| |**Norwegian Bokmål**|`nb`| |**Norwegian Nynorsk**|`nn`| |**Nyaneka**|`nyk`| |**Nyanja**|`ny`| |**Occitan (post 1500)**|`oc`| |**Ojibwa**|`oj`| |**Oriya (macrolanguage)**|`or`| |**Oromo**|`om`| |**Ossetian**|`os`| |**Pali**|`pi`| |**Pangasinan**|`pag`| |**Panjabi**|`pa`| |**Papiamento**|`pap`| |**Pedi**|`nso`| |**Persian**|`fa`| |**Peruvian Sign Language**|`prl`| |**Pijin**|`pis`| |**Pohnpeian**|`pon`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Quechua**|`qu`| |**Romance languages**|`roa`| |**Romanian**|`ro`| |**Romansh**|`rm`| |**Rundi**|`rn`| |**Russian**|`ru`| |**Ruund**|`rnd`| |**Samoan**|`sm`| |**San Salvador Kongo**|`kwy`| |**Sango**|`sg`| |**Sanskrit**|`sa`| |**Sardinian**|`sc`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Seselwa Creole French**|`crs`| |**Shona**|`sn`| |**Sichuan Yi**|`ii`| |**Sindhi**|`sd`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**South Ndebele**|`nr`| |**Southern Sotho**|`st`| |**Spanish**|`es`| |**Spanish Sign Language**|`ssp`| |**Sranan Tongo**|`srn`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swati**|`ss`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tahitian**|`ty`| |**Tajik**|`tg`| |**Tamil**|`ta`| |**Tatar**|`tt`| |**Telugu**|`te`| |**Tetela**|`tll`| |**Tetun Dili**|`tdt`| |**Thai**|`th`| |**Tibetan**|`bo`| |**Tigrinya**|`ti`| |**Tiv**|`tiv`| |**Tok Pisin**|`tpi`| |**Tonga (Tonga Islands)**|`to`| |**Tonga (Zambia)**|`toi`| |**Tsonga**|`ts`| |**Tswana**|`tn`| |**Tumbuka**|`tum`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Tuvalu**|`tvl`| |**Twi**|`tw`| |**Tzotzil**|`tzo`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Umbundu**|`umb`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Venda**|`ve`| |**Venezuelan Sign Language**|`vsl`| |**Vietnamese**|`vi`| |**Volapük**|`vo`| |**Wallisian**|`wls`| |**Walloon**|`wa`| |**Waray (Philippines)**|`war`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Wolaytta**|`wal`| |**Wolof**|`wo`| |**Xhosa**|`xh`| |**Yapese**|`yap`| |**Yiddish**|`yi`| |**Yoruba**|`yo`| |**Yucateco**|`yua`| |**Yue Chinese**|`yue`| |**Zande (individual language)**|`zne`| |**Zhuang**|`za`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (Simplified)**|`zh-Hans`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Brazil)**|`pt-br`| |**Portuguese (Portugal)**|`pt-PT`| |**Portuguese (Portugal)**|`pt-pt`|  </details>
         * @summary Summarize
         * @param {TextsummarizeSummarizeRequest} textsummarizeSummarizeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async textSummarizeCreate(textsummarizeSummarizeRequest: TextsummarizeSummarizeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextsummarizeResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.textSummarizeCreate(textsummarizeSummarizeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|0.5 (per 1000000 char)|300 char |**google**|`v1`|0.5 (per 1000000 char)|1000 char |**ibm**|`v1 (2021-08-01)`|0.3 (per 1000000 char)|10000 char |**lettria**|`v5.5.2`|2.0 (per 1000000 char)|1000 char |**emvista**|`v1.0`|1.0 (per 1000000 char)|1 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Arabic**|`ar`| |**Chinese**|`zh`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Finnish**|`fi`| |**French**|`fr`| |**German**|`de`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Italian**|`it`| |**Japanese**|`ja`| |**Korean**|`ko`| |**Norwegian**|`no`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Slovak**|`sk`| |**Spanish**|`es`| |**Swedish**|`sv`| |**Turkish**|`tr`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (Taiwan)**|`zh-TW`| |**Chinese (Traditional)**|`zh-Hant`| |**English (United States)**|`en-US`| |**French (France)**|`fr-FR`|  </details>
         * @summary Syntax Analysis
         * @param {TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest} texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async textSyntaxAnalysisCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest: TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextsyntaxAnalysisResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.textSyntaxAnalysisCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**google**|`v1`|2.0 (per 1000000 char)|1000 char |**ibm**|`v1 (2021-08-01)`|0.3 (per 1000000 char)|10000 char |**openai**|`v1`|20.0 (per 1000000 token)|1 token |**tenstorrent**|`v1.0.0`|2.0 (per 1000000 char)|1000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Arabic**|`ar`| |**Chinese**|`zh`| |**Dutch**|`nl`| |**English**|`en`| |**French**|`fr`| |**German**|`de`| |**Italian**|`it`| |**Japanese**|`ja`| |**Korean**|`ko`| |**Portuguese**|`pt`| |**Russian**|`ru`| |**Spanish**|`es`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`|  </details>
         * @summary Topic Extraction
         * @param {TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest} texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async textTopicExtractionCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest: TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TexttopicExtractionResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.textTopicExtractionCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TextApi - factory interface
 * @export
 */
export const TextApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TextApiFp(configuration)
    return {
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**originalityai**|`v1`|0.01 (per 400 char)|400 char |**sapling**|`v1`|0.005 (per 1000 char)|1000 char   </details>  <details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`|  </details>
         * @summary AI Content Detection
         * @param {TextaiDetectionAiDetectionRequest} textaiDetectionAiDetectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textAiDetectionCreate(textaiDetectionAiDetectionRequest: TextaiDetectionAiDetectionRequest, options?: any): AxiosPromise<TextaiDetectionResponseModel> {
            return localVarFp.textAiDetectionCreate(textaiDetectionAiDetectionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**emvista**|`v1.0`|3.0 (per 1000000 char)|1 char |**oneai**|`v0`|2.14 (per 1000000 char)|1 char |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000000 char)|300 char |**microsoft**|`v3.1`|0.25 (per 1000000 char)|1000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Arabic**|`ar`| |**Chinese**|`zh`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Finnish**|`fi`| |**French**|`fr`| |**German**|`de`| |**Hindi**|`hi`| |**Italian**|`it`| |**Japanese**|`ja`| |**Korean**|`ko`| |**Modern Greek (1453-)**|`el`| |**Norwegian**|`no`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Russian**|`ru`| |**Spanish**|`es`| |**Swedish**|`sv`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Traditional)**|`zh-Hant`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`|  </details>
         * @summary Anonymization
         * @param {TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest} texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textAnonymizationCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest: TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options?: any): AxiosPromise<TextanonymizationResponseModel> {
            return localVarFp.textAnonymizationCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**openai - gpt-3.5-turbo**|`v1Beta`|0.002 (per 1000 token)|1 token |**openai - gpt-4-32k-0314**|`v1Beta`|0.12 (per 1000 token)|1 token |**openai - gpt-4-0314**|`v1Beta`|0.06 (per 1000 token)|1 token |**openai - gpt-4**|`v1Beta`|0.06 (per 1000 token)|1 token |**openai - gpt-3.5-turbo-0301**|`v1Beta`|0.002 (per 1000 token)|1 token |**openai - gpt-4-32k**|`v1Beta`|0.12 (per 1000 token)|1 token |**openai**|`v1Beta`|0.12 (per 1000 token)|1 token |**google**|`v1`|0.5 (per 1000000 char)|1 char   </details>  
         * @summary Chat
         * @param {TextchatChatRequest} textchatChatRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textChatCreate(textchatChatRequest: TextchatChatRequest, options?: any): AxiosPromise<TextchatResponseModel> {
            return localVarFp.textChatCreate(textchatChatRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**openai**|`v1`|2.0 (per 1000000 token)|1 token |**google**|`v1`|0.5 (per 1000000 char)|1 char   </details>  
         * @summary Code Generation
         * @param {TextcodeGenerationCodeGenerationRequest} textcodeGenerationCodeGenerationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textCodeGenerationCreate(textcodeGenerationCodeGenerationRequest: TextcodeGenerationCodeGenerationRequest, options?: any): AxiosPromise<TextcodeGenerationResponseModel> {
            return localVarFp.textCodeGenerationCreate(textcodeGenerationCodeGenerationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**cohere**|`2022-12-06`|2.0 (per 1000 request)|1 request |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token   </details>  
         * @summary Custom Text Classification
         * @param {TextcustomClassificationCustomClassificationRequest} textcustomClassificationCustomClassificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textCustomClassificationCreate(textcustomClassificationCustomClassificationRequest: TextcustomClassificationCustomClassificationRequest, options?: any): AxiosPromise<TextcustomClassificationResponseModel> {
            return localVarFp.textCustomClassificationCreate(textcustomClassificationCustomClassificationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**cohere**|`2022-12-06`|2.0 (per 1000 request)|1 request   </details>  
         * @summary Custom Named Entity Recognition
         * @param {TextcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest} textcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textCustomNamedEntityRecognitionCreate(textcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest: TextcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest, options?: any): AxiosPromise<TextcustomNamedEntityRecognitionResponseModel> {
            return localVarFp.textCustomNamedEntityRecognitionCreate(textcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**google**|`v1`|0.1 (per 1000000 char)|1 char   </details>  
         * @summary Embeddings
         * @param {TextembeddingsEmbeddingsRequest} textembeddingsEmbeddingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textEmbeddingsCreate(textembeddingsEmbeddingsRequest: TextembeddingsEmbeddingsRequest, options?: any): AxiosPromise<TextembeddingsResponseModel> {
            return localVarFp.textEmbeddingsCreate(textembeddingsEmbeddingsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|1.0 (per 1000000 char)|300 char |**google**|`v1`|2.0 (per 1000000 char)|1000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**English**|`en`| |**Japanese**|`ja`| |**Spanish**|`es`|  </details>
         * @summary Entity Sentiment
         * @param {TextentitySentimentEntitySentimentRequest} textentitySentimentEntitySentimentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textEntitySentimentCreate(textentitySentimentEntitySentimentRequest: TextentitySentimentEntitySentimentRequest, options?: any): AxiosPromise<TextentitySentimentResponseModel> {
            return localVarFp.textEntitySentimentCreate(textentitySentimentEntitySentimentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**cohere**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**cohere - command**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**cohere - command-light**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**cohere - command-nightly**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**cohere - command-light-nightly**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**cohere - base**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**cohere - base-light**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**openai - text-ada-001**|`v1`|0.4 (per 1000000 token)|1 token |**openai - text-curie-001**|`v1`|2.0 (per 1000000 token)|1 token |**openai - text-davinci-002**|`v1`|20.0 (per 1000000 token)|1 token |**openai - text-davinci-003**|`v1`|20.0 (per 1000000 token)|1 token |**openai - text-babbage-001**|`v1`|0.5 (per 1000000 token)|1 token |**openai**|`v1`|20.0 (per 1000000 token)|1 token |**google**|`v1`|1.0 (per 1000000 char)|1 char   </details>  
         * @summary Generation
         * @param {TextgenerationGenerationRequest} textgenerationGenerationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textGenerationCreate(textgenerationGenerationRequest: TextgenerationGenerationRequest, options?: any): AxiosPromise<TextgenerationResponseModel> {
            return localVarFp.textGenerationCreate(textgenerationGenerationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000000 char)|300 char |**ibm**|`v1 (2021-08-01)`|0.3 (per 1000000 char)|10000 char |**microsoft**|`v3.1`|1.0 (per 1000000 char)|1000 char |**emvista**|`v1.0`|1.0 (per 1000000 char)|1000 char |**oneai**|`v0`|2.14 (per 1000000 char)|1 char |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**tenstorrent**|`v1.0.0`|0.7 (per 1000000 char)|1000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Arabic**|`ar`| |**Bulgarian**|`bg`| |**Catalan**|`ca`| |**Chinese**|`zh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Estonian**|`et`| |**Finnish**|`fi`| |**French**|`fr`| |**German**|`de`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Hungarian**|`hu`| |**Indonesian**|`id`| |**Italian**|`it`| |**Japanese**|`ja`| |**Korean**|`ko`| |**Latvian**|`lv`| |**Modern Greek (1453-)**|`el`| |**Norwegian**|`no`| |**Norwegian Bokmål**|`nb`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Spanish**|`es`| |**Swedish**|`sv`| |**Turkish**|`tr`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Taiwan)**|`zh-TW`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`|  </details>
         * @summary Keyword Extraction
         * @param {TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest} texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textKeywordExtractionCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest: TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options?: any): AxiosPromise<TextkeywordExtractionResponseModel> {
            return localVarFp.textKeywordExtractionCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**microsoft**|`v1.0`|1.0 (per 1000 request)|1 request |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**clarifai**|`8.0.0`|1.2 (per 1000 request)|1 request |**google**|`v1`|5.0 (per 1000000 char)|100 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Aragonese**|`an`| |**Armenian**|`hy`| |**Assamese**|`as`| |**Asturian**|`ast`| |**Azerbaijani**|`az`| |**Bashkir**|`ba`| |**Basque**|`eu`| |**Bavarian**|`bar`| |**Belarusian**|`be`| |**Bengali**|`bn`| |**Bishnupriya**|`bpy`| |**Bosnian**|`bs`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Central Khmer**|`km`| |**Central Kurdish**|`ckb`| |**Chechen**|`ce`| |**Cherokee**|`chr`| |**Chinese**|`zh`| |**Chuvash**|`cv`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Estonian**|`et`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Fulah**|`ff`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Gujarati**|`gu`| |**Haitian**|`ht`| |**Hausa**|`ha`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Ido**|`io`| |**Igbo**|`ig`| |**Indonesian**|`id`| |**Inuktitut**|`iu`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kannada**|`kn`| |**Kazakh**|`kk`| |**Kinyarwanda**|`rw`| |**Kirghiz**|`ky`| |**Konkani (macrolanguage)**|`kok`| |**Korean**|`ko`| |**Lahnda**|`lah`| |**Lao**|`lo`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Lombard**|`lmo`| |**Low German**|`nds`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Minangkabau**|`min`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian**|`no`| |**Norwegian Bokmål**|`nb`| |**Norwegian Nynorsk**|`nn`| |**Occitan (post 1500)**|`oc`| |**Oriya (macrolanguage)**|`or`| |**Panjabi**|`pa`| |**Pedi**|`nso`| |**Persian**|`fa`| |**Piemontese**|`pms`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Quechua**|`qu`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Scots**|`sco`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Serbo-Croatian**|`sh`| |**Sicilian**|`scn`| |**Sindhi**|`sd`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**South Azerbaijani**|`azb`| |**Southern Sotho**|`st`| |**Spanish**|`es`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tamil**|`ta`| |**Tatar**|`tt`| |**Telugu**|`te`| |**Thai**|`th`| |**Tigrinya**|`ti`| |**Tswana**|`tn`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Volapük**|`vo`| |**Waray (Philippines)**|`war`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Wolof**|`wo`| |**Xhosa**|`xh`| |**Yoruba**|`yo`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (Traditional)**|`zh-Hant`| |**Low German (Netherlands)**|`nds-NL`|  </details>
         * @summary Moderation
         * @param {TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest} texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textModerationCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest: TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options?: any): AxiosPromise<TextmoderationResponseModel> {
            return localVarFp.textModerationCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000000 char)|300 char |**google**|`v1`|1.0 (per 1000000 char)|1000 char |**ibm**|`v1 (2021-08-01)`|0.3 (per 1000000 char)|10000 char |**lettria**|`v5.5.2`|2.0 (per 1000000 char)|1000 char |**microsoft**|`v3.1`|1.0 (per 1000000 char)|1000 char |**neuralspace**|`v1`|0.007 (per 1 request)|1 request |**oneai**|`v0`|2.14 (per 1000000 char)|1 char |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**tenstorrent**|`v1.0.0`|1.0 (per 1000000 char)|1000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Arabic**|`ar`| |**Aragonese**|`an`| |**Armenian**|`hy`| |**Assamese**|`as`| |**Azerbaijani**|`az`| |**Bashkir**|`ba`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bengali**|`bn`| |**Bosnian**|`bs`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Chechen**|`ce`| |**Chinese**|`zh`| |**Chuvash**|`cv`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Estonian**|`et`| |**Finnish**|`fi`| |**French**|`fr`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Gujarati**|`gu`| |**Haitian**|`ht`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Indonesian**|`id`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kannada**|`kn`| |**Kazakh**|`kk`| |**Kirghiz**|`ky`| |**Korean**|`ko`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Marathi**|`mr`| |**Modern Greek (1453-)**|`el`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian**|`no`| |**Norwegian Bokmål**|`nb`| |**Occitan (post 1500)**|`oc`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Serbian**|`sr`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Spanish**|`es`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tamil**|`ta`| |**Tatar**|`tt`| |**Telugu**|`te`| |**Turkish**|`tr`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Welsh**|`cy`| |**Yoruba**|`yo`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Taiwan)**|`zh-TW`| |**Chinese (Traditional)**|`zh-Hant`| |**English (United States)**|`en-US`| |**French (France)**|`fr-FR`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`|  </details>
         * @summary Named Entity Recognition
         * @param {TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest} texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textNamedEntityRecognitionCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest: TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options?: any): AxiosPromise<TextnamedEntityRecognitionResponseModel> {
            return localVarFp.textNamedEntityRecognitionCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**originalityai**|`v1`|0.01 (per 400 char)|400 char   </details>  
         * @summary Plagia Detection
         * @param {TextplagiaDetectionPlagiaDetectionRequest} textplagiaDetectionPlagiaDetectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textPlagiaDetectionCreate(textplagiaDetectionPlagiaDetectionRequest: TextplagiaDetectionPlagiaDetectionRequest, options?: any): AxiosPromise<TextplagiaDetectionResponseModel> {
            return localVarFp.textPlagiaDetectionCreate(textplagiaDetectionPlagiaDetectionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**openai**|`v3.0.0`|0.24 (per 1000 token)|1 token   </details>  
         * @summary Prompt Optimization
         * @param {TextpromptOptimizationPromptOptimizationRequest} textpromptOptimizationPromptOptimizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textPromptOptimizationCreate(textpromptOptimizationPromptOptimizationRequest: TextpromptOptimizationPromptOptimizationRequest, options?: any): AxiosPromise<TextpromptOptimizationResponseModel> {
            return localVarFp.textPromptOptimizationCreate(textpromptOptimizationPromptOptimizationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**huggingface**|`v1`|0.02 (per 1000 char)|1 char |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**tenstorrent**|`v1.0.0`|10.0 (per 1000000 char)|1000 char   </details>  
         * @summary Question Answer
         * @param {TextquestionAnswerQuestionAnswerRequest} textquestionAnswerQuestionAnswerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textQuestionAnswerCreate(textquestionAnswerQuestionAnswerRequest: TextquestionAnswerQuestionAnswerRequest, options?: any): AxiosPromise<TextquestionAnswerResponseModel> {
            return localVarFp.textQuestionAnswerCreate(textquestionAnswerQuestionAnswerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token   </details>  
         * @summary Search
         * @param {TextsearchSearchRequest} textsearchSearchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textSearchCreate(textsearchSearchRequest: TextsearchSearchRequest, options?: any): AxiosPromise<TextsearchResponseModel> {
            return localVarFp.textSearchCreate(textsearchSearchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000000 char)|300 char |**connexun**|`v1.0`|2.0 (per 1000 request)|1 request |**google**|`v1`|1.0 (per 1000000 char)|1000 char |**ibm**|`v1 (2021-08-01)`|0.3 (per 1000000 char)|10000 char |**lettria**|`v5.5.2`|2.0 (per 1000000 char)|1000 char |**microsoft**|`v3.1`|1.0 (per 1000000 char)|1000 char |**emvista**|`v1.0`|3.0 (per 1000000 char)|1000 char |**oneai**|`v0`|2.14 (per 1000000 char)|1 char |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**tenstorrent**|`v1.1.0`|0.7 (per 1000000 char)|1000 char |**sapling**|`v1`|20.0 (per 1000000 char)|1000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Arabic**|`ar`| |**Bengali**|`bn`| |**Chinese**|`zh`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Finnish**|`fi`| |**French**|`fr`| |**German**|`de`| |**Hindi**|`hi`| |**Indonesian**|`id`| |**Italian**|`it`| |**Japanese**|`ja`| |**Korean**|`ko`| |**Modern Greek (1453-)**|`el`| |**Norwegian**|`no`| |**Panjabi**|`pa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Spanish**|`es`| |**Swedish**|`sv`| |**Tamil**|`ta`| |**Thai**|`th`| |**Turkish**|`tr`| |**Ukrainian**|`uk`| |**Vietnamese**|`vi`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Taiwan)**|`zh-TW`| |**Chinese (Traditional)**|`zh-Hant`| |**English (United States)**|`en-US`| |**French (France)**|`fr-FR`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`|  </details>
         * @summary Sentiment Analysis
         * @param {TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest} texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textSentimentAnalysisCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest: TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options?: any): AxiosPromise<TextsentimentAnalysisResponseModel> {
            return localVarFp.textSentimentAnalysisCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**microsoft**|`v7`|0.3 (per 1000 request)|1 request |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**prowritingaid**|`v1.0`|10.0 (per 1000 request)|1 request |**cohere**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**sapling**|`v1`|2.0 (per 1000000 char)|1 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Armenian**|`hy`| |**Azerbaijani**|`az`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bengali**|`bn`| |**Bosnian**|`bs`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Central Khmer**|`km`| |**Chinese**|`zh`| |**Corsican**|`co`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Esperanto**|`eo`| |**Estonian**|`et`| |**Finnish**|`fi`| |**French**|`fr`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Gujarati**|`gu`| |**Haitian**|`ht`| |**Hausa**|`ha`| |**Hawaiian**|`haw`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Hmong**|`hmn`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Igbo**|`ig`| |**Indonesian**|`id`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kannada**|`kn`| |**Kazakh**|`kk`| |**Kinyarwanda**|`rw`| |**Kirghiz**|`ky`| |**Korean**|`ko`| |**Kurdish**|`ku`| |**Lao**|`lo`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian**|`no`| |**Norwegian Bokmål**|`nb`| |**Nyanja**|`ny`| |**Oriya (macrolanguage)**|`or`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Samoan**|`sm`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Shona**|`sn`| |**Sindhi**|`sd`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Southern Sotho**|`st`| |**Spanish**|`es`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tamil**|`ta`| |**Tatar**|`tt`| |**Telugu**|`te`| |**Thai**|`th`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Xhosa**|`xh`| |**Yiddish**|`yi`| |**Yoruba**|`yo`| |**Zulu**|`zu`| |**jp**|`jp`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (China)**|`zh-CN`| |**Chinese (Simplified)**|`zh-hans`| |**Chinese (Taiwan)**|`zh-TW`| |**Chinese (Traditional)**|`zh-hant`| |**English (United Kingdom)**|`en-gb`| |**Portuguese (Brazil)**|`pt-br`| |**Portuguese (Portugal)**|`pt-pt`|  </details>
         * @summary Spell Check
         * @param {TextspellCheckSpellCheckRequest} textspellCheckSpellCheckRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textSpellCheckCreate(textspellCheckSpellCheckRequest: TextspellCheckSpellCheckRequest, options?: any): AxiosPromise<TextspellCheckResponseModel> {
            return localVarFp.textSpellCheckCreate(textspellCheckSpellCheckRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**connexun**|`v1.0`|2.0 (per 1000 request)|1 request |**microsoft**|`v3.1`|2.0 (per 1000000 char)|1000 char |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**openai - text-ada-001**|`v3.0.0`|0.4 (per 1000000 token)|1 token |**openai - text-babbage-001**|`v3.0.0`|0.5 (per 1000000 token)|1 token |**openai - text-curie-001**|`v3.0.0`|2.0 (per 1000000 token)|1 token |**openai - text-davinci-002**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**openai - text-davinci-003**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**emvista**|`v1.0`|1.0 (per 1000000 char)|1000 char |**oneai**|`v0`|2.14 (per 1000000 char)|1 char |**cohere**|`2022-12-06`|5.0 (per 2000000 char)|2000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Abkhazian**|`ab`| |**Acoli**|`ach`| |**Afar**|`aa`| |**Afrikaans**|`af`| |**Akan**|`ak`| |**Albanian**|`sq`| |**American Sign Language**|`ase`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Aragonese**|`an`| |**Argentine Sign Language**|`aed`| |**Armenian**|`hy`| |**Assamese**|`as`| |**Avaric**|`av`| |**Avestan**|`ae`| |**Aymara**|`ay`| |**Azerbaijani**|`az`| |**Bambara**|`bm`| |**Bashkir**|`ba`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bemba (Zambia)**|`bem`| |**Bengali**|`bn`| |**Berber languages**|`ber`| |**Bihari languages**|`bh`| |**Bislama**|`bi`| |**Bosnian**|`bs`| |**Brazilian Sign Language**|`bzs`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Celtic languages**|`cel`| |**Central Bikol**|`bcl`| |**Central Khmer**|`km`| |**Chamorro**|`ch`| |**Chechen**|`ce`| |**Chilean Sign Language**|`csg`| |**Chinese**|`zh`| |**Church Slavic**|`cu`| |**Chuukese**|`chk`| |**Chuvash**|`cv`| |**Colombian Sign Language**|`csn`| |**Congo Swahili**|`swc`| |**Cornish**|`kw`| |**Corsican**|`co`| |**Cree**|`cr`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dhivehi**|`dv`| |**Dutch**|`nl`| |**Dzongkha**|`dz`| |**Efik**|`efi`| |**English**|`en`| |**Esperanto**|`eo`| |**Estonian**|`et`| |**Ewe**|`ee`| |**Faroese**|`fo`| |**Fijian**|`fj`| |**Finnish**|`fi`| |**Finnish Sign Language**|`fse`| |**Fon**|`fon`| |**French**|`fr`| |**Fulah**|`ff`| |**Ga**|`gaa`| |**Galician**|`gl`| |**Ganda**|`lg`| |**Georgian**|`ka`| |**German**|`de`| |**Gilbertese**|`gil`| |**Guarani**|`gn`| |**Gujarati**|`gu`| |**Gun**|`guw`| |**Haitian**|`ht`| |**Hausa**|`ha`| |**Hebrew**|`he`| |**Herero**|`hz`| |**Hiligaynon**|`hil`| |**Hindi**|`hi`| |**Hiri Motu**|`ho`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Ido**|`io`| |**Igbo**|`ig`| |**Iloko**|`ilo`| |**Indonesian**|`id`| |**Interlingua (International Auxiliary Language Association)**|`ia`| |**Interlingue**|`ie`| |**Inuktitut**|`iu`| |**Inupiaq**|`ik`| |**Irish**|`ga`| |**Isoko**|`iso`| |**Isthmus Zapotec**|`zai`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kabyle**|`kab`| |**Kalaallisut**|`kl`| |**Kannada**|`kn`| |**Kanuri**|`kr`| |**Kaonde**|`kqn`| |**Kashmiri**|`ks`| |**Kazakh**|`kk`| |**Kikuyu**|`ki`| |**Kinyarwanda**|`rw`| |**Kirghiz**|`ky`| |**Komi**|`kv`| |**Kongo**|`kg`| |**Korean**|`ko`| |**Kuanyama**|`kj`| |**Kurdish**|`ku`| |**Kwangali**|`kwn`| |**Lao**|`lo`| |**Latin**|`la`| |**Latvian**|`lv`| |**Limburgan**|`li`| |**Lingala**|`ln`| |**Lithuanian**|`lt`| |**Lozi**|`loz`| |**Luba-Katanga**|`lu`| |**Luba-Lulua**|`lua`| |**Lunda**|`lun`| |**Luo (Kenya and Tanzania)**|`luo`| |**Lushai**|`lus`| |**Luvale**|`lue`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Manx**|`gv`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Marshallese**|`mh`| |**Mexican Sign Language**|`mfs`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Morisyen**|`mfe`| |**Mossi**|`mos`| |**Nauru**|`na`| |**Navajo**|`nv`| |**Ndonga**|`ng`| |**Nepali (macrolanguage)**|`ne`| |**Niuean**|`niu`| |**North Ndebele**|`nd`| |**Northern Sami**|`se`| |**Norwegian**|`no`| |**Norwegian Bokmål**|`nb`| |**Norwegian Nynorsk**|`nn`| |**Nyaneka**|`nyk`| |**Nyanja**|`ny`| |**Occitan (post 1500)**|`oc`| |**Ojibwa**|`oj`| |**Oriya (macrolanguage)**|`or`| |**Oromo**|`om`| |**Ossetian**|`os`| |**Pali**|`pi`| |**Pangasinan**|`pag`| |**Panjabi**|`pa`| |**Papiamento**|`pap`| |**Pedi**|`nso`| |**Persian**|`fa`| |**Peruvian Sign Language**|`prl`| |**Pijin**|`pis`| |**Pohnpeian**|`pon`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Quechua**|`qu`| |**Romance languages**|`roa`| |**Romanian**|`ro`| |**Romansh**|`rm`| |**Rundi**|`rn`| |**Russian**|`ru`| |**Ruund**|`rnd`| |**Samoan**|`sm`| |**San Salvador Kongo**|`kwy`| |**Sango**|`sg`| |**Sanskrit**|`sa`| |**Sardinian**|`sc`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Seselwa Creole French**|`crs`| |**Shona**|`sn`| |**Sichuan Yi**|`ii`| |**Sindhi**|`sd`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**South Ndebele**|`nr`| |**Southern Sotho**|`st`| |**Spanish**|`es`| |**Spanish Sign Language**|`ssp`| |**Sranan Tongo**|`srn`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swati**|`ss`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tahitian**|`ty`| |**Tajik**|`tg`| |**Tamil**|`ta`| |**Tatar**|`tt`| |**Telugu**|`te`| |**Tetela**|`tll`| |**Tetun Dili**|`tdt`| |**Thai**|`th`| |**Tibetan**|`bo`| |**Tigrinya**|`ti`| |**Tiv**|`tiv`| |**Tok Pisin**|`tpi`| |**Tonga (Tonga Islands)**|`to`| |**Tonga (Zambia)**|`toi`| |**Tsonga**|`ts`| |**Tswana**|`tn`| |**Tumbuka**|`tum`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Tuvalu**|`tvl`| |**Twi**|`tw`| |**Tzotzil**|`tzo`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Umbundu**|`umb`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Venda**|`ve`| |**Venezuelan Sign Language**|`vsl`| |**Vietnamese**|`vi`| |**Volapük**|`vo`| |**Wallisian**|`wls`| |**Walloon**|`wa`| |**Waray (Philippines)**|`war`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Wolaytta**|`wal`| |**Wolof**|`wo`| |**Xhosa**|`xh`| |**Yapese**|`yap`| |**Yiddish**|`yi`| |**Yoruba**|`yo`| |**Yucateco**|`yua`| |**Yue Chinese**|`yue`| |**Zande (individual language)**|`zne`| |**Zhuang**|`za`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (Simplified)**|`zh-Hans`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Brazil)**|`pt-br`| |**Portuguese (Portugal)**|`pt-PT`| |**Portuguese (Portugal)**|`pt-pt`|  </details>
         * @summary Summarize
         * @param {TextsummarizeSummarizeRequest} textsummarizeSummarizeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textSummarizeCreate(textsummarizeSummarizeRequest: TextsummarizeSummarizeRequest, options?: any): AxiosPromise<TextsummarizeResponseModel> {
            return localVarFp.textSummarizeCreate(textsummarizeSummarizeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|0.5 (per 1000000 char)|300 char |**google**|`v1`|0.5 (per 1000000 char)|1000 char |**ibm**|`v1 (2021-08-01)`|0.3 (per 1000000 char)|10000 char |**lettria**|`v5.5.2`|2.0 (per 1000000 char)|1000 char |**emvista**|`v1.0`|1.0 (per 1000000 char)|1 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Arabic**|`ar`| |**Chinese**|`zh`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Finnish**|`fi`| |**French**|`fr`| |**German**|`de`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Italian**|`it`| |**Japanese**|`ja`| |**Korean**|`ko`| |**Norwegian**|`no`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Slovak**|`sk`| |**Spanish**|`es`| |**Swedish**|`sv`| |**Turkish**|`tr`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (Taiwan)**|`zh-TW`| |**Chinese (Traditional)**|`zh-Hant`| |**English (United States)**|`en-US`| |**French (France)**|`fr-FR`|  </details>
         * @summary Syntax Analysis
         * @param {TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest} texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textSyntaxAnalysisCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest: TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options?: any): AxiosPromise<TextsyntaxAnalysisResponseModel> {
            return localVarFp.textSyntaxAnalysisCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**google**|`v1`|2.0 (per 1000000 char)|1000 char |**ibm**|`v1 (2021-08-01)`|0.3 (per 1000000 char)|10000 char |**openai**|`v1`|20.0 (per 1000000 token)|1 token |**tenstorrent**|`v1.0.0`|2.0 (per 1000000 char)|1000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Arabic**|`ar`| |**Chinese**|`zh`| |**Dutch**|`nl`| |**English**|`en`| |**French**|`fr`| |**German**|`de`| |**Italian**|`it`| |**Japanese**|`ja`| |**Korean**|`ko`| |**Portuguese**|`pt`| |**Russian**|`ru`| |**Spanish**|`es`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`|  </details>
         * @summary Topic Extraction
         * @param {TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest} texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        textTopicExtractionCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest: TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options?: any): AxiosPromise<TexttopicExtractionResponseModel> {
            return localVarFp.textTopicExtractionCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TextApi - object-oriented interface
 * @export
 * @class TextApi
 * @extends {BaseAPI}
 */
export class TextApi extends BaseAPI {
    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**originalityai**|`v1`|0.01 (per 400 char)|400 char |**sapling**|`v1`|0.005 (per 1000 char)|1000 char   </details>  <details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`|  </details>
     * @summary AI Content Detection
     * @param {TextaiDetectionAiDetectionRequest} textaiDetectionAiDetectionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextApi
     */
    public textAiDetectionCreate(textaiDetectionAiDetectionRequest: TextaiDetectionAiDetectionRequest, options?: AxiosRequestConfig) {
        return TextApiFp(this.configuration).textAiDetectionCreate(textaiDetectionAiDetectionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**emvista**|`v1.0`|3.0 (per 1000000 char)|1 char |**oneai**|`v0`|2.14 (per 1000000 char)|1 char |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000000 char)|300 char |**microsoft**|`v3.1`|0.25 (per 1000000 char)|1000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Arabic**|`ar`| |**Chinese**|`zh`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Finnish**|`fi`| |**French**|`fr`| |**German**|`de`| |**Hindi**|`hi`| |**Italian**|`it`| |**Japanese**|`ja`| |**Korean**|`ko`| |**Modern Greek (1453-)**|`el`| |**Norwegian**|`no`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Russian**|`ru`| |**Spanish**|`es`| |**Swedish**|`sv`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Traditional)**|`zh-Hant`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`|  </details>
     * @summary Anonymization
     * @param {TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest} texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextApi
     */
    public textAnonymizationCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest: TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options?: AxiosRequestConfig) {
        return TextApiFp(this.configuration).textAnonymizationCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**openai - gpt-3.5-turbo**|`v1Beta`|0.002 (per 1000 token)|1 token |**openai - gpt-4-32k-0314**|`v1Beta`|0.12 (per 1000 token)|1 token |**openai - gpt-4-0314**|`v1Beta`|0.06 (per 1000 token)|1 token |**openai - gpt-4**|`v1Beta`|0.06 (per 1000 token)|1 token |**openai - gpt-3.5-turbo-0301**|`v1Beta`|0.002 (per 1000 token)|1 token |**openai - gpt-4-32k**|`v1Beta`|0.12 (per 1000 token)|1 token |**openai**|`v1Beta`|0.12 (per 1000 token)|1 token |**google**|`v1`|0.5 (per 1000000 char)|1 char   </details>  
     * @summary Chat
     * @param {TextchatChatRequest} textchatChatRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextApi
     */
    public textChatCreate(textchatChatRequest: TextchatChatRequest, options?: AxiosRequestConfig) {
        return TextApiFp(this.configuration).textChatCreate(textchatChatRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**openai**|`v1`|2.0 (per 1000000 token)|1 token |**google**|`v1`|0.5 (per 1000000 char)|1 char   </details>  
     * @summary Code Generation
     * @param {TextcodeGenerationCodeGenerationRequest} textcodeGenerationCodeGenerationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextApi
     */
    public textCodeGenerationCreate(textcodeGenerationCodeGenerationRequest: TextcodeGenerationCodeGenerationRequest, options?: AxiosRequestConfig) {
        return TextApiFp(this.configuration).textCodeGenerationCreate(textcodeGenerationCodeGenerationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**cohere**|`2022-12-06`|2.0 (per 1000 request)|1 request |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token   </details>  
     * @summary Custom Text Classification
     * @param {TextcustomClassificationCustomClassificationRequest} textcustomClassificationCustomClassificationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextApi
     */
    public textCustomClassificationCreate(textcustomClassificationCustomClassificationRequest: TextcustomClassificationCustomClassificationRequest, options?: AxiosRequestConfig) {
        return TextApiFp(this.configuration).textCustomClassificationCreate(textcustomClassificationCustomClassificationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**cohere**|`2022-12-06`|2.0 (per 1000 request)|1 request   </details>  
     * @summary Custom Named Entity Recognition
     * @param {TextcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest} textcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextApi
     */
    public textCustomNamedEntityRecognitionCreate(textcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest: TextcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest, options?: AxiosRequestConfig) {
        return TextApiFp(this.configuration).textCustomNamedEntityRecognitionCreate(textcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**google**|`v1`|0.1 (per 1000000 char)|1 char   </details>  
     * @summary Embeddings
     * @param {TextembeddingsEmbeddingsRequest} textembeddingsEmbeddingsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextApi
     */
    public textEmbeddingsCreate(textembeddingsEmbeddingsRequest: TextembeddingsEmbeddingsRequest, options?: AxiosRequestConfig) {
        return TextApiFp(this.configuration).textEmbeddingsCreate(textembeddingsEmbeddingsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|1.0 (per 1000000 char)|300 char |**google**|`v1`|2.0 (per 1000000 char)|1000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**English**|`en`| |**Japanese**|`ja`| |**Spanish**|`es`|  </details>
     * @summary Entity Sentiment
     * @param {TextentitySentimentEntitySentimentRequest} textentitySentimentEntitySentimentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextApi
     */
    public textEntitySentimentCreate(textentitySentimentEntitySentimentRequest: TextentitySentimentEntitySentimentRequest, options?: AxiosRequestConfig) {
        return TextApiFp(this.configuration).textEntitySentimentCreate(textentitySentimentEntitySentimentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**cohere**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**cohere - command**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**cohere - command-light**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**cohere - command-nightly**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**cohere - command-light-nightly**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**cohere - base**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**cohere - base-light**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**openai - text-ada-001**|`v1`|0.4 (per 1000000 token)|1 token |**openai - text-curie-001**|`v1`|2.0 (per 1000000 token)|1 token |**openai - text-davinci-002**|`v1`|20.0 (per 1000000 token)|1 token |**openai - text-davinci-003**|`v1`|20.0 (per 1000000 token)|1 token |**openai - text-babbage-001**|`v1`|0.5 (per 1000000 token)|1 token |**openai**|`v1`|20.0 (per 1000000 token)|1 token |**google**|`v1`|1.0 (per 1000000 char)|1 char   </details>  
     * @summary Generation
     * @param {TextgenerationGenerationRequest} textgenerationGenerationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextApi
     */
    public textGenerationCreate(textgenerationGenerationRequest: TextgenerationGenerationRequest, options?: AxiosRequestConfig) {
        return TextApiFp(this.configuration).textGenerationCreate(textgenerationGenerationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000000 char)|300 char |**ibm**|`v1 (2021-08-01)`|0.3 (per 1000000 char)|10000 char |**microsoft**|`v3.1`|1.0 (per 1000000 char)|1000 char |**emvista**|`v1.0`|1.0 (per 1000000 char)|1000 char |**oneai**|`v0`|2.14 (per 1000000 char)|1 char |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**tenstorrent**|`v1.0.0`|0.7 (per 1000000 char)|1000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Arabic**|`ar`| |**Bulgarian**|`bg`| |**Catalan**|`ca`| |**Chinese**|`zh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Estonian**|`et`| |**Finnish**|`fi`| |**French**|`fr`| |**German**|`de`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Hungarian**|`hu`| |**Indonesian**|`id`| |**Italian**|`it`| |**Japanese**|`ja`| |**Korean**|`ko`| |**Latvian**|`lv`| |**Modern Greek (1453-)**|`el`| |**Norwegian**|`no`| |**Norwegian Bokmål**|`nb`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Spanish**|`es`| |**Swedish**|`sv`| |**Turkish**|`tr`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Taiwan)**|`zh-TW`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`|  </details>
     * @summary Keyword Extraction
     * @param {TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest} texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextApi
     */
    public textKeywordExtractionCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest: TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options?: AxiosRequestConfig) {
        return TextApiFp(this.configuration).textKeywordExtractionCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**microsoft**|`v1.0`|1.0 (per 1000 request)|1 request |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**clarifai**|`8.0.0`|1.2 (per 1000 request)|1 request |**google**|`v1`|5.0 (per 1000000 char)|100 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Aragonese**|`an`| |**Armenian**|`hy`| |**Assamese**|`as`| |**Asturian**|`ast`| |**Azerbaijani**|`az`| |**Bashkir**|`ba`| |**Basque**|`eu`| |**Bavarian**|`bar`| |**Belarusian**|`be`| |**Bengali**|`bn`| |**Bishnupriya**|`bpy`| |**Bosnian**|`bs`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Central Khmer**|`km`| |**Central Kurdish**|`ckb`| |**Chechen**|`ce`| |**Cherokee**|`chr`| |**Chinese**|`zh`| |**Chuvash**|`cv`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Estonian**|`et`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Fulah**|`ff`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Gujarati**|`gu`| |**Haitian**|`ht`| |**Hausa**|`ha`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Ido**|`io`| |**Igbo**|`ig`| |**Indonesian**|`id`| |**Inuktitut**|`iu`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kannada**|`kn`| |**Kazakh**|`kk`| |**Kinyarwanda**|`rw`| |**Kirghiz**|`ky`| |**Konkani (macrolanguage)**|`kok`| |**Korean**|`ko`| |**Lahnda**|`lah`| |**Lao**|`lo`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Lombard**|`lmo`| |**Low German**|`nds`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Minangkabau**|`min`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian**|`no`| |**Norwegian Bokmål**|`nb`| |**Norwegian Nynorsk**|`nn`| |**Occitan (post 1500)**|`oc`| |**Oriya (macrolanguage)**|`or`| |**Panjabi**|`pa`| |**Pedi**|`nso`| |**Persian**|`fa`| |**Piemontese**|`pms`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Quechua**|`qu`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Scots**|`sco`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Serbo-Croatian**|`sh`| |**Sicilian**|`scn`| |**Sindhi**|`sd`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**South Azerbaijani**|`azb`| |**Southern Sotho**|`st`| |**Spanish**|`es`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tamil**|`ta`| |**Tatar**|`tt`| |**Telugu**|`te`| |**Thai**|`th`| |**Tigrinya**|`ti`| |**Tswana**|`tn`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Volapük**|`vo`| |**Waray (Philippines)**|`war`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Wolof**|`wo`| |**Xhosa**|`xh`| |**Yoruba**|`yo`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (Traditional)**|`zh-Hant`| |**Low German (Netherlands)**|`nds-NL`|  </details>
     * @summary Moderation
     * @param {TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest} texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextApi
     */
    public textModerationCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest: TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options?: AxiosRequestConfig) {
        return TextApiFp(this.configuration).textModerationCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000000 char)|300 char |**google**|`v1`|1.0 (per 1000000 char)|1000 char |**ibm**|`v1 (2021-08-01)`|0.3 (per 1000000 char)|10000 char |**lettria**|`v5.5.2`|2.0 (per 1000000 char)|1000 char |**microsoft**|`v3.1`|1.0 (per 1000000 char)|1000 char |**neuralspace**|`v1`|0.007 (per 1 request)|1 request |**oneai**|`v0`|2.14 (per 1000000 char)|1 char |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**tenstorrent**|`v1.0.0`|1.0 (per 1000000 char)|1000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Arabic**|`ar`| |**Aragonese**|`an`| |**Armenian**|`hy`| |**Assamese**|`as`| |**Azerbaijani**|`az`| |**Bashkir**|`ba`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bengali**|`bn`| |**Bosnian**|`bs`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Chechen**|`ce`| |**Chinese**|`zh`| |**Chuvash**|`cv`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Estonian**|`et`| |**Finnish**|`fi`| |**French**|`fr`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Gujarati**|`gu`| |**Haitian**|`ht`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Indonesian**|`id`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kannada**|`kn`| |**Kazakh**|`kk`| |**Kirghiz**|`ky`| |**Korean**|`ko`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Marathi**|`mr`| |**Modern Greek (1453-)**|`el`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian**|`no`| |**Norwegian Bokmål**|`nb`| |**Occitan (post 1500)**|`oc`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Serbian**|`sr`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Spanish**|`es`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tamil**|`ta`| |**Tatar**|`tt`| |**Telugu**|`te`| |**Turkish**|`tr`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Welsh**|`cy`| |**Yoruba**|`yo`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Taiwan)**|`zh-TW`| |**Chinese (Traditional)**|`zh-Hant`| |**English (United States)**|`en-US`| |**French (France)**|`fr-FR`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`|  </details>
     * @summary Named Entity Recognition
     * @param {TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest} texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextApi
     */
    public textNamedEntityRecognitionCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest: TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options?: AxiosRequestConfig) {
        return TextApiFp(this.configuration).textNamedEntityRecognitionCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**originalityai**|`v1`|0.01 (per 400 char)|400 char   </details>  
     * @summary Plagia Detection
     * @param {TextplagiaDetectionPlagiaDetectionRequest} textplagiaDetectionPlagiaDetectionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextApi
     */
    public textPlagiaDetectionCreate(textplagiaDetectionPlagiaDetectionRequest: TextplagiaDetectionPlagiaDetectionRequest, options?: AxiosRequestConfig) {
        return TextApiFp(this.configuration).textPlagiaDetectionCreate(textplagiaDetectionPlagiaDetectionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**openai**|`v3.0.0`|0.24 (per 1000 token)|1 token   </details>  
     * @summary Prompt Optimization
     * @param {TextpromptOptimizationPromptOptimizationRequest} textpromptOptimizationPromptOptimizationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextApi
     */
    public textPromptOptimizationCreate(textpromptOptimizationPromptOptimizationRequest: TextpromptOptimizationPromptOptimizationRequest, options?: AxiosRequestConfig) {
        return TextApiFp(this.configuration).textPromptOptimizationCreate(textpromptOptimizationPromptOptimizationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**huggingface**|`v1`|0.02 (per 1000 char)|1 char |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**tenstorrent**|`v1.0.0`|10.0 (per 1000000 char)|1000 char   </details>  
     * @summary Question Answer
     * @param {TextquestionAnswerQuestionAnswerRequest} textquestionAnswerQuestionAnswerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextApi
     */
    public textQuestionAnswerCreate(textquestionAnswerQuestionAnswerRequest: TextquestionAnswerQuestionAnswerRequest, options?: AxiosRequestConfig) {
        return TextApiFp(this.configuration).textQuestionAnswerCreate(textquestionAnswerQuestionAnswerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token   </details>  
     * @summary Search
     * @param {TextsearchSearchRequest} textsearchSearchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextApi
     */
    public textSearchCreate(textsearchSearchRequest: TextsearchSearchRequest, options?: AxiosRequestConfig) {
        return TextApiFp(this.configuration).textSearchCreate(textsearchSearchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000000 char)|300 char |**connexun**|`v1.0`|2.0 (per 1000 request)|1 request |**google**|`v1`|1.0 (per 1000000 char)|1000 char |**ibm**|`v1 (2021-08-01)`|0.3 (per 1000000 char)|10000 char |**lettria**|`v5.5.2`|2.0 (per 1000000 char)|1000 char |**microsoft**|`v3.1`|1.0 (per 1000000 char)|1000 char |**emvista**|`v1.0`|3.0 (per 1000000 char)|1000 char |**oneai**|`v0`|2.14 (per 1000000 char)|1 char |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**tenstorrent**|`v1.1.0`|0.7 (per 1000000 char)|1000 char |**sapling**|`v1`|20.0 (per 1000000 char)|1000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Arabic**|`ar`| |**Bengali**|`bn`| |**Chinese**|`zh`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Finnish**|`fi`| |**French**|`fr`| |**German**|`de`| |**Hindi**|`hi`| |**Indonesian**|`id`| |**Italian**|`it`| |**Japanese**|`ja`| |**Korean**|`ko`| |**Modern Greek (1453-)**|`el`| |**Norwegian**|`no`| |**Panjabi**|`pa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Spanish**|`es`| |**Swedish**|`sv`| |**Tamil**|`ta`| |**Thai**|`th`| |**Turkish**|`tr`| |**Ukrainian**|`uk`| |**Vietnamese**|`vi`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Taiwan)**|`zh-TW`| |**Chinese (Traditional)**|`zh-Hant`| |**English (United States)**|`en-US`| |**French (France)**|`fr-FR`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`|  </details>
     * @summary Sentiment Analysis
     * @param {TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest} texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextApi
     */
    public textSentimentAnalysisCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest: TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options?: AxiosRequestConfig) {
        return TextApiFp(this.configuration).textSentimentAnalysisCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**microsoft**|`v7`|0.3 (per 1000 request)|1 request |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**prowritingaid**|`v1.0`|10.0 (per 1000 request)|1 request |**cohere**|`2022-12-06`|2.5 (per 1000000 char)|1000 char |**sapling**|`v1`|2.0 (per 1000000 char)|1 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Armenian**|`hy`| |**Azerbaijani**|`az`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bengali**|`bn`| |**Bosnian**|`bs`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Central Khmer**|`km`| |**Chinese**|`zh`| |**Corsican**|`co`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Esperanto**|`eo`| |**Estonian**|`et`| |**Finnish**|`fi`| |**French**|`fr`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Gujarati**|`gu`| |**Haitian**|`ht`| |**Hausa**|`ha`| |**Hawaiian**|`haw`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Hmong**|`hmn`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Igbo**|`ig`| |**Indonesian**|`id`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kannada**|`kn`| |**Kazakh**|`kk`| |**Kinyarwanda**|`rw`| |**Kirghiz**|`ky`| |**Korean**|`ko`| |**Kurdish**|`ku`| |**Lao**|`lo`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian**|`no`| |**Norwegian Bokmål**|`nb`| |**Nyanja**|`ny`| |**Oriya (macrolanguage)**|`or`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Samoan**|`sm`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Shona**|`sn`| |**Sindhi**|`sd`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Southern Sotho**|`st`| |**Spanish**|`es`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tamil**|`ta`| |**Tatar**|`tt`| |**Telugu**|`te`| |**Thai**|`th`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Xhosa**|`xh`| |**Yiddish**|`yi`| |**Yoruba**|`yo`| |**Zulu**|`zu`| |**jp**|`jp`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (China)**|`zh-CN`| |**Chinese (Simplified)**|`zh-hans`| |**Chinese (Taiwan)**|`zh-TW`| |**Chinese (Traditional)**|`zh-hant`| |**English (United Kingdom)**|`en-gb`| |**Portuguese (Brazil)**|`pt-br`| |**Portuguese (Portugal)**|`pt-pt`|  </details>
     * @summary Spell Check
     * @param {TextspellCheckSpellCheckRequest} textspellCheckSpellCheckRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextApi
     */
    public textSpellCheckCreate(textspellCheckSpellCheckRequest: TextspellCheckSpellCheckRequest, options?: AxiosRequestConfig) {
        return TextApiFp(this.configuration).textSpellCheckCreate(textspellCheckSpellCheckRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**connexun**|`v1.0`|2.0 (per 1000 request)|1 request |**microsoft**|`v3.1`|2.0 (per 1000000 char)|1000 char |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**openai - text-ada-001**|`v3.0.0`|0.4 (per 1000000 token)|1 token |**openai - text-babbage-001**|`v3.0.0`|0.5 (per 1000000 token)|1 token |**openai - text-curie-001**|`v3.0.0`|2.0 (per 1000000 token)|1 token |**openai - text-davinci-002**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**openai - text-davinci-003**|`v3.0.0`|20.0 (per 1000000 token)|1 token |**emvista**|`v1.0`|1.0 (per 1000000 char)|1000 char |**oneai**|`v0`|2.14 (per 1000000 char)|1 char |**cohere**|`2022-12-06`|5.0 (per 2000000 char)|2000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Abkhazian**|`ab`| |**Acoli**|`ach`| |**Afar**|`aa`| |**Afrikaans**|`af`| |**Akan**|`ak`| |**Albanian**|`sq`| |**American Sign Language**|`ase`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Aragonese**|`an`| |**Argentine Sign Language**|`aed`| |**Armenian**|`hy`| |**Assamese**|`as`| |**Avaric**|`av`| |**Avestan**|`ae`| |**Aymara**|`ay`| |**Azerbaijani**|`az`| |**Bambara**|`bm`| |**Bashkir**|`ba`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bemba (Zambia)**|`bem`| |**Bengali**|`bn`| |**Berber languages**|`ber`| |**Bihari languages**|`bh`| |**Bislama**|`bi`| |**Bosnian**|`bs`| |**Brazilian Sign Language**|`bzs`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Celtic languages**|`cel`| |**Central Bikol**|`bcl`| |**Central Khmer**|`km`| |**Chamorro**|`ch`| |**Chechen**|`ce`| |**Chilean Sign Language**|`csg`| |**Chinese**|`zh`| |**Church Slavic**|`cu`| |**Chuukese**|`chk`| |**Chuvash**|`cv`| |**Colombian Sign Language**|`csn`| |**Congo Swahili**|`swc`| |**Cornish**|`kw`| |**Corsican**|`co`| |**Cree**|`cr`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dhivehi**|`dv`| |**Dutch**|`nl`| |**Dzongkha**|`dz`| |**Efik**|`efi`| |**English**|`en`| |**Esperanto**|`eo`| |**Estonian**|`et`| |**Ewe**|`ee`| |**Faroese**|`fo`| |**Fijian**|`fj`| |**Finnish**|`fi`| |**Finnish Sign Language**|`fse`| |**Fon**|`fon`| |**French**|`fr`| |**Fulah**|`ff`| |**Ga**|`gaa`| |**Galician**|`gl`| |**Ganda**|`lg`| |**Georgian**|`ka`| |**German**|`de`| |**Gilbertese**|`gil`| |**Guarani**|`gn`| |**Gujarati**|`gu`| |**Gun**|`guw`| |**Haitian**|`ht`| |**Hausa**|`ha`| |**Hebrew**|`he`| |**Herero**|`hz`| |**Hiligaynon**|`hil`| |**Hindi**|`hi`| |**Hiri Motu**|`ho`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Ido**|`io`| |**Igbo**|`ig`| |**Iloko**|`ilo`| |**Indonesian**|`id`| |**Interlingua (International Auxiliary Language Association)**|`ia`| |**Interlingue**|`ie`| |**Inuktitut**|`iu`| |**Inupiaq**|`ik`| |**Irish**|`ga`| |**Isoko**|`iso`| |**Isthmus Zapotec**|`zai`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kabyle**|`kab`| |**Kalaallisut**|`kl`| |**Kannada**|`kn`| |**Kanuri**|`kr`| |**Kaonde**|`kqn`| |**Kashmiri**|`ks`| |**Kazakh**|`kk`| |**Kikuyu**|`ki`| |**Kinyarwanda**|`rw`| |**Kirghiz**|`ky`| |**Komi**|`kv`| |**Kongo**|`kg`| |**Korean**|`ko`| |**Kuanyama**|`kj`| |**Kurdish**|`ku`| |**Kwangali**|`kwn`| |**Lao**|`lo`| |**Latin**|`la`| |**Latvian**|`lv`| |**Limburgan**|`li`| |**Lingala**|`ln`| |**Lithuanian**|`lt`| |**Lozi**|`loz`| |**Luba-Katanga**|`lu`| |**Luba-Lulua**|`lua`| |**Lunda**|`lun`| |**Luo (Kenya and Tanzania)**|`luo`| |**Lushai**|`lus`| |**Luvale**|`lue`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Manx**|`gv`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Marshallese**|`mh`| |**Mexican Sign Language**|`mfs`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Morisyen**|`mfe`| |**Mossi**|`mos`| |**Nauru**|`na`| |**Navajo**|`nv`| |**Ndonga**|`ng`| |**Nepali (macrolanguage)**|`ne`| |**Niuean**|`niu`| |**North Ndebele**|`nd`| |**Northern Sami**|`se`| |**Norwegian**|`no`| |**Norwegian Bokmål**|`nb`| |**Norwegian Nynorsk**|`nn`| |**Nyaneka**|`nyk`| |**Nyanja**|`ny`| |**Occitan (post 1500)**|`oc`| |**Ojibwa**|`oj`| |**Oriya (macrolanguage)**|`or`| |**Oromo**|`om`| |**Ossetian**|`os`| |**Pali**|`pi`| |**Pangasinan**|`pag`| |**Panjabi**|`pa`| |**Papiamento**|`pap`| |**Pedi**|`nso`| |**Persian**|`fa`| |**Peruvian Sign Language**|`prl`| |**Pijin**|`pis`| |**Pohnpeian**|`pon`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Quechua**|`qu`| |**Romance languages**|`roa`| |**Romanian**|`ro`| |**Romansh**|`rm`| |**Rundi**|`rn`| |**Russian**|`ru`| |**Ruund**|`rnd`| |**Samoan**|`sm`| |**San Salvador Kongo**|`kwy`| |**Sango**|`sg`| |**Sanskrit**|`sa`| |**Sardinian**|`sc`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Seselwa Creole French**|`crs`| |**Shona**|`sn`| |**Sichuan Yi**|`ii`| |**Sindhi**|`sd`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**South Ndebele**|`nr`| |**Southern Sotho**|`st`| |**Spanish**|`es`| |**Spanish Sign Language**|`ssp`| |**Sranan Tongo**|`srn`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swati**|`ss`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tahitian**|`ty`| |**Tajik**|`tg`| |**Tamil**|`ta`| |**Tatar**|`tt`| |**Telugu**|`te`| |**Tetela**|`tll`| |**Tetun Dili**|`tdt`| |**Thai**|`th`| |**Tibetan**|`bo`| |**Tigrinya**|`ti`| |**Tiv**|`tiv`| |**Tok Pisin**|`tpi`| |**Tonga (Tonga Islands)**|`to`| |**Tonga (Zambia)**|`toi`| |**Tsonga**|`ts`| |**Tswana**|`tn`| |**Tumbuka**|`tum`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Tuvalu**|`tvl`| |**Twi**|`tw`| |**Tzotzil**|`tzo`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Umbundu**|`umb`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Venda**|`ve`| |**Venezuelan Sign Language**|`vsl`| |**Vietnamese**|`vi`| |**Volapük**|`vo`| |**Wallisian**|`wls`| |**Walloon**|`wa`| |**Waray (Philippines)**|`war`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Wolaytta**|`wal`| |**Wolof**|`wo`| |**Xhosa**|`xh`| |**Yapese**|`yap`| |**Yiddish**|`yi`| |**Yoruba**|`yo`| |**Yucateco**|`yua`| |**Yue Chinese**|`yue`| |**Zande (individual language)**|`zne`| |**Zhuang**|`za`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (Simplified)**|`zh-Hans`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Brazil)**|`pt-br`| |**Portuguese (Portugal)**|`pt-PT`| |**Portuguese (Portugal)**|`pt-pt`|  </details>
     * @summary Summarize
     * @param {TextsummarizeSummarizeRequest} textsummarizeSummarizeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextApi
     */
    public textSummarizeCreate(textsummarizeSummarizeRequest: TextsummarizeSummarizeRequest, options?: AxiosRequestConfig) {
        return TextApiFp(this.configuration).textSummarizeCreate(textsummarizeSummarizeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|0.5 (per 1000000 char)|300 char |**google**|`v1`|0.5 (per 1000000 char)|1000 char |**ibm**|`v1 (2021-08-01)`|0.3 (per 1000000 char)|10000 char |**lettria**|`v5.5.2`|2.0 (per 1000000 char)|1000 char |**emvista**|`v1.0`|1.0 (per 1000000 char)|1 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Arabic**|`ar`| |**Chinese**|`zh`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Finnish**|`fi`| |**French**|`fr`| |**German**|`de`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Italian**|`it`| |**Japanese**|`ja`| |**Korean**|`ko`| |**Norwegian**|`no`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Slovak**|`sk`| |**Spanish**|`es`| |**Swedish**|`sv`| |**Turkish**|`tr`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (Taiwan)**|`zh-TW`| |**Chinese (Traditional)**|`zh-Hant`| |**English (United States)**|`en-US`| |**French (France)**|`fr-FR`|  </details>
     * @summary Syntax Analysis
     * @param {TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest} texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextApi
     */
    public textSyntaxAnalysisCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest: TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options?: AxiosRequestConfig) {
        return TextApiFp(this.configuration).textSyntaxAnalysisCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**google**|`v1`|2.0 (per 1000000 char)|1000 char |**ibm**|`v1 (2021-08-01)`|0.3 (per 1000000 char)|10000 char |**openai**|`v1`|20.0 (per 1000000 token)|1 token |**tenstorrent**|`v1.0.0`|2.0 (per 1000000 char)|1000 char   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Arabic**|`ar`| |**Chinese**|`zh`| |**Dutch**|`nl`| |**English**|`en`| |**French**|`fr`| |**German**|`de`| |**Italian**|`it`| |**Japanese**|`ja`| |**Korean**|`ko`| |**Portuguese**|`pt`| |**Russian**|`ru`| |**Spanish**|`es`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`|  </details>
     * @summary Topic Extraction
     * @param {TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest} texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextApi
     */
    public textTopicExtractionCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest: TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options?: AxiosRequestConfig) {
        return TextApiFp(this.configuration).textTopicExtractionCreate(texttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TranslationApi - axios parameter creator
 * @export
 */
export const TranslationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|15.0 (per 1000000 char)|1 char |**google**|`v3`|20.0 (per 1000000 char)|1 char |**ibm**|`v3 (2018-05-01)`|20.0 (per 1000000 char)|1000 char |**microsoft**|`v3.0`|10.0 (per 1000000 char)|1 char |**neuralspace**|`v1`|7.0 (per 1000 request)|1 request |**phedone**|`-`|4.0 (per 1000000 char)|1000 char |**deepl**|`v2`|20.0 (per 1000000 char)|1 char |**modernmt**|`1.2.8`|8.0 (per 1000000 char)|1 char |**openai**|`v1`|20.0 (per 1000000 token)|1 token   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Abkhazian**|`ab`| |**Acoli**|`ach`| |**Afar**|`aa`| |**Afrikaans**|`af`| |**Akan**|`ak`| |**Albanian**|`sq`| |**American Sign Language**|`ase`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Aragonese**|`an`| |**Argentine Sign Language**|`aed`| |**Armenian**|`hy`| |**Assamese**|`as`| |**Avaric**|`av`| |**Avestan**|`ae`| |**Aymara**|`ay`| |**Azerbaijani**|`az`| |**Bambara**|`bm`| |**Bashkir**|`ba`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bemba (Zambia)**|`bem`| |**Bengali**|`bn`| |**Berber languages**|`ber`| |**Bihari languages**|`bh`| |**Bislama**|`bi`| |**Bosnian**|`bs`| |**Brazilian Sign Language**|`bzs`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Celtic languages**|`cel`| |**Central Bikol**|`bcl`| |**Central Khmer**|`km`| |**Chamorro**|`ch`| |**Chechen**|`ce`| |**Chilean Sign Language**|`csg`| |**Chinese**|`zh`| |**Church Slavic**|`cu`| |**Chuukese**|`chk`| |**Chuvash**|`cv`| |**Colombian Sign Language**|`csn`| |**Congo Swahili**|`swc`| |**Cornish**|`kw`| |**Corsican**|`co`| |**Cree**|`cr`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dari**|`prs`| |**Dhivehi**|`dv`| |**Dutch**|`nl`| |**Dzongkha**|`dz`| |**Efik**|`efi`| |**English**|`en`| |**Esperanto**|`eo`| |**Estonian**|`et`| |**Ewe**|`ee`| |**Faroese**|`fo`| |**Fijian**|`fj`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**Finnish Sign Language**|`fse`| |**Fon**|`fon`| |**French**|`fr`| |**Fulah**|`ff`| |**Ga**|`gaa`| |**Galician**|`gl`| |**Ganda**|`lg`| |**Georgian**|`ka`| |**German**|`de`| |**Gilbertese**|`gil`| |**Guarani**|`gn`| |**Gujarati**|`gu`| |**Gun**|`guw`| |**Haitian**|`ht`| |**Hausa**|`ha`| |**Hawaiian**|`haw`| |**Hebrew**|`he`| |**Herero**|`hz`| |**Hiligaynon**|`hil`| |**Hindi**|`hi`| |**Hiri Motu**|`ho`| |**Hmong**|`hmn`| |**Hmong Daw**|`mww`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Ido**|`io`| |**Igbo**|`ig`| |**Iloko**|`ilo`| |**Indonesian**|`id`| |**Interlingua (International Auxiliary Language Association)**|`ia`| |**Interlingue**|`ie`| |**Inuinnaqtun**|`ikt`| |**Inuktitut**|`iu`| |**Inupiaq**|`ik`| |**Irish**|`ga`| |**Isoko**|`iso`| |**Isthmus Zapotec**|`zai`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kabyle**|`kab`| |**Kalaallisut**|`kl`| |**Kannada**|`kn`| |**Kanuri**|`kr`| |**Kaonde**|`kqn`| |**Kashmiri**|`ks`| |**Kazakh**|`kk`| |**Kikuyu**|`ki`| |**Kinyarwanda**|`rw`| |**Kirghiz**|`ky`| |**Klingon**|`tlh`| |**Komi**|`kv`| |**Kongo**|`kg`| |**Korean**|`ko`| |**Kuanyama**|`kj`| |**Kurdish**|`ku`| |**Kwangali**|`kwn`| |**Lao**|`lo`| |**Latin**|`la`| |**Latvian**|`lv`| |**Limburgan**|`li`| |**Lingala**|`ln`| |**Literary Chinese**|`lzh`| |**Lithuanian**|`lt`| |**Lozi**|`loz`| |**Luba-Katanga**|`lu`| |**Luba-Lulua**|`lua`| |**Lunda**|`lun`| |**Luo (Kenya and Tanzania)**|`luo`| |**Lushai**|`lus`| |**Luvale**|`lue`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Manx**|`gv`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Marshallese**|`mh`| |**Mexican Sign Language**|`mfs`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Morisyen**|`mfe`| |**Mossi**|`mos`| |**Nauru**|`na`| |**Navajo**|`nv`| |**Ndonga**|`ng`| |**Nepali (macrolanguage)**|`ne`| |**Niuean**|`niu`| |**North Ndebele**|`nd`| |**Northern Kurdish**|`kmr`| |**Northern Sami**|`se`| |**Norwegian**|`no`| |**Norwegian Bokmål**|`nb`| |**Norwegian Nynorsk**|`nn`| |**Nyaneka**|`nyk`| |**Nyanja**|`ny`| |**Occitan (post 1500)**|`oc`| |**Ojibwa**|`oj`| |**Oriya (macrolanguage)**|`or`| |**Oromo**|`om`| |**Ossetian**|`os`| |**Pali**|`pi`| |**Pangasinan**|`pag`| |**Panjabi**|`pa`| |**Papiamento**|`pap`| |**Pedi**|`nso`| |**Persian**|`fa`| |**Peruvian Sign Language**|`prl`| |**Pijin**|`pis`| |**Pohnpeian**|`pon`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Quechua**|`qu`| |**Querétaro Otomi**|`otq`| |**Romance languages**|`roa`| |**Romanian**|`ro`| |**Romansh**|`rm`| |**Rundi**|`rn`| |**Russian**|`ru`| |**Ruund**|`rnd`| |**Samoan**|`sm`| |**San Salvador Kongo**|`kwy`| |**Sango**|`sg`| |**Sanskrit**|`sa`| |**Sardinian**|`sc`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Serbo-Croatian**|`sh`| |**Seselwa Creole French**|`crs`| |**Shona**|`sn`| |**Sichuan Yi**|`ii`| |**Sindhi**|`sd`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**South Ndebele**|`nr`| |**Southern Sotho**|`st`| |**Spanish**|`es`| |**Spanish Sign Language**|`ssp`| |**Sranan Tongo**|`srn`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swati**|`ss`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tahitian**|`ty`| |**Tajik**|`tg`| |**Tamil**|`ta`| |**Tatar**|`tt`| |**Telugu**|`te`| |**Tetela**|`tll`| |**Tetun Dili**|`tdt`| |**Thai**|`th`| |**Tibetan**|`bo`| |**Tigrinya**|`ti`| |**Tiv**|`tiv`| |**Tok Pisin**|`tpi`| |**Tonga (Tonga Islands)**|`to`| |**Tonga (Zambia)**|`toi`| |**Tsonga**|`ts`| |**Tswana**|`tn`| |**Tumbuka**|`tum`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Tuvalu**|`tvl`| |**Twi**|`tw`| |**Tzotzil**|`tzo`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Umbundu**|`umb`| |**Upper Sorbian**|`hsb`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Venda**|`ve`| |**Venezuelan Sign Language**|`vsl`| |**Vietnamese**|`vi`| |**Volapük**|`vo`| |**Wallisian**|`wls`| |**Walloon**|`wa`| |**Waray (Philippines)**|`war`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Wolaytta**|`wal`| |**Wolof**|`wo`| |**Xhosa**|`xh`| |**Yapese**|`yap`| |**Yiddish**|`yi`| |**Yoruba**|`yo`| |**Yucateco**|`yua`| |**Yue Chinese**|`yue`| |**Zande (individual language)**|`zne`| |**Zhuang**|`za`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Arabic (Argentina)**|`ar-AR`| |**Bangla (Bangladesh)**|`bn-BD`| |**Basque (Spain)**|`eu-ES`| |**Bosnian (Bosnia & Herzegovina)**|`bs-BA`| |**Bulgarian (Bulgaria)**|`bg-BG`| |**Catalan (Spain)**|`ca-ES`| |**Chinese (China)**|`zh-CN`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Taiwan)**|`zh-TW`| |**Chinese (Traditional)**|`zh-Hant`| |**Croatian (Croatia)**|`hr-HR`| |**Czech (Czechia)**|`cs-CZ`| |**Danish (Denmark)**|`da-DK`| |**Dutch (Netherlands)**|`nl-NL`| |**English (United Kingdom)**|`en-GB`| |**English (United States)**|`en-US`| |**Estonian (Estonia)**|`et-EE`| |**Finnish (Finland)**|`fi-FI`| |**French (Canada)**|`fr-CA`| |**French (France)**|`fr-FR`| |**German (Germany)**|`de-DE`| |**Greek (Greece)**|`el-GR`| |**Gujarati (India)**|`gu-IN`| |**Hebrew (Israel)**|`he-IL`| |**Hindi (India)**|`hi-IN`| |**Hungarian (Hungary)**|`hu-HU`| |**Indonesian (Indonesia)**|`id-ID`| |**Inuktitut (Latin)**|`iu-Latn`| |**Irish (Ireland)**|`ga-IE`| |**Italian (Italy)**|`it-IT`| |**Japanese (Japan)**|`ja-JP`| |**Kannada (India)**|`kn-IN`| |**Klingon (Klingon (KLI pIqaD))**|`tlh-Piqd`| |**Klingon (Latin)**|`tlh-Latn`| |**Korean (South Korea)**|`ko-KR`| |**Latvian (Latvia)**|`lv-LV`| |**Lithuanian (Lithuania)**|`lt-LT`| |**Malay (Malaysia)**|`ms-MY`| |**Malayalam (India)**|`ml-IN`| |**Maltese (Malta)**|`mt-MT`| |**Marathi (India)**|`mr-IN`| |**Mongolian (Cyrillic)**|`mn-Cyrl`| |**Mongolian (Mongolian)**|`mn-Mong`| |**Nepali (Nepal)**|`ne-NP`| |**Norwegian Bokmål (Norway)**|`nb-NO`| |**Persian (Afghanistan)**|`fa-AF`| |**Polish (Poland)**|`pl-PL`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`| |**Punjabi (India)**|`pa-IN`| |**Romanian (Romania)**|`ro-RO`| |**Russian (Russia)**|`ru-RU`| |**Serbian (Cyrillic)**|`sr-Cyrl`| |**Serbian (Latin)**|`sr-Latn`| |**Serbian (Montenegro)**|`sr-ME`| |**Serbian (Serbia)**|`sr-RS`| |**Sinhala (Sri Lanka)**|`si-LK`| |**Slovak (Slovakia)**|`sk-SK`| |**Slovenian (Slovenia)**|`sl-SI`| |**Spanish (Latin America)**|`es-419`| |**Spanish (Mexico)**|`es-MX`| |**Spanish (Spain)**|`es-ES`| |**Swedish (Sweden)**|`sv-SE`| |**Tamil (India)**|`ta-IN`| |**Telugu (India)**|`te-IN`| |**Thai (Thailand)**|`th-TH`| |**Turkish (Turkey)**|`tr-TR`| |**Ukrainian (Ukraine)**|`uk-UA`| |**Urdu (Pakistan)**|`ur-PK`| |**Vietnamese (Vietnam)**|`vi-VN`| |**Welsh (United Kingdom)**|`cy-GB`|  </details>
         * @summary Automatic Translation
         * @param {TranslationautomaticTranslationAutomaticTranslationRequest} translationautomaticTranslationAutomaticTranslationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        translationAutomaticTranslationCreate: async (translationautomaticTranslationAutomaticTranslationRequest: TranslationautomaticTranslationAutomaticTranslationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'translationautomaticTranslationAutomaticTranslationRequest' is not null or undefined
            assertParamExists('translationAutomaticTranslationCreate', 'translationautomaticTranslationAutomaticTranslationRequest', translationautomaticTranslationAutomaticTranslationRequest)
            const localVarPath = `/translation/automatic_translation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(translationautomaticTranslationAutomaticTranslationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**deepl**|`v2`|2.0 (per 20 page)|20 page |**google**|`v3`|0.08 (per 1 page)|1 page   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Armenian**|`hy`| |**Azerbaijani**|`az`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bengali**|`bn`| |**Bosnian**|`bs`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Central Khmer**|`km`| |**Chinese**|`zh`| |**Corsican**|`co`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Esperanto**|`eo`| |**Estonian**|`et`| |**Finnish**|`fi`| |**French**|`fr`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Gujarati**|`gu`| |**Haitian**|`ht`| |**Hausa**|`ha`| |**Hawaiian**|`haw`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Hmong**|`hmn`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Igbo**|`ig`| |**Indonesian**|`id`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kannada**|`kn`| |**Kazakh**|`kk`| |**Kinyarwanda**|`rw`| |**Kirghiz**|`ky`| |**Korean**|`ko`| |**Kurdish**|`ku`| |**Lao**|`lo`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian**|`no`| |**Nyanja**|`ny`| |**Oriya (macrolanguage)**|`or`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Samoan**|`sm`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Shona**|`sn`| |**Sindhi**|`sd`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Southern Sotho**|`st`| |**Spanish**|`es`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tamil**|`ta`| |**Tatar**|`tt`| |**Telugu**|`te`| |**Thai**|`th`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Xhosa**|`xh`| |**Yiddish**|`yi`| |**Yoruba**|`yo`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (China)**|`zh-CN`| |**Chinese (Taiwan)**|`zh-TW`|  </details>
         * @summary Document Translation
         * @param {TranslationdocumentTranslationDocumentTranslationRequest} translationdocumentTranslationDocumentTranslationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        translationDocumentTranslationCreate: async (translationdocumentTranslationDocumentTranslationRequest: TranslationdocumentTranslationDocumentTranslationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'translationdocumentTranslationDocumentTranslationRequest' is not null or undefined
            assertParamExists('translationDocumentTranslationCreate', 'translationdocumentTranslationDocumentTranslationRequest', translationdocumentTranslationDocumentTranslationRequest)
            const localVarPath = `/translation/document_translation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(translationdocumentTranslationDocumentTranslationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000000 char)|300 char |**google**|`v1`|20.0 (per 1000000 char)|1 char |**ibm**|`v1 (2021-08-01)`|20.0 (per 1000000 char)|1000 char |**microsoft**|`v3.1`|1.0 (per 1000000 char)|1000 char |**neuralspace**|`v1`|7.0 (per 1000 request)|1 request |**oneai**|`v0`|2.14 (per 1000000 char)|1 char |**modernmt**|`1.1.0`|8.0 (per 1000000 char)|1 char |**openai**|`v1`|20.0 (per 1000000 token)|1 token   </details>  
         * @summary Language Detection
         * @param {TranslationlanguageDetectionLanguageDetectionRequest} translationlanguageDetectionLanguageDetectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        translationLanguageDetectionCreate: async (translationlanguageDetectionLanguageDetectionRequest: TranslationlanguageDetectionLanguageDetectionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'translationlanguageDetectionLanguageDetectionRequest' is not null or undefined
            assertParamExists('translationLanguageDetectionCreate', 'translationlanguageDetectionLanguageDetectionRequest', translationlanguageDetectionLanguageDetectionRequest)
            const localVarPath = `/translation/language_detection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(translationlanguageDetectionLanguageDetectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TranslationApi - functional programming interface
 * @export
 */
export const TranslationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TranslationApiAxiosParamCreator(configuration)
    return {
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|15.0 (per 1000000 char)|1 char |**google**|`v3`|20.0 (per 1000000 char)|1 char |**ibm**|`v3 (2018-05-01)`|20.0 (per 1000000 char)|1000 char |**microsoft**|`v3.0`|10.0 (per 1000000 char)|1 char |**neuralspace**|`v1`|7.0 (per 1000 request)|1 request |**phedone**|`-`|4.0 (per 1000000 char)|1000 char |**deepl**|`v2`|20.0 (per 1000000 char)|1 char |**modernmt**|`1.2.8`|8.0 (per 1000000 char)|1 char |**openai**|`v1`|20.0 (per 1000000 token)|1 token   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Abkhazian**|`ab`| |**Acoli**|`ach`| |**Afar**|`aa`| |**Afrikaans**|`af`| |**Akan**|`ak`| |**Albanian**|`sq`| |**American Sign Language**|`ase`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Aragonese**|`an`| |**Argentine Sign Language**|`aed`| |**Armenian**|`hy`| |**Assamese**|`as`| |**Avaric**|`av`| |**Avestan**|`ae`| |**Aymara**|`ay`| |**Azerbaijani**|`az`| |**Bambara**|`bm`| |**Bashkir**|`ba`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bemba (Zambia)**|`bem`| |**Bengali**|`bn`| |**Berber languages**|`ber`| |**Bihari languages**|`bh`| |**Bislama**|`bi`| |**Bosnian**|`bs`| |**Brazilian Sign Language**|`bzs`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Celtic languages**|`cel`| |**Central Bikol**|`bcl`| |**Central Khmer**|`km`| |**Chamorro**|`ch`| |**Chechen**|`ce`| |**Chilean Sign Language**|`csg`| |**Chinese**|`zh`| |**Church Slavic**|`cu`| |**Chuukese**|`chk`| |**Chuvash**|`cv`| |**Colombian Sign Language**|`csn`| |**Congo Swahili**|`swc`| |**Cornish**|`kw`| |**Corsican**|`co`| |**Cree**|`cr`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dari**|`prs`| |**Dhivehi**|`dv`| |**Dutch**|`nl`| |**Dzongkha**|`dz`| |**Efik**|`efi`| |**English**|`en`| |**Esperanto**|`eo`| |**Estonian**|`et`| |**Ewe**|`ee`| |**Faroese**|`fo`| |**Fijian**|`fj`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**Finnish Sign Language**|`fse`| |**Fon**|`fon`| |**French**|`fr`| |**Fulah**|`ff`| |**Ga**|`gaa`| |**Galician**|`gl`| |**Ganda**|`lg`| |**Georgian**|`ka`| |**German**|`de`| |**Gilbertese**|`gil`| |**Guarani**|`gn`| |**Gujarati**|`gu`| |**Gun**|`guw`| |**Haitian**|`ht`| |**Hausa**|`ha`| |**Hawaiian**|`haw`| |**Hebrew**|`he`| |**Herero**|`hz`| |**Hiligaynon**|`hil`| |**Hindi**|`hi`| |**Hiri Motu**|`ho`| |**Hmong**|`hmn`| |**Hmong Daw**|`mww`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Ido**|`io`| |**Igbo**|`ig`| |**Iloko**|`ilo`| |**Indonesian**|`id`| |**Interlingua (International Auxiliary Language Association)**|`ia`| |**Interlingue**|`ie`| |**Inuinnaqtun**|`ikt`| |**Inuktitut**|`iu`| |**Inupiaq**|`ik`| |**Irish**|`ga`| |**Isoko**|`iso`| |**Isthmus Zapotec**|`zai`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kabyle**|`kab`| |**Kalaallisut**|`kl`| |**Kannada**|`kn`| |**Kanuri**|`kr`| |**Kaonde**|`kqn`| |**Kashmiri**|`ks`| |**Kazakh**|`kk`| |**Kikuyu**|`ki`| |**Kinyarwanda**|`rw`| |**Kirghiz**|`ky`| |**Klingon**|`tlh`| |**Komi**|`kv`| |**Kongo**|`kg`| |**Korean**|`ko`| |**Kuanyama**|`kj`| |**Kurdish**|`ku`| |**Kwangali**|`kwn`| |**Lao**|`lo`| |**Latin**|`la`| |**Latvian**|`lv`| |**Limburgan**|`li`| |**Lingala**|`ln`| |**Literary Chinese**|`lzh`| |**Lithuanian**|`lt`| |**Lozi**|`loz`| |**Luba-Katanga**|`lu`| |**Luba-Lulua**|`lua`| |**Lunda**|`lun`| |**Luo (Kenya and Tanzania)**|`luo`| |**Lushai**|`lus`| |**Luvale**|`lue`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Manx**|`gv`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Marshallese**|`mh`| |**Mexican Sign Language**|`mfs`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Morisyen**|`mfe`| |**Mossi**|`mos`| |**Nauru**|`na`| |**Navajo**|`nv`| |**Ndonga**|`ng`| |**Nepali (macrolanguage)**|`ne`| |**Niuean**|`niu`| |**North Ndebele**|`nd`| |**Northern Kurdish**|`kmr`| |**Northern Sami**|`se`| |**Norwegian**|`no`| |**Norwegian Bokmål**|`nb`| |**Norwegian Nynorsk**|`nn`| |**Nyaneka**|`nyk`| |**Nyanja**|`ny`| |**Occitan (post 1500)**|`oc`| |**Ojibwa**|`oj`| |**Oriya (macrolanguage)**|`or`| |**Oromo**|`om`| |**Ossetian**|`os`| |**Pali**|`pi`| |**Pangasinan**|`pag`| |**Panjabi**|`pa`| |**Papiamento**|`pap`| |**Pedi**|`nso`| |**Persian**|`fa`| |**Peruvian Sign Language**|`prl`| |**Pijin**|`pis`| |**Pohnpeian**|`pon`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Quechua**|`qu`| |**Querétaro Otomi**|`otq`| |**Romance languages**|`roa`| |**Romanian**|`ro`| |**Romansh**|`rm`| |**Rundi**|`rn`| |**Russian**|`ru`| |**Ruund**|`rnd`| |**Samoan**|`sm`| |**San Salvador Kongo**|`kwy`| |**Sango**|`sg`| |**Sanskrit**|`sa`| |**Sardinian**|`sc`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Serbo-Croatian**|`sh`| |**Seselwa Creole French**|`crs`| |**Shona**|`sn`| |**Sichuan Yi**|`ii`| |**Sindhi**|`sd`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**South Ndebele**|`nr`| |**Southern Sotho**|`st`| |**Spanish**|`es`| |**Spanish Sign Language**|`ssp`| |**Sranan Tongo**|`srn`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swati**|`ss`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tahitian**|`ty`| |**Tajik**|`tg`| |**Tamil**|`ta`| |**Tatar**|`tt`| |**Telugu**|`te`| |**Tetela**|`tll`| |**Tetun Dili**|`tdt`| |**Thai**|`th`| |**Tibetan**|`bo`| |**Tigrinya**|`ti`| |**Tiv**|`tiv`| |**Tok Pisin**|`tpi`| |**Tonga (Tonga Islands)**|`to`| |**Tonga (Zambia)**|`toi`| |**Tsonga**|`ts`| |**Tswana**|`tn`| |**Tumbuka**|`tum`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Tuvalu**|`tvl`| |**Twi**|`tw`| |**Tzotzil**|`tzo`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Umbundu**|`umb`| |**Upper Sorbian**|`hsb`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Venda**|`ve`| |**Venezuelan Sign Language**|`vsl`| |**Vietnamese**|`vi`| |**Volapük**|`vo`| |**Wallisian**|`wls`| |**Walloon**|`wa`| |**Waray (Philippines)**|`war`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Wolaytta**|`wal`| |**Wolof**|`wo`| |**Xhosa**|`xh`| |**Yapese**|`yap`| |**Yiddish**|`yi`| |**Yoruba**|`yo`| |**Yucateco**|`yua`| |**Yue Chinese**|`yue`| |**Zande (individual language)**|`zne`| |**Zhuang**|`za`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Arabic (Argentina)**|`ar-AR`| |**Bangla (Bangladesh)**|`bn-BD`| |**Basque (Spain)**|`eu-ES`| |**Bosnian (Bosnia & Herzegovina)**|`bs-BA`| |**Bulgarian (Bulgaria)**|`bg-BG`| |**Catalan (Spain)**|`ca-ES`| |**Chinese (China)**|`zh-CN`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Taiwan)**|`zh-TW`| |**Chinese (Traditional)**|`zh-Hant`| |**Croatian (Croatia)**|`hr-HR`| |**Czech (Czechia)**|`cs-CZ`| |**Danish (Denmark)**|`da-DK`| |**Dutch (Netherlands)**|`nl-NL`| |**English (United Kingdom)**|`en-GB`| |**English (United States)**|`en-US`| |**Estonian (Estonia)**|`et-EE`| |**Finnish (Finland)**|`fi-FI`| |**French (Canada)**|`fr-CA`| |**French (France)**|`fr-FR`| |**German (Germany)**|`de-DE`| |**Greek (Greece)**|`el-GR`| |**Gujarati (India)**|`gu-IN`| |**Hebrew (Israel)**|`he-IL`| |**Hindi (India)**|`hi-IN`| |**Hungarian (Hungary)**|`hu-HU`| |**Indonesian (Indonesia)**|`id-ID`| |**Inuktitut (Latin)**|`iu-Latn`| |**Irish (Ireland)**|`ga-IE`| |**Italian (Italy)**|`it-IT`| |**Japanese (Japan)**|`ja-JP`| |**Kannada (India)**|`kn-IN`| |**Klingon (Klingon (KLI pIqaD))**|`tlh-Piqd`| |**Klingon (Latin)**|`tlh-Latn`| |**Korean (South Korea)**|`ko-KR`| |**Latvian (Latvia)**|`lv-LV`| |**Lithuanian (Lithuania)**|`lt-LT`| |**Malay (Malaysia)**|`ms-MY`| |**Malayalam (India)**|`ml-IN`| |**Maltese (Malta)**|`mt-MT`| |**Marathi (India)**|`mr-IN`| |**Mongolian (Cyrillic)**|`mn-Cyrl`| |**Mongolian (Mongolian)**|`mn-Mong`| |**Nepali (Nepal)**|`ne-NP`| |**Norwegian Bokmål (Norway)**|`nb-NO`| |**Persian (Afghanistan)**|`fa-AF`| |**Polish (Poland)**|`pl-PL`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`| |**Punjabi (India)**|`pa-IN`| |**Romanian (Romania)**|`ro-RO`| |**Russian (Russia)**|`ru-RU`| |**Serbian (Cyrillic)**|`sr-Cyrl`| |**Serbian (Latin)**|`sr-Latn`| |**Serbian (Montenegro)**|`sr-ME`| |**Serbian (Serbia)**|`sr-RS`| |**Sinhala (Sri Lanka)**|`si-LK`| |**Slovak (Slovakia)**|`sk-SK`| |**Slovenian (Slovenia)**|`sl-SI`| |**Spanish (Latin America)**|`es-419`| |**Spanish (Mexico)**|`es-MX`| |**Spanish (Spain)**|`es-ES`| |**Swedish (Sweden)**|`sv-SE`| |**Tamil (India)**|`ta-IN`| |**Telugu (India)**|`te-IN`| |**Thai (Thailand)**|`th-TH`| |**Turkish (Turkey)**|`tr-TR`| |**Ukrainian (Ukraine)**|`uk-UA`| |**Urdu (Pakistan)**|`ur-PK`| |**Vietnamese (Vietnam)**|`vi-VN`| |**Welsh (United Kingdom)**|`cy-GB`|  </details>
         * @summary Automatic Translation
         * @param {TranslationautomaticTranslationAutomaticTranslationRequest} translationautomaticTranslationAutomaticTranslationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async translationAutomaticTranslationCreate(translationautomaticTranslationAutomaticTranslationRequest: TranslationautomaticTranslationAutomaticTranslationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TranslationautomaticTranslationResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.translationAutomaticTranslationCreate(translationautomaticTranslationAutomaticTranslationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**deepl**|`v2`|2.0 (per 20 page)|20 page |**google**|`v3`|0.08 (per 1 page)|1 page   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Armenian**|`hy`| |**Azerbaijani**|`az`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bengali**|`bn`| |**Bosnian**|`bs`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Central Khmer**|`km`| |**Chinese**|`zh`| |**Corsican**|`co`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Esperanto**|`eo`| |**Estonian**|`et`| |**Finnish**|`fi`| |**French**|`fr`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Gujarati**|`gu`| |**Haitian**|`ht`| |**Hausa**|`ha`| |**Hawaiian**|`haw`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Hmong**|`hmn`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Igbo**|`ig`| |**Indonesian**|`id`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kannada**|`kn`| |**Kazakh**|`kk`| |**Kinyarwanda**|`rw`| |**Kirghiz**|`ky`| |**Korean**|`ko`| |**Kurdish**|`ku`| |**Lao**|`lo`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian**|`no`| |**Nyanja**|`ny`| |**Oriya (macrolanguage)**|`or`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Samoan**|`sm`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Shona**|`sn`| |**Sindhi**|`sd`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Southern Sotho**|`st`| |**Spanish**|`es`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tamil**|`ta`| |**Tatar**|`tt`| |**Telugu**|`te`| |**Thai**|`th`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Xhosa**|`xh`| |**Yiddish**|`yi`| |**Yoruba**|`yo`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (China)**|`zh-CN`| |**Chinese (Taiwan)**|`zh-TW`|  </details>
         * @summary Document Translation
         * @param {TranslationdocumentTranslationDocumentTranslationRequest} translationdocumentTranslationDocumentTranslationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async translationDocumentTranslationCreate(translationdocumentTranslationDocumentTranslationRequest: TranslationdocumentTranslationDocumentTranslationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TranslationdocumentTranslationResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.translationDocumentTranslationCreate(translationdocumentTranslationDocumentTranslationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000000 char)|300 char |**google**|`v1`|20.0 (per 1000000 char)|1 char |**ibm**|`v1 (2021-08-01)`|20.0 (per 1000000 char)|1000 char |**microsoft**|`v3.1`|1.0 (per 1000000 char)|1000 char |**neuralspace**|`v1`|7.0 (per 1000 request)|1 request |**oneai**|`v0`|2.14 (per 1000000 char)|1 char |**modernmt**|`1.1.0`|8.0 (per 1000000 char)|1 char |**openai**|`v1`|20.0 (per 1000000 token)|1 token   </details>  
         * @summary Language Detection
         * @param {TranslationlanguageDetectionLanguageDetectionRequest} translationlanguageDetectionLanguageDetectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async translationLanguageDetectionCreate(translationlanguageDetectionLanguageDetectionRequest: TranslationlanguageDetectionLanguageDetectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TranslationlanguageDetectionResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.translationLanguageDetectionCreate(translationlanguageDetectionLanguageDetectionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TranslationApi - factory interface
 * @export
 */
export const TranslationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TranslationApiFp(configuration)
    return {
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|15.0 (per 1000000 char)|1 char |**google**|`v3`|20.0 (per 1000000 char)|1 char |**ibm**|`v3 (2018-05-01)`|20.0 (per 1000000 char)|1000 char |**microsoft**|`v3.0`|10.0 (per 1000000 char)|1 char |**neuralspace**|`v1`|7.0 (per 1000 request)|1 request |**phedone**|`-`|4.0 (per 1000000 char)|1000 char |**deepl**|`v2`|20.0 (per 1000000 char)|1 char |**modernmt**|`1.2.8`|8.0 (per 1000000 char)|1 char |**openai**|`v1`|20.0 (per 1000000 token)|1 token   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Abkhazian**|`ab`| |**Acoli**|`ach`| |**Afar**|`aa`| |**Afrikaans**|`af`| |**Akan**|`ak`| |**Albanian**|`sq`| |**American Sign Language**|`ase`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Aragonese**|`an`| |**Argentine Sign Language**|`aed`| |**Armenian**|`hy`| |**Assamese**|`as`| |**Avaric**|`av`| |**Avestan**|`ae`| |**Aymara**|`ay`| |**Azerbaijani**|`az`| |**Bambara**|`bm`| |**Bashkir**|`ba`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bemba (Zambia)**|`bem`| |**Bengali**|`bn`| |**Berber languages**|`ber`| |**Bihari languages**|`bh`| |**Bislama**|`bi`| |**Bosnian**|`bs`| |**Brazilian Sign Language**|`bzs`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Celtic languages**|`cel`| |**Central Bikol**|`bcl`| |**Central Khmer**|`km`| |**Chamorro**|`ch`| |**Chechen**|`ce`| |**Chilean Sign Language**|`csg`| |**Chinese**|`zh`| |**Church Slavic**|`cu`| |**Chuukese**|`chk`| |**Chuvash**|`cv`| |**Colombian Sign Language**|`csn`| |**Congo Swahili**|`swc`| |**Cornish**|`kw`| |**Corsican**|`co`| |**Cree**|`cr`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dari**|`prs`| |**Dhivehi**|`dv`| |**Dutch**|`nl`| |**Dzongkha**|`dz`| |**Efik**|`efi`| |**English**|`en`| |**Esperanto**|`eo`| |**Estonian**|`et`| |**Ewe**|`ee`| |**Faroese**|`fo`| |**Fijian**|`fj`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**Finnish Sign Language**|`fse`| |**Fon**|`fon`| |**French**|`fr`| |**Fulah**|`ff`| |**Ga**|`gaa`| |**Galician**|`gl`| |**Ganda**|`lg`| |**Georgian**|`ka`| |**German**|`de`| |**Gilbertese**|`gil`| |**Guarani**|`gn`| |**Gujarati**|`gu`| |**Gun**|`guw`| |**Haitian**|`ht`| |**Hausa**|`ha`| |**Hawaiian**|`haw`| |**Hebrew**|`he`| |**Herero**|`hz`| |**Hiligaynon**|`hil`| |**Hindi**|`hi`| |**Hiri Motu**|`ho`| |**Hmong**|`hmn`| |**Hmong Daw**|`mww`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Ido**|`io`| |**Igbo**|`ig`| |**Iloko**|`ilo`| |**Indonesian**|`id`| |**Interlingua (International Auxiliary Language Association)**|`ia`| |**Interlingue**|`ie`| |**Inuinnaqtun**|`ikt`| |**Inuktitut**|`iu`| |**Inupiaq**|`ik`| |**Irish**|`ga`| |**Isoko**|`iso`| |**Isthmus Zapotec**|`zai`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kabyle**|`kab`| |**Kalaallisut**|`kl`| |**Kannada**|`kn`| |**Kanuri**|`kr`| |**Kaonde**|`kqn`| |**Kashmiri**|`ks`| |**Kazakh**|`kk`| |**Kikuyu**|`ki`| |**Kinyarwanda**|`rw`| |**Kirghiz**|`ky`| |**Klingon**|`tlh`| |**Komi**|`kv`| |**Kongo**|`kg`| |**Korean**|`ko`| |**Kuanyama**|`kj`| |**Kurdish**|`ku`| |**Kwangali**|`kwn`| |**Lao**|`lo`| |**Latin**|`la`| |**Latvian**|`lv`| |**Limburgan**|`li`| |**Lingala**|`ln`| |**Literary Chinese**|`lzh`| |**Lithuanian**|`lt`| |**Lozi**|`loz`| |**Luba-Katanga**|`lu`| |**Luba-Lulua**|`lua`| |**Lunda**|`lun`| |**Luo (Kenya and Tanzania)**|`luo`| |**Lushai**|`lus`| |**Luvale**|`lue`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Manx**|`gv`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Marshallese**|`mh`| |**Mexican Sign Language**|`mfs`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Morisyen**|`mfe`| |**Mossi**|`mos`| |**Nauru**|`na`| |**Navajo**|`nv`| |**Ndonga**|`ng`| |**Nepali (macrolanguage)**|`ne`| |**Niuean**|`niu`| |**North Ndebele**|`nd`| |**Northern Kurdish**|`kmr`| |**Northern Sami**|`se`| |**Norwegian**|`no`| |**Norwegian Bokmål**|`nb`| |**Norwegian Nynorsk**|`nn`| |**Nyaneka**|`nyk`| |**Nyanja**|`ny`| |**Occitan (post 1500)**|`oc`| |**Ojibwa**|`oj`| |**Oriya (macrolanguage)**|`or`| |**Oromo**|`om`| |**Ossetian**|`os`| |**Pali**|`pi`| |**Pangasinan**|`pag`| |**Panjabi**|`pa`| |**Papiamento**|`pap`| |**Pedi**|`nso`| |**Persian**|`fa`| |**Peruvian Sign Language**|`prl`| |**Pijin**|`pis`| |**Pohnpeian**|`pon`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Quechua**|`qu`| |**Querétaro Otomi**|`otq`| |**Romance languages**|`roa`| |**Romanian**|`ro`| |**Romansh**|`rm`| |**Rundi**|`rn`| |**Russian**|`ru`| |**Ruund**|`rnd`| |**Samoan**|`sm`| |**San Salvador Kongo**|`kwy`| |**Sango**|`sg`| |**Sanskrit**|`sa`| |**Sardinian**|`sc`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Serbo-Croatian**|`sh`| |**Seselwa Creole French**|`crs`| |**Shona**|`sn`| |**Sichuan Yi**|`ii`| |**Sindhi**|`sd`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**South Ndebele**|`nr`| |**Southern Sotho**|`st`| |**Spanish**|`es`| |**Spanish Sign Language**|`ssp`| |**Sranan Tongo**|`srn`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swati**|`ss`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tahitian**|`ty`| |**Tajik**|`tg`| |**Tamil**|`ta`| |**Tatar**|`tt`| |**Telugu**|`te`| |**Tetela**|`tll`| |**Tetun Dili**|`tdt`| |**Thai**|`th`| |**Tibetan**|`bo`| |**Tigrinya**|`ti`| |**Tiv**|`tiv`| |**Tok Pisin**|`tpi`| |**Tonga (Tonga Islands)**|`to`| |**Tonga (Zambia)**|`toi`| |**Tsonga**|`ts`| |**Tswana**|`tn`| |**Tumbuka**|`tum`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Tuvalu**|`tvl`| |**Twi**|`tw`| |**Tzotzil**|`tzo`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Umbundu**|`umb`| |**Upper Sorbian**|`hsb`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Venda**|`ve`| |**Venezuelan Sign Language**|`vsl`| |**Vietnamese**|`vi`| |**Volapük**|`vo`| |**Wallisian**|`wls`| |**Walloon**|`wa`| |**Waray (Philippines)**|`war`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Wolaytta**|`wal`| |**Wolof**|`wo`| |**Xhosa**|`xh`| |**Yapese**|`yap`| |**Yiddish**|`yi`| |**Yoruba**|`yo`| |**Yucateco**|`yua`| |**Yue Chinese**|`yue`| |**Zande (individual language)**|`zne`| |**Zhuang**|`za`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Arabic (Argentina)**|`ar-AR`| |**Bangla (Bangladesh)**|`bn-BD`| |**Basque (Spain)**|`eu-ES`| |**Bosnian (Bosnia & Herzegovina)**|`bs-BA`| |**Bulgarian (Bulgaria)**|`bg-BG`| |**Catalan (Spain)**|`ca-ES`| |**Chinese (China)**|`zh-CN`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Taiwan)**|`zh-TW`| |**Chinese (Traditional)**|`zh-Hant`| |**Croatian (Croatia)**|`hr-HR`| |**Czech (Czechia)**|`cs-CZ`| |**Danish (Denmark)**|`da-DK`| |**Dutch (Netherlands)**|`nl-NL`| |**English (United Kingdom)**|`en-GB`| |**English (United States)**|`en-US`| |**Estonian (Estonia)**|`et-EE`| |**Finnish (Finland)**|`fi-FI`| |**French (Canada)**|`fr-CA`| |**French (France)**|`fr-FR`| |**German (Germany)**|`de-DE`| |**Greek (Greece)**|`el-GR`| |**Gujarati (India)**|`gu-IN`| |**Hebrew (Israel)**|`he-IL`| |**Hindi (India)**|`hi-IN`| |**Hungarian (Hungary)**|`hu-HU`| |**Indonesian (Indonesia)**|`id-ID`| |**Inuktitut (Latin)**|`iu-Latn`| |**Irish (Ireland)**|`ga-IE`| |**Italian (Italy)**|`it-IT`| |**Japanese (Japan)**|`ja-JP`| |**Kannada (India)**|`kn-IN`| |**Klingon (Klingon (KLI pIqaD))**|`tlh-Piqd`| |**Klingon (Latin)**|`tlh-Latn`| |**Korean (South Korea)**|`ko-KR`| |**Latvian (Latvia)**|`lv-LV`| |**Lithuanian (Lithuania)**|`lt-LT`| |**Malay (Malaysia)**|`ms-MY`| |**Malayalam (India)**|`ml-IN`| |**Maltese (Malta)**|`mt-MT`| |**Marathi (India)**|`mr-IN`| |**Mongolian (Cyrillic)**|`mn-Cyrl`| |**Mongolian (Mongolian)**|`mn-Mong`| |**Nepali (Nepal)**|`ne-NP`| |**Norwegian Bokmål (Norway)**|`nb-NO`| |**Persian (Afghanistan)**|`fa-AF`| |**Polish (Poland)**|`pl-PL`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`| |**Punjabi (India)**|`pa-IN`| |**Romanian (Romania)**|`ro-RO`| |**Russian (Russia)**|`ru-RU`| |**Serbian (Cyrillic)**|`sr-Cyrl`| |**Serbian (Latin)**|`sr-Latn`| |**Serbian (Montenegro)**|`sr-ME`| |**Serbian (Serbia)**|`sr-RS`| |**Sinhala (Sri Lanka)**|`si-LK`| |**Slovak (Slovakia)**|`sk-SK`| |**Slovenian (Slovenia)**|`sl-SI`| |**Spanish (Latin America)**|`es-419`| |**Spanish (Mexico)**|`es-MX`| |**Spanish (Spain)**|`es-ES`| |**Swedish (Sweden)**|`sv-SE`| |**Tamil (India)**|`ta-IN`| |**Telugu (India)**|`te-IN`| |**Thai (Thailand)**|`th-TH`| |**Turkish (Turkey)**|`tr-TR`| |**Ukrainian (Ukraine)**|`uk-UA`| |**Urdu (Pakistan)**|`ur-PK`| |**Vietnamese (Vietnam)**|`vi-VN`| |**Welsh (United Kingdom)**|`cy-GB`|  </details>
         * @summary Automatic Translation
         * @param {TranslationautomaticTranslationAutomaticTranslationRequest} translationautomaticTranslationAutomaticTranslationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        translationAutomaticTranslationCreate(translationautomaticTranslationAutomaticTranslationRequest: TranslationautomaticTranslationAutomaticTranslationRequest, options?: any): AxiosPromise<TranslationautomaticTranslationResponseModel> {
            return localVarFp.translationAutomaticTranslationCreate(translationautomaticTranslationAutomaticTranslationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**deepl**|`v2`|2.0 (per 20 page)|20 page |**google**|`v3`|0.08 (per 1 page)|1 page   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Armenian**|`hy`| |**Azerbaijani**|`az`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bengali**|`bn`| |**Bosnian**|`bs`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Central Khmer**|`km`| |**Chinese**|`zh`| |**Corsican**|`co`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Esperanto**|`eo`| |**Estonian**|`et`| |**Finnish**|`fi`| |**French**|`fr`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Gujarati**|`gu`| |**Haitian**|`ht`| |**Hausa**|`ha`| |**Hawaiian**|`haw`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Hmong**|`hmn`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Igbo**|`ig`| |**Indonesian**|`id`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kannada**|`kn`| |**Kazakh**|`kk`| |**Kinyarwanda**|`rw`| |**Kirghiz**|`ky`| |**Korean**|`ko`| |**Kurdish**|`ku`| |**Lao**|`lo`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian**|`no`| |**Nyanja**|`ny`| |**Oriya (macrolanguage)**|`or`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Samoan**|`sm`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Shona**|`sn`| |**Sindhi**|`sd`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Southern Sotho**|`st`| |**Spanish**|`es`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tamil**|`ta`| |**Tatar**|`tt`| |**Telugu**|`te`| |**Thai**|`th`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Xhosa**|`xh`| |**Yiddish**|`yi`| |**Yoruba**|`yo`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (China)**|`zh-CN`| |**Chinese (Taiwan)**|`zh-TW`|  </details>
         * @summary Document Translation
         * @param {TranslationdocumentTranslationDocumentTranslationRequest} translationdocumentTranslationDocumentTranslationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        translationDocumentTranslationCreate(translationdocumentTranslationDocumentTranslationRequest: TranslationdocumentTranslationDocumentTranslationRequest, options?: any): AxiosPromise<TranslationdocumentTranslationResponseModel> {
            return localVarFp.translationDocumentTranslationCreate(translationdocumentTranslationDocumentTranslationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000000 char)|300 char |**google**|`v1`|20.0 (per 1000000 char)|1 char |**ibm**|`v1 (2021-08-01)`|20.0 (per 1000000 char)|1000 char |**microsoft**|`v3.1`|1.0 (per 1000000 char)|1000 char |**neuralspace**|`v1`|7.0 (per 1000 request)|1 request |**oneai**|`v0`|2.14 (per 1000000 char)|1 char |**modernmt**|`1.1.0`|8.0 (per 1000000 char)|1 char |**openai**|`v1`|20.0 (per 1000000 token)|1 token   </details>  
         * @summary Language Detection
         * @param {TranslationlanguageDetectionLanguageDetectionRequest} translationlanguageDetectionLanguageDetectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        translationLanguageDetectionCreate(translationlanguageDetectionLanguageDetectionRequest: TranslationlanguageDetectionLanguageDetectionRequest, options?: any): AxiosPromise<TranslationlanguageDetectionResponseModel> {
            return localVarFp.translationLanguageDetectionCreate(translationlanguageDetectionLanguageDetectionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TranslationApi - object-oriented interface
 * @export
 * @class TranslationApi
 * @extends {BaseAPI}
 */
export class TranslationApi extends BaseAPI {
    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|15.0 (per 1000000 char)|1 char |**google**|`v3`|20.0 (per 1000000 char)|1 char |**ibm**|`v3 (2018-05-01)`|20.0 (per 1000000 char)|1000 char |**microsoft**|`v3.0`|10.0 (per 1000000 char)|1 char |**neuralspace**|`v1`|7.0 (per 1000 request)|1 request |**phedone**|`-`|4.0 (per 1000000 char)|1000 char |**deepl**|`v2`|20.0 (per 1000000 char)|1 char |**modernmt**|`1.2.8`|8.0 (per 1000000 char)|1 char |**openai**|`v1`|20.0 (per 1000000 token)|1 token   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Abkhazian**|`ab`| |**Acoli**|`ach`| |**Afar**|`aa`| |**Afrikaans**|`af`| |**Akan**|`ak`| |**Albanian**|`sq`| |**American Sign Language**|`ase`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Aragonese**|`an`| |**Argentine Sign Language**|`aed`| |**Armenian**|`hy`| |**Assamese**|`as`| |**Avaric**|`av`| |**Avestan**|`ae`| |**Aymara**|`ay`| |**Azerbaijani**|`az`| |**Bambara**|`bm`| |**Bashkir**|`ba`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bemba (Zambia)**|`bem`| |**Bengali**|`bn`| |**Berber languages**|`ber`| |**Bihari languages**|`bh`| |**Bislama**|`bi`| |**Bosnian**|`bs`| |**Brazilian Sign Language**|`bzs`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Celtic languages**|`cel`| |**Central Bikol**|`bcl`| |**Central Khmer**|`km`| |**Chamorro**|`ch`| |**Chechen**|`ce`| |**Chilean Sign Language**|`csg`| |**Chinese**|`zh`| |**Church Slavic**|`cu`| |**Chuukese**|`chk`| |**Chuvash**|`cv`| |**Colombian Sign Language**|`csn`| |**Congo Swahili**|`swc`| |**Cornish**|`kw`| |**Corsican**|`co`| |**Cree**|`cr`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dari**|`prs`| |**Dhivehi**|`dv`| |**Dutch**|`nl`| |**Dzongkha**|`dz`| |**Efik**|`efi`| |**English**|`en`| |**Esperanto**|`eo`| |**Estonian**|`et`| |**Ewe**|`ee`| |**Faroese**|`fo`| |**Fijian**|`fj`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**Finnish Sign Language**|`fse`| |**Fon**|`fon`| |**French**|`fr`| |**Fulah**|`ff`| |**Ga**|`gaa`| |**Galician**|`gl`| |**Ganda**|`lg`| |**Georgian**|`ka`| |**German**|`de`| |**Gilbertese**|`gil`| |**Guarani**|`gn`| |**Gujarati**|`gu`| |**Gun**|`guw`| |**Haitian**|`ht`| |**Hausa**|`ha`| |**Hawaiian**|`haw`| |**Hebrew**|`he`| |**Herero**|`hz`| |**Hiligaynon**|`hil`| |**Hindi**|`hi`| |**Hiri Motu**|`ho`| |**Hmong**|`hmn`| |**Hmong Daw**|`mww`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Ido**|`io`| |**Igbo**|`ig`| |**Iloko**|`ilo`| |**Indonesian**|`id`| |**Interlingua (International Auxiliary Language Association)**|`ia`| |**Interlingue**|`ie`| |**Inuinnaqtun**|`ikt`| |**Inuktitut**|`iu`| |**Inupiaq**|`ik`| |**Irish**|`ga`| |**Isoko**|`iso`| |**Isthmus Zapotec**|`zai`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kabyle**|`kab`| |**Kalaallisut**|`kl`| |**Kannada**|`kn`| |**Kanuri**|`kr`| |**Kaonde**|`kqn`| |**Kashmiri**|`ks`| |**Kazakh**|`kk`| |**Kikuyu**|`ki`| |**Kinyarwanda**|`rw`| |**Kirghiz**|`ky`| |**Klingon**|`tlh`| |**Komi**|`kv`| |**Kongo**|`kg`| |**Korean**|`ko`| |**Kuanyama**|`kj`| |**Kurdish**|`ku`| |**Kwangali**|`kwn`| |**Lao**|`lo`| |**Latin**|`la`| |**Latvian**|`lv`| |**Limburgan**|`li`| |**Lingala**|`ln`| |**Literary Chinese**|`lzh`| |**Lithuanian**|`lt`| |**Lozi**|`loz`| |**Luba-Katanga**|`lu`| |**Luba-Lulua**|`lua`| |**Lunda**|`lun`| |**Luo (Kenya and Tanzania)**|`luo`| |**Lushai**|`lus`| |**Luvale**|`lue`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Manx**|`gv`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Marshallese**|`mh`| |**Mexican Sign Language**|`mfs`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Morisyen**|`mfe`| |**Mossi**|`mos`| |**Nauru**|`na`| |**Navajo**|`nv`| |**Ndonga**|`ng`| |**Nepali (macrolanguage)**|`ne`| |**Niuean**|`niu`| |**North Ndebele**|`nd`| |**Northern Kurdish**|`kmr`| |**Northern Sami**|`se`| |**Norwegian**|`no`| |**Norwegian Bokmål**|`nb`| |**Norwegian Nynorsk**|`nn`| |**Nyaneka**|`nyk`| |**Nyanja**|`ny`| |**Occitan (post 1500)**|`oc`| |**Ojibwa**|`oj`| |**Oriya (macrolanguage)**|`or`| |**Oromo**|`om`| |**Ossetian**|`os`| |**Pali**|`pi`| |**Pangasinan**|`pag`| |**Panjabi**|`pa`| |**Papiamento**|`pap`| |**Pedi**|`nso`| |**Persian**|`fa`| |**Peruvian Sign Language**|`prl`| |**Pijin**|`pis`| |**Pohnpeian**|`pon`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Quechua**|`qu`| |**Querétaro Otomi**|`otq`| |**Romance languages**|`roa`| |**Romanian**|`ro`| |**Romansh**|`rm`| |**Rundi**|`rn`| |**Russian**|`ru`| |**Ruund**|`rnd`| |**Samoan**|`sm`| |**San Salvador Kongo**|`kwy`| |**Sango**|`sg`| |**Sanskrit**|`sa`| |**Sardinian**|`sc`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Serbo-Croatian**|`sh`| |**Seselwa Creole French**|`crs`| |**Shona**|`sn`| |**Sichuan Yi**|`ii`| |**Sindhi**|`sd`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**South Ndebele**|`nr`| |**Southern Sotho**|`st`| |**Spanish**|`es`| |**Spanish Sign Language**|`ssp`| |**Sranan Tongo**|`srn`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swati**|`ss`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tahitian**|`ty`| |**Tajik**|`tg`| |**Tamil**|`ta`| |**Tatar**|`tt`| |**Telugu**|`te`| |**Tetela**|`tll`| |**Tetun Dili**|`tdt`| |**Thai**|`th`| |**Tibetan**|`bo`| |**Tigrinya**|`ti`| |**Tiv**|`tiv`| |**Tok Pisin**|`tpi`| |**Tonga (Tonga Islands)**|`to`| |**Tonga (Zambia)**|`toi`| |**Tsonga**|`ts`| |**Tswana**|`tn`| |**Tumbuka**|`tum`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Tuvalu**|`tvl`| |**Twi**|`tw`| |**Tzotzil**|`tzo`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Umbundu**|`umb`| |**Upper Sorbian**|`hsb`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Venda**|`ve`| |**Venezuelan Sign Language**|`vsl`| |**Vietnamese**|`vi`| |**Volapük**|`vo`| |**Wallisian**|`wls`| |**Walloon**|`wa`| |**Waray (Philippines)**|`war`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Wolaytta**|`wal`| |**Wolof**|`wo`| |**Xhosa**|`xh`| |**Yapese**|`yap`| |**Yiddish**|`yi`| |**Yoruba**|`yo`| |**Yucateco**|`yua`| |**Yue Chinese**|`yue`| |**Zande (individual language)**|`zne`| |**Zhuang**|`za`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Arabic (Argentina)**|`ar-AR`| |**Bangla (Bangladesh)**|`bn-BD`| |**Basque (Spain)**|`eu-ES`| |**Bosnian (Bosnia & Herzegovina)**|`bs-BA`| |**Bulgarian (Bulgaria)**|`bg-BG`| |**Catalan (Spain)**|`ca-ES`| |**Chinese (China)**|`zh-CN`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Taiwan)**|`zh-TW`| |**Chinese (Traditional)**|`zh-Hant`| |**Croatian (Croatia)**|`hr-HR`| |**Czech (Czechia)**|`cs-CZ`| |**Danish (Denmark)**|`da-DK`| |**Dutch (Netherlands)**|`nl-NL`| |**English (United Kingdom)**|`en-GB`| |**English (United States)**|`en-US`| |**Estonian (Estonia)**|`et-EE`| |**Finnish (Finland)**|`fi-FI`| |**French (Canada)**|`fr-CA`| |**French (France)**|`fr-FR`| |**German (Germany)**|`de-DE`| |**Greek (Greece)**|`el-GR`| |**Gujarati (India)**|`gu-IN`| |**Hebrew (Israel)**|`he-IL`| |**Hindi (India)**|`hi-IN`| |**Hungarian (Hungary)**|`hu-HU`| |**Indonesian (Indonesia)**|`id-ID`| |**Inuktitut (Latin)**|`iu-Latn`| |**Irish (Ireland)**|`ga-IE`| |**Italian (Italy)**|`it-IT`| |**Japanese (Japan)**|`ja-JP`| |**Kannada (India)**|`kn-IN`| |**Klingon (Klingon (KLI pIqaD))**|`tlh-Piqd`| |**Klingon (Latin)**|`tlh-Latn`| |**Korean (South Korea)**|`ko-KR`| |**Latvian (Latvia)**|`lv-LV`| |**Lithuanian (Lithuania)**|`lt-LT`| |**Malay (Malaysia)**|`ms-MY`| |**Malayalam (India)**|`ml-IN`| |**Maltese (Malta)**|`mt-MT`| |**Marathi (India)**|`mr-IN`| |**Mongolian (Cyrillic)**|`mn-Cyrl`| |**Mongolian (Mongolian)**|`mn-Mong`| |**Nepali (Nepal)**|`ne-NP`| |**Norwegian Bokmål (Norway)**|`nb-NO`| |**Persian (Afghanistan)**|`fa-AF`| |**Polish (Poland)**|`pl-PL`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`| |**Punjabi (India)**|`pa-IN`| |**Romanian (Romania)**|`ro-RO`| |**Russian (Russia)**|`ru-RU`| |**Serbian (Cyrillic)**|`sr-Cyrl`| |**Serbian (Latin)**|`sr-Latn`| |**Serbian (Montenegro)**|`sr-ME`| |**Serbian (Serbia)**|`sr-RS`| |**Sinhala (Sri Lanka)**|`si-LK`| |**Slovak (Slovakia)**|`sk-SK`| |**Slovenian (Slovenia)**|`sl-SI`| |**Spanish (Latin America)**|`es-419`| |**Spanish (Mexico)**|`es-MX`| |**Spanish (Spain)**|`es-ES`| |**Swedish (Sweden)**|`sv-SE`| |**Tamil (India)**|`ta-IN`| |**Telugu (India)**|`te-IN`| |**Thai (Thailand)**|`th-TH`| |**Turkish (Turkey)**|`tr-TR`| |**Ukrainian (Ukraine)**|`uk-UA`| |**Urdu (Pakistan)**|`ur-PK`| |**Vietnamese (Vietnam)**|`vi-VN`| |**Welsh (United Kingdom)**|`cy-GB`|  </details>
     * @summary Automatic Translation
     * @param {TranslationautomaticTranslationAutomaticTranslationRequest} translationautomaticTranslationAutomaticTranslationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranslationApi
     */
    public translationAutomaticTranslationCreate(translationautomaticTranslationAutomaticTranslationRequest: TranslationautomaticTranslationAutomaticTranslationRequest, options?: AxiosRequestConfig) {
        return TranslationApiFp(this.configuration).translationAutomaticTranslationCreate(translationautomaticTranslationAutomaticTranslationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**deepl**|`v2`|2.0 (per 20 page)|20 page |**google**|`v3`|0.08 (per 1 page)|1 page   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Armenian**|`hy`| |**Azerbaijani**|`az`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bengali**|`bn`| |**Bosnian**|`bs`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Central Khmer**|`km`| |**Chinese**|`zh`| |**Corsican**|`co`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Esperanto**|`eo`| |**Estonian**|`et`| |**Finnish**|`fi`| |**French**|`fr`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Gujarati**|`gu`| |**Haitian**|`ht`| |**Hausa**|`ha`| |**Hawaiian**|`haw`| |**Hebrew**|`he`| |**Hindi**|`hi`| |**Hmong**|`hmn`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Igbo**|`ig`| |**Indonesian**|`id`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kannada**|`kn`| |**Kazakh**|`kk`| |**Kinyarwanda**|`rw`| |**Kirghiz**|`ky`| |**Korean**|`ko`| |**Kurdish**|`ku`| |**Lao**|`lo`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian**|`no`| |**Nyanja**|`ny`| |**Oriya (macrolanguage)**|`or`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Samoan**|`sm`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Shona**|`sn`| |**Sindhi**|`sd`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Southern Sotho**|`st`| |**Spanish**|`es`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tamil**|`ta`| |**Tatar**|`tt`| |**Telugu**|`te`| |**Thai**|`th`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Xhosa**|`xh`| |**Yiddish**|`yi`| |**Yoruba**|`yo`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Chinese (China)**|`zh-CN`| |**Chinese (Taiwan)**|`zh-TW`|  </details>
     * @summary Document Translation
     * @param {TranslationdocumentTranslationDocumentTranslationRequest} translationdocumentTranslationDocumentTranslationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranslationApi
     */
    public translationDocumentTranslationCreate(translationdocumentTranslationDocumentTranslationRequest: TranslationdocumentTranslationDocumentTranslationRequest, options?: AxiosRequestConfig) {
        return TranslationApiFp(this.configuration).translationDocumentTranslationCreate(translationdocumentTranslationDocumentTranslationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000000 char)|300 char |**google**|`v1`|20.0 (per 1000000 char)|1 char |**ibm**|`v1 (2021-08-01)`|20.0 (per 1000000 char)|1000 char |**microsoft**|`v3.1`|1.0 (per 1000000 char)|1000 char |**neuralspace**|`v1`|7.0 (per 1000 request)|1 request |**oneai**|`v0`|2.14 (per 1000000 char)|1 char |**modernmt**|`1.1.0`|8.0 (per 1000000 char)|1 char |**openai**|`v1`|20.0 (per 1000000 token)|1 token   </details>  
     * @summary Language Detection
     * @param {TranslationlanguageDetectionLanguageDetectionRequest} translationlanguageDetectionLanguageDetectionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranslationApi
     */
    public translationLanguageDetectionCreate(translationlanguageDetectionLanguageDetectionRequest: TranslationlanguageDetectionLanguageDetectionRequest, options?: AxiosRequestConfig) {
        return TranslationApiFp(this.configuration).translationLanguageDetectionCreate(translationlanguageDetectionLanguageDetectionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * VideoApi - axios parameter creator
 * @export
 */
export const VideoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3`|0.1 (per 60 seconde)|60 seconde |**google**|`Video intelligence v1`|0.1 (per 60 seconde)|1 seconde   </details>  
         * @summary Video Explicit Content Detection Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoExplicitContentDetectionAsyncCreate: async (providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providers' is not null or undefined
            assertParamExists('videoExplicitContentDetectionAsyncCreate', 'providers', providers)
            const localVarPath = `/video/explicit_content_detection_async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (providers !== undefined) { 
                localVarFormParams.append('providers', providers as any);
            }
    
            if (fallbackProviders !== undefined) { 
                localVarFormParams.append('fallback_providers', fallbackProviders as any);
            }
    
            if (showOriginalResponse !== undefined) { 
                localVarFormParams.append('show_original_response', showOriginalResponse as any);
            }
    
            if (webhookReceiver !== undefined) { 
                localVarFormParams.append('webhook_receiver', webhookReceiver as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (fileUrl !== undefined) { 
                localVarFormParams.append('file_url', fileUrl as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Video Explicit Content Detection List Jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoExplicitContentDetectionAsyncRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/video/explicit_content_detection_async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Video Explicit Content Detection Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoExplicitContentDetectionAsyncRetrieve2: async (publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'publicId' is not null or undefined
            assertParamExists('videoExplicitContentDetectionAsyncRetrieve2', 'publicId', publicId)
            const localVarPath = `/video/explicit_content_detection_async/{public_id}`
                .replace(`{${"public_id"}}`, encodeURIComponent(String(publicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (responseAsDict !== undefined) {
                localVarQueryParameter['response_as_dict'] = responseAsDict;
            }

            if (showOriginalResponse !== undefined) {
                localVarQueryParameter['show_original_response'] = showOriginalResponse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3`|0.1 (per 60 seconde)|60 seconde |**google**|`Video intelligence v1`|0.1 (per 60 seconde)|1 seconde   </details>  
         * @summary Face Detection Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoFaceDetectionAsyncCreate: async (providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providers' is not null or undefined
            assertParamExists('videoFaceDetectionAsyncCreate', 'providers', providers)
            const localVarPath = `/video/face_detection_async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (providers !== undefined) { 
                localVarFormParams.append('providers', providers as any);
            }
    
            if (fallbackProviders !== undefined) { 
                localVarFormParams.append('fallback_providers', fallbackProviders as any);
            }
    
            if (showOriginalResponse !== undefined) { 
                localVarFormParams.append('show_original_response', showOriginalResponse as any);
            }
    
            if (webhookReceiver !== undefined) { 
                localVarFormParams.append('webhook_receiver', webhookReceiver as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (fileUrl !== undefined) { 
                localVarFormParams.append('file_url', fileUrl as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Face Detection List Jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoFaceDetectionAsyncRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/video/face_detection_async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Face Detection Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoFaceDetectionAsyncRetrieve2: async (publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'publicId' is not null or undefined
            assertParamExists('videoFaceDetectionAsyncRetrieve2', 'publicId', publicId)
            const localVarPath = `/video/face_detection_async/{public_id}`
                .replace(`{${"public_id"}}`, encodeURIComponent(String(publicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (responseAsDict !== undefined) {
                localVarQueryParameter['response_as_dict'] = responseAsDict;
            }

            if (showOriginalResponse !== undefined) {
                localVarQueryParameter['show_original_response'] = showOriginalResponse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3`|0.1 (per 60 seconde)|60 seconde |**google**|`Video intelligence v1`|0.1 (per 60 seconde)|1 seconde   </details>  
         * @summary Label Detection Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoLabelDetectionAsyncCreate: async (providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providers' is not null or undefined
            assertParamExists('videoLabelDetectionAsyncCreate', 'providers', providers)
            const localVarPath = `/video/label_detection_async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (providers !== undefined) { 
                localVarFormParams.append('providers', providers as any);
            }
    
            if (fallbackProviders !== undefined) { 
                localVarFormParams.append('fallback_providers', fallbackProviders as any);
            }
    
            if (showOriginalResponse !== undefined) { 
                localVarFormParams.append('show_original_response', showOriginalResponse as any);
            }
    
            if (webhookReceiver !== undefined) { 
                localVarFormParams.append('webhook_receiver', webhookReceiver as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (fileUrl !== undefined) { 
                localVarFormParams.append('file_url', fileUrl as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Label Detection List Jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoLabelDetectionAsyncRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/video/label_detection_async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Label Detection Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoLabelDetectionAsyncRetrieve2: async (publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'publicId' is not null or undefined
            assertParamExists('videoLabelDetectionAsyncRetrieve2', 'publicId', publicId)
            const localVarPath = `/video/label_detection_async/{public_id}`
                .replace(`{${"public_id"}}`, encodeURIComponent(String(publicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (responseAsDict !== undefined) {
                localVarQueryParameter['response_as_dict'] = responseAsDict;
            }

            if (showOriginalResponse !== undefined) {
                localVarQueryParameter['show_original_response'] = showOriginalResponse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**google**|`Video intelligence v1`|0.15 (per 60 seconde)|1 seconde   </details>  
         * @summary Video Logo Detection Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoLogoDetectionAsyncCreate: async (providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providers' is not null or undefined
            assertParamExists('videoLogoDetectionAsyncCreate', 'providers', providers)
            const localVarPath = `/video/logo_detection_async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (providers !== undefined) { 
                localVarFormParams.append('providers', providers as any);
            }
    
            if (fallbackProviders !== undefined) { 
                localVarFormParams.append('fallback_providers', fallbackProviders as any);
            }
    
            if (showOriginalResponse !== undefined) { 
                localVarFormParams.append('show_original_response', showOriginalResponse as any);
            }
    
            if (webhookReceiver !== undefined) { 
                localVarFormParams.append('webhook_receiver', webhookReceiver as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (fileUrl !== undefined) { 
                localVarFormParams.append('file_url', fileUrl as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Video Logo Detection List Jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoLogoDetectionAsyncRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/video/logo_detection_async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Video Logo Detection Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoLogoDetectionAsyncRetrieve2: async (publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'publicId' is not null or undefined
            assertParamExists('videoLogoDetectionAsyncRetrieve2', 'publicId', publicId)
            const localVarPath = `/video/logo_detection_async/{public_id}`
                .replace(`{${"public_id"}}`, encodeURIComponent(String(publicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (responseAsDict !== undefined) {
                localVarQueryParameter['response_as_dict'] = responseAsDict;
            }

            if (showOriginalResponse !== undefined) {
                localVarQueryParameter['show_original_response'] = showOriginalResponse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**google**|`Video intelligence v1`|0.15 (per 60 seconde)|1 seconde   </details>  
         * @summary Video Object Tracking Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoObjectTrackingAsyncCreate: async (providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providers' is not null or undefined
            assertParamExists('videoObjectTrackingAsyncCreate', 'providers', providers)
            const localVarPath = `/video/object_tracking_async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (providers !== undefined) { 
                localVarFormParams.append('providers', providers as any);
            }
    
            if (fallbackProviders !== undefined) { 
                localVarFormParams.append('fallback_providers', fallbackProviders as any);
            }
    
            if (showOriginalResponse !== undefined) { 
                localVarFormParams.append('show_original_response', showOriginalResponse as any);
            }
    
            if (webhookReceiver !== undefined) { 
                localVarFormParams.append('webhook_receiver', webhookReceiver as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (fileUrl !== undefined) { 
                localVarFormParams.append('file_url', fileUrl as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Video Object Tracking List Jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoObjectTrackingAsyncRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/video/object_tracking_async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Video Object Tracking Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoObjectTrackingAsyncRetrieve2: async (publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'publicId' is not null or undefined
            assertParamExists('videoObjectTrackingAsyncRetrieve2', 'publicId', publicId)
            const localVarPath = `/video/object_tracking_async/{public_id}`
                .replace(`{${"public_id"}}`, encodeURIComponent(String(publicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (responseAsDict !== undefined) {
                localVarQueryParameter['response_as_dict'] = responseAsDict;
            }

            if (showOriginalResponse !== undefined) {
                localVarQueryParameter['show_original_response'] = showOriginalResponse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3`|0.1 (per 60 seconde)|60 seconde |**google**|`Video intelligence v1`|0.1 (per 60 seconde)|1 seconde   </details>  
         * @summary Person Tracking Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoPersonTrackingAsyncCreate: async (providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providers' is not null or undefined
            assertParamExists('videoPersonTrackingAsyncCreate', 'providers', providers)
            const localVarPath = `/video/person_tracking_async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (providers !== undefined) { 
                localVarFormParams.append('providers', providers as any);
            }
    
            if (fallbackProviders !== undefined) { 
                localVarFormParams.append('fallback_providers', fallbackProviders as any);
            }
    
            if (showOriginalResponse !== undefined) { 
                localVarFormParams.append('show_original_response', showOriginalResponse as any);
            }
    
            if (webhookReceiver !== undefined) { 
                localVarFormParams.append('webhook_receiver', webhookReceiver as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (fileUrl !== undefined) { 
                localVarFormParams.append('file_url', fileUrl as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Person Tracking List Jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoPersonTrackingAsyncRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/video/person_tracking_async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Person Tracking Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoPersonTrackingAsyncRetrieve2: async (publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'publicId' is not null or undefined
            assertParamExists('videoPersonTrackingAsyncRetrieve2', 'publicId', publicId)
            const localVarPath = `/video/person_tracking_async/{public_id}`
                .replace(`{${"public_id"}}`, encodeURIComponent(String(publicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (responseAsDict !== undefined) {
                localVarQueryParameter['response_as_dict'] = responseAsDict;
            }

            if (showOriginalResponse !== undefined) {
                localVarQueryParameter['show_original_response'] = showOriginalResponse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3`|0.1 (per 60 seconde)|60 seconde |**google**|`Video intelligence v1`|0.15 (per 60 seconde)|1 seconde   </details>  
         * @summary Text Detection Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoTextDetectionAsyncCreate: async (providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providers' is not null or undefined
            assertParamExists('videoTextDetectionAsyncCreate', 'providers', providers)
            const localVarPath = `/video/text_detection_async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (providers !== undefined) { 
                localVarFormParams.append('providers', providers as any);
            }
    
            if (fallbackProviders !== undefined) { 
                localVarFormParams.append('fallback_providers', fallbackProviders as any);
            }
    
            if (showOriginalResponse !== undefined) { 
                localVarFormParams.append('show_original_response', showOriginalResponse as any);
            }
    
            if (webhookReceiver !== undefined) { 
                localVarFormParams.append('webhook_receiver', webhookReceiver as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (fileUrl !== undefined) { 
                localVarFormParams.append('file_url', fileUrl as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Text Detection List Jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoTextDetectionAsyncRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/video/text_detection_async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Text Detection Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoTextDetectionAsyncRetrieve2: async (publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'publicId' is not null or undefined
            assertParamExists('videoTextDetectionAsyncRetrieve2', 'publicId', publicId)
            const localVarPath = `/video/text_detection_async/{public_id}`
                .replace(`{${"public_id"}}`, encodeURIComponent(String(publicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (responseAsDict !== undefined) {
                localVarQueryParameter['response_as_dict'] = responseAsDict;
            }

            if (showOriginalResponse !== undefined) {
                localVarQueryParameter['show_original_response'] = showOriginalResponse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VideoApi - functional programming interface
 * @export
 */
export const VideoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VideoApiAxiosParamCreator(configuration)
    return {
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3`|0.1 (per 60 seconde)|60 seconde |**google**|`Video intelligence v1`|0.1 (per 60 seconde)|1 seconde   </details>  
         * @summary Video Explicit Content Detection Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoExplicitContentDetectionAsyncCreate(providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LaunchAsyncJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoExplicitContentDetectionAsyncCreate(providers, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Video Explicit Content Detection List Jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoExplicitContentDetectionAsyncRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAsyncJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoExplicitContentDetectionAsyncRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Video Explicit Content Detection Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoExplicitContentDetectionAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AsyncvideoexplicitContentDetectionAsyncResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoExplicitContentDetectionAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3`|0.1 (per 60 seconde)|60 seconde |**google**|`Video intelligence v1`|0.1 (per 60 seconde)|1 seconde   </details>  
         * @summary Face Detection Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoFaceDetectionAsyncCreate(providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LaunchAsyncJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoFaceDetectionAsyncCreate(providers, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Face Detection List Jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoFaceDetectionAsyncRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAsyncJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoFaceDetectionAsyncRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Face Detection Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoFaceDetectionAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AsyncvideofaceDetectionAsyncResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoFaceDetectionAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3`|0.1 (per 60 seconde)|60 seconde |**google**|`Video intelligence v1`|0.1 (per 60 seconde)|1 seconde   </details>  
         * @summary Label Detection Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoLabelDetectionAsyncCreate(providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LaunchAsyncJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoLabelDetectionAsyncCreate(providers, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Label Detection List Jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoLabelDetectionAsyncRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAsyncJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoLabelDetectionAsyncRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Label Detection Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoLabelDetectionAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AsyncvideolabelDetectionAsyncResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoLabelDetectionAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**google**|`Video intelligence v1`|0.15 (per 60 seconde)|1 seconde   </details>  
         * @summary Video Logo Detection Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoLogoDetectionAsyncCreate(providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LaunchAsyncJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoLogoDetectionAsyncCreate(providers, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Video Logo Detection List Jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoLogoDetectionAsyncRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAsyncJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoLogoDetectionAsyncRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Video Logo Detection Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoLogoDetectionAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AsyncvideologoDetectionAsyncResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoLogoDetectionAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**google**|`Video intelligence v1`|0.15 (per 60 seconde)|1 seconde   </details>  
         * @summary Video Object Tracking Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoObjectTrackingAsyncCreate(providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LaunchAsyncJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoObjectTrackingAsyncCreate(providers, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Video Object Tracking List Jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoObjectTrackingAsyncRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAsyncJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoObjectTrackingAsyncRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Video Object Tracking Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoObjectTrackingAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AsyncvideoobjectTrackingAsyncResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoObjectTrackingAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3`|0.1 (per 60 seconde)|60 seconde |**google**|`Video intelligence v1`|0.1 (per 60 seconde)|1 seconde   </details>  
         * @summary Person Tracking Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoPersonTrackingAsyncCreate(providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LaunchAsyncJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoPersonTrackingAsyncCreate(providers, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Person Tracking List Jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoPersonTrackingAsyncRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAsyncJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoPersonTrackingAsyncRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Person Tracking Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoPersonTrackingAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AsyncvideopersonTrackingAsyncResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoPersonTrackingAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3`|0.1 (per 60 seconde)|60 seconde |**google**|`Video intelligence v1`|0.15 (per 60 seconde)|1 seconde   </details>  
         * @summary Text Detection Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoTextDetectionAsyncCreate(providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LaunchAsyncJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoTextDetectionAsyncCreate(providers, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Text Detection List Jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoTextDetectionAsyncRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAsyncJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoTextDetectionAsyncRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Text Detection Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoTextDetectionAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AsyncvideotextDetectionAsyncResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoTextDetectionAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VideoApi - factory interface
 * @export
 */
export const VideoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VideoApiFp(configuration)
    return {
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3`|0.1 (per 60 seconde)|60 seconde |**google**|`Video intelligence v1`|0.1 (per 60 seconde)|1 seconde   </details>  
         * @summary Video Explicit Content Detection Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoExplicitContentDetectionAsyncCreate(providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options?: any): AxiosPromise<LaunchAsyncJobResponse> {
            return localVarFp.videoExplicitContentDetectionAsyncCreate(providers, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Video Explicit Content Detection List Jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoExplicitContentDetectionAsyncRetrieve(options?: any): AxiosPromise<ListAsyncJobResponse> {
            return localVarFp.videoExplicitContentDetectionAsyncRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Video Explicit Content Detection Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoExplicitContentDetectionAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: any): AxiosPromise<AsyncvideoexplicitContentDetectionAsyncResponseModel> {
            return localVarFp.videoExplicitContentDetectionAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3`|0.1 (per 60 seconde)|60 seconde |**google**|`Video intelligence v1`|0.1 (per 60 seconde)|1 seconde   </details>  
         * @summary Face Detection Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoFaceDetectionAsyncCreate(providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options?: any): AxiosPromise<LaunchAsyncJobResponse> {
            return localVarFp.videoFaceDetectionAsyncCreate(providers, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Face Detection List Jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoFaceDetectionAsyncRetrieve(options?: any): AxiosPromise<ListAsyncJobResponse> {
            return localVarFp.videoFaceDetectionAsyncRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Face Detection Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoFaceDetectionAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: any): AxiosPromise<AsyncvideofaceDetectionAsyncResponseModel> {
            return localVarFp.videoFaceDetectionAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3`|0.1 (per 60 seconde)|60 seconde |**google**|`Video intelligence v1`|0.1 (per 60 seconde)|1 seconde   </details>  
         * @summary Label Detection Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoLabelDetectionAsyncCreate(providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options?: any): AxiosPromise<LaunchAsyncJobResponse> {
            return localVarFp.videoLabelDetectionAsyncCreate(providers, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Label Detection List Jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoLabelDetectionAsyncRetrieve(options?: any): AxiosPromise<ListAsyncJobResponse> {
            return localVarFp.videoLabelDetectionAsyncRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Label Detection Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoLabelDetectionAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: any): AxiosPromise<AsyncvideolabelDetectionAsyncResponseModel> {
            return localVarFp.videoLabelDetectionAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**google**|`Video intelligence v1`|0.15 (per 60 seconde)|1 seconde   </details>  
         * @summary Video Logo Detection Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoLogoDetectionAsyncCreate(providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options?: any): AxiosPromise<LaunchAsyncJobResponse> {
            return localVarFp.videoLogoDetectionAsyncCreate(providers, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Video Logo Detection List Jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoLogoDetectionAsyncRetrieve(options?: any): AxiosPromise<ListAsyncJobResponse> {
            return localVarFp.videoLogoDetectionAsyncRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Video Logo Detection Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoLogoDetectionAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: any): AxiosPromise<AsyncvideologoDetectionAsyncResponseModel> {
            return localVarFp.videoLogoDetectionAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**google**|`Video intelligence v1`|0.15 (per 60 seconde)|1 seconde   </details>  
         * @summary Video Object Tracking Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoObjectTrackingAsyncCreate(providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options?: any): AxiosPromise<LaunchAsyncJobResponse> {
            return localVarFp.videoObjectTrackingAsyncCreate(providers, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Video Object Tracking List Jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoObjectTrackingAsyncRetrieve(options?: any): AxiosPromise<ListAsyncJobResponse> {
            return localVarFp.videoObjectTrackingAsyncRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Video Object Tracking Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoObjectTrackingAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: any): AxiosPromise<AsyncvideoobjectTrackingAsyncResponseModel> {
            return localVarFp.videoObjectTrackingAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3`|0.1 (per 60 seconde)|60 seconde |**google**|`Video intelligence v1`|0.1 (per 60 seconde)|1 seconde   </details>  
         * @summary Person Tracking Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoPersonTrackingAsyncCreate(providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options?: any): AxiosPromise<LaunchAsyncJobResponse> {
            return localVarFp.videoPersonTrackingAsyncCreate(providers, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Person Tracking List Jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoPersonTrackingAsyncRetrieve(options?: any): AxiosPromise<ListAsyncJobResponse> {
            return localVarFp.videoPersonTrackingAsyncRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Person Tracking Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoPersonTrackingAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: any): AxiosPromise<AsyncvideopersonTrackingAsyncResponseModel> {
            return localVarFp.videoPersonTrackingAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options).then((request) => request(axios, basePath));
        },
        /**
         * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3`|0.1 (per 60 seconde)|60 seconde |**google**|`Video intelligence v1`|0.15 (per 60 seconde)|1 seconde   </details>  
         * @summary Text Detection Launch Job
         * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
         * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
         * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
         * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
         * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
         * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoTextDetectionAsyncCreate(providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options?: any): AxiosPromise<LaunchAsyncJobResponse> {
            return localVarFp.videoTextDetectionAsyncCreate(providers, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
         * @summary Text Detection List Jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoTextDetectionAsyncRetrieve(options?: any): AxiosPromise<ListAsyncJobResponse> {
            return localVarFp.videoTextDetectionAsyncRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the status and results of an async job given its ID.
         * @summary Text Detection Get Job Results
         * @param {string} publicId 
         * @param {boolean} [responseAsDict] 
         * @param {boolean} [showOriginalResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoTextDetectionAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: any): AxiosPromise<AsyncvideotextDetectionAsyncResponseModel> {
            return localVarFp.videoTextDetectionAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VideoApi - object-oriented interface
 * @export
 * @class VideoApi
 * @extends {BaseAPI}
 */
export class VideoApi extends BaseAPI {
    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3`|0.1 (per 60 seconde)|60 seconde |**google**|`Video intelligence v1`|0.1 (per 60 seconde)|1 seconde   </details>  
     * @summary Video Explicit Content Detection Launch Job
     * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
     * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
     * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
     * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
     * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public videoExplicitContentDetectionAsyncCreate(providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options?: AxiosRequestConfig) {
        return VideoApiFp(this.configuration).videoExplicitContentDetectionAsyncCreate(providers, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
     * @summary Video Explicit Content Detection List Jobs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public videoExplicitContentDetectionAsyncRetrieve(options?: AxiosRequestConfig) {
        return VideoApiFp(this.configuration).videoExplicitContentDetectionAsyncRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the status and results of an async job given its ID.
     * @summary Video Explicit Content Detection Get Job Results
     * @param {string} publicId 
     * @param {boolean} [responseAsDict] 
     * @param {boolean} [showOriginalResponse] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public videoExplicitContentDetectionAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: AxiosRequestConfig) {
        return VideoApiFp(this.configuration).videoExplicitContentDetectionAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3`|0.1 (per 60 seconde)|60 seconde |**google**|`Video intelligence v1`|0.1 (per 60 seconde)|1 seconde   </details>  
     * @summary Face Detection Launch Job
     * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
     * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
     * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
     * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
     * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public videoFaceDetectionAsyncCreate(providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options?: AxiosRequestConfig) {
        return VideoApiFp(this.configuration).videoFaceDetectionAsyncCreate(providers, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
     * @summary Face Detection List Jobs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public videoFaceDetectionAsyncRetrieve(options?: AxiosRequestConfig) {
        return VideoApiFp(this.configuration).videoFaceDetectionAsyncRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the status and results of an async job given its ID.
     * @summary Face Detection Get Job Results
     * @param {string} publicId 
     * @param {boolean} [responseAsDict] 
     * @param {boolean} [showOriginalResponse] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public videoFaceDetectionAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: AxiosRequestConfig) {
        return VideoApiFp(this.configuration).videoFaceDetectionAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3`|0.1 (per 60 seconde)|60 seconde |**google**|`Video intelligence v1`|0.1 (per 60 seconde)|1 seconde   </details>  
     * @summary Label Detection Launch Job
     * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
     * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
     * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
     * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
     * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public videoLabelDetectionAsyncCreate(providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options?: AxiosRequestConfig) {
        return VideoApiFp(this.configuration).videoLabelDetectionAsyncCreate(providers, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
     * @summary Label Detection List Jobs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public videoLabelDetectionAsyncRetrieve(options?: AxiosRequestConfig) {
        return VideoApiFp(this.configuration).videoLabelDetectionAsyncRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the status and results of an async job given its ID.
     * @summary Label Detection Get Job Results
     * @param {string} publicId 
     * @param {boolean} [responseAsDict] 
     * @param {boolean} [showOriginalResponse] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public videoLabelDetectionAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: AxiosRequestConfig) {
        return VideoApiFp(this.configuration).videoLabelDetectionAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**google**|`Video intelligence v1`|0.15 (per 60 seconde)|1 seconde   </details>  
     * @summary Video Logo Detection Launch Job
     * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
     * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
     * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
     * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
     * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public videoLogoDetectionAsyncCreate(providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options?: AxiosRequestConfig) {
        return VideoApiFp(this.configuration).videoLogoDetectionAsyncCreate(providers, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
     * @summary Video Logo Detection List Jobs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public videoLogoDetectionAsyncRetrieve(options?: AxiosRequestConfig) {
        return VideoApiFp(this.configuration).videoLogoDetectionAsyncRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the status and results of an async job given its ID.
     * @summary Video Logo Detection Get Job Results
     * @param {string} publicId 
     * @param {boolean} [responseAsDict] 
     * @param {boolean} [showOriginalResponse] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public videoLogoDetectionAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: AxiosRequestConfig) {
        return VideoApiFp(this.configuration).videoLogoDetectionAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**google**|`Video intelligence v1`|0.15 (per 60 seconde)|1 seconde   </details>  
     * @summary Video Object Tracking Launch Job
     * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
     * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
     * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
     * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
     * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public videoObjectTrackingAsyncCreate(providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options?: AxiosRequestConfig) {
        return VideoApiFp(this.configuration).videoObjectTrackingAsyncCreate(providers, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
     * @summary Video Object Tracking List Jobs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public videoObjectTrackingAsyncRetrieve(options?: AxiosRequestConfig) {
        return VideoApiFp(this.configuration).videoObjectTrackingAsyncRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the status and results of an async job given its ID.
     * @summary Video Object Tracking Get Job Results
     * @param {string} publicId 
     * @param {boolean} [responseAsDict] 
     * @param {boolean} [showOriginalResponse] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public videoObjectTrackingAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: AxiosRequestConfig) {
        return VideoApiFp(this.configuration).videoObjectTrackingAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3`|0.1 (per 60 seconde)|60 seconde |**google**|`Video intelligence v1`|0.1 (per 60 seconde)|1 seconde   </details>  
     * @summary Person Tracking Launch Job
     * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
     * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
     * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
     * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
     * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public videoPersonTrackingAsyncCreate(providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options?: AxiosRequestConfig) {
        return VideoApiFp(this.configuration).videoPersonTrackingAsyncCreate(providers, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
     * @summary Person Tracking List Jobs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public videoPersonTrackingAsyncRetrieve(options?: AxiosRequestConfig) {
        return VideoApiFp(this.configuration).videoPersonTrackingAsyncRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the status and results of an async job given its ID.
     * @summary Person Tracking Get Job Results
     * @param {string} publicId 
     * @param {boolean} [responseAsDict] 
     * @param {boolean} [showOriginalResponse] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public videoPersonTrackingAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: AxiosRequestConfig) {
        return VideoApiFp(this.configuration).videoPersonTrackingAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <details><summary><strong style=\'color: #0072a3; cursor: pointer\'>Available Providers</strong></summary>    |Name|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3`|0.1 (per 60 seconde)|60 seconde |**google**|`Video intelligence v1`|0.15 (per 60 seconde)|1 seconde   </details>  
     * @summary Text Detection Launch Job
     * @param {string} providers It can be one (ex: **\\\&#39;amazon\\\&#39;** or **\\\&#39;google\\\&#39;**) or multiple provider(s) (ex: **\\\&#39;amazon,microsoft,google\\\&#39;**)             that the data will be redirected to in order to get the processed results.
     * @param {string} [fallbackProviders] Providers in this list will be used as fallback if the call to provider in &#x60;providers&#x60; parameter fails.     To use this feature, you must input **only one** provider in the &#x60;providers&#x60; parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn\\\&#39;t fail.   *Doesn\\\&#39;t work with async subfeatures.*     
     * @param {boolean} [showOriginalResponse] Optional : Shows the original response of the provider.&lt;br&gt;         When set to **true**, a new attribute *original_response* will appear in the response object.
     * @param {string} [webhookReceiver] Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
     * @param {File} [file] File to analyse in binary format to be used with *content-type*: **multipart/form-data** &lt;br&gt; **Does not work with application/json !**
     * @param {string} [fileUrl] File **URL** to analyse to be used with with *content-type*: **application/json**.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public videoTextDetectionAsyncCreate(providers: string, fallbackProviders?: string, showOriginalResponse?: boolean, webhookReceiver?: string, file?: File, fileUrl?: string, options?: AxiosRequestConfig) {
        return VideoApiFp(this.configuration).videoTextDetectionAsyncCreate(providers, fallbackProviders, showOriginalResponse, webhookReceiver, file, fileUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all jobs launched for this feature. You\'ll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn\'t get updated until a get request** is sent.
     * @summary Text Detection List Jobs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public videoTextDetectionAsyncRetrieve(options?: AxiosRequestConfig) {
        return VideoApiFp(this.configuration).videoTextDetectionAsyncRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the status and results of an async job given its ID.
     * @summary Text Detection Get Job Results
     * @param {string} publicId 
     * @param {boolean} [responseAsDict] 
     * @param {boolean} [showOriginalResponse] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public videoTextDetectionAsyncRetrieve2(publicId: string, responseAsDict?: boolean, showOriginalResponse?: boolean, options?: AxiosRequestConfig) {
        return VideoApiFp(this.configuration).videoTextDetectionAsyncRetrieve2(publicId, responseAsDict, showOriginalResponse, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WorkflowsApi - axios parameter creator
 * @export
 */
export const WorkflowsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  Workflow let you create a pipeline of subfeature by inputing an entry data, letting it pass through all the subfeatures and retreiving the result   **Note**: You can try Workflow on our [developer portal](https://app.edenai.run/bricks/workflows) and a `description` snippet will automatically get generated as you build your workflow  **Example:**  Schema: ocr --> automatic_translation --> summarize In this workflow we pass a file as input, ocr parse the text, pass it to translate, and summarize will return a summary of the translated text  **Inputs:**  Depending on the first subfeature you have three choice for the inital input data: `file`, `text` or `texts`.  To create a workflow you have to pass an object to the `description` parameter, the object should look like this:   ``` [   {     \"feature\": \"ocr\",     \"subfeature\": \"ocr\",     \"params\": {       \"language\": \"auto-detect\",       \"providers\": \"google\"     }   },   {     \"feature\": \"translation\",     \"subfeature\": \"automatic_translation\",     \"params\": {       \"source_language\": \"auto-detect\",       \"target_language\": \"fr\",       \"providers\": \"google\"     }   },   {     \"feature\": \"text\",     \"subfeature\": \"summarize\",     \"params\": {       \"providers\": \"openai\"     }   } ] ```  - `description` should be a list of *nodes* each node representing a subfeature.Inside each node, enter the desired feature and subfeature and its params. `params` are the parameters you should normally send to the subfeature as if you were doing a direct call but with a few constraints:     + `providers` should take only one provider name, if you input multiple providers, the response of all the other providers will be ignored     + `file`, `text`, `texts` shouldn\'t be present in `params` as these are initial inputs  **Important!**: description should be sent as a string since the content-type is a form-data  - `return_only_last` allows you to chose wether you want a list of all the response returned by each providers or just getting the last response. If set to `true` the response will be the last subfeature result, if set to `false` the reponse will be a list of all subfeature results.     
         * @summary Launch a Workflow
         * @param {string} description 
         * @param {string} [text] The input text for the first feature of the pipeline
         * @param {string} [texts] List of texts for the first feature of the pipeline
         * @param {File} [file] The input file for the first feature of the pipeline
         * @param {boolean} [returnOnlyLast] This parameter allows user to choose to output only the final result or all the intermediate results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pipelineCreate: async (description: string, text?: string, texts?: string, file?: File, returnOnlyLast?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'description' is not null or undefined
            assertParamExists('pipelineCreate', 'description', description)
            const localVarPath = `/pipeline/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication FeatureApiAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (text !== undefined) { 
                localVarFormParams.append('text', text as any);
            }
    
            if (texts !== undefined) { 
                localVarFormParams.append('texts', texts as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (returnOnlyLast !== undefined) { 
                localVarFormParams.append('return_only_last', returnOnlyLast as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkflowsApi - functional programming interface
 * @export
 */
export const WorkflowsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkflowsApiAxiosParamCreator(configuration)
    return {
        /**
         *  Workflow let you create a pipeline of subfeature by inputing an entry data, letting it pass through all the subfeatures and retreiving the result   **Note**: You can try Workflow on our [developer portal](https://app.edenai.run/bricks/workflows) and a `description` snippet will automatically get generated as you build your workflow  **Example:**  Schema: ocr --> automatic_translation --> summarize In this workflow we pass a file as input, ocr parse the text, pass it to translate, and summarize will return a summary of the translated text  **Inputs:**  Depending on the first subfeature you have three choice for the inital input data: `file`, `text` or `texts`.  To create a workflow you have to pass an object to the `description` parameter, the object should look like this:   ``` [   {     \"feature\": \"ocr\",     \"subfeature\": \"ocr\",     \"params\": {       \"language\": \"auto-detect\",       \"providers\": \"google\"     }   },   {     \"feature\": \"translation\",     \"subfeature\": \"automatic_translation\",     \"params\": {       \"source_language\": \"auto-detect\",       \"target_language\": \"fr\",       \"providers\": \"google\"     }   },   {     \"feature\": \"text\",     \"subfeature\": \"summarize\",     \"params\": {       \"providers\": \"openai\"     }   } ] ```  - `description` should be a list of *nodes* each node representing a subfeature.Inside each node, enter the desired feature and subfeature and its params. `params` are the parameters you should normally send to the subfeature as if you were doing a direct call but with a few constraints:     + `providers` should take only one provider name, if you input multiple providers, the response of all the other providers will be ignored     + `file`, `text`, `texts` shouldn\'t be present in `params` as these are initial inputs  **Important!**: description should be sent as a string since the content-type is a form-data  - `return_only_last` allows you to chose wether you want a list of all the response returned by each providers or just getting the last response. If set to `true` the response will be the last subfeature result, if set to `false` the reponse will be a list of all subfeature results.     
         * @summary Launch a Workflow
         * @param {string} description 
         * @param {string} [text] The input text for the first feature of the pipeline
         * @param {string} [texts] List of texts for the first feature of the pipeline
         * @param {File} [file] The input file for the first feature of the pipeline
         * @param {boolean} [returnOnlyLast] This parameter allows user to choose to output only the final result or all the intermediate results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pipelineCreate(description: string, text?: string, texts?: string, file?: File, returnOnlyLast?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorklowResponseType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pipelineCreate(description, text, texts, file, returnOnlyLast, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WorkflowsApi - factory interface
 * @export
 */
export const WorkflowsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkflowsApiFp(configuration)
    return {
        /**
         *  Workflow let you create a pipeline of subfeature by inputing an entry data, letting it pass through all the subfeatures and retreiving the result   **Note**: You can try Workflow on our [developer portal](https://app.edenai.run/bricks/workflows) and a `description` snippet will automatically get generated as you build your workflow  **Example:**  Schema: ocr --> automatic_translation --> summarize In this workflow we pass a file as input, ocr parse the text, pass it to translate, and summarize will return a summary of the translated text  **Inputs:**  Depending on the first subfeature you have three choice for the inital input data: `file`, `text` or `texts`.  To create a workflow you have to pass an object to the `description` parameter, the object should look like this:   ``` [   {     \"feature\": \"ocr\",     \"subfeature\": \"ocr\",     \"params\": {       \"language\": \"auto-detect\",       \"providers\": \"google\"     }   },   {     \"feature\": \"translation\",     \"subfeature\": \"automatic_translation\",     \"params\": {       \"source_language\": \"auto-detect\",       \"target_language\": \"fr\",       \"providers\": \"google\"     }   },   {     \"feature\": \"text\",     \"subfeature\": \"summarize\",     \"params\": {       \"providers\": \"openai\"     }   } ] ```  - `description` should be a list of *nodes* each node representing a subfeature.Inside each node, enter the desired feature and subfeature and its params. `params` are the parameters you should normally send to the subfeature as if you were doing a direct call but with a few constraints:     + `providers` should take only one provider name, if you input multiple providers, the response of all the other providers will be ignored     + `file`, `text`, `texts` shouldn\'t be present in `params` as these are initial inputs  **Important!**: description should be sent as a string since the content-type is a form-data  - `return_only_last` allows you to chose wether you want a list of all the response returned by each providers or just getting the last response. If set to `true` the response will be the last subfeature result, if set to `false` the reponse will be a list of all subfeature results.     
         * @summary Launch a Workflow
         * @param {string} description 
         * @param {string} [text] The input text for the first feature of the pipeline
         * @param {string} [texts] List of texts for the first feature of the pipeline
         * @param {File} [file] The input file for the first feature of the pipeline
         * @param {boolean} [returnOnlyLast] This parameter allows user to choose to output only the final result or all the intermediate results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pipelineCreate(description: string, text?: string, texts?: string, file?: File, returnOnlyLast?: boolean, options?: any): AxiosPromise<WorklowResponseType> {
            return localVarFp.pipelineCreate(description, text, texts, file, returnOnlyLast, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkflowsApi - object-oriented interface
 * @export
 * @class WorkflowsApi
 * @extends {BaseAPI}
 */
export class WorkflowsApi extends BaseAPI {
    /**
     *  Workflow let you create a pipeline of subfeature by inputing an entry data, letting it pass through all the subfeatures and retreiving the result   **Note**: You can try Workflow on our [developer portal](https://app.edenai.run/bricks/workflows) and a `description` snippet will automatically get generated as you build your workflow  **Example:**  Schema: ocr --> automatic_translation --> summarize In this workflow we pass a file as input, ocr parse the text, pass it to translate, and summarize will return a summary of the translated text  **Inputs:**  Depending on the first subfeature you have three choice for the inital input data: `file`, `text` or `texts`.  To create a workflow you have to pass an object to the `description` parameter, the object should look like this:   ``` [   {     \"feature\": \"ocr\",     \"subfeature\": \"ocr\",     \"params\": {       \"language\": \"auto-detect\",       \"providers\": \"google\"     }   },   {     \"feature\": \"translation\",     \"subfeature\": \"automatic_translation\",     \"params\": {       \"source_language\": \"auto-detect\",       \"target_language\": \"fr\",       \"providers\": \"google\"     }   },   {     \"feature\": \"text\",     \"subfeature\": \"summarize\",     \"params\": {       \"providers\": \"openai\"     }   } ] ```  - `description` should be a list of *nodes* each node representing a subfeature.Inside each node, enter the desired feature and subfeature and its params. `params` are the parameters you should normally send to the subfeature as if you were doing a direct call but with a few constraints:     + `providers` should take only one provider name, if you input multiple providers, the response of all the other providers will be ignored     + `file`, `text`, `texts` shouldn\'t be present in `params` as these are initial inputs  **Important!**: description should be sent as a string since the content-type is a form-data  - `return_only_last` allows you to chose wether you want a list of all the response returned by each providers or just getting the last response. If set to `true` the response will be the last subfeature result, if set to `false` the reponse will be a list of all subfeature results.     
     * @summary Launch a Workflow
     * @param {string} description 
     * @param {string} [text] The input text for the first feature of the pipeline
     * @param {string} [texts] List of texts for the first feature of the pipeline
     * @param {File} [file] The input file for the first feature of the pipeline
     * @param {boolean} [returnOnlyLast] This parameter allows user to choose to output only the final result or all the intermediate results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    public pipelineCreate(description: string, text?: string, texts?: string, file?: File, returnOnlyLast?: boolean, options?: AxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).pipelineCreate(description, text, texts, file, returnOnlyLast, options).then((request) => request(this.axios, this.basePath));
    }
}


